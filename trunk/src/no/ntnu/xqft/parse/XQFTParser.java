<<<<<<< .mine
// $ANTLR 3.0.1 etc/XQFT.g 2007-12-07 22:28:36
=======
// $ANTLR 3.0.1 etc/XQFT.g 2007-12-07 22:17:57
>>>>>>> .r234

	package no.ntnu.xqft.parse;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class XQFTParser extends Parser {
    public static final String[] tokenNames = new String[] {
<<<<<<< .mine
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "ANY", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BY", "BOUNDARYSPACE", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "CONTENT", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIACRITICS", "DIFFERENT", "DISTANCE", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "ENCODING", "END", "ENTIRE", "EMPTY", "EMPTY_SEQUENCE", "EQ", "EVERY", "EXACTLY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FROM", "FTAND", "FTCONTAINS", "FTNOT", "FTOPTION", "FTOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSENSITIVE", "INSTANCE", "INTERSECT", "IS", "ITEM", "LANGUAGE", "LAX", "LE", "LEAST", "LET", "LEVELS", "LOWERCASE", "LT", "MOD", "MODULE", "MOST", "NAMESPACE", "NE", "NODE", "NOINHERIT", "NOPRESERVE", "NOT", "OCCURS", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARAGRAPH", "PARAGRAPHS", "PARENT", "PHRASE", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RELATIONSHIP", "RETURN", "SAME", "SATISFIES", "SCHEMA", "SCHEMAATTRIBUTE", "SCHEMAELEMENT", "SCORE", "SELF", "SENSITIVE", "SENTENCES", "SENTENCE", "SOME", "STABLE", "START", "STEMMING", "STOP", "STRICT", "STRIP", "TEXT", "THESAURUS", "THEN", "TIMES", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "UPPERCASE", "VALIDATE", "VARIABLE", "VERSION", "WEIGHT", "WHERE", "WILDCARDS", "WINDOW", "WITH", "WITHOUT", "WORD", "WORDS", "XQUERY", "AST_FORCLAUSE", "AST_LETCLAUSE", "AST_ORDERBYCLAUSE", "AST_WHERECLAUSE", "AST_RETURNCLAUSE", "AST_QUANTIFIEDEXPR", "AST_TYPESWITCHEXPR", "AST_CASECLAUSE", "AST_IFEXPR", "AST_FTSELECTION", "AST_FTPOSFILTER", "StringLiteral", "SEMICOLONSi", "NCName", "EQSi", "COMMASi", "DOLLARSi", "ASSIGNSi", "COLONSi", "LPARSi", "RPARSi", "LBRACESi", "RBRACSi", "QUESTIONSi", "STARSi", "PLUSSi", "MINUSSi", "PIPESi", "NEQSi", "LTSi", "LTOREQSi", "GTSi", "GTOREQSi", "NODEBEFORESi", "NODEAFTERSi", "IntegerLiteral", "DecimalLiteral", "DoubleLiteral", "LPRAGSi", "PragmaContents", "RPRAGSi", "DBLSLASHSi", "SLASHSi", "DBLCOLONSi", "DOTDOTSi", "ATSi", "LBRACKSi", "RBRACKSi", "DOTSi", "RSELFTERMSi", "LENDTAGSi", "QUOTSi", "QuotAttributeContent", "APOSSi", "AposAttributeContent", "ElementContent", "LCDATASi", "CDataContents", "RCDATASi", "LCOMMENTSi", "DirCommentContent", "RCOMMENTSi", "LPISi", "PiTarget", "DirPiContents", "RPISi", "CDataSectionLEX", "DirPIConstructor", "DirCommentConstLEX", "PragmaLEX", "Comment", "NumberLEX", "LexSigns", "S", "LexLiterals", "TOKENSWITCH", "PredefinedEntityRef", "CharRef", "NotChar", "AMPERSi", "QuotAttrContentChar", "AposAttrContentChar", "ElementContentChar", "CREFDECSi", "CREFHEXSi", "Name", "Letter", "UNDERSCORESi", "NameChar", "Digit", "CombiningChar", "Extender", "SHARPSi", "LXQCOMMENTSi", "RXQCOMMENTSi", "Digits", "NCNameStartChar", "NCNameChar", "EXCLSi", "BACKSLASHSi", "ExtraChar", "BaseChar", "Ideographic", "CleanChar", "Char"
=======
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "ANY", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BY", "BOUNDARYSPACE", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "CONTENT", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIACRITICS", "DIFFERENT", "DISTANCE", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "ENCODING", "END", "ENTIRE", "EMPTY", "EMPTY_SEQUENCE", "EQ", "EVERY", "EXACTLY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FROM", "FTAND", "FTCONTAINS", "FTNOT", "FTOPTION", "FTOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSENSITIVE", "INSTANCE", "INTERSECT", "IS", "ITEM", "LANGUAGE", "LAX", "LE", "LEAST", "LET", "LEVELS", "LOWERCASE", "LT", "MOD", "MODULE", "MOST", "NAMESPACE", "NE", "NODE", "NOINHERIT", "NOPRESERVE", "NOT", "OCCURS", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARAGRAPH", "PARAGRAPHS", "PARENT", "PHRASE", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RELATIONSHIP", "RETURN", "SAME", "SATISFIES", "SCHEMA", "SCHEMAATTRIBUTE", "SCHEMAELEMENT", "SCORE", "SELF", "SENSITIVE", "SENTENCES", "SENTENCE", "SOME", "STABLE", "START", "STEMMING", "STOP", "STRICT", "STRIP", "TEXT", "THESAURUS", "THEN", "TIMES", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "UPPERCASE", "VALIDATE", "VARIABLE", "VERSION", "WEIGHT", "WHERE", "WILDCARDS", "WINDOW", "WITH", "WITHOUT", "WORD", "WORDS", "XQUERY", "AST_FLWOR", "AST_FORCLAUSE", "AST_LETCLAUSE", "AST_ORDERBYCLAUSE", "AST_WHERECLAUSE", "AST_RETURNCLAUSE", "AST_QUANTIFIEDEXPR", "AST_TYPESWITCHEXPR", "AST_CASECLAUSE", "AST_IFEXPR", "AST_FTSELECTION", "AST_FTPOSFILTER", "AST_FUNCTIONCALL", "AST_DIRELEMCONSTRUCTOR", "AST_DIRELEMCONTENT", "StringLiteral", "SEMICOLONSi", "NCName", "EQSi", "COMMASi", "DOLLARSi", "ASSIGNSi", "COLONSi", "LPARSi", "RPARSi", "LBRACESi", "RBRACSi", "QUESTIONSi", "STARSi", "PLUSSi", "MINUSSi", "PIPESi", "NEQSi", "LTSi", "LTOREQSi", "GTSi", "GTOREQSi", "NODEBEFORESi", "NODEAFTERSi", "IntegerLiteral", "DecimalLiteral", "DoubleLiteral", "LPRAGSi", "PragmaContents", "RPRAGSi", "DBLSLASHSi", "SLASHSi", "DBLCOLONSi", "DOTDOTSi", "ATSi", "LBRACKSi", "RBRACKSi", "DOTSi", "RSELFTERMSi", "LENDTAGSi", "QUOTSi", "QuotAttributeContent", "APOSSi", "AposAttributeContent", "ElementContent", "LCDATASi", "CDataContents", "RCDATASi", "LCOMMENTSi", "DirCommentContent", "RCOMMENTSi", "LPISi", "PiTarget", "DirPiContents", "RPISi", "CDataSectionLEX", "DirPIConstructor", "DirCommentConstLEX", "PragmaLEX", "Comment", "NumberLEX", "LexSigns", "S", "LexLiterals", "TOKENSWITCH", "PredefinedEntityRef", "CharRef", "NotChar", "AMPERSi", "QuotAttrContentChar", "AposAttrContentChar", "ElementContentChar", "CREFDECSi", "CREFHEXSi", "Name", "Letter", "UNDERSCORESi", "NameChar", "Digit", "CombiningChar", "Extender", "SHARPSi", "LXQCOMMENTSi", "RXQCOMMENTSi", "Digits", "NCNameStartChar", "NCNameChar", "EXCLSi", "BACKSLASHSi", "ExtraChar", "BaseChar", "Ideographic", "CleanChar", "Char"
>>>>>>> .r234
    };
<<<<<<< .mine
    public static final int NotChar=222;
    public static final int LENDTAGSi=194;
    public static final int QUOTSi=195;
    public static final int END=39;
    public static final int NOINHERIT=85;
    public static final int INSTANCE=67;
    public static final int LBRACESi=165;
    public static final int CONTENT=23;
    public static final int LAX=72;
    public static final int STOP=119;
=======
    public static final int FUNCTION=57;
    public static final int AST_FORCLAUSE=145;
    public static final int MOD=79;
    public static final int LPISi=210;
    public static final int CREFHEXSi=232;
    public static final int NOT=87;
    public static final int EXCEPT=46;
    public static final int EOF=-1;
    public static final int AST_IFEXPR=153;
    public static final int PragmaContents=187;
    public static final int BaseChar=249;
    public static final int Ideographic=250;
    public static final int DISTANCE=32;
>>>>>>> .r234
    public static final int IMPORT=63;
<<<<<<< .mine
    public static final int PIPESi=171;
    public static final int APOSSi=197;
    public static final int AposAttrContentChar=225;
=======
    public static final int ASSIGNSi=165;
    public static final int CREFDECSi=231;
    public static final int SENTENCE=114;
    public static final int PRECEDING=99;
    public static final int WORDS=142;
    public static final int NumberLEX=219;
    public static final int RETURN=104;
    public static final int ELEMENT=36;
    public static final int RPARSi=168;
    public static final int EQ=43;
    public static final int AST_CASECLAUSE=152;
    public static final int DOLLARSi=164;
    public static final int DIACRITICS=30;
>>>>>>> .r234
    public static final int DBLCOLONSi=191;
<<<<<<< .mine
    public static final int Letter=230;
    public static final int CASTABLE=18;
    public static final int DIACRITICS=30;
    public static final int ORDER=92;
    public static final int RCOMMENTSi=205;
=======
    public static final int CHILD=19;
    public static final int GE=58;
    public static final int STRICT=120;
    public static final int PRESERVE=101;
    public static final int UNDERSCORESi=235;
    public static final int ELSE=37;
    public static final int RCDATASi=206;
>>>>>>> .r234
    public static final int TYPESWITCH=128;
<<<<<<< .mine
    public static final int MODULE=80;
=======
    public static final int STOP=119;
    public static final int CONTENT=23;
    public static final int S=221;
    public static final int FTOR=56;
    public static final int EMPTY=41;
    public static final int INTERSECT=68;
    public static final int MINUSSi=174;
    public static final int FTAND=52;
    public static final int LANGUAGE=71;
    public static final int LOWERCASE=77;
    public static final int LPRAGSi=186;
    public static final int INSENSITIVE=66;
    public static final int APOSSi=201;
    public static final int AST_TYPESWITCHEXPR=151;
    public static final int RSELFTERMSi=197;
    public static final int LBRACKSi=194;
    public static final int GT=60;
    public static final int END=39;
    public static final int DoubleLiteral=185;
    public static final int QUOTSi=199;
    public static final int LexLiterals=222;
    public static final int DirCommentContent=208;
    public static final int CharRef=225;
    public static final int OPTION=90;
    public static final int Extender=239;
    public static final int OCCURS=88;
    public static final int THESAURUS=123;
    public static final int SATISFIES=106;
>>>>>>> .r234
    public static final int VERSION=134;
<<<<<<< .mine
    public static final int Ideographic=246;
=======
    public static final int RXQCOMMENTSi=242;
    public static final int IDIV=61;
    public static final int ASCENDING=10;
    public static final int ExtraChar=248;
    public static final int AT=11;
    public static final int AS=9;
    public static final int EMPTY_SEQUENCE=42;
    public static final int PARENT=97;
    public static final int CONSTRUCTION=22;
    public static final int ATSi=193;
    public static final int THEN=124;
    public static final int DBLSLASHSi=189;
    public static final int DOCUMENT=34;
>>>>>>> .r234
<<<<<<< .mine
    public static final int EXACTLY=45;
=======
    public static final int COLLATION=20;
    public static final int LCOMMENTSi=207;
    public static final int ANCESTOR=6;
    public static final int AMPERSi=227;
    public static final int CleanChar=251;
    public static final int ElementContent=203;
    public static final int CASTABLE=18;
    public static final int MOST=81;
    public static final int EQSi=162;
    public static final int BY=14;
    public static final int NODEBEFORESi=181;
    public static final int DOTSi=196;
    public static final int NCNameChar=245;
    public static final int ITEM=70;
    public static final int TO=126;
    public static final int INHERIT=65;
    public static final int ANCESTOR_OR_SELF=7;
    public static final int DOTDOTSi=192;
    public static final int STEMMING=118;
    public static final int AST_WHERECLAUSE=148;
    public static final int LTOREQSi=178;
    public static final int NotChar=226;
    public static final int DirPIConstructor=215;
    public static final int TEXT=122;
    public static final int MODULE=80;
>>>>>>> .r234
    public static final int FTNOT=54;
<<<<<<< .mine
=======
    public static final int ORDERED=93;
    public static final int SAME=105;
    public static final int UNION=129;
    public static final int FOLLOWING_SIBLING=49;
    public static final int StringLiteral=159;
    public static final int SCHEMA=107;
    public static final int COLONSi=166;
    public static final int PiTarget=211;
    public static final int ENTIRE=40;
    public static final int INSTANCE=67;
    public static final int VALIDATE=132;
    public static final int WILDCARDS=137;
    public static final int NOINHERIT=85;
>>>>>>> .r234
    public static final int AST_FUNCTIONCALL=156;
    public static final int DECLARE=25;
<<<<<<< .mine
    public static final int GTSi=175;
    public static final int TOKENSWITCH=219;
    public static final int ElementContentChar=226;
    public static final int OCCURS=88;
    public static final int UNION=129;
    public static final int STRIP=121;
    public static final int NameChar=232;
    public static final int PLUSSi=169;
    public static final int AST_WHERECLAUSE=147;
    public static final int QuotAttrContentChar=224;
    public static final int SAME=105;
    public static final int FTCONTAINS=53;
    public static final int AST_IFEXPR=152;
    public static final int QUESTIONSi=167;
=======
    public static final int START=117;
    public static final int IntegerLiteral=183;
    public static final int DIV=33;
    public static final int CombiningChar=238;
>>>>>>> .r234
    public static final int DESCENDING=29;
    public static final int FTOPTION=55;
    public static final int AST_ORDERBYCLAUSE=146;
    public static final int DOCUMENT_NODE=35;
    public static final int ANCESTOR_OR_SELF=7;
    public static final int LCDATASi=200;
    public static final int ANY=5;
    public static final int RELATIONSHIP=103;
    public static final int GE=58;
    public static final int CREFHEXSi=228;
    public static final int GTOREQSi=176;
    public static final int ELSE=37;
    public static final int WORD=141;
    public static final int SCHEMAATTRIBUTE=108;
    public static final int SENSITIVE=112;
    public static final int SELF=111;
<<<<<<< .mine
    public static final int DISTANCE=32;
    public static final int ExtraChar=244;
    public static final int LPISi=206;
    public static final int CREFDECSi=227;
    public static final int NODEBEFORESi=177;
    public static final int TEXT=122;
    public static final int CombiningChar=234;
    public static final int PARENT=97;
    public static final int NCName=157;
    public static final int FTOR=56;
    public static final int SCORE=110;
    public static final int PragmaLEX=213;
    public static final int Digit=233;
=======
    public static final int RPRAGSi=188;
    public static final int NEQSi=176;
    public static final int CAST=17;
    public static final int SENTENCES=113;
>>>>>>> .r234
    public static final int EXTERNAL=47;
<<<<<<< .mine
    public static final int EMPTY_SEQUENCE=42;
    public static final int UNDERSCORESi=231;
    public static final int RCDATASi=202;
    public static final int DOLLARSi=160;
    public static final int CAST=17;
    public static final int MOD=79;
    public static final int EXCEPT=46;
    public static final int OR=91;
    public static final int NOPRESERVE=86;
    public static final int S=217;
    public static final int RPARSi=164;
    public static final int BY=14;
    public static final int SCHEMAELEMENT=109;
    public static final int COLONSi=162;
    public static final int SLASHSi=186;
    public static final int WEIGHT=135;
    public static final int AST_RETURNCLAUSE=148;
    public static final int PRECEDING_SIBLING=100;
    public static final int UPPERCASE=131;
    public static final int AST_LETCLAUSE=145;
=======
    public static final int LT=78;
    public static final int RBRACKSi=195;
    public static final int QUESTIONSi=171;
    public static final int BACKSLASHSi=247;
    public static final int AST_LETCLAUSE=146;
>>>>>>> .r234
<<<<<<< .mine
    public static final int SEMICOLONSi=156;
=======
    public static final int CASE=16;
    public static final int ENCODING=38;
    public static final int RCOMMENTSi=209;
    public static final int DIFFERENT=31;
    public static final int PLUSSi=173;
    public static final int PragmaLEX=217;
    public static final int DOCUMENT_NODE=35;
    public static final int SCHEMAATTRIBUTE=108;
    public static final int LXQCOMMENTSi=241;
    public static final int SEMICOLONSi=160;
>>>>>>> .r234
<<<<<<< .mine
    public static final int FROM=51;
    public static final int STEMMING=118;
    public static final int TIMES=125;
    public static final int EMPTY=41;
    public static final int ASCENDING=10;
    public static final int CleanChar=247;
    public static final int IntegerLiteral=179;
    public static final int SENTENCES=113;
    public static final int NE=83;
=======
    public static final int WORD=141;
    public static final int SHARPSi=240;
    public static final int UPPERCASE=131;
    public static final int Comment=218;
    public static final int Char=252;
    public static final int Digits=243;
    public static final int QuotAttrContentChar=228;
    public static final int AST_FLWOR=144;
    public static final int FTOPTION=55;
>>>>>>> .r234
    public static final int AposAttributeContent=202;
    public static final int COMMENT=21;
<<<<<<< .mine
    public static final int MINUSSi=170;
    public static final int NCNameChar=241;
    public static final int ENTIRE=40;
    public static final int WITH=139;
    public static final int IN=64;
    public static final int SOME=115;
    public static final int MOST=81;
    public static final int RETURN=104;
    public static final int AST_FTSELECTION=153;
    public static final int LET=75;
    public static final int IF=62;
    public static final int Extender=235;
=======
    public static final int NE=83;
    public static final int CDataSectionLEX=214;
    public static final int BOUNDARYSPACE=15;
>>>>>>> .r234
    public static final int NODE=84;
<<<<<<< .mine
    public static final int FOR=50;
    public static final int DEFAULT=26;
    public static final int PRESERVE=101;
    public static final int AST_FTPOSFILTER=154;
    public static final int DirCommentContent=204;
    public static final int LEVELS=76;
    public static final int LPRAGSi=182;
    public static final int COMMASi=159;
    public static final int ATTRIBUTE=12;
    public static final int CHILD=19;
    public static final int Digits=239;
    public static final int NOT=87;
    public static final int OPTION=90;
    public static final int ELEMENT=36;
    public static final int Comment=214;
    public static final int INSENSITIVE=66;
    public static final int AS=9;
    public static final int DOCUMENT=34;
    public static final int ENCODING=38;
    public static final int BOUNDARYSPACE=15;
    public static final int TREAT=127;
    public static final int NAMESPACE=82;
    public static final int LXQCOMMENTSi=237;
    public static final int LEAST=74;
    public static final int THEN=124;
    public static final int WORDS=142;
    public static final int PiTarget=207;
    public static final int CDataContents=201;
    public static final int PARAGRAPHS=96;
    public static final int NCNameStartChar=240;
    public static final int QuotAttributeContent=196;
    public static final int BASE_URI=13;
    public static final int AND=8;
    public static final int TO=126;
    public static final int FUNCTION=57;
    public static final int AST_QUANTIFIEDEXPR=149;
    public static final int LexSigns=216;
    public static final int LANGUAGE=71;
    public static final int NEQSi=172;
    public static final int LOWERCASE=77;
    public static final int LE=73;
    public static final int BACKSLASHSi=243;
    public static final int SCHEMA=107;
    public static final int CONSTRUCTION=22;
    public static final int WILDCARDS=137;
    public static final int STARSi=168;
    public static final int RPRAGSi=184;
    public static final int DOTDOTSi=188;
    public static final int DIFFERENT=31;
    public static final int LTOREQSi=174;
    public static final int AST_TYPESWITCHEXPR=150;
    public static final int INTERSECT=68;
    public static final int AT=11;
    public static final int AST_FORCLAUSE=144;
=======
    public static final int AST_FTPOSFILTER=155;
    public static final int CDataContents=205;
    public static final int AST_QUANTIFIEDEXPR=150;
    public static final int AposAttrContentChar=229;
>>>>>>> .r234
    public static final int GREATEST=59;
    public static final int DOTSi=192;
    public static final int BaseChar=245;
    public static final int Char=248;
    public static final int EQ=43;
    public static final int LT=78;
    public static final int AST_DIRELEMCONSTRUCTOR=157;
    public static final int OF=89;
<<<<<<< .mine
    public static final int WINDOW=138;
    public static final int Name=229;
=======
    public static final int LTSi=177;
    public static final int NODEAFTERSi=182;
    public static final int RELATIONSHIP=103;
    public static final int NAMESPACE=82;
    public static final int LCDATASi=204;
    public static final int LBRACESi=169;
    public static final int VARIABLE=133;
    public static final int DESCENDANT_OR_SELF=28;
    public static final int BASE_URI=13;
    public static final int NOPRESERVE=86;
    public static final int DirPiContents=212;
    public static final int OR=91;
    public static final int LPARSi=167;
    public static final int STARSi=172;
    public static final int QuotAttributeContent=200;
    public static final int RPISi=213;
    public static final int FROM=51;
    public static final int PRECEDING_SIBLING=100;
    public static final int Letter=234;
    public static final int NCName=161;
    public static final int WHERE=136;
    public static final int LAX=72;
    public static final int AST_ORDERBYCLAUSE=147;
    public static final int ORDER=92;
    public static final int ATTRIBUTE=12;
    public static final int FOR=50;
    public static final int AST_FTSELECTION=154;
    public static final int EXCLSi=246;
>>>>>>> .r234
    public static final int FOLLOWING=48;
    public static final int CASE=16;
    public static final int RXQCOMMENTSi=238;
    public static final int DESCENDANT_OR_SELF=28;
    public static final int CDataSectionLEX=210;
    public static final int THESAURUS=123;
    public static final int RSELFTERMSi=193;
    public static final int FTAND=52;
    public static final int DecimalLiteral=180;
    public static final int PragmaContents=183;
    public static final int DIV=33;
    public static final int PARAGRAPH=95;
    public static final int EQSi=158;
    public static final int ALL=4;
<<<<<<< .mine
    public static final int EXCLSi=242;
    public static final int DirPIConstructor=211;
    public static final int WHERE=136;
    public static final int WITHOUT=140;
    public static final int EVERY=44;
=======
    public static final int STRIP=121;
    public static final int STABLE=116;
    public static final int PIPESi=175;
    public static final int WITH=139;
    public static final int NCNameStartChar=244;
    public static final int LENDTAGSi=198;
    public static final int RBRACSi=170;
    public static final int GTSi=179;
>>>>>>> .r234
    public static final int XQUERY=143;
    public static final int IDIV=61;
    public static final int SATISFIES=106;
    public static final int ATSi=189;
    public static final int DESCENDANT=27;
<<<<<<< .mine
    public static final int STRICT=120;
    public static final int RBRACKSi=191;
    public static final int FOLLOWING_SIBLING=49;
    public static final int STABLE=116;
    public static final int START=117;
    public static final int DoubleLiteral=181;
    public static final int AMPERSi=223;
    public static final int VALIDATE=132;
    public static final int PRECEDING=99;
    public static final int COPY_NAMESPACES=24;
=======
    public static final int NameChar=236;
    public static final int COMMASi=163;
    public static final int SLASHSi=190;
    public static final int Digit=237;
    public static final int DecimalLiteral=184;
    public static final int GTOREQSi=180;
    public static final int UNORDERED=130;
    public static final int AST_DIRELEMCONTENT=158;
    public static final int PHRASE=98;
    public static final int TOKENSWITCH=223;
    public static final int ElementContentChar=230;
    public static final int ANY=5;
    public static final int SCORE=110;
    public static final int AST_RETURNCLAUSE=149;
    public static final int LexSigns=220;
>>>>>>> .r234
    public static final int ORDERING=94;
<<<<<<< .mine
    public static final int ASSIGNSi=161;
    public static final int UNORDERED=130;
    public static final int NumberLEX=215;
    public static final int PredefinedEntityRef=220;
    public static final int LTSi=173;
    public static final int SENTENCE=114;
    public static final int INHERIT=65;
    public static final int AST_CASECLAUSE=151;
    public static final int LexLiterals=218;
    public static final int SHARPSi=236;
    public static final int IS=69;
    public static final int GT=60;
    public static final int PHRASE=98;
    public static final int StringLiteral=155;
    public static final int RPISi=209;
    public static final int DirPiContents=208;
    public static final int ITEM=70;
    public static final int ORDERED=93;
=======
    public static final int PredefinedEntityRef=224;
    public static final int Name=233;
    public static final int LEAST=74;
    public static final int WINDOW=138;
    public static final int LEVELS=76;
    public static final int PARAGRAPHS=96;
    public static final int TIMES=125;
>>>>>>> .r234
    public static final int DirCommentConstLEX=216;
    public static final int PROCESSING_INSTRUCTION=102;
    public static final int NODEAFTERSi=178;
    public static final int CharRef=221;
    public static final int COLLATION=20;
    public static final int LPARSi=163;
    public static final int ANCESTOR=6;
    public static final int EOF=-1;
    public static final int VARIABLE=133;
    public static final int RBRACSi=166;
    public static final int ElementContent=199;
    public static final int LCOMMENTSi=203;
    public static final int LBRACKSi=190;

        public XQFTParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[178+1];
         }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "etc/XQFT.g"; }


    	
    	/* Root scope */
    	//Scope currentScope = new Scope();	   // @init-ting her ogsaa
    	XQFTLexer lexer;
    /*
    	public void setTokenStream(TokenStream input) {
    				String inputz =  "<html> \n" +                                                   //1
                            "{ \n"+                                                         //2
                            "for $act in doc(\"hamlet.xml\")//ACT\n" +                      //3
                            "let $speakers := distinct-values($act//SPEAKER)\n"+            //4
                            "return\n"+                                                     //5
                            "<span>\n"+                                                     //6
                            "<h1>{ $act/TITLE/text() }</h1>\n"+                             //7
                            "<ul>\n"+                                                       //8
                            "{\n"+                                                          //9
                            "for $speaker in $speakers\n"+                                  //10
                            "return <li>{ $speaker }</li>\n"+                               //11
                            "}\n"+                                                          //12
                            "</ul>\n"+                                                      //13
                            "</span>\n"+                                                    //14
                            "}\n"+                                                          //15
                            "</html>\n";                                                    //16
                            	CharStream cs = new ANTLRStringStream(inputz);
    		lexer = (XQFTLexer)input.getTokenSource();
    		lexer.setCharStream(cs);
    		UnbufferedCommonTokenStream tokenz = new UnbufferedCommonTokenStream();
    		tokenz.setTokenSource(lexer);
    		super.setTokenStream(tokenz);
     	
    	}*/
    	public void setLexer(XQFTLexer lex)
    	{
    		this.lexer=lex;
    	}

        protected void mismatch(IntStream input, int ttype, BitSet follow)
            throws RecognitionException
        {
            throw new MismatchedTokenException(ttype, input);
        }

        public void recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
            throws RecognitionException
        {
            throw e;
        }



    public static class module_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start module
    // etc/XQFT.g:282:1: module : ( versionDecl )? ( libraryModule | mainModule ) ;
    public final module_return module() throws RecognitionException {
        module_return retval = new module_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        versionDecl_return versionDecl1 = null;

        libraryModule_return libraryModule2 = null;

        mainModule_return mainModule3 = null;



        try {
            // etc/XQFT.g:282:32: ( ( versionDecl )? ( libraryModule | mainModule ) )
            // etc/XQFT.g:282:34: ( versionDecl )? ( libraryModule | mainModule )
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:282:34: ( versionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // etc/XQFT.g:282:34: versionDecl
                    {
                    pushFollow(FOLLOW_versionDecl_in_module582);
                    versionDecl1=versionDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, versionDecl1.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:282:47: ( libraryModule | mainModule )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                alt2=1;
            }
            else if ( ((LA2_0>=ANCESTOR && LA2_0<=ANCESTOR_OR_SELF)||LA2_0==ATTRIBUTE||LA2_0==CHILD||LA2_0==COMMENT||LA2_0==DECLARE||(LA2_0>=DESCENDANT && LA2_0<=DESCENDANT_OR_SELF)||(LA2_0>=DOCUMENT && LA2_0<=ELEMENT)||LA2_0==EVERY||(LA2_0>=FOLLOWING && LA2_0<=FOR)||(LA2_0>=IF && LA2_0<=IMPORT)||LA2_0==LET||LA2_0==NODE||LA2_0==ORDERED||LA2_0==PARENT||(LA2_0>=PRECEDING && LA2_0<=PRECEDING_SIBLING)||LA2_0==PROCESSING_INSTRUCTION||(LA2_0>=SCHEMAATTRIBUTE && LA2_0<=SCHEMAELEMENT)||LA2_0==SELF||LA2_0==SOME||LA2_0==TEXT||LA2_0==TYPESWITCH||LA2_0==UNORDERED||LA2_0==VALIDATE||LA2_0==StringLiteral||LA2_0==NCName||LA2_0==DOLLARSi||LA2_0==LPARSi||(LA2_0>=STARSi && LA2_0<=MINUSSi)||LA2_0==LTSi||(LA2_0>=IntegerLiteral && LA2_0<=LPRAGSi)||(LA2_0>=DBLSLASHSi && LA2_0<=SLASHSi)||(LA2_0>=DOTDOTSi && LA2_0<=ATSi)||LA2_0==DOTSi||LA2_0==LCOMMENTSi||LA2_0==LPISi) ) {
                alt2=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("282:47: ( libraryModule | mainModule )", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // etc/XQFT.g:282:48: libraryModule
                    {
                    pushFollow(FOLLOW_libraryModule_in_module586);
                    libraryModule2=libraryModule();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, libraryModule2.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:282:64: mainModule
                    {
                    pushFollow(FOLLOW_mainModule_in_module590);
                    mainModule3=mainModule();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, mainModule3.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end module

    public static class versionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start versionDecl
    // etc/XQFT.g:284:2: versionDecl : XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? separator ;
    public final versionDecl_return versionDecl() throws RecognitionException {
        versionDecl_return retval = new versionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token XQUERY4=null;
        Token VERSION5=null;
        Token StringLiteral6=null;
        Token ENCODING7=null;
        Token StringLiteral8=null;
        separator_return separator9 = null;


        XQFTTree XQUERY4_tree=null;
        XQFTTree VERSION5_tree=null;
        XQFTTree StringLiteral6_tree=null;
        XQFTTree ENCODING7_tree=null;
        XQFTTree StringLiteral8_tree=null;

        try {
            // etc/XQFT.g:284:33: ( XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? separator )
            // etc/XQFT.g:284:35: XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? separator
            {
            root_0 = (XQFTTree)adaptor.nil();

            XQUERY4=(Token)input.LT(1);
            match(input,XQUERY,FOLLOW_XQUERY_in_versionDecl619); if (failed) return retval;
            if ( backtracking==0 ) {
            XQUERY4_tree = (XQFTTree)adaptor.create(XQUERY4);
            adaptor.addChild(root_0, XQUERY4_tree);
            }
            VERSION5=(Token)input.LT(1);
            match(input,VERSION,FOLLOW_VERSION_in_versionDecl621); if (failed) return retval;
            if ( backtracking==0 ) {
            VERSION5_tree = (XQFTTree)adaptor.create(VERSION5);
            adaptor.addChild(root_0, VERSION5_tree);
            }
            StringLiteral6=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_versionDecl623); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral6_tree = (XQFTTree)adaptor.create(StringLiteral6);
            adaptor.addChild(root_0, StringLiteral6_tree);
            }
            // etc/XQFT.g:284:64: ( ENCODING StringLiteral )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==ENCODING) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // etc/XQFT.g:284:65: ENCODING StringLiteral
                    {
                    ENCODING7=(Token)input.LT(1);
                    match(input,ENCODING,FOLLOW_ENCODING_in_versionDecl626); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ENCODING7_tree = (XQFTTree)adaptor.create(ENCODING7);
                    adaptor.addChild(root_0, ENCODING7_tree);
                    }
                    StringLiteral8=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_versionDecl628); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral8_tree = (XQFTTree)adaptor.create(StringLiteral8);
                    adaptor.addChild(root_0, StringLiteral8_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_separator_in_versionDecl632);
            separator9=separator();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, separator9.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end versionDecl

    public static class separator_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start separator
    // etc/XQFT.g:285:3: separator : SEMICOLONSi ;
    public final separator_return separator() throws RecognitionException {
        separator_return retval = new separator_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SEMICOLONSi10=null;

        XQFTTree SEMICOLONSi10_tree=null;

        try {
            // etc/XQFT.g:285:34: ( SEMICOLONSi )
            // etc/XQFT.g:285:36: SEMICOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            SEMICOLONSi10=(Token)input.LT(1);
            match(input,SEMICOLONSi,FOLLOW_SEMICOLONSi_in_separator662); if (failed) return retval;
            if ( backtracking==0 ) {
            SEMICOLONSi10_tree = (XQFTTree)adaptor.create(SEMICOLONSi10);
            adaptor.addChild(root_0, SEMICOLONSi10_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end separator

    public static class libraryModule_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start libraryModule
    // etc/XQFT.g:287:2: libraryModule : moduleDecl prolog ;
    public final libraryModule_return libraryModule() throws RecognitionException {
        libraryModule_return retval = new libraryModule_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        moduleDecl_return moduleDecl11 = null;

        prolog_return prolog12 = null;



        try {
            // etc/XQFT.g:287:33: ( moduleDecl prolog )
            // etc/XQFT.g:287:35: moduleDecl prolog
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_moduleDecl_in_libraryModule690);
            moduleDecl11=moduleDecl();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, moduleDecl11.getTree());
            pushFollow(FOLLOW_prolog_in_libraryModule692);
            prolog12=prolog();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, prolog12.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end libraryModule

    public static class moduleDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start moduleDecl
    // etc/XQFT.g:288:3: moduleDecl : MODULE NAMESPACE NCName EQSi uriLiteral separator ;
    public final moduleDecl_return moduleDecl() throws RecognitionException {
        moduleDecl_return retval = new moduleDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token MODULE13=null;
        Token NAMESPACE14=null;
        Token NCName15=null;
        Token EQSi16=null;
        uriLiteral_return uriLiteral17 = null;

        separator_return separator18 = null;


        XQFTTree MODULE13_tree=null;
        XQFTTree NAMESPACE14_tree=null;
        XQFTTree NCName15_tree=null;
        XQFTTree EQSi16_tree=null;

        try {
            // etc/XQFT.g:288:34: ( MODULE NAMESPACE NCName EQSi uriLiteral separator )
            // etc/XQFT.g:288:36: MODULE NAMESPACE NCName EQSi uriLiteral separator
            {
            root_0 = (XQFTTree)adaptor.nil();

            MODULE13=(Token)input.LT(1);
            match(input,MODULE,FOLLOW_MODULE_in_moduleDecl721); if (failed) return retval;
            if ( backtracking==0 ) {
            MODULE13_tree = (XQFTTree)adaptor.create(MODULE13);
            adaptor.addChild(root_0, MODULE13_tree);
            }
            NAMESPACE14=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleDecl723); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE14_tree = (XQFTTree)adaptor.create(NAMESPACE14);
            adaptor.addChild(root_0, NAMESPACE14_tree);
            }
            NCName15=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_moduleDecl725); if (failed) return retval;
            if ( backtracking==0 ) {
            NCName15_tree = (XQFTTree)adaptor.create(NCName15);
            adaptor.addChild(root_0, NCName15_tree);
            }
            EQSi16=(Token)input.LT(1);
            match(input,EQSi,FOLLOW_EQSi_in_moduleDecl727); if (failed) return retval;
            if ( backtracking==0 ) {
            EQSi16_tree = (XQFTTree)adaptor.create(EQSi16);
            adaptor.addChild(root_0, EQSi16_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_moduleDecl729);
            uriLiteral17=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral17.getTree());
            pushFollow(FOLLOW_separator_in_moduleDecl731);
            separator18=separator();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, separator18.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end moduleDecl

    public static class uriLiteral_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uriLiteral
    // etc/XQFT.g:289:4: uriLiteral : StringLiteral ;
    public final uriLiteral_return uriLiteral() throws RecognitionException {
        uriLiteral_return retval = new uriLiteral_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token StringLiteral19=null;

        XQFTTree StringLiteral19_tree=null;

        try {
            // etc/XQFT.g:289:35: ( StringLiteral )
            // etc/XQFT.g:289:37: StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            StringLiteral19=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_uriLiteral761); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral19_tree = (XQFTTree)adaptor.create(StringLiteral19);
            adaptor.addChild(root_0, StringLiteral19_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end uriLiteral

    public static class mainModule_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start mainModule
    // etc/XQFT.g:292:2: mainModule : prolog queryBody ;
    public final mainModule_return mainModule() throws RecognitionException {
        mainModule_return retval = new mainModule_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        prolog_return prolog20 = null;

        queryBody_return queryBody21 = null;



        try {
            // etc/XQFT.g:292:33: ( prolog queryBody )
            // etc/XQFT.g:292:35: prolog queryBody
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_prolog_in_mainModule793);
            prolog20=prolog();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, prolog20.getTree());
            pushFollow(FOLLOW_queryBody_in_mainModule795);
            queryBody21=queryBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, queryBody21.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end mainModule

    public static class queryBody_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryBody
    // etc/XQFT.g:294:3: queryBody : expr ;
    public final queryBody_return queryBody() throws RecognitionException {
        queryBody_return retval = new queryBody_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        expr_return expr22 = null;



        try {
            // etc/XQFT.g:294:34: ( expr )
            // etc/XQFT.g:294:36: expr
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_queryBody826);
            expr22=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr22.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryBody

    public static class expr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expr
    // etc/XQFT.g:295:4: expr : exprSingle ( COMMASi exprSingle )* -> ( exprSingle )+ ;
    public final expr_return expr() throws RecognitionException {
        expr_return retval = new expr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMASi24=null;
        exprSingle_return exprSingle23 = null;

        exprSingle_return exprSingle25 = null;


        XQFTTree COMMASi24_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:295:35: ( exprSingle ( COMMASi exprSingle )* -> ( exprSingle )+ )
            // etc/XQFT.g:295:37: exprSingle ( COMMASi exprSingle )*
            {
            pushFollow(FOLLOW_exprSingle_in_expr862);
            exprSingle23=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle23.getTree());
            // etc/XQFT.g:295:48: ( COMMASi exprSingle )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==COMMASi) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // etc/XQFT.g:295:49: COMMASi exprSingle
            	    {
            	    COMMASi24=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_expr865); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi24);

            	    pushFollow(FOLLOW_exprSingle_in_expr867);
            	    exprSingle25=exprSingle();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_exprSingle.add(exprSingle25.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 296:57: -> ( exprSingle )+
            {
                if ( !(stream_exprSingle.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_exprSingle.hasNext() ) {
                    adaptor.addChild(root_0, stream_exprSingle.next());

                }
                stream_exprSingle.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr

    public static class prolog_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start prolog
    // etc/XQFT.g:302:1: prolog : ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )* ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )* ;
    public final prolog_return prolog() throws RecognitionException {
        prolog_return retval = new prolog_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        defaultNamespaceDecl_return defaultNamespaceDecl26 = null;

        setter_return setter27 = null;

        namespaceDecl_return namespaceDecl28 = null;

        importStmt_return importStmt29 = null;

        separator_return separator30 = null;

        varDecl_return varDecl31 = null;

        functionDecl_return functionDecl32 = null;

        optionDecl_return optionDecl33 = null;

        ftOptionDecl_return ftOptionDecl34 = null;

        separator_return separator35 = null;



        try {
            // etc/XQFT.g:302:32: ( ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )* ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )* )
            // etc/XQFT.g:302:35: ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )* ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:302:35: ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==DECLARE) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==BASE_URI||LA6_1==BOUNDARYSPACE||LA6_1==CONSTRUCTION||LA6_1==COPY_NAMESPACES||LA6_1==DEFAULT||LA6_1==NAMESPACE||LA6_1==ORDERING) ) {
                        alt6=1;
                    }


                }
                else if ( (LA6_0==IMPORT) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // etc/XQFT.g:303:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator
            	    {
            	    // etc/XQFT.g:303:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )
            	    int alt5=4;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0==DECLARE) ) {
            	        switch ( input.LA(2) ) {
            	        case DEFAULT:
            	            {
            	            int LA5_3 = input.LA(3);

<<<<<<< .mine
            	            if ( (LA5_3==ELEMENT||LA5_3==FUNCTION) ) {
=======
            	            if ( (LA5_3==COLLATION||LA5_3==ORDER) ) {
            	                alt5=2;
            	            }
            	            else if ( (LA5_3==ELEMENT||LA5_3==FUNCTION) ) {
>>>>>>> .r234
            	                alt5=1;
            	            }
            	            else if ( (LA5_3==COLLATION||LA5_3==ORDER) ) {
            	                alt5=2;
            	            }
            	            else {
            	                if (backtracking>0) {failed=true; return retval;}
            	                NoViableAltException nvae =
<<<<<<< .mine
            	                    new NoViableAltException("299:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 3, input);
=======
            	                    new NoViableAltException("303:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 3, input);
>>>>>>> .r234

            	                throw nvae;
            	            }
            	            }
            	            break;
            	        case BASE_URI:
            	        case BOUNDARYSPACE:
            	        case CONSTRUCTION:
            	        case COPY_NAMESPACES:
            	        case ORDERING:
            	            {
            	            alt5=2;
            	            }
            	            break;
            	        case NAMESPACE:
            	            {
            	            alt5=3;
            	            }
            	            break;
            	        default:
            	            if (backtracking>0) {failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("303:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 1, input);

            	            throw nvae;
            	        }

            	    }
            	    else if ( (LA5_0==IMPORT) ) {
            	        alt5=4;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("303:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt5) {
            	        case 1 :
            	            // etc/XQFT.g:303:13: defaultNamespaceDecl
            	            {
            	            pushFollow(FOLLOW_defaultNamespaceDecl_in_prolog994);
            	            defaultNamespaceDecl26=defaultNamespaceDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, defaultNamespaceDecl26.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // etc/XQFT.g:303:36: setter
            	            {
            	            pushFollow(FOLLOW_setter_in_prolog998);
            	            setter27=setter();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, setter27.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // etc/XQFT.g:303:45: namespaceDecl
            	            {
            	            pushFollow(FOLLOW_namespaceDecl_in_prolog1002);
            	            namespaceDecl28=namespaceDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, namespaceDecl28.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // etc/XQFT.g:303:61: importStmt
            	            {
            	            pushFollow(FOLLOW_importStmt_in_prolog1006);
            	            importStmt29=importStmt();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, importStmt29.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_separator_in_prolog1021);
            	    separator30=separator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, separator30.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // etc/XQFT.g:306:12: ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==DECLARE) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // etc/XQFT.g:307:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator
            	    {
            	    // etc/XQFT.g:307:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl )
            	    int alt7=4;
            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0==DECLARE) ) {
            	        switch ( input.LA(2) ) {
            	        case FTOPTION:
            	            {
            	            alt7=4;
            	            }
            	            break;
<<<<<<< .mine
            	        case OPTION:
=======
            	        case VARIABLE:
>>>>>>> .r234
            	            {
<<<<<<< .mine
            	            alt7=3;
=======
            	            alt7=1;
>>>>>>> .r234
            	            }
            	            break;
            	        case VARIABLE:
            	            {
            	            alt7=1;
            	            }
            	            break;
            	        case FUNCTION:
            	            {
            	            alt7=2;
            	            }
            	            break;
            	        default:
            	            if (backtracking>0) {failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("307:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl )", 7, 1, input);

            	            throw nvae;
            	        }

            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("307:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl )", 7, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt7) {
            	        case 1 :
            	            // etc/XQFT.g:307:13: varDecl
            	            {
            	            pushFollow(FOLLOW_varDecl_in_prolog1063);
            	            varDecl31=varDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, varDecl31.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // etc/XQFT.g:307:23: functionDecl
            	            {
            	            pushFollow(FOLLOW_functionDecl_in_prolog1067);
            	            functionDecl32=functionDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, functionDecl32.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // etc/XQFT.g:307:38: optionDecl
            	            {
            	            pushFollow(FOLLOW_optionDecl_in_prolog1071);
            	            optionDecl33=optionDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, optionDecl33.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // etc/XQFT.g:307:51: ftOptionDecl
            	            {
            	            pushFollow(FOLLOW_ftOptionDecl_in_prolog1075);
            	            ftOptionDecl34=ftOptionDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, ftOptionDecl34.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_separator_in_prolog1089);
            	    separator35=separator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, separator35.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end prolog

    public static class defaultNamespaceDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defaultNamespaceDecl
    // etc/XQFT.g:312:1: defaultNamespaceDecl : DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral ;
    public final defaultNamespaceDecl_return defaultNamespaceDecl() throws RecognitionException {
        defaultNamespaceDecl_return retval = new defaultNamespaceDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE36=null;
        Token DEFAULT37=null;
        Token set38=null;
        Token NAMESPACE39=null;
        uriLiteral_return uriLiteral40 = null;


        XQFTTree DECLARE36_tree=null;
        XQFTTree DEFAULT37_tree=null;
        XQFTTree set38_tree=null;
        XQFTTree NAMESPACE39_tree=null;

        try {
            // etc/XQFT.g:312:32: ( DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral )
            // etc/XQFT.g:312:34: DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE36=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_defaultNamespaceDecl1122); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE36_tree = (XQFTTree)adaptor.create(DECLARE36);
            adaptor.addChild(root_0, DECLARE36_tree);
            }
            DEFAULT37=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultNamespaceDecl1124); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT37_tree = (XQFTTree)adaptor.create(DEFAULT37);
            adaptor.addChild(root_0, DEFAULT37_tree);
            }
            set38=(Token)input.LT(1);
            if ( input.LA(1)==ELEMENT||input.LA(1)==FUNCTION ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set38));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_defaultNamespaceDecl1126);    throw mse;
            }

            NAMESPACE39=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_defaultNamespaceDecl1134); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE39_tree = (XQFTTree)adaptor.create(NAMESPACE39);
            adaptor.addChild(root_0, NAMESPACE39_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_defaultNamespaceDecl1136);
            uriLiteral40=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral40.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end defaultNamespaceDecl

    public static class setter_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start setter
    // etc/XQFT.g:314:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );
    public final setter_return setter() throws RecognitionException {
        setter_return retval = new setter_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        boundarySpaceDecl_return boundarySpaceDecl41 = null;

        defaultCollationDecl_return defaultCollationDecl42 = null;

        baseURIDecl_return baseURIDecl43 = null;

        constructionDecl_return constructionDecl44 = null;

        orderingModeDecl_return orderingModeDecl45 = null;

        emptyOrderDecl_return emptyOrderDecl46 = null;

        copyNamespacesDecl_return copyNamespacesDecl47 = null;



        try {
            // etc/XQFT.g:314:32: ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl )
            int alt9=7;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==DECLARE) ) {
                switch ( input.LA(2) ) {
<<<<<<< .mine
                case BASE_URI:
=======
                case ORDERING:
                    {
                    alt9=5;
                    }
                    break;
                case CONSTRUCTION:
>>>>>>> .r234
                    {
                    alt9=3;
                    }
                    break;
                case BOUNDARYSPACE:
                    {
                    alt9=1;
                    }
                    break;
                case ORDERING:
                    {
                    alt9=5;
                    }
                    break;
                case COPY_NAMESPACES:
                    {
                    alt9=7;
                    }
                    break;
                case DEFAULT:
                    {
<<<<<<< .mine
                    int LA9_6 = input.LA(3);
=======
                    int LA9_5 = input.LA(3);
>>>>>>> .r234

<<<<<<< .mine
                    if ( (LA9_6==COLLATION) ) {
=======
                    if ( (LA9_5==COLLATION) ) {
>>>>>>> .r234
                        alt9=2;
                    }
<<<<<<< .mine
                    else if ( (LA9_6==ORDER) ) {
                        alt9=6;
                    }
=======
                    else if ( (LA9_5==ORDER) ) {
                        alt9=6;
                    }
>>>>>>> .r234
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
<<<<<<< .mine
                            new NoViableAltException("310:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 6, input);
=======
                            new NoViableAltException("314:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 5, input);
>>>>>>> .r234

                        throw nvae;
                    }
                    }
                    break;
<<<<<<< .mine
                case CONSTRUCTION:
                    {
                    alt9=4;
                    }
                    break;
=======
>>>>>>> .r234
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("314:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 1, input);

                    throw nvae;
                }

            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("314:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // etc/XQFT.g:314:34: boundarySpaceDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_boundarySpaceDecl_in_setter1168);
                    boundarySpaceDecl41=boundarySpaceDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, boundarySpaceDecl41.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:315:13: defaultCollationDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_defaultCollationDecl_in_setter1183);
                    defaultCollationDecl42=defaultCollationDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, defaultCollationDecl42.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:316:13: baseURIDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_baseURIDecl_in_setter1198);
                    baseURIDecl43=baseURIDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, baseURIDecl43.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:317:13: constructionDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_constructionDecl_in_setter1213);
                    constructionDecl44=constructionDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, constructionDecl44.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:318:13: orderingModeDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_orderingModeDecl_in_setter1228);
                    orderingModeDecl45=orderingModeDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orderingModeDecl45.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:319:13: emptyOrderDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_emptyOrderDecl_in_setter1243);
                    emptyOrderDecl46=emptyOrderDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, emptyOrderDecl46.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:320:13: copyNamespacesDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_copyNamespacesDecl_in_setter1258);
                    copyNamespacesDecl47=copyNamespacesDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, copyNamespacesDecl47.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end setter

    public static class boundarySpaceDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start boundarySpaceDecl
    // etc/XQFT.g:321:2: boundarySpaceDecl : DECLARE BOUNDARYSPACE ( PRESERVE | STRIP ) ;
    public final boundarySpaceDecl_return boundarySpaceDecl() throws RecognitionException {
        boundarySpaceDecl_return retval = new boundarySpaceDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE48=null;
        Token BOUNDARYSPACE49=null;
        Token set50=null;

        XQFTTree DECLARE48_tree=null;
        XQFTTree BOUNDARYSPACE49_tree=null;
        XQFTTree set50_tree=null;

        try {
            // etc/XQFT.g:321:33: ( DECLARE BOUNDARYSPACE ( PRESERVE | STRIP ) )
            // etc/XQFT.g:321:35: DECLARE BOUNDARYSPACE ( PRESERVE | STRIP )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE48=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_boundarySpaceDecl1279); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE48_tree = (XQFTTree)adaptor.create(DECLARE48);
            adaptor.addChild(root_0, DECLARE48_tree);
            }
            BOUNDARYSPACE49=(Token)input.LT(1);
            match(input,BOUNDARYSPACE,FOLLOW_BOUNDARYSPACE_in_boundarySpaceDecl1281); if (failed) return retval;
            if ( backtracking==0 ) {
            BOUNDARYSPACE49_tree = (XQFTTree)adaptor.create(BOUNDARYSPACE49);
            adaptor.addChild(root_0, BOUNDARYSPACE49_tree);
            }
            set50=(Token)input.LT(1);
            if ( input.LA(1)==PRESERVE||input.LA(1)==STRIP ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set50));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_boundarySpaceDecl1283);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end boundarySpaceDecl

    public static class defaultCollationDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defaultCollationDecl
    // etc/XQFT.g:322:2: defaultCollationDecl : DECLARE DEFAULT COLLATION uriLiteral ;
    public final defaultCollationDecl_return defaultCollationDecl() throws RecognitionException {
        defaultCollationDecl_return retval = new defaultCollationDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE51=null;
        Token DEFAULT52=null;
        Token COLLATION53=null;
        uriLiteral_return uriLiteral54 = null;


        XQFTTree DECLARE51_tree=null;
        XQFTTree DEFAULT52_tree=null;
        XQFTTree COLLATION53_tree=null;

        try {
            // etc/XQFT.g:322:33: ( DECLARE DEFAULT COLLATION uriLiteral )
            // etc/XQFT.g:322:35: DECLARE DEFAULT COLLATION uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE51=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_defaultCollationDecl1307); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE51_tree = (XQFTTree)adaptor.create(DECLARE51);
            adaptor.addChild(root_0, DECLARE51_tree);
            }
            DEFAULT52=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultCollationDecl1309); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT52_tree = (XQFTTree)adaptor.create(DEFAULT52);
            adaptor.addChild(root_0, DEFAULT52_tree);
            }
            COLLATION53=(Token)input.LT(1);
            match(input,COLLATION,FOLLOW_COLLATION_in_defaultCollationDecl1311); if (failed) return retval;
            if ( backtracking==0 ) {
            COLLATION53_tree = (XQFTTree)adaptor.create(COLLATION53);
            adaptor.addChild(root_0, COLLATION53_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_defaultCollationDecl1313);
            uriLiteral54=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral54.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end defaultCollationDecl

    public static class baseURIDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start baseURIDecl
    // etc/XQFT.g:323:2: baseURIDecl : DECLARE BASE_URI uriLiteral ;
    public final baseURIDecl_return baseURIDecl() throws RecognitionException {
        baseURIDecl_return retval = new baseURIDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE55=null;
        Token BASE_URI56=null;
        uriLiteral_return uriLiteral57 = null;


        XQFTTree DECLARE55_tree=null;
        XQFTTree BASE_URI56_tree=null;

        try {
            // etc/XQFT.g:323:33: ( DECLARE BASE_URI uriLiteral )
            // etc/XQFT.g:323:35: DECLARE BASE_URI uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE55=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_baseURIDecl1340); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE55_tree = (XQFTTree)adaptor.create(DECLARE55);
            adaptor.addChild(root_0, DECLARE55_tree);
            }
            BASE_URI56=(Token)input.LT(1);
            match(input,BASE_URI,FOLLOW_BASE_URI_in_baseURIDecl1342); if (failed) return retval;
            if ( backtracking==0 ) {
            BASE_URI56_tree = (XQFTTree)adaptor.create(BASE_URI56);
            adaptor.addChild(root_0, BASE_URI56_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_baseURIDecl1344);
            uriLiteral57=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral57.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end baseURIDecl

    public static class constructionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constructionDecl
    // etc/XQFT.g:324:2: constructionDecl : DECLARE CONSTRUCTION ( STRIP | PRESERVE ) ;
    public final constructionDecl_return constructionDecl() throws RecognitionException {
        constructionDecl_return retval = new constructionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE58=null;
        Token CONSTRUCTION59=null;
        Token set60=null;

        XQFTTree DECLARE58_tree=null;
        XQFTTree CONSTRUCTION59_tree=null;
        XQFTTree set60_tree=null;

        try {
            // etc/XQFT.g:324:33: ( DECLARE CONSTRUCTION ( STRIP | PRESERVE ) )
            // etc/XQFT.g:324:35: DECLARE CONSTRUCTION ( STRIP | PRESERVE )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE58=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_constructionDecl1366); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE58_tree = (XQFTTree)adaptor.create(DECLARE58);
            adaptor.addChild(root_0, DECLARE58_tree);
            }
            CONSTRUCTION59=(Token)input.LT(1);
            match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_constructionDecl1368); if (failed) return retval;
            if ( backtracking==0 ) {
            CONSTRUCTION59_tree = (XQFTTree)adaptor.create(CONSTRUCTION59);
            adaptor.addChild(root_0, CONSTRUCTION59_tree);
            }
            set60=(Token)input.LT(1);
            if ( input.LA(1)==PRESERVE||input.LA(1)==STRIP ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set60));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_constructionDecl1370);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end constructionDecl

    public static class orderingModeDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderingModeDecl
    // etc/XQFT.g:325:2: orderingModeDecl : DECLARE ORDERING ( ORDERED | UNORDERED ) ;
    public final orderingModeDecl_return orderingModeDecl() throws RecognitionException {
        orderingModeDecl_return retval = new orderingModeDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE61=null;
        Token ORDERING62=null;
        Token set63=null;

        XQFTTree DECLARE61_tree=null;
        XQFTTree ORDERING62_tree=null;
        XQFTTree set63_tree=null;

        try {
            // etc/XQFT.g:325:33: ( DECLARE ORDERING ( ORDERED | UNORDERED ) )
            // etc/XQFT.g:325:35: DECLARE ORDERING ( ORDERED | UNORDERED )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE61=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_orderingModeDecl1398); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE61_tree = (XQFTTree)adaptor.create(DECLARE61);
            adaptor.addChild(root_0, DECLARE61_tree);
            }
            ORDERING62=(Token)input.LT(1);
            match(input,ORDERING,FOLLOW_ORDERING_in_orderingModeDecl1400); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERING62_tree = (XQFTTree)adaptor.create(ORDERING62);
            adaptor.addChild(root_0, ORDERING62_tree);
            }
            set63=(Token)input.LT(1);
            if ( input.LA(1)==ORDERED||input.LA(1)==UNORDERED ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set63));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderingModeDecl1402);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderingModeDecl

    public static class emptyOrderDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start emptyOrderDecl
    // etc/XQFT.g:326:2: emptyOrderDecl : DECLARE DEFAULT ORDER EMPTY ( GREATEST | LEAST ) ;
    public final emptyOrderDecl_return emptyOrderDecl() throws RecognitionException {
        emptyOrderDecl_return retval = new emptyOrderDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE64=null;
        Token DEFAULT65=null;
        Token ORDER66=null;
        Token EMPTY67=null;
        Token set68=null;

        XQFTTree DECLARE64_tree=null;
        XQFTTree DEFAULT65_tree=null;
        XQFTTree ORDER66_tree=null;
        XQFTTree EMPTY67_tree=null;
        XQFTTree set68_tree=null;

        try {
            // etc/XQFT.g:326:33: ( DECLARE DEFAULT ORDER EMPTY ( GREATEST | LEAST ) )
            // etc/XQFT.g:326:35: DECLARE DEFAULT ORDER EMPTY ( GREATEST | LEAST )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE64=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_emptyOrderDecl1432); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE64_tree = (XQFTTree)adaptor.create(DECLARE64);
            adaptor.addChild(root_0, DECLARE64_tree);
            }
            DEFAULT65=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_emptyOrderDecl1434); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT65_tree = (XQFTTree)adaptor.create(DEFAULT65);
            adaptor.addChild(root_0, DEFAULT65_tree);
            }
            ORDER66=(Token)input.LT(1);
            match(input,ORDER,FOLLOW_ORDER_in_emptyOrderDecl1436); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDER66_tree = (XQFTTree)adaptor.create(ORDER66);
            adaptor.addChild(root_0, ORDER66_tree);
            }
            EMPTY67=(Token)input.LT(1);
            match(input,EMPTY,FOLLOW_EMPTY_in_emptyOrderDecl1438); if (failed) return retval;
            if ( backtracking==0 ) {
            EMPTY67_tree = (XQFTTree)adaptor.create(EMPTY67);
            adaptor.addChild(root_0, EMPTY67_tree);
            }
            set68=(Token)input.LT(1);
            if ( input.LA(1)==GREATEST||input.LA(1)==LEAST ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set68));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_emptyOrderDecl1440);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end emptyOrderDecl

    public static class copyNamespacesDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start copyNamespacesDecl
    // etc/XQFT.g:327:2: copyNamespacesDecl : DECLARE COPY_NAMESPACES preserveMode COMMASi inheritMode ;
    public final copyNamespacesDecl_return copyNamespacesDecl() throws RecognitionException {
        copyNamespacesDecl_return retval = new copyNamespacesDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE69=null;
        Token COPY_NAMESPACES70=null;
        Token COMMASi72=null;
        preserveMode_return preserveMode71 = null;

        inheritMode_return inheritMode73 = null;


        XQFTTree DECLARE69_tree=null;
        XQFTTree COPY_NAMESPACES70_tree=null;
        XQFTTree COMMASi72_tree=null;

        try {
            // etc/XQFT.g:327:33: ( DECLARE COPY_NAMESPACES preserveMode COMMASi inheritMode )
            // etc/XQFT.g:327:35: DECLARE COPY_NAMESPACES preserveMode COMMASi inheritMode
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE69=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_copyNamespacesDecl1466); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE69_tree = (XQFTTree)adaptor.create(DECLARE69);
            adaptor.addChild(root_0, DECLARE69_tree);
            }
            COPY_NAMESPACES70=(Token)input.LT(1);
            match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl1468); if (failed) return retval;
            if ( backtracking==0 ) {
            COPY_NAMESPACES70_tree = (XQFTTree)adaptor.create(COPY_NAMESPACES70);
            adaptor.addChild(root_0, COPY_NAMESPACES70_tree);
            }
            pushFollow(FOLLOW_preserveMode_in_copyNamespacesDecl1470);
            preserveMode71=preserveMode();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, preserveMode71.getTree());
            COMMASi72=(Token)input.LT(1);
            match(input,COMMASi,FOLLOW_COMMASi_in_copyNamespacesDecl1472); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMASi72_tree = (XQFTTree)adaptor.create(COMMASi72);
            adaptor.addChild(root_0, COMMASi72_tree);
            }
            pushFollow(FOLLOW_inheritMode_in_copyNamespacesDecl1474);
            inheritMode73=inheritMode();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, inheritMode73.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end copyNamespacesDecl

    public static class preserveMode_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start preserveMode
    // etc/XQFT.g:328:3: preserveMode : ( PRESERVE | NOPRESERVE );
    public final preserveMode_return preserveMode() throws RecognitionException {
        preserveMode_return retval = new preserveMode_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set74=null;

        XQFTTree set74_tree=null;

        try {
            // etc/XQFT.g:328:34: ( PRESERVE | NOPRESERVE )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set74=(Token)input.LT(1);
            if ( input.LA(1)==NOPRESERVE||input.LA(1)==PRESERVE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set74));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_preserveMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end preserveMode

    public static class inheritMode_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start inheritMode
    // etc/XQFT.g:329:3: inheritMode : ( INHERIT | NOINHERIT );
    public final inheritMode_return inheritMode() throws RecognitionException {
        inheritMode_return retval = new inheritMode_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set75=null;

        XQFTTree set75_tree=null;

        try {
            // etc/XQFT.g:329:34: ( INHERIT | NOINHERIT )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set75=(Token)input.LT(1);
            if ( input.LA(1)==INHERIT||input.LA(1)==NOINHERIT ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set75));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_inheritMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end inheritMode

    public static class namespaceDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start namespaceDecl
    // etc/XQFT.g:331:1: namespaceDecl : DECLARE NAMESPACE NCName EQSi uriLiteral ;
    public final namespaceDecl_return namespaceDecl() throws RecognitionException {
        namespaceDecl_return retval = new namespaceDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE76=null;
        Token NAMESPACE77=null;
        Token NCName78=null;
        Token EQSi79=null;
        uriLiteral_return uriLiteral80 = null;


        XQFTTree DECLARE76_tree=null;
        XQFTTree NAMESPACE77_tree=null;
        XQFTTree NCName78_tree=null;
        XQFTTree EQSi79_tree=null;

        try {
            // etc/XQFT.g:331:32: ( DECLARE NAMESPACE NCName EQSi uriLiteral )
            // etc/XQFT.g:331:34: DECLARE NAMESPACE NCName EQSi uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE76=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_namespaceDecl1565); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE76_tree = (XQFTTree)adaptor.create(DECLARE76);
            adaptor.addChild(root_0, DECLARE76_tree);
            }
            NAMESPACE77=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespaceDecl1567); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE77_tree = (XQFTTree)adaptor.create(NAMESPACE77);
            adaptor.addChild(root_0, NAMESPACE77_tree);
            }
            NCName78=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_namespaceDecl1569); if (failed) return retval;
            if ( backtracking==0 ) {
            NCName78_tree = (XQFTTree)adaptor.create(NCName78);
            adaptor.addChild(root_0, NCName78_tree);
            }
            EQSi79=(Token)input.LT(1);
            match(input,EQSi,FOLLOW_EQSi_in_namespaceDecl1571); if (failed) return retval;
            if ( backtracking==0 ) {
            EQSi79_tree = (XQFTTree)adaptor.create(EQSi79);
            adaptor.addChild(root_0, EQSi79_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_namespaceDecl1573);
            uriLiteral80=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral80.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end namespaceDecl

    public static class importStmt_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start importStmt
    // etc/XQFT.g:333:1: importStmt : ( schemaImport | moduleImport );
    public final importStmt_return importStmt() throws RecognitionException {
        importStmt_return retval = new importStmt_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        schemaImport_return schemaImport81 = null;

        moduleImport_return moduleImport82 = null;



        try {
            // etc/XQFT.g:333:32: ( schemaImport | moduleImport )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==IMPORT) ) {
                int LA10_1 = input.LA(2);

                if ( (LA10_1==SCHEMA) ) {
                    alt10=1;
                }
                else if ( (LA10_1==MODULE) ) {
                    alt10=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("333:1: importStmt : ( schemaImport | moduleImport );", 10, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("333:1: importStmt : ( schemaImport | moduleImport );", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // etc/XQFT.g:333:34: schemaImport
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaImport_in_importStmt1601);
                    schemaImport81=schemaImport();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaImport81.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:333:49: moduleImport
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_moduleImport_in_importStmt1605);
                    moduleImport82=moduleImport();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, moduleImport82.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end importStmt

    public static class schemaImport_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaImport
    // etc/XQFT.g:334:2: schemaImport : IMPORT SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? ;
    public final schemaImport_return schemaImport() throws RecognitionException {
        schemaImport_return retval = new schemaImport_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token IMPORT83=null;
        Token SCHEMA84=null;
        Token AT87=null;
        Token COMMASi89=null;
        schemaPrefix_return schemaPrefix85 = null;

        uriLiteral_return uriLiteral86 = null;

        uriLiteral_return uriLiteral88 = null;

        uriLiteral_return uriLiteral90 = null;


        XQFTTree IMPORT83_tree=null;
        XQFTTree SCHEMA84_tree=null;
        XQFTTree AT87_tree=null;
        XQFTTree COMMASi89_tree=null;

        try {
            // etc/XQFT.g:334:33: ( IMPORT SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? )
            // etc/XQFT.g:334:35: IMPORT SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            IMPORT83=(Token)input.LT(1);
            match(input,IMPORT,FOLLOW_IMPORT_in_schemaImport1631); if (failed) return retval;
            if ( backtracking==0 ) {
            IMPORT83_tree = (XQFTTree)adaptor.create(IMPORT83);
            adaptor.addChild(root_0, IMPORT83_tree);
            }
            SCHEMA84=(Token)input.LT(1);
            match(input,SCHEMA,FOLLOW_SCHEMA_in_schemaImport1633); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMA84_tree = (XQFTTree)adaptor.create(SCHEMA84);
            adaptor.addChild(root_0, SCHEMA84_tree);
            }
            // etc/XQFT.g:334:49: ( schemaPrefix )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==DEFAULT||LA11_0==NAMESPACE) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // etc/XQFT.g:334:49: schemaPrefix
                    {
                    pushFollow(FOLLOW_schemaPrefix_in_schemaImport1635);
                    schemaPrefix85=schemaPrefix();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaPrefix85.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_schemaImport1638);
            uriLiteral86=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral86.getTree());
            // etc/XQFT.g:334:74: ( AT uriLiteral ( COMMASi uriLiteral )* )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==AT) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // etc/XQFT.g:334:75: AT uriLiteral ( COMMASi uriLiteral )*
                    {
                    AT87=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_schemaImport1641); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT87_tree = (XQFTTree)adaptor.create(AT87);
                    adaptor.addChild(root_0, AT87_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_schemaImport1643);
                    uriLiteral88=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral88.getTree());
                    // etc/XQFT.g:334:89: ( COMMASi uriLiteral )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==COMMASi) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // etc/XQFT.g:334:90: COMMASi uriLiteral
                    	    {
                    	    COMMASi89=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_schemaImport1646); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi89_tree = (XQFTTree)adaptor.create(COMMASi89);
                    	    adaptor.addChild(root_0, COMMASi89_tree);
                    	    }
                    	    pushFollow(FOLLOW_uriLiteral_in_schemaImport1648);
                    	    uriLiteral90=uriLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral90.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaImport

    public static class schemaPrefix_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaPrefix
    // etc/XQFT.g:335:3: schemaPrefix : ( ( NAMESPACE NCName EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) );
    public final schemaPrefix_return schemaPrefix() throws RecognitionException {
        schemaPrefix_return retval = new schemaPrefix_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NAMESPACE91=null;
        Token NCName92=null;
        Token EQSi93=null;
        Token DEFAULT94=null;
        Token ELEMENT95=null;
        Token NAMESPACE96=null;

        XQFTTree NAMESPACE91_tree=null;
        XQFTTree NCName92_tree=null;
        XQFTTree EQSi93_tree=null;
        XQFTTree DEFAULT94_tree=null;
        XQFTTree ELEMENT95_tree=null;
        XQFTTree NAMESPACE96_tree=null;

        try {
            // etc/XQFT.g:335:34: ( ( NAMESPACE NCName EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==NAMESPACE) ) {
                alt14=1;
            }
            else if ( (LA14_0==DEFAULT) ) {
                alt14=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("335:3: schemaPrefix : ( ( NAMESPACE NCName EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) );", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // etc/XQFT.g:335:36: ( NAMESPACE NCName EQSi )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:335:36: ( NAMESPACE NCName EQSi )
                    // etc/XQFT.g:335:37: NAMESPACE NCName EQSi
                    {
                    NAMESPACE91=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix1680); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE91_tree = (XQFTTree)adaptor.create(NAMESPACE91);
                    adaptor.addChild(root_0, NAMESPACE91_tree);
                    }
                    NCName92=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_schemaPrefix1682); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName92_tree = (XQFTTree)adaptor.create(NCName92);
                    adaptor.addChild(root_0, NCName92_tree);
                    }
                    EQSi93=(Token)input.LT(1);
                    match(input,EQSi,FOLLOW_EQSi_in_schemaPrefix1684); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQSi93_tree = (XQFTTree)adaptor.create(EQSi93);
                    adaptor.addChild(root_0, EQSi93_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:335:62: ( DEFAULT ELEMENT NAMESPACE )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:335:62: ( DEFAULT ELEMENT NAMESPACE )
                    // etc/XQFT.g:335:63: DEFAULT ELEMENT NAMESPACE
                    {
                    DEFAULT94=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_schemaPrefix1690); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEFAULT94_tree = (XQFTTree)adaptor.create(DEFAULT94);
                    adaptor.addChild(root_0, DEFAULT94_tree);
                    }
                    ELEMENT95=(Token)input.LT(1);
                    match(input,ELEMENT,FOLLOW_ELEMENT_in_schemaPrefix1692); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ELEMENT95_tree = (XQFTTree)adaptor.create(ELEMENT95);
                    adaptor.addChild(root_0, ELEMENT95_tree);
                    }
                    NAMESPACE96=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix1694); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE96_tree = (XQFTTree)adaptor.create(NAMESPACE96);
                    adaptor.addChild(root_0, NAMESPACE96_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaPrefix

    public static class moduleImport_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start moduleImport
    // etc/XQFT.g:336:2: moduleImport : IMPORT MODULE ( NAMESPACE NCName EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? ;
    public final moduleImport_return moduleImport() throws RecognitionException {
        moduleImport_return retval = new moduleImport_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token IMPORT97=null;
        Token MODULE98=null;
        Token NAMESPACE99=null;
        Token NCName100=null;
        Token EQSi101=null;
        Token AT103=null;
        Token COMMASi105=null;
        uriLiteral_return uriLiteral102 = null;

        uriLiteral_return uriLiteral104 = null;

        uriLiteral_return uriLiteral106 = null;


        XQFTTree IMPORT97_tree=null;
        XQFTTree MODULE98_tree=null;
        XQFTTree NAMESPACE99_tree=null;
        XQFTTree NCName100_tree=null;
        XQFTTree EQSi101_tree=null;
        XQFTTree AT103_tree=null;
        XQFTTree COMMASi105_tree=null;

        try {
            // etc/XQFT.g:336:33: ( IMPORT MODULE ( NAMESPACE NCName EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? )
            // etc/XQFT.g:336:35: IMPORT MODULE ( NAMESPACE NCName EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            IMPORT97=(Token)input.LT(1);
            match(input,IMPORT,FOLLOW_IMPORT_in_moduleImport1721); if (failed) return retval;
            if ( backtracking==0 ) {
            IMPORT97_tree = (XQFTTree)adaptor.create(IMPORT97);
            adaptor.addChild(root_0, IMPORT97_tree);
            }
            MODULE98=(Token)input.LT(1);
            match(input,MODULE,FOLLOW_MODULE_in_moduleImport1723); if (failed) return retval;
            if ( backtracking==0 ) {
            MODULE98_tree = (XQFTTree)adaptor.create(MODULE98);
            adaptor.addChild(root_0, MODULE98_tree);
            }
            // etc/XQFT.g:336:49: ( NAMESPACE NCName EQSi )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==NAMESPACE) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // etc/XQFT.g:336:50: NAMESPACE NCName EQSi
                    {
                    NAMESPACE99=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleImport1726); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE99_tree = (XQFTTree)adaptor.create(NAMESPACE99);
                    adaptor.addChild(root_0, NAMESPACE99_tree);
                    }
                    NCName100=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_moduleImport1728); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName100_tree = (XQFTTree)adaptor.create(NCName100);
                    adaptor.addChild(root_0, NCName100_tree);
                    }
                    EQSi101=(Token)input.LT(1);
                    match(input,EQSi,FOLLOW_EQSi_in_moduleImport1730); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQSi101_tree = (XQFTTree)adaptor.create(EQSi101);
                    adaptor.addChild(root_0, EQSi101_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_moduleImport1734);
            uriLiteral102=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral102.getTree());
            // etc/XQFT.g:336:85: ( AT uriLiteral ( COMMASi uriLiteral )* )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==AT) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // etc/XQFT.g:336:86: AT uriLiteral ( COMMASi uriLiteral )*
                    {
                    AT103=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_moduleImport1737); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT103_tree = (XQFTTree)adaptor.create(AT103);
                    adaptor.addChild(root_0, AT103_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_moduleImport1739);
                    uriLiteral104=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral104.getTree());
                    // etc/XQFT.g:336:100: ( COMMASi uriLiteral )*
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==COMMASi) ) {
                            alt16=1;
                        }


                        switch (alt16) {
                    	case 1 :
                    	    // etc/XQFT.g:336:101: COMMASi uriLiteral
                    	    {
                    	    COMMASi105=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_moduleImport1742); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi105_tree = (XQFTTree)adaptor.create(COMMASi105);
                    	    adaptor.addChild(root_0, COMMASi105_tree);
                    	    }
                    	    pushFollow(FOLLOW_uriLiteral_in_moduleImport1744);
                    	    uriLiteral106=uriLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral106.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop16;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end moduleImport

    public static class varDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varDecl
    // etc/XQFT.g:338:1: varDecl : DECLARE VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL ) ;
    public final varDecl_return varDecl() throws RecognitionException {
        varDecl_return retval = new varDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE107=null;
        Token VARIABLE108=null;
        Token DOLLARSi109=null;
        Token ASSIGNSi112=null;
        Token EXTERNAL114=null;
        qName_return qName110 = null;

        typeDeclaration_return typeDeclaration111 = null;

        exprSingle_return exprSingle113 = null;


        XQFTTree DECLARE107_tree=null;
        XQFTTree VARIABLE108_tree=null;
        XQFTTree DOLLARSi109_tree=null;
        XQFTTree ASSIGNSi112_tree=null;
        XQFTTree EXTERNAL114_tree=null;

        try {
            // etc/XQFT.g:338:32: ( DECLARE VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL ) )
            // etc/XQFT.g:338:34: DECLARE VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE107=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_varDecl1780); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE107_tree = (XQFTTree)adaptor.create(DECLARE107);
            adaptor.addChild(root_0, DECLARE107_tree);
            }
            VARIABLE108=(Token)input.LT(1);
            match(input,VARIABLE,FOLLOW_VARIABLE_in_varDecl1782); if (failed) return retval;
            if ( backtracking==0 ) {
            VARIABLE108_tree = (XQFTTree)adaptor.create(VARIABLE108);
            adaptor.addChild(root_0, VARIABLE108_tree);
            }
            DOLLARSi109=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varDecl1784); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi109_tree = (XQFTTree)adaptor.create(DOLLARSi109);
            adaptor.addChild(root_0, DOLLARSi109_tree);
            }
            pushFollow(FOLLOW_qName_in_varDecl1786);
            qName110=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName110.getTree());
            // etc/XQFT.g:338:66: ( typeDeclaration )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==AS) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // etc/XQFT.g:338:66: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_varDecl1788);
                    typeDeclaration111=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration111.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:338:83: ( ( ASSIGNSi exprSingle ) | EXTERNAL )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==ASSIGNSi) ) {
                alt19=1;
            }
            else if ( (LA19_0==EXTERNAL) ) {
                alt19=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("338:83: ( ( ASSIGNSi exprSingle ) | EXTERNAL )", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // etc/XQFT.g:338:84: ( ASSIGNSi exprSingle )
                    {
                    // etc/XQFT.g:338:84: ( ASSIGNSi exprSingle )
                    // etc/XQFT.g:338:85: ASSIGNSi exprSingle
                    {
                    ASSIGNSi112=(Token)input.LT(1);
                    match(input,ASSIGNSi,FOLLOW_ASSIGNSi_in_varDecl1793); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ASSIGNSi112_tree = (XQFTTree)adaptor.create(ASSIGNSi112);
                    adaptor.addChild(root_0, ASSIGNSi112_tree);
                    }
                    pushFollow(FOLLOW_exprSingle_in_varDecl1795);
                    exprSingle113=exprSingle();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle113.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:338:108: EXTERNAL
                    {
                    EXTERNAL114=(Token)input.LT(1);
                    match(input,EXTERNAL,FOLLOW_EXTERNAL_in_varDecl1800); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXTERNAL114_tree = (XQFTTree)adaptor.create(EXTERNAL114);
                    adaptor.addChild(root_0, EXTERNAL114_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varDecl

    public static class qName_return extends ParserRuleReturnScope {
        public String text;
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qName
<<<<<<< .mine
    // etc/XQFT.g:335:2: qName returns [String text] : (nc1= NCName c= COLONSi )? nc2= NCName ;
=======
    // etc/XQFT.g:339:2: qName returns [String text] : (nc1= NCName c= COLONSi )? nc2= NCName ;
>>>>>>> .r234
    public final qName_return qName() throws RecognitionException {
        qName_return retval = new qName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token nc1=null;
        Token c=null;
        Token nc2=null;

        XQFTTree nc1_tree=null;
        XQFTTree c_tree=null;
        XQFTTree nc2_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:335:36: ( (nc1= NCName c= COLONSi )? nc2= NCName )
            // etc/XQFT.g:335:38: (nc1= NCName c= COLONSi )? nc2= NCName
=======
            // etc/XQFT.g:339:36: ( (nc1= NCName c= COLONSi )? nc2= NCName )
            // etc/XQFT.g:339:38: (nc1= NCName c= COLONSi )? nc2= NCName
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            // etc/XQFT.g:335:38: (nc1= NCName c= COLONSi )?
=======
            // etc/XQFT.g:339:38: (nc1= NCName c= COLONSi )?
>>>>>>> .r234
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==NCName) ) {
                int LA20_1 = input.LA(2);

                if ( (LA20_1==COLONSi) ) {
                    alt20=1;
                }
            }
            switch (alt20) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:335:39: nc1= NCName c= COLONSi
=======
                    // etc/XQFT.g:339:39: nc1= NCName c= COLONSi
>>>>>>> .r234
                    {
<<<<<<< .mine
                    nc1=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_qName1809); if (failed) return retval;
                    if ( backtracking==0 ) {
                    nc1_tree = (CommonTree)adaptor.create(nc1);
                    adaptor.addChild(root_0, nc1_tree);
                    }
=======
                    nc1=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_qName1822); if (failed) return retval;
                    if ( backtracking==0 ) {
                    nc1_tree = (XQFTTree)adaptor.create(nc1);
                    adaptor.addChild(root_0, nc1_tree);
                    }
>>>>>>> .r234
                    c=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_qName1826); if (failed) return retval;
                    if ( backtracking==0 ) {
                    c_tree = (XQFTTree)adaptor.create(c);
                    adaptor.addChild(root_0, c_tree);
                    }

                    }
                    break;

            }

<<<<<<< .mine
            nc2=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_qName1819); if (failed) return retval;
=======
            nc2=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_qName1832); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
<<<<<<< .mine
            nc2_tree = (CommonTree)adaptor.create(nc2);
            adaptor.addChild(root_0, nc2_tree);
=======
            nc2_tree = (XQFTTree)adaptor.create(nc2);
            adaptor.addChild(root_0, nc2_tree);
>>>>>>> .r234
            }
            if ( backtracking==0 ) {
               retval.text = nc2.getText() + (c != null ? c.getText() + nc1.getText() : ""); 
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end qName

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeDeclaration
    // etc/XQFT.g:340:2: typeDeclaration : AS sequenceType ;
    public final typeDeclaration_return typeDeclaration() throws RecognitionException {
        typeDeclaration_return retval = new typeDeclaration_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AS115=null;
        sequenceType_return sequenceType116 = null;


        XQFTTree AS115_tree=null;

        try {
            // etc/XQFT.g:340:33: ( AS sequenceType )
            // etc/XQFT.g:340:35: AS sequenceType
            {
            root_0 = (XQFTTree)adaptor.nil();

            AS115=(Token)input.LT(1);
            match(input,AS,FOLLOW_AS_in_typeDeclaration1857); if (failed) return retval;
            if ( backtracking==0 ) {
            AS115_tree = (XQFTTree)adaptor.create(AS115);
            adaptor.addChild(root_0, AS115_tree);
            }
            pushFollow(FOLLOW_sequenceType_in_typeDeclaration1859);
            sequenceType116=sequenceType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType116.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeDeclaration

    public static class functionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionDecl
    // etc/XQFT.g:344:1: functionDecl : DECLARE FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL ) ;
    public final functionDecl_return functionDecl() throws RecognitionException {
        functionDecl_return retval = new functionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE117=null;
        Token FUNCTION118=null;
        Token LPARSi120=null;
        Token RPARSi122=null;
        Token AS123=null;
        Token EXTERNAL126=null;
        qName_return qName119 = null;

        paramList_return paramList121 = null;

        sequenceType_return sequenceType124 = null;

        enclosedExpr_return enclosedExpr125 = null;


        XQFTTree DECLARE117_tree=null;
        XQFTTree FUNCTION118_tree=null;
        XQFTTree LPARSi120_tree=null;
        XQFTTree RPARSi122_tree=null;
        XQFTTree AS123_tree=null;
        XQFTTree EXTERNAL126_tree=null;

        try {
            // etc/XQFT.g:344:32: ( DECLARE FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL ) )
            // etc/XQFT.g:344:34: DECLARE FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE117=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_functionDecl1888); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE117_tree = (XQFTTree)adaptor.create(DECLARE117);
            adaptor.addChild(root_0, DECLARE117_tree);
            }
            FUNCTION118=(Token)input.LT(1);
            match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDecl1890); if (failed) return retval;
            if ( backtracking==0 ) {
            FUNCTION118_tree = (XQFTTree)adaptor.create(FUNCTION118);
            adaptor.addChild(root_0, FUNCTION118_tree);
            }
            pushFollow(FOLLOW_qName_in_functionDecl1892);
            qName119=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName119.getTree());
            LPARSi120=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_functionDecl1894); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi120_tree = (XQFTTree)adaptor.create(LPARSi120);
            adaptor.addChild(root_0, LPARSi120_tree);
            }
            // etc/XQFT.g:344:64: ( paramList )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==DOLLARSi) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // etc/XQFT.g:344:64: paramList
                    {
                    pushFollow(FOLLOW_paramList_in_functionDecl1896);
                    paramList121=paramList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, paramList121.getTree());

                    }
                    break;

            }

            RPARSi122=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_functionDecl1899); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi122_tree = (XQFTTree)adaptor.create(RPARSi122);
            adaptor.addChild(root_0, RPARSi122_tree);
            }
            // etc/XQFT.g:345:12: ( AS sequenceType )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==AS) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // etc/XQFT.g:345:13: AS sequenceType
                    {
                    AS123=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_functionDecl1914); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AS123_tree = (XQFTTree)adaptor.create(AS123);
                    adaptor.addChild(root_0, AS123_tree);
                    }
                    pushFollow(FOLLOW_sequenceType_in_functionDecl1916);
                    sequenceType124=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType124.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:345:31: ( enclosedExpr | EXTERNAL )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LBRACESi) ) {
                alt23=1;
            }
            else if ( (LA23_0==EXTERNAL) ) {
                alt23=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("345:31: ( enclosedExpr | EXTERNAL )", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // etc/XQFT.g:345:32: enclosedExpr
                    {
                    pushFollow(FOLLOW_enclosedExpr_in_functionDecl1921);
                    enclosedExpr125=enclosedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, enclosedExpr125.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:345:47: EXTERNAL
                    {
                    EXTERNAL126=(Token)input.LT(1);
                    match(input,EXTERNAL,FOLLOW_EXTERNAL_in_functionDecl1925); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXTERNAL126_tree = (XQFTTree)adaptor.create(EXTERNAL126);
                    adaptor.addChild(root_0, EXTERNAL126_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionDecl

    public static class paramList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start paramList
    // etc/XQFT.g:346:2: paramList : param ( COMMASi param )* ;
    public final paramList_return paramList() throws RecognitionException {
        paramList_return retval = new paramList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMASi128=null;
        param_return param127 = null;

        param_return param129 = null;


        XQFTTree COMMASi128_tree=null;

        try {
            // etc/XQFT.g:346:33: ( param ( COMMASi param )* )
            // etc/XQFT.g:346:35: param ( COMMASi param )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_param_in_paramList1955);
            param127=param();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, param127.getTree());
            // etc/XQFT.g:346:41: ( COMMASi param )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMASi) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // etc/XQFT.g:346:42: COMMASi param
            	    {
            	    COMMASi128=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_paramList1958); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMASi128_tree = (XQFTTree)adaptor.create(COMMASi128);
            	    adaptor.addChild(root_0, COMMASi128_tree);
            	    }
            	    pushFollow(FOLLOW_param_in_paramList1960);
            	    param129=param();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, param129.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end paramList

    public static class param_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start param
    // etc/XQFT.g:347:3: param : DOLLARSi qName ( typeDeclaration )? ;
    public final param_return param() throws RecognitionException {
        param_return retval = new param_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi130=null;
        qName_return qName131 = null;

        typeDeclaration_return typeDeclaration132 = null;


        XQFTTree DOLLARSi130_tree=null;

        try {
            // etc/XQFT.g:347:34: ( DOLLARSi qName ( typeDeclaration )? )
            // etc/XQFT.g:347:36: DOLLARSi qName ( typeDeclaration )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOLLARSi130=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_param1996); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi130_tree = (XQFTTree)adaptor.create(DOLLARSi130);
            adaptor.addChild(root_0, DOLLARSi130_tree);
            }
            pushFollow(FOLLOW_qName_in_param1998);
            qName131=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName131.getTree());
            // etc/XQFT.g:347:51: ( typeDeclaration )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // etc/XQFT.g:347:51: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_param2000);
                    typeDeclaration132=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration132.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end param

    public static class enclosedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enclosedExpr
    // etc/XQFT.g:353:2: enclosedExpr : LBRACESi expr RBRACSi ;
    public final enclosedExpr_return enclosedExpr() throws RecognitionException {
        enclosedExpr_return retval = new enclosedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi133=null;
        Token RBRACSi135=null;
        expr_return expr134 = null;


        XQFTTree LBRACESi133_tree=null;
        XQFTTree RBRACSi135_tree=null;

        try {
            // etc/XQFT.g:353:33: ( LBRACESi expr RBRACSi )
            // etc/XQFT.g:354:13: LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LBRACESi133=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_enclosedExpr2045); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_enclosedExpr2061);
            expr134=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr134.getTree());
            RBRACSi135=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_enclosedExpr2076); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end enclosedExpr

    public static class optionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start optionDecl
    // etc/XQFT.g:362:1: optionDecl : DECLARE OPTION qName StringLiteral ;
    public final optionDecl_return optionDecl() throws RecognitionException {
        optionDecl_return retval = new optionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE136=null;
        Token OPTION137=null;
        Token StringLiteral139=null;
        qName_return qName138 = null;


        XQFTTree DECLARE136_tree=null;
        XQFTTree OPTION137_tree=null;
        XQFTTree StringLiteral139_tree=null;

        try {
            // etc/XQFT.g:362:32: ( DECLARE OPTION qName StringLiteral )
            // etc/XQFT.g:362:34: DECLARE OPTION qName StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE136=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_optionDecl2124); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE136_tree = (XQFTTree)adaptor.create(DECLARE136);
            adaptor.addChild(root_0, DECLARE136_tree);
            }
            OPTION137=(Token)input.LT(1);
            match(input,OPTION,FOLLOW_OPTION_in_optionDecl2126); if (failed) return retval;
            if ( backtracking==0 ) {
            OPTION137_tree = (XQFTTree)adaptor.create(OPTION137);
            adaptor.addChild(root_0, OPTION137_tree);
            }
            pushFollow(FOLLOW_qName_in_optionDecl2128);
            qName138=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName138.getTree());
            StringLiteral139=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_optionDecl2130); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral139_tree = (XQFTTree)adaptor.create(StringLiteral139);
            adaptor.addChild(root_0, StringLiteral139_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end optionDecl

    public static class ftOptionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOptionDecl
    // etc/XQFT.g:364:1: ftOptionDecl : DECLARE FTOPTION ftMatchOptions ;
    public final ftOptionDecl_return ftOptionDecl() throws RecognitionException {
        ftOptionDecl_return retval = new ftOptionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE140=null;
        Token FTOPTION141=null;
        ftMatchOptions_return ftMatchOptions142 = null;


        XQFTTree DECLARE140_tree=null;
        XQFTTree FTOPTION141_tree=null;

        try {
            // etc/XQFT.g:364:32: ( DECLARE FTOPTION ftMatchOptions )
            // etc/XQFT.g:364:34: DECLARE FTOPTION ftMatchOptions
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE140=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_ftOptionDecl2156); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE140_tree = (XQFTTree)adaptor.create(DECLARE140);
            adaptor.addChild(root_0, DECLARE140_tree);
            }
            FTOPTION141=(Token)input.LT(1);
            match(input,FTOPTION,FOLLOW_FTOPTION_in_ftOptionDecl2158); if (failed) return retval;
            if ( backtracking==0 ) {
            FTOPTION141_tree = (XQFTTree)adaptor.create(FTOPTION141);
            adaptor.addChild(root_0, FTOPTION141_tree);
            }
            pushFollow(FOLLOW_ftMatchOptions_in_ftOptionDecl2160);
            ftMatchOptions142=ftMatchOptions();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOptions142.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOptionDecl

    public static class ftMatchOptions_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMatchOptions
    // etc/XQFT.g:365:2: ftMatchOptions : ( ftMatchOption )+ ;
    public final ftMatchOptions_return ftMatchOptions() throws RecognitionException {
        ftMatchOptions_return retval = new ftMatchOptions_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftMatchOption_return ftMatchOption143 = null;



        try {
            // etc/XQFT.g:365:33: ( ( ftMatchOption )+ )
            // etc/XQFT.g:365:35: ( ftMatchOption )+
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:365:35: ( ftMatchOption )+
            int cnt26=0;
            loop26:
            do {
                int alt26=2;
                switch ( input.LA(1) ) {
                case WITHOUT:
                    {
                    int LA26_2 = input.LA(2);

                    if ( ((LA26_2>=STEMMING && LA26_2<=STOP)||LA26_2==THESAURUS||LA26_2==WILDCARDS) ) {
                        alt26=1;
                    }


                    }
                    break;
                case CASE:
                    {
                    int LA26_3 = input.LA(2);

                    if ( (LA26_3==INSENSITIVE||LA26_3==SENSITIVE) ) {
                        alt26=1;
                    }


                    }
                    break;
                case DIACRITICS:
                case LANGUAGE:
                case LOWERCASE:
                case OPTION:
                case UPPERCASE:
                case WITH:
                    {
                    alt26=1;
                    }
                    break;

                }

                switch (alt26) {
            	case 1 :
            	    // etc/XQFT.g:365:35: ftMatchOption
            	    {
            	    pushFollow(FOLLOW_ftMatchOption_in_ftMatchOptions2184);
            	    ftMatchOption143=ftMatchOption();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOption143.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt26 >= 1 ) break loop26;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(26, input);
                        throw eee;
                }
                cnt26++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMatchOptions

    public static class sequenceType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sequenceType
    // etc/XQFT.g:371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );
    public final sequenceType_return sequenceType() throws RecognitionException {
        sequenceType_return retval = new sequenceType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token EMPTY_SEQUENCE147=null;
        Token LPARSi148=null;
        Token RPARSi149=null;
        itemType_return itemType144 = null;

        occurrenceIndicator_return occurrenceIndicator145 = null;

        itemType_return itemType146 = null;


        XQFTTree EMPTY_SEQUENCE147_tree=null;
        XQFTTree LPARSi148_tree=null;
        XQFTTree RPARSi149_tree=null;

        try {
            // etc/XQFT.g:371:32: ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi )
            int alt27=3;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                int LA27_1 = input.LA(2);

                if ( (LA27_1==LPARSi) ) {
                    switch ( input.LA(3) ) {
                    case ELEMENT:
                        {
                        int LA27_28 = input.LA(4);

                        if ( (LA27_28==LPARSi) ) {
                            switch ( input.LA(5) ) {
                            case NCName:
                                {
                                switch ( input.LA(6) ) {
                                case COLONSi:
                                    {
                                    int LA27_66 = input.LA(7);

                                    if ( (LA27_66==NCName) ) {
                                        int LA27_73 = input.LA(8);

                                        if ( (LA27_73==COMMASi) ) {
                                            int LA27_67 = input.LA(9);

                                            if ( (LA27_67==NCName) ) {
                                                switch ( input.LA(10) ) {
                                                case COLONSi:
                                                    {
                                                    int LA27_78 = input.LA(11);

                                                    if ( (LA27_78==NCName) ) {
                                                        int LA27_80 = input.LA(12);

                                                        if ( (LA27_80==QUESTIONSi) ) {
                                                            int LA27_79 = input.LA(13);

                                                            if ( (LA27_79==RPARSi) ) {
                                                                int LA27_58 = input.LA(14);

                                                                if ( (LA27_58==RPARSi) ) {
                                                                    int LA27_30 = input.LA(15);

                                                                    if ( (LA27_30==PLUSSi) ) {
                                                                        int LA27_25 = input.LA(16);

                                                                        if ( (synpred1()) ) {
                                                                            alt27=1;
                                                                        }
                                                                        else if ( (true) ) {
                                                                            alt27=2;
                                                                        }
                                                                        else {
                                                                            if (backtracking>0) {failed=true; return retval;}
                                                                            NoViableAltException nvae =
                                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                            throw nvae;
                                                                        }
                                                                    }
                                                                    else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                        alt27=2;
                                                                    }
                                                                    else if ( (LA27_30==STARSi) ) {
                                                                        int LA27_26 = input.LA(16);

                                                                        if ( (synpred1()) ) {
                                                                            alt27=1;
                                                                        }
                                                                        else if ( (true) ) {
                                                                            alt27=2;
                                                                        }
                                                                        else {
                                                                            if (backtracking>0) {failed=true; return retval;}
                                                                            NoViableAltException nvae =
                                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                            throw nvae;
                                                                        }
                                                                    }
                                                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                        alt27=1;
                                                                    }
                                                                    else {
                                                                        if (backtracking>0) {failed=true; return retval;}
                                                                        NoViableAltException nvae =
                                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                        throw nvae;
                                                                    }
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_80==RPARSi) ) {
                                                            int LA27_58 = input.LA(13);

                                                            if ( (LA27_58==RPARSi) ) {
                                                                int LA27_30 = input.LA(14);

                                                                if ( (LA27_30==PLUSSi) ) {
                                                                    int LA27_25 = input.LA(15);

                                                                    if ( (synpred1()) ) {
                                                                        alt27=1;
                                                                    }
                                                                    else if ( (true) ) {
                                                                        alt27=2;
                                                                    }
                                                                    else {
                                                                        if (backtracking>0) {failed=true; return retval;}
                                                                        NoViableAltException nvae =
                                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                        throw nvae;
                                                                    }
                                                                }
                                                                else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                    alt27=2;
                                                                }
                                                                else if ( (LA27_30==STARSi) ) {
                                                                    int LA27_26 = input.LA(15);

                                                                    if ( (synpred1()) ) {
                                                                        alt27=1;
                                                                    }
                                                                    else if ( (true) ) {
                                                                        alt27=2;
                                                                    }
                                                                    else {
                                                                        if (backtracking>0) {failed=true; return retval;}
                                                                        NoViableAltException nvae =
                                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                        throw nvae;
                                                                    }
                                                                }
                                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                    alt27=1;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 80, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 78, input);

                                                        throw nvae;
                                                    }
                                                    }
                                                    break;
                                                case QUESTIONSi:
                                                    {
                                                    int LA27_79 = input.LA(11);

                                                    if ( (LA27_79==RPARSi) ) {
                                                        int LA27_58 = input.LA(12);

                                                        if ( (LA27_58==RPARSi) ) {
                                                            int LA27_30 = input.LA(13);

                                                            if ( (LA27_30==PLUSSi) ) {
                                                                int LA27_25 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                alt27=2;
                                                            }
                                                            else if ( (LA27_30==STARSi) ) {
                                                                int LA27_26 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                alt27=1;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                        throw nvae;
                                                    }
                                                    }
                                                    break;
                                                case RPARSi:
                                                    {
                                                    int LA27_58 = input.LA(11);

                                                    if ( (LA27_58==RPARSi) ) {
                                                        int LA27_30 = input.LA(12);

                                                        if ( (LA27_30==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_30==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                        throw nvae;
                                                    }
                                                    }
                                                    break;
                                                default:
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 74, input);

                                                    throw nvae;
                                                }

                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 67, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_73==RPARSi) ) {
                                            int LA27_58 = input.LA(9);

                                            if ( (LA27_58==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 73, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 66, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMMASi:
                                    {
                                    int LA27_67 = input.LA(7);

                                    if ( (LA27_67==NCName) ) {
                                        switch ( input.LA(8) ) {
                                        case COLONSi:
                                            {
                                            int LA27_78 = input.LA(9);

                                            if ( (LA27_78==NCName) ) {
                                                int LA27_80 = input.LA(10);

                                                if ( (LA27_80==QUESTIONSi) ) {
                                                    int LA27_79 = input.LA(11);

                                                    if ( (LA27_79==RPARSi) ) {
                                                        int LA27_58 = input.LA(12);

                                                        if ( (LA27_58==RPARSi) ) {
                                                            int LA27_30 = input.LA(13);

                                                            if ( (LA27_30==PLUSSi) ) {
                                                                int LA27_25 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                alt27=2;
                                                            }
                                                            else if ( (LA27_30==STARSi) ) {
                                                                int LA27_26 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                alt27=1;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_80==RPARSi) ) {
                                                    int LA27_58 = input.LA(11);

                                                    if ( (LA27_58==RPARSi) ) {
                                                        int LA27_30 = input.LA(12);

                                                        if ( (LA27_30==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_30==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 80, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 78, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case QUESTIONSi:
                                            {
                                            int LA27_79 = input.LA(9);

                                            if ( (LA27_79==RPARSi) ) {
                                                int LA27_58 = input.LA(10);

                                                if ( (LA27_58==RPARSi) ) {
                                                    int LA27_30 = input.LA(11);

                                                    if ( (LA27_30==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_30==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case RPARSi:
                                            {
                                            int LA27_58 = input.LA(9);

                                            if ( (LA27_58==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 74, input);

                                            throw nvae;
                                        }

                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 67, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case RPARSi:
                                    {
                                    int LA27_58 = input.LA(7);

                                    if ( (LA27_58==RPARSi) ) {
                                        int LA27_30 = input.LA(8);

                                        if ( (LA27_30==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_30==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 56, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case STARSi:
                                {
                                int LA27_57 = input.LA(6);

                                if ( (LA27_57==COMMASi) ) {
                                    int LA27_67 = input.LA(7);

                                    if ( (LA27_67==NCName) ) {
                                        switch ( input.LA(8) ) {
                                        case COLONSi:
                                            {
                                            int LA27_78 = input.LA(9);

                                            if ( (LA27_78==NCName) ) {
                                                int LA27_80 = input.LA(10);

                                                if ( (LA27_80==QUESTIONSi) ) {
                                                    int LA27_79 = input.LA(11);

                                                    if ( (LA27_79==RPARSi) ) {
                                                        int LA27_58 = input.LA(12);

                                                        if ( (LA27_58==RPARSi) ) {
                                                            int LA27_30 = input.LA(13);

                                                            if ( (LA27_30==PLUSSi) ) {
                                                                int LA27_25 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                alt27=2;
                                                            }
                                                            else if ( (LA27_30==STARSi) ) {
                                                                int LA27_26 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                alt27=1;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_80==RPARSi) ) {
                                                    int LA27_58 = input.LA(11);

                                                    if ( (LA27_58==RPARSi) ) {
                                                        int LA27_30 = input.LA(12);

                                                        if ( (LA27_30==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_30==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 80, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 78, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case QUESTIONSi:
                                            {
                                            int LA27_79 = input.LA(9);

                                            if ( (LA27_79==RPARSi) ) {
                                                int LA27_58 = input.LA(10);

                                                if ( (LA27_58==RPARSi) ) {
                                                    int LA27_30 = input.LA(11);

                                                    if ( (LA27_30==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_30==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case RPARSi:
                                            {
                                            int LA27_58 = input.LA(9);

                                            if ( (LA27_58==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 74, input);

                                            throw nvae;
                                        }

                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 67, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_57==RPARSi) ) {
                                    int LA27_58 = input.LA(7);

                                    if ( (LA27_58==RPARSi) ) {
                                        int LA27_30 = input.LA(8);

                                        if ( (LA27_30==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_30==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 57, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case RPARSi:
                                {
                                int LA27_58 = input.LA(6);

                                if ( (LA27_58==RPARSi) ) {
                                    int LA27_30 = input.LA(7);

                                    if ( (LA27_30==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_30==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 46, input);

                                throw nvae;
                            }

                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 28, input);

                            throw nvae;
                        }
                        }
                        break;
                    case SCHEMAELEMENT:
                        {
                        int LA27_29 = input.LA(4);

                        if ( (LA27_29==LPARSi) ) {
                            int LA27_47 = input.LA(5);

                            if ( (LA27_47==NCName) ) {
                                int LA27_59 = input.LA(6);

                                if ( (LA27_59==COLONSi) ) {
                                    int LA27_68 = input.LA(7);

                                    if ( (LA27_68==NCName) ) {
                                        int LA27_75 = input.LA(8);

                                        if ( (LA27_75==RPARSi) ) {
                                            int LA27_69 = input.LA(9);

                                            if ( (LA27_69==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 69, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 75, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 68, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_59==RPARSi) ) {
                                    int LA27_69 = input.LA(7);

                                    if ( (LA27_69==RPARSi) ) {
                                        int LA27_30 = input.LA(8);

                                        if ( (LA27_30==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_30==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 69, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 59, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 47, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 29, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RPARSi:
                        {
                        int LA27_30 = input.LA(4);

                        if ( (LA27_30==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_30==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 13, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 1, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA27_2 = input.LA(2);

                if ( (LA27_2==LPARSi) ) {
                    switch ( input.LA(3) ) {
                    case NCName:
                        {
                        switch ( input.LA(4) ) {
                        case COLONSi:
                            {
                            int LA27_48 = input.LA(5);

                            if ( (LA27_48==NCName) ) {
                                int LA27_60 = input.LA(6);

                                if ( (LA27_60==COMMASi) ) {
                                    int LA27_49 = input.LA(7);

                                    if ( (LA27_49==NCName) ) {
                                        switch ( input.LA(8) ) {
                                        case COLONSi:
                                            {
                                            int LA27_70 = input.LA(9);

                                            if ( (LA27_70==NCName) ) {
                                                int LA27_76 = input.LA(10);

                                                if ( (LA27_76==QUESTIONSi) ) {
                                                    int LA27_71 = input.LA(11);

                                                    if ( (LA27_71==RPARSi) ) {
                                                        int LA27_33 = input.LA(12);

                                                        if ( (LA27_33==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_33==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_76==RPARSi) ) {
                                                    int LA27_33 = input.LA(11);

                                                    if ( (LA27_33==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_33==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 76, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 70, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case QUESTIONSi:
                                            {
                                            int LA27_71 = input.LA(9);

                                            if ( (LA27_71==RPARSi) ) {
                                                int LA27_33 = input.LA(10);

                                                if ( (LA27_33==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_33==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case RPARSi:
                                            {
                                            int LA27_33 = input.LA(9);

                                            if ( (LA27_33==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_33==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 61, input);

                                            throw nvae;
                                        }

                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 49, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_60==RPARSi) ) {
                                    int LA27_33 = input.LA(7);

                                    if ( (LA27_33==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_33==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 60, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 48, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMMASi:
                            {
                            int LA27_49 = input.LA(5);

                            if ( (LA27_49==NCName) ) {
                                switch ( input.LA(6) ) {
                                case COLONSi:
                                    {
                                    int LA27_70 = input.LA(7);

                                    if ( (LA27_70==NCName) ) {
                                        int LA27_76 = input.LA(8);

                                        if ( (LA27_76==QUESTIONSi) ) {
                                            int LA27_71 = input.LA(9);

                                            if ( (LA27_71==RPARSi) ) {
                                                int LA27_33 = input.LA(10);

                                                if ( (LA27_33==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_33==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_76==RPARSi) ) {
                                            int LA27_33 = input.LA(9);

                                            if ( (LA27_33==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_33==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 76, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 70, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case QUESTIONSi:
                                    {
                                    int LA27_71 = input.LA(7);

                                    if ( (LA27_71==RPARSi) ) {
                                        int LA27_33 = input.LA(8);

                                        if ( (LA27_33==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_33==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case RPARSi:
                                    {
                                    int LA27_33 = input.LA(7);

                                    if ( (LA27_33==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_33==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 61, input);

                                    throw nvae;
                                }

                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 49, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RPARSi:
                            {
                            int LA27_33 = input.LA(5);

                            if ( (LA27_33==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_33==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 31, input);

                            throw nvae;
                        }

                        }
                        break;
                    case STARSi:
                        {
                        int LA27_32 = input.LA(4);

                        if ( (LA27_32==COMMASi) ) {
                            int LA27_49 = input.LA(5);

                            if ( (LA27_49==NCName) ) {
                                switch ( input.LA(6) ) {
                                case COLONSi:
                                    {
                                    int LA27_70 = input.LA(7);

                                    if ( (LA27_70==NCName) ) {
                                        int LA27_76 = input.LA(8);

                                        if ( (LA27_76==QUESTIONSi) ) {
                                            int LA27_71 = input.LA(9);

                                            if ( (LA27_71==RPARSi) ) {
                                                int LA27_33 = input.LA(10);

                                                if ( (LA27_33==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_33==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_76==RPARSi) ) {
                                            int LA27_33 = input.LA(9);

                                            if ( (LA27_33==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_33==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 76, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 70, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case QUESTIONSi:
                                    {
                                    int LA27_71 = input.LA(7);

                                    if ( (LA27_71==RPARSi) ) {
                                        int LA27_33 = input.LA(8);

                                        if ( (LA27_33==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_33==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case RPARSi:
                                    {
                                    int LA27_33 = input.LA(7);

                                    if ( (LA27_33==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_33==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 61, input);

                                    throw nvae;
                                }

                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 49, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_32==RPARSi) ) {
                            int LA27_33 = input.LA(5);

                            if ( (LA27_33==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_33==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 32, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RPARSi:
                        {
                        int LA27_33 = input.LA(4);

                        if ( (LA27_33==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_33==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 14, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 2, input);

                    throw nvae;
                }
                }
                break;
            case ATTRIBUTE:
                {
                int LA27_3 = input.LA(2);

                if ( (LA27_3==LPARSi) ) {
                    switch ( input.LA(3) ) {
                    case NCName:
                        {
                        switch ( input.LA(4) ) {
                        case COLONSi:
                            {
                            int LA27_50 = input.LA(5);

                            if ( (LA27_50==NCName) ) {
                                int LA27_62 = input.LA(6);

                                if ( (LA27_62==COMMASi) ) {
                                    int LA27_51 = input.LA(7);

                                    if ( (LA27_51==NCName) ) {
                                        int LA27_63 = input.LA(8);

                                        if ( (LA27_63==COLONSi) ) {
                                            int LA27_72 = input.LA(9);

                                            if ( (LA27_72==NCName) ) {
                                                int LA27_77 = input.LA(10);

                                                if ( (LA27_77==RPARSi) ) {
                                                    int LA27_36 = input.LA(11);

                                                    if ( (LA27_36==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_36==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 77, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 72, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_63==RPARSi) ) {
                                            int LA27_36 = input.LA(9);

                                            if ( (LA27_36==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_36==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 63, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 51, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_62==RPARSi) ) {
                                    int LA27_36 = input.LA(7);

                                    if ( (LA27_36==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_36==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 62, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 50, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMMASi:
                            {
                            int LA27_51 = input.LA(5);

                            if ( (LA27_51==NCName) ) {
                                int LA27_63 = input.LA(6);

                                if ( (LA27_63==COLONSi) ) {
                                    int LA27_72 = input.LA(7);

                                    if ( (LA27_72==NCName) ) {
                                        int LA27_77 = input.LA(8);

                                        if ( (LA27_77==RPARSi) ) {
                                            int LA27_36 = input.LA(9);

                                            if ( (LA27_36==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_36==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 77, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 72, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_63==RPARSi) ) {
                                    int LA27_36 = input.LA(7);

                                    if ( (LA27_36==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_36==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 63, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 51, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RPARSi:
                            {
                            int LA27_36 = input.LA(5);

                            if ( (LA27_36==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_36==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 34, input);

                            throw nvae;
                        }

                        }
                        break;
                    case STARSi:
                        {
                        int LA27_35 = input.LA(4);

                        if ( (LA27_35==COMMASi) ) {
                            int LA27_51 = input.LA(5);

                            if ( (LA27_51==NCName) ) {
                                int LA27_63 = input.LA(6);

                                if ( (LA27_63==COLONSi) ) {
                                    int LA27_72 = input.LA(7);

                                    if ( (LA27_72==NCName) ) {
                                        int LA27_77 = input.LA(8);

                                        if ( (LA27_77==RPARSi) ) {
                                            int LA27_36 = input.LA(9);

                                            if ( (LA27_36==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_36==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 77, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 72, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_63==RPARSi) ) {
                                    int LA27_36 = input.LA(7);

                                    if ( (LA27_36==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_36==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 63, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 51, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_35==RPARSi) ) {
                            int LA27_36 = input.LA(5);

                            if ( (LA27_36==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_36==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 35, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RPARSi:
                        {
                        int LA27_36 = input.LA(4);

                        if ( (LA27_36==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_36==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 15, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 3, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMAELEMENT:
                {
                int LA27_4 = input.LA(2);

                if ( (LA27_4==LPARSi) ) {
                    int LA27_16 = input.LA(3);

                    if ( (LA27_16==NCName) ) {
                        int LA27_37 = input.LA(4);

                        if ( (LA27_37==COLONSi) ) {
                            int LA27_52 = input.LA(5);

                            if ( (LA27_52==NCName) ) {
                                int LA27_64 = input.LA(6);

                                if ( (LA27_64==RPARSi) ) {
                                    int LA27_53 = input.LA(7);

                                    if ( (LA27_53==EOF||(LA27_53>=ANCESTOR && LA27_53<=AND)||(LA27_53>=ASCENDING && LA27_53<=ATTRIBUTE)||LA27_53==CASE||(LA27_53>=CHILD && LA27_53<=COMMENT)||(LA27_53>=DEFAULT && LA27_53<=DESCENDING)||(LA27_53>=DIV && LA27_53<=ELSE)||LA27_53==EMPTY||(LA27_53>=EQ && LA27_53<=EVERY)||(LA27_53>=EXCEPT && LA27_53<=FOR)||LA27_53==FTCONTAINS||LA27_53==GE||(LA27_53>=GT && LA27_53<=IF)||LA27_53==IN||(LA27_53>=INSTANCE && LA27_53<=IS)||LA27_53==LE||(LA27_53>=LET && LA27_53<=LEVELS)||(LA27_53>=LT && LA27_53<=MOD)||(LA27_53>=NE && LA27_53<=NODE)||(LA27_53>=OR && LA27_53<=ORDERED)||(LA27_53>=PARAGRAPHS && LA27_53<=PARENT)||(LA27_53>=PRECEDING && LA27_53<=PRECEDING_SIBLING)||LA27_53==PROCESSING_INSTRUCTION||LA27_53==RETURN||LA27_53==SATISFIES||(LA27_53>=SCHEMAATTRIBUTE && LA27_53<=SELF)||LA27_53==SENTENCES||(LA27_53>=SOME && LA27_53<=STABLE)||LA27_53==TEXT||(LA27_53>=TIMES && LA27_53<=TO)||(LA27_53>=TYPESWITCH && LA27_53<=UNORDERED)||LA27_53==VALIDATE||LA27_53==WHERE||LA27_53==WITHOUT||LA27_53==WORDS||(LA27_53>=StringLiteral && LA27_53<=ASSIGNSi)||(LA27_53>=LPARSi && LA27_53<=RBRACSi)||(LA27_53>=MINUSSi && LA27_53<=LPRAGSi)||(LA27_53>=DBLSLASHSi && LA27_53<=SLASHSi)||(LA27_53>=DOTDOTSi && LA27_53<=ATSi)||(LA27_53>=RBRACKSi && LA27_53<=DOTSi)||LA27_53==LCOMMENTSi||LA27_53==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_53==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_53==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_53==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 53, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 64, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 52, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_37==RPARSi) ) {
                            int LA27_53 = input.LA(5);

                            if ( (LA27_53==EOF||(LA27_53>=ANCESTOR && LA27_53<=AND)||(LA27_53>=ASCENDING && LA27_53<=ATTRIBUTE)||LA27_53==CASE||(LA27_53>=CHILD && LA27_53<=COMMENT)||(LA27_53>=DEFAULT && LA27_53<=DESCENDING)||(LA27_53>=DIV && LA27_53<=ELSE)||LA27_53==EMPTY||(LA27_53>=EQ && LA27_53<=EVERY)||(LA27_53>=EXCEPT && LA27_53<=FOR)||LA27_53==FTCONTAINS||LA27_53==GE||(LA27_53>=GT && LA27_53<=IF)||LA27_53==IN||(LA27_53>=INSTANCE && LA27_53<=IS)||LA27_53==LE||(LA27_53>=LET && LA27_53<=LEVELS)||(LA27_53>=LT && LA27_53<=MOD)||(LA27_53>=NE && LA27_53<=NODE)||(LA27_53>=OR && LA27_53<=ORDERED)||(LA27_53>=PARAGRAPHS && LA27_53<=PARENT)||(LA27_53>=PRECEDING && LA27_53<=PRECEDING_SIBLING)||LA27_53==PROCESSING_INSTRUCTION||LA27_53==RETURN||LA27_53==SATISFIES||(LA27_53>=SCHEMAATTRIBUTE && LA27_53<=SELF)||LA27_53==SENTENCES||(LA27_53>=SOME && LA27_53<=STABLE)||LA27_53==TEXT||(LA27_53>=TIMES && LA27_53<=TO)||(LA27_53>=TYPESWITCH && LA27_53<=UNORDERED)||LA27_53==VALIDATE||LA27_53==WHERE||LA27_53==WITHOUT||LA27_53==WORDS||(LA27_53>=StringLiteral && LA27_53<=ASSIGNSi)||(LA27_53>=LPARSi && LA27_53<=RBRACSi)||(LA27_53>=MINUSSi && LA27_53<=LPRAGSi)||(LA27_53>=DBLSLASHSi && LA27_53<=SLASHSi)||(LA27_53>=DOTDOTSi && LA27_53<=ATSi)||(LA27_53>=RBRACKSi && LA27_53<=DOTSi)||LA27_53==LCOMMENTSi||LA27_53==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_53==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_53==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_53==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 53, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 37, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 16, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 4, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMAATTRIBUTE:
                {
                int LA27_5 = input.LA(2);

                if ( (LA27_5==LPARSi) ) {
                    int LA27_17 = input.LA(3);

                    if ( (LA27_17==NCName) ) {
                        int LA27_38 = input.LA(4);

                        if ( (LA27_38==COLONSi) ) {
                            int LA27_54 = input.LA(5);

                            if ( (LA27_54==NCName) ) {
                                int LA27_65 = input.LA(6);

                                if ( (LA27_65==RPARSi) ) {
                                    int LA27_55 = input.LA(7);

                                    if ( (LA27_55==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_55==EOF||(LA27_55>=ANCESTOR && LA27_55<=AND)||(LA27_55>=ASCENDING && LA27_55<=ATTRIBUTE)||LA27_55==CASE||(LA27_55>=CHILD && LA27_55<=COMMENT)||(LA27_55>=DEFAULT && LA27_55<=DESCENDING)||(LA27_55>=DIV && LA27_55<=ELSE)||LA27_55==EMPTY||(LA27_55>=EQ && LA27_55<=EVERY)||(LA27_55>=EXCEPT && LA27_55<=FOR)||LA27_55==FTCONTAINS||LA27_55==GE||(LA27_55>=GT && LA27_55<=IF)||LA27_55==IN||(LA27_55>=INSTANCE && LA27_55<=IS)||LA27_55==LE||(LA27_55>=LET && LA27_55<=LEVELS)||(LA27_55>=LT && LA27_55<=MOD)||(LA27_55>=NE && LA27_55<=NODE)||(LA27_55>=OR && LA27_55<=ORDERED)||(LA27_55>=PARAGRAPHS && LA27_55<=PARENT)||(LA27_55>=PRECEDING && LA27_55<=PRECEDING_SIBLING)||LA27_55==PROCESSING_INSTRUCTION||LA27_55==RETURN||LA27_55==SATISFIES||(LA27_55>=SCHEMAATTRIBUTE && LA27_55<=SELF)||LA27_55==SENTENCES||(LA27_55>=SOME && LA27_55<=STABLE)||LA27_55==TEXT||(LA27_55>=TIMES && LA27_55<=TO)||(LA27_55>=TYPESWITCH && LA27_55<=UNORDERED)||LA27_55==VALIDATE||LA27_55==WHERE||LA27_55==WITHOUT||LA27_55==WORDS||(LA27_55>=StringLiteral && LA27_55<=ASSIGNSi)||(LA27_55>=LPARSi && LA27_55<=RBRACSi)||(LA27_55>=MINUSSi && LA27_55<=LPRAGSi)||(LA27_55>=DBLSLASHSi && LA27_55<=SLASHSi)||(LA27_55>=DOTDOTSi && LA27_55<=ATSi)||(LA27_55>=RBRACKSi && LA27_55<=DOTSi)||LA27_55==LCOMMENTSi||LA27_55==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_55==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_55==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 55, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 65, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 54, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_38==RPARSi) ) {
                            int LA27_55 = input.LA(5);

                            if ( (LA27_55==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_55==EOF||(LA27_55>=ANCESTOR && LA27_55<=AND)||(LA27_55>=ASCENDING && LA27_55<=ATTRIBUTE)||LA27_55==CASE||(LA27_55>=CHILD && LA27_55<=COMMENT)||(LA27_55>=DEFAULT && LA27_55<=DESCENDING)||(LA27_55>=DIV && LA27_55<=ELSE)||LA27_55==EMPTY||(LA27_55>=EQ && LA27_55<=EVERY)||(LA27_55>=EXCEPT && LA27_55<=FOR)||LA27_55==FTCONTAINS||LA27_55==GE||(LA27_55>=GT && LA27_55<=IF)||LA27_55==IN||(LA27_55>=INSTANCE && LA27_55<=IS)||LA27_55==LE||(LA27_55>=LET && LA27_55<=LEVELS)||(LA27_55>=LT && LA27_55<=MOD)||(LA27_55>=NE && LA27_55<=NODE)||(LA27_55>=OR && LA27_55<=ORDERED)||(LA27_55>=PARAGRAPHS && LA27_55<=PARENT)||(LA27_55>=PRECEDING && LA27_55<=PRECEDING_SIBLING)||LA27_55==PROCESSING_INSTRUCTION||LA27_55==RETURN||LA27_55==SATISFIES||(LA27_55>=SCHEMAATTRIBUTE && LA27_55<=SELF)||LA27_55==SENTENCES||(LA27_55>=SOME && LA27_55<=STABLE)||LA27_55==TEXT||(LA27_55>=TIMES && LA27_55<=TO)||(LA27_55>=TYPESWITCH && LA27_55<=UNORDERED)||LA27_55==VALIDATE||LA27_55==WHERE||LA27_55==WITHOUT||LA27_55==WORDS||(LA27_55>=StringLiteral && LA27_55<=ASSIGNSi)||(LA27_55>=LPARSi && LA27_55<=RBRACSi)||(LA27_55>=MINUSSi && LA27_55<=LPRAGSi)||(LA27_55>=DBLSLASHSi && LA27_55<=SLASHSi)||(LA27_55>=DOTDOTSi && LA27_55<=ATSi)||(LA27_55>=RBRACKSi && LA27_55<=DOTSi)||LA27_55==LCOMMENTSi||LA27_55==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_55==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_55==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 55, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 38, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 17, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 5, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA27_6 = input.LA(2);

                if ( (LA27_6==LPARSi) ) {
                    int LA27_18 = input.LA(3);

                    if ( (LA27_18==StringLiteral||LA27_18==NCName) ) {
                        int LA27_39 = input.LA(4);

                        if ( (LA27_39==RPARSi) ) {
                            int LA27_40 = input.LA(5);

                            if ( (LA27_40==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_40==EOF||(LA27_40>=ANCESTOR && LA27_40<=AND)||(LA27_40>=ASCENDING && LA27_40<=ATTRIBUTE)||LA27_40==CASE||(LA27_40>=CHILD && LA27_40<=COMMENT)||(LA27_40>=DEFAULT && LA27_40<=DESCENDING)||(LA27_40>=DIV && LA27_40<=ELSE)||LA27_40==EMPTY||(LA27_40>=EQ && LA27_40<=EVERY)||(LA27_40>=EXCEPT && LA27_40<=FOR)||LA27_40==FTCONTAINS||LA27_40==GE||(LA27_40>=GT && LA27_40<=IF)||LA27_40==IN||(LA27_40>=INSTANCE && LA27_40<=IS)||LA27_40==LE||(LA27_40>=LET && LA27_40<=LEVELS)||(LA27_40>=LT && LA27_40<=MOD)||(LA27_40>=NE && LA27_40<=NODE)||(LA27_40>=OR && LA27_40<=ORDERED)||(LA27_40>=PARAGRAPHS && LA27_40<=PARENT)||(LA27_40>=PRECEDING && LA27_40<=PRECEDING_SIBLING)||LA27_40==PROCESSING_INSTRUCTION||LA27_40==RETURN||LA27_40==SATISFIES||(LA27_40>=SCHEMAATTRIBUTE && LA27_40<=SELF)||LA27_40==SENTENCES||(LA27_40>=SOME && LA27_40<=STABLE)||LA27_40==TEXT||(LA27_40>=TIMES && LA27_40<=TO)||(LA27_40>=TYPESWITCH && LA27_40<=UNORDERED)||LA27_40==VALIDATE||LA27_40==WHERE||LA27_40==WITHOUT||LA27_40==WORDS||(LA27_40>=StringLiteral && LA27_40<=ASSIGNSi)||(LA27_40>=LPARSi && LA27_40<=RBRACSi)||(LA27_40>=MINUSSi && LA27_40<=LPRAGSi)||(LA27_40>=DBLSLASHSi && LA27_40<=SLASHSi)||(LA27_40>=DOTDOTSi && LA27_40<=ATSi)||(LA27_40>=RBRACKSi && LA27_40<=DOTSi)||LA27_40==LCOMMENTSi||LA27_40==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_40==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_40==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 40, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 39, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA27_18==RPARSi) ) {
                        int LA27_40 = input.LA(4);

                        if ( (LA27_40==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_40==EOF||(LA27_40>=ANCESTOR && LA27_40<=AND)||(LA27_40>=ASCENDING && LA27_40<=ATTRIBUTE)||LA27_40==CASE||(LA27_40>=CHILD && LA27_40<=COMMENT)||(LA27_40>=DEFAULT && LA27_40<=DESCENDING)||(LA27_40>=DIV && LA27_40<=ELSE)||LA27_40==EMPTY||(LA27_40>=EQ && LA27_40<=EVERY)||(LA27_40>=EXCEPT && LA27_40<=FOR)||LA27_40==FTCONTAINS||LA27_40==GE||(LA27_40>=GT && LA27_40<=IF)||LA27_40==IN||(LA27_40>=INSTANCE && LA27_40<=IS)||LA27_40==LE||(LA27_40>=LET && LA27_40<=LEVELS)||(LA27_40>=LT && LA27_40<=MOD)||(LA27_40>=NE && LA27_40<=NODE)||(LA27_40>=OR && LA27_40<=ORDERED)||(LA27_40>=PARAGRAPHS && LA27_40<=PARENT)||(LA27_40>=PRECEDING && LA27_40<=PRECEDING_SIBLING)||LA27_40==PROCESSING_INSTRUCTION||LA27_40==RETURN||LA27_40==SATISFIES||(LA27_40>=SCHEMAATTRIBUTE && LA27_40<=SELF)||LA27_40==SENTENCES||(LA27_40>=SOME && LA27_40<=STABLE)||LA27_40==TEXT||(LA27_40>=TIMES && LA27_40<=TO)||(LA27_40>=TYPESWITCH && LA27_40<=UNORDERED)||LA27_40==VALIDATE||LA27_40==WHERE||LA27_40==WITHOUT||LA27_40==WORDS||(LA27_40>=StringLiteral && LA27_40<=ASSIGNSi)||(LA27_40>=LPARSi && LA27_40<=RBRACSi)||(LA27_40>=MINUSSi && LA27_40<=LPRAGSi)||(LA27_40>=DBLSLASHSi && LA27_40<=SLASHSi)||(LA27_40>=DOTDOTSi && LA27_40<=ATSi)||(LA27_40>=RBRACKSi && LA27_40<=DOTSi)||LA27_40==LCOMMENTSi||LA27_40==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_40==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_40==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 40, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 18, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 6, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA27_7 = input.LA(2);

                if ( (LA27_7==LPARSi) ) {
                    int LA27_19 = input.LA(3);

                    if ( (LA27_19==RPARSi) ) {
                        int LA27_41 = input.LA(4);

                        if ( (LA27_41==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_41==EOF||(LA27_41>=ANCESTOR && LA27_41<=AND)||(LA27_41>=ASCENDING && LA27_41<=ATTRIBUTE)||LA27_41==CASE||(LA27_41>=CHILD && LA27_41<=COMMENT)||(LA27_41>=DEFAULT && LA27_41<=DESCENDING)||(LA27_41>=DIV && LA27_41<=ELSE)||LA27_41==EMPTY||(LA27_41>=EQ && LA27_41<=EVERY)||(LA27_41>=EXCEPT && LA27_41<=FOR)||LA27_41==FTCONTAINS||LA27_41==GE||(LA27_41>=GT && LA27_41<=IF)||LA27_41==IN||(LA27_41>=INSTANCE && LA27_41<=IS)||LA27_41==LE||(LA27_41>=LET && LA27_41<=LEVELS)||(LA27_41>=LT && LA27_41<=MOD)||(LA27_41>=NE && LA27_41<=NODE)||(LA27_41>=OR && LA27_41<=ORDERED)||(LA27_41>=PARAGRAPHS && LA27_41<=PARENT)||(LA27_41>=PRECEDING && LA27_41<=PRECEDING_SIBLING)||LA27_41==PROCESSING_INSTRUCTION||LA27_41==RETURN||LA27_41==SATISFIES||(LA27_41>=SCHEMAATTRIBUTE && LA27_41<=SELF)||LA27_41==SENTENCES||(LA27_41>=SOME && LA27_41<=STABLE)||LA27_41==TEXT||(LA27_41>=TIMES && LA27_41<=TO)||(LA27_41>=TYPESWITCH && LA27_41<=UNORDERED)||LA27_41==VALIDATE||LA27_41==WHERE||LA27_41==WITHOUT||LA27_41==WORDS||(LA27_41>=StringLiteral && LA27_41<=ASSIGNSi)||(LA27_41>=LPARSi && LA27_41<=RBRACSi)||(LA27_41>=MINUSSi && LA27_41<=LPRAGSi)||(LA27_41>=DBLSLASHSi && LA27_41<=SLASHSi)||(LA27_41>=DOTDOTSi && LA27_41<=ATSi)||(LA27_41>=RBRACKSi && LA27_41<=DOTSi)||LA27_41==LCOMMENTSi||LA27_41==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_41==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_41==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 41, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 19, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 7, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA27_8 = input.LA(2);

                if ( (LA27_8==LPARSi) ) {
                    int LA27_20 = input.LA(3);

                    if ( (LA27_20==RPARSi) ) {
                        int LA27_42 = input.LA(4);

                        if ( (LA27_42==EOF||(LA27_42>=ANCESTOR && LA27_42<=AND)||(LA27_42>=ASCENDING && LA27_42<=ATTRIBUTE)||LA27_42==CASE||(LA27_42>=CHILD && LA27_42<=COMMENT)||(LA27_42>=DEFAULT && LA27_42<=DESCENDING)||(LA27_42>=DIV && LA27_42<=ELSE)||LA27_42==EMPTY||(LA27_42>=EQ && LA27_42<=EVERY)||(LA27_42>=EXCEPT && LA27_42<=FOR)||LA27_42==FTCONTAINS||LA27_42==GE||(LA27_42>=GT && LA27_42<=IF)||LA27_42==IN||(LA27_42>=INSTANCE && LA27_42<=IS)||LA27_42==LE||(LA27_42>=LET && LA27_42<=LEVELS)||(LA27_42>=LT && LA27_42<=MOD)||(LA27_42>=NE && LA27_42<=NODE)||(LA27_42>=OR && LA27_42<=ORDERED)||(LA27_42>=PARAGRAPHS && LA27_42<=PARENT)||(LA27_42>=PRECEDING && LA27_42<=PRECEDING_SIBLING)||LA27_42==PROCESSING_INSTRUCTION||LA27_42==RETURN||LA27_42==SATISFIES||(LA27_42>=SCHEMAATTRIBUTE && LA27_42<=SELF)||LA27_42==SENTENCES||(LA27_42>=SOME && LA27_42<=STABLE)||LA27_42==TEXT||(LA27_42>=TIMES && LA27_42<=TO)||(LA27_42>=TYPESWITCH && LA27_42<=UNORDERED)||LA27_42==VALIDATE||LA27_42==WHERE||LA27_42==WITHOUT||LA27_42==WORDS||(LA27_42>=StringLiteral && LA27_42<=ASSIGNSi)||(LA27_42>=LPARSi && LA27_42<=RBRACSi)||(LA27_42>=MINUSSi && LA27_42<=LPRAGSi)||(LA27_42>=DBLSLASHSi && LA27_42<=SLASHSi)||(LA27_42>=DOTDOTSi && LA27_42<=ATSi)||(LA27_42>=RBRACKSi && LA27_42<=DOTSi)||LA27_42==LCOMMENTSi||LA27_42==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_42==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_42==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_42==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 42, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 20, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 8, input);

                    throw nvae;
                }
                }
                break;
            case NODE:
                {
                int LA27_9 = input.LA(2);

                if ( (LA27_9==LPARSi) ) {
                    int LA27_21 = input.LA(3);

                    if ( (LA27_21==RPARSi) ) {
                        int LA27_43 = input.LA(4);

                        if ( (LA27_43==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_43==EOF||(LA27_43>=ANCESTOR && LA27_43<=AND)||(LA27_43>=ASCENDING && LA27_43<=ATTRIBUTE)||LA27_43==CASE||(LA27_43>=CHILD && LA27_43<=COMMENT)||(LA27_43>=DEFAULT && LA27_43<=DESCENDING)||(LA27_43>=DIV && LA27_43<=ELSE)||LA27_43==EMPTY||(LA27_43>=EQ && LA27_43<=EVERY)||(LA27_43>=EXCEPT && LA27_43<=FOR)||LA27_43==FTCONTAINS||LA27_43==GE||(LA27_43>=GT && LA27_43<=IF)||LA27_43==IN||(LA27_43>=INSTANCE && LA27_43<=IS)||LA27_43==LE||(LA27_43>=LET && LA27_43<=LEVELS)||(LA27_43>=LT && LA27_43<=MOD)||(LA27_43>=NE && LA27_43<=NODE)||(LA27_43>=OR && LA27_43<=ORDERED)||(LA27_43>=PARAGRAPHS && LA27_43<=PARENT)||(LA27_43>=PRECEDING && LA27_43<=PRECEDING_SIBLING)||LA27_43==PROCESSING_INSTRUCTION||LA27_43==RETURN||LA27_43==SATISFIES||(LA27_43>=SCHEMAATTRIBUTE && LA27_43<=SELF)||LA27_43==SENTENCES||(LA27_43>=SOME && LA27_43<=STABLE)||LA27_43==TEXT||(LA27_43>=TIMES && LA27_43<=TO)||(LA27_43>=TYPESWITCH && LA27_43<=UNORDERED)||LA27_43==VALIDATE||LA27_43==WHERE||LA27_43==WITHOUT||LA27_43==WORDS||(LA27_43>=StringLiteral && LA27_43<=ASSIGNSi)||(LA27_43>=LPARSi && LA27_43<=RBRACSi)||(LA27_43>=MINUSSi && LA27_43<=LPRAGSi)||(LA27_43>=DBLSLASHSi && LA27_43<=SLASHSi)||(LA27_43>=DOTDOTSi && LA27_43<=ATSi)||(LA27_43>=RBRACKSi && LA27_43<=DOTSi)||LA27_43==LCOMMENTSi||LA27_43==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_43==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_43==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 43, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 21, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 9, input);

                    throw nvae;
                }
                }
                break;
            case ITEM:
                {
                int LA27_10 = input.LA(2);

                if ( (LA27_10==LPARSi) ) {
                    int LA27_22 = input.LA(3);

                    if ( (LA27_22==RPARSi) ) {
                        int LA27_44 = input.LA(4);

                        if ( (LA27_44==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_44==EOF||(LA27_44>=ANCESTOR && LA27_44<=AND)||(LA27_44>=ASCENDING && LA27_44<=ATTRIBUTE)||LA27_44==CASE||(LA27_44>=CHILD && LA27_44<=COMMENT)||(LA27_44>=DEFAULT && LA27_44<=DESCENDING)||(LA27_44>=DIV && LA27_44<=ELSE)||LA27_44==EMPTY||(LA27_44>=EQ && LA27_44<=EVERY)||(LA27_44>=EXCEPT && LA27_44<=FOR)||LA27_44==FTCONTAINS||LA27_44==GE||(LA27_44>=GT && LA27_44<=IF)||LA27_44==IN||(LA27_44>=INSTANCE && LA27_44<=IS)||LA27_44==LE||(LA27_44>=LET && LA27_44<=LEVELS)||(LA27_44>=LT && LA27_44<=MOD)||(LA27_44>=NE && LA27_44<=NODE)||(LA27_44>=OR && LA27_44<=ORDERED)||(LA27_44>=PARAGRAPHS && LA27_44<=PARENT)||(LA27_44>=PRECEDING && LA27_44<=PRECEDING_SIBLING)||LA27_44==PROCESSING_INSTRUCTION||LA27_44==RETURN||LA27_44==SATISFIES||(LA27_44>=SCHEMAATTRIBUTE && LA27_44<=SELF)||LA27_44==SENTENCES||(LA27_44>=SOME && LA27_44<=STABLE)||LA27_44==TEXT||(LA27_44>=TIMES && LA27_44<=TO)||(LA27_44>=TYPESWITCH && LA27_44<=UNORDERED)||LA27_44==VALIDATE||LA27_44==WHERE||LA27_44==WITHOUT||LA27_44==WORDS||(LA27_44>=StringLiteral && LA27_44<=ASSIGNSi)||(LA27_44>=LPARSi && LA27_44<=RBRACSi)||(LA27_44>=MINUSSi && LA27_44<=LPRAGSi)||(LA27_44>=DBLSLASHSi && LA27_44<=SLASHSi)||(LA27_44>=DOTDOTSi && LA27_44<=ATSi)||(LA27_44>=RBRACKSi && LA27_44<=DOTSi)||LA27_44==LCOMMENTSi||LA27_44==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_44==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_44==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 44, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 22, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 10, input);

                    throw nvae;
                }
                }
                break;
            case NCName:
                {
                int LA27_11 = input.LA(2);

                if ( (LA27_11==COLONSi) ) {
                    int LA27_23 = input.LA(3);

                    if ( (LA27_23==NCName) ) {
                        int LA27_45 = input.LA(4);

                        if ( (LA27_45==EOF||(LA27_45>=ANCESTOR && LA27_45<=AND)||(LA27_45>=ASCENDING && LA27_45<=ATTRIBUTE)||LA27_45==CASE||(LA27_45>=CHILD && LA27_45<=COMMENT)||(LA27_45>=DEFAULT && LA27_45<=DESCENDING)||(LA27_45>=DIV && LA27_45<=ELSE)||LA27_45==EMPTY||(LA27_45>=EQ && LA27_45<=EVERY)||(LA27_45>=EXCEPT && LA27_45<=FOR)||LA27_45==FTCONTAINS||LA27_45==GE||(LA27_45>=GT && LA27_45<=IF)||LA27_45==IN||(LA27_45>=INSTANCE && LA27_45<=IS)||LA27_45==LE||(LA27_45>=LET && LA27_45<=LEVELS)||(LA27_45>=LT && LA27_45<=MOD)||(LA27_45>=NE && LA27_45<=NODE)||(LA27_45>=OR && LA27_45<=ORDERED)||(LA27_45>=PARAGRAPHS && LA27_45<=PARENT)||(LA27_45>=PRECEDING && LA27_45<=PRECEDING_SIBLING)||LA27_45==PROCESSING_INSTRUCTION||LA27_45==RETURN||LA27_45==SATISFIES||(LA27_45>=SCHEMAATTRIBUTE && LA27_45<=SELF)||LA27_45==SENTENCES||(LA27_45>=SOME && LA27_45<=STABLE)||LA27_45==TEXT||(LA27_45>=TIMES && LA27_45<=TO)||(LA27_45>=TYPESWITCH && LA27_45<=UNORDERED)||LA27_45==VALIDATE||LA27_45==WHERE||LA27_45==WITHOUT||LA27_45==WORDS||(LA27_45>=StringLiteral && LA27_45<=ASSIGNSi)||(LA27_45>=LPARSi && LA27_45<=RBRACSi)||(LA27_45>=MINUSSi && LA27_45<=LPRAGSi)||(LA27_45>=DBLSLASHSi && LA27_45<=SLASHSi)||(LA27_45>=DOTDOTSi && LA27_45<=ATSi)||(LA27_45>=RBRACKSi && LA27_45<=DOTSi)||LA27_45==LCOMMENTSi||LA27_45==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_45==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_45==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_45==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 45, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 23, input);

                        throw nvae;
                    }
                }
                else if ( (LA27_11==EOF||(LA27_11>=ANCESTOR && LA27_11<=AND)||(LA27_11>=ASCENDING && LA27_11<=ATTRIBUTE)||LA27_11==CASE||(LA27_11>=CHILD && LA27_11<=COMMENT)||(LA27_11>=DEFAULT && LA27_11<=DESCENDING)||(LA27_11>=DIV && LA27_11<=ELSE)||LA27_11==EMPTY||(LA27_11>=EQ && LA27_11<=EVERY)||(LA27_11>=EXCEPT && LA27_11<=FOR)||LA27_11==FTCONTAINS||LA27_11==GE||(LA27_11>=GT && LA27_11<=IF)||LA27_11==IN||(LA27_11>=INSTANCE && LA27_11<=IS)||LA27_11==LE||(LA27_11>=LET && LA27_11<=LEVELS)||(LA27_11>=LT && LA27_11<=MOD)||(LA27_11>=NE && LA27_11<=NODE)||(LA27_11>=OR && LA27_11<=ORDERED)||(LA27_11>=PARAGRAPHS && LA27_11<=PARENT)||(LA27_11>=PRECEDING && LA27_11<=PRECEDING_SIBLING)||LA27_11==PROCESSING_INSTRUCTION||LA27_11==RETURN||LA27_11==SATISFIES||(LA27_11>=SCHEMAATTRIBUTE && LA27_11<=SELF)||LA27_11==SENTENCES||(LA27_11>=SOME && LA27_11<=STABLE)||LA27_11==TEXT||(LA27_11>=TIMES && LA27_11<=TO)||(LA27_11>=TYPESWITCH && LA27_11<=UNORDERED)||LA27_11==VALIDATE||LA27_11==WHERE||LA27_11==WITHOUT||LA27_11==WORDS||(LA27_11>=StringLiteral && LA27_11<=ASSIGNSi)||(LA27_11>=LPARSi && LA27_11<=RBRACSi)||(LA27_11>=MINUSSi && LA27_11<=LPRAGSi)||(LA27_11>=DBLSLASHSi && LA27_11<=SLASHSi)||(LA27_11>=DOTDOTSi && LA27_11<=ATSi)||(LA27_11>=RBRACKSi && LA27_11<=DOTSi)||LA27_11==LCOMMENTSi||LA27_11==LPISi) ) {
                    alt27=2;
                }
                else if ( (LA27_11==PLUSSi) ) {
                    int LA27_25 = input.LA(3);

                    if ( (synpred1()) ) {
                        alt27=1;
                    }
                    else if ( (true) ) {
                        alt27=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                        throw nvae;
                    }
                }
                else if ( (LA27_11==STARSi) ) {
                    int LA27_26 = input.LA(3);

                    if ( (synpred1()) ) {
                        alt27=1;
                    }
                    else if ( (true) ) {
                        alt27=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                        throw nvae;
                    }
                }
                else if ( (LA27_11==QUESTIONSi) && (synpred1())) {
                    alt27=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 11, input);

                    throw nvae;
                }
                }
                break;
            case EMPTY_SEQUENCE:
                {
                alt27=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("371:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 0, input);

                throw nvae;
            }

            switch (alt27) {
                case 1 :
                    // etc/XQFT.g:371:34: ( itemType occurrenceIndicator )=> itemType occurrenceIndicator
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_itemType_in_sequenceType2236);
                    itemType144=itemType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, itemType144.getTree());
                    pushFollow(FOLLOW_occurrenceIndicator_in_sequenceType2238);
                    occurrenceIndicator145=occurrenceIndicator();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, occurrenceIndicator145.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:372:13: itemType
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_itemType_in_sequenceType2252);
                    itemType146=itemType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, itemType146.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:373:13: EMPTY_SEQUENCE LPARSi RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    EMPTY_SEQUENCE147=(Token)input.LT(1);
                    match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_sequenceType2266); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EMPTY_SEQUENCE147_tree = (XQFTTree)adaptor.create(EMPTY_SEQUENCE147);
                    adaptor.addChild(root_0, EMPTY_SEQUENCE147_tree);
                    }
                    LPARSi148=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_sequenceType2268); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi148_tree = (XQFTTree)adaptor.create(LPARSi148);
                    adaptor.addChild(root_0, LPARSi148_tree);
                    }
                    RPARSi149=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_sequenceType2270); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi149_tree = (XQFTTree)adaptor.create(RPARSi149);
                    adaptor.addChild(root_0, RPARSi149_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end sequenceType

    public static class itemType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start itemType
    // etc/XQFT.g:375:2: itemType : ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType ) ;
    public final itemType_return itemType() throws RecognitionException {
        itemType_return retval = new itemType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ITEM151=null;
        Token LPARSi152=null;
        Token RPARSi153=null;
        kindTest_return kindTest150 = null;

        atomicType_return atomicType154 = null;


        XQFTTree ITEM151_tree=null;
        XQFTTree LPARSi152_tree=null;
        XQFTTree RPARSi153_tree=null;

        try {
            // etc/XQFT.g:375:33: ( ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType ) )
            // etc/XQFT.g:375:35: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:375:35: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )
            int alt28=3;
            switch ( input.LA(1) ) {
            case ATTRIBUTE:
            case COMMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case NODE:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case TEXT:
                {
                alt28=1;
                }
                break;
            case ITEM:
                {
                alt28=2;
                }
                break;
            case NCName:
                {
                alt28=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("375:35: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 0, input);

                throw nvae;
            }

            switch (alt28) {
                case 1 :
                    // etc/XQFT.g:375:36: kindTest
                    {
                    pushFollow(FOLLOW_kindTest_in_itemType2312);
                    kindTest150=kindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, kindTest150.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:375:47: ( ITEM LPARSi RPARSi )
                    {
                    // etc/XQFT.g:375:47: ( ITEM LPARSi RPARSi )
                    // etc/XQFT.g:375:48: ITEM LPARSi RPARSi
                    {
                    ITEM151=(Token)input.LT(1);
                    match(input,ITEM,FOLLOW_ITEM_in_itemType2317); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ITEM151_tree = (XQFTTree)adaptor.create(ITEM151);
                    adaptor.addChild(root_0, ITEM151_tree);
                    }
                    LPARSi152=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_itemType2319); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi152_tree = (XQFTTree)adaptor.create(LPARSi152);
                    adaptor.addChild(root_0, LPARSi152_tree);
                    }
                    RPARSi153=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_itemType2321); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi153_tree = (XQFTTree)adaptor.create(RPARSi153);
                    adaptor.addChild(root_0, RPARSi153_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:375:70: atomicType
                    {
                    pushFollow(FOLLOW_atomicType_in_itemType2326);
                    atomicType154=atomicType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, atomicType154.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end itemType

    public static class kindTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kindTest
    // etc/XQFT.g:376:3: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest );
    public final kindTest_return kindTest() throws RecognitionException {
        kindTest_return retval = new kindTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        documentTest_return documentTest155 = null;

        elementTest_return elementTest156 = null;

        attributeTest_return attributeTest157 = null;

        schemaElementTest_return schemaElementTest158 = null;

        schemaAttributeTest_return schemaAttributeTest159 = null;

        piTest_return piTest160 = null;

        commentTest_return commentTest161 = null;

        textTest_return textTest162 = null;

        anyKindTest_return anyKindTest163 = null;



        try {
            // etc/XQFT.g:376:34: ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest )
            int alt29=9;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                alt29=1;
                }
                break;
            case ELEMENT:
                {
                alt29=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt29=3;
                }
                break;
            case SCHEMAELEMENT:
                {
                alt29=4;
                }
                break;
            case SCHEMAATTRIBUTE:
                {
                alt29=5;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt29=6;
                }
                break;
            case COMMENT:
                {
                alt29=7;
                }
                break;
            case TEXT:
                {
                alt29=8;
                }
                break;
            case NODE:
                {
                alt29=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("376:3: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest );", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // etc/XQFT.g:376:36: documentTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_documentTest_in_kindTest2358);
                    documentTest155=documentTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, documentTest155.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:377:39: elementTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_elementTest_in_kindTest2398);
                    elementTest156=elementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementTest156.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:378:39: attributeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_attributeTest_in_kindTest2438);
                    attributeTest157=attributeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attributeTest157.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:379:39: schemaElementTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaElementTest_in_kindTest2478);
                    schemaElementTest158=schemaElementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaElementTest158.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:380:39: schemaAttributeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaAttributeTest_in_kindTest2518);
                    schemaAttributeTest159=schemaAttributeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaAttributeTest159.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:381:39: piTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_piTest_in_kindTest2558);
                    piTest160=piTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, piTest160.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:382:39: commentTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_commentTest_in_kindTest2598);
                    commentTest161=commentTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, commentTest161.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:383:39: textTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_textTest_in_kindTest2638);
                    textTest162=textTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, textTest162.getTree());

                    }
                    break;
                case 9 :
                    // etc/XQFT.g:384:39: anyKindTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_anyKindTest_in_kindTest2678);
                    anyKindTest163=anyKindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, anyKindTest163.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end kindTest

    public static class documentTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start documentTest
    // etc/XQFT.g:385:4: documentTest : DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi ;
    public final documentTest_return documentTest() throws RecognitionException {
        documentTest_return retval = new documentTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOCUMENT_NODE164=null;
        Token LPARSi165=null;
        Token RPARSi168=null;
        elementTest_return elementTest166 = null;

        schemaElementTest_return schemaElementTest167 = null;


        XQFTTree DOCUMENT_NODE164_tree=null;
        XQFTTree LPARSi165_tree=null;
        XQFTTree RPARSi168_tree=null;

        try {
            // etc/XQFT.g:385:35: ( DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi )
            // etc/XQFT.g:385:37: DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOCUMENT_NODE164=(Token)input.LT(1);
            match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_documentTest2706); if (failed) return retval;
            if ( backtracking==0 ) {
            DOCUMENT_NODE164_tree = (XQFTTree)adaptor.create(DOCUMENT_NODE164);
            adaptor.addChild(root_0, DOCUMENT_NODE164_tree);
            }
            LPARSi165=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_documentTest2708); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi165_tree = (XQFTTree)adaptor.create(LPARSi165);
            adaptor.addChild(root_0, LPARSi165_tree);
            }
            // etc/XQFT.g:385:58: ( elementTest | schemaElementTest )?
            int alt30=3;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ELEMENT) ) {
                alt30=1;
            }
            else if ( (LA30_0==SCHEMAELEMENT) ) {
                alt30=2;
            }
            switch (alt30) {
                case 1 :
                    // etc/XQFT.g:385:59: elementTest
                    {
                    pushFollow(FOLLOW_elementTest_in_documentTest2711);
                    elementTest166=elementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementTest166.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:385:73: schemaElementTest
                    {
                    pushFollow(FOLLOW_schemaElementTest_in_documentTest2715);
                    schemaElementTest167=schemaElementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaElementTest167.getTree());

                    }
                    break;

            }

            RPARSi168=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_documentTest2719); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi168_tree = (XQFTTree)adaptor.create(RPARSi168);
            adaptor.addChild(root_0, RPARSi168_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end documentTest

    public static class elementTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementTest
    // etc/XQFT.g:386:5: elementTest : ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi ;
    public final elementTest_return elementTest() throws RecognitionException {
        elementTest_return retval = new elementTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ELEMENT169=null;
        Token LPARSi170=null;
        Token COMMASi172=null;
        Token QUESTIONSi174=null;
        Token RPARSi175=null;
        elementNameOrWildcard_return elementNameOrWildcard171 = null;

        typeName_return typeName173 = null;


        XQFTTree ELEMENT169_tree=null;
        XQFTTree LPARSi170_tree=null;
        XQFTTree COMMASi172_tree=null;
        XQFTTree QUESTIONSi174_tree=null;
        XQFTTree RPARSi175_tree=null;

        try {
            // etc/XQFT.g:386:34: ( ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi )
            // etc/XQFT.g:386:36: ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ELEMENT169=(Token)input.LT(1);
            match(input,ELEMENT,FOLLOW_ELEMENT_in_elementTest2747); if (failed) return retval;
            if ( backtracking==0 ) {
            ELEMENT169_tree = (XQFTTree)adaptor.create(ELEMENT169);
            adaptor.addChild(root_0, ELEMENT169_tree);
            }
            LPARSi170=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_elementTest2749); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi170_tree = (XQFTTree)adaptor.create(LPARSi170);
            adaptor.addChild(root_0, LPARSi170_tree);
            }
            // etc/XQFT.g:386:51: ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==NCName||LA33_0==STARSi) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // etc/XQFT.g:386:52: elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )?
                    {
                    pushFollow(FOLLOW_elementNameOrWildcard_in_elementTest2752);
                    elementNameOrWildcard171=elementNameOrWildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementNameOrWildcard171.getTree());
                    // etc/XQFT.g:386:74: ( COMMASi typeName ( QUESTIONSi )? )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==COMMASi) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // etc/XQFT.g:386:75: COMMASi typeName ( QUESTIONSi )?
                            {
                            COMMASi172=(Token)input.LT(1);
                            match(input,COMMASi,FOLLOW_COMMASi_in_elementTest2755); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMASi172_tree = (XQFTTree)adaptor.create(COMMASi172);
                            adaptor.addChild(root_0, COMMASi172_tree);
                            }
                            pushFollow(FOLLOW_typeName_in_elementTest2757);
                            typeName173=typeName();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, typeName173.getTree());
                            // etc/XQFT.g:386:92: ( QUESTIONSi )?
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==QUESTIONSi) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    // etc/XQFT.g:386:92: QUESTIONSi
                                    {
                                    QUESTIONSi174=(Token)input.LT(1);
                                    match(input,QUESTIONSi,FOLLOW_QUESTIONSi_in_elementTest2759); if (failed) return retval;
                                    if ( backtracking==0 ) {
                                    QUESTIONSi174_tree = (XQFTTree)adaptor.create(QUESTIONSi174);
                                    adaptor.addChild(root_0, QUESTIONSi174_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            RPARSi175=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_elementTest2766); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi175_tree = (XQFTTree)adaptor.create(RPARSi175);
            adaptor.addChild(root_0, RPARSi175_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementTest

    public static class elementNameOrWildcard_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementNameOrWildcard
    // etc/XQFT.g:387:6: elementNameOrWildcard : ( elementName | STARSi );
    public final elementNameOrWildcard_return elementNameOrWildcard() throws RecognitionException {
        elementNameOrWildcard_return retval = new elementNameOrWildcard_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STARSi177=null;
        elementName_return elementName176 = null;


        XQFTTree STARSi177_tree=null;

        try {
            // etc/XQFT.g:387:37: ( elementName | STARSi )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==NCName) ) {
                alt34=1;
            }
            else if ( (LA34_0==STARSi) ) {
                alt34=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("387:6: elementNameOrWildcard : ( elementName | STARSi );", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // etc/XQFT.g:387:39: elementName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_elementName_in_elementNameOrWildcard2823);
                    elementName176=elementName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementName176.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:387:53: STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi177=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_elementNameOrWildcard2827); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi177_tree = (XQFTTree)adaptor.create(STARSi177);
                    adaptor.addChild(root_0, STARSi177_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementNameOrWildcard

    public static class elementName_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementName
    // etc/XQFT.g:388:7: elementName : qName ;
    public final elementName_return elementName() throws RecognitionException {
        elementName_return retval = new elementName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName178 = null;



        try {
            // etc/XQFT.g:388:38: ( qName )
            // etc/XQFT.g:388:40: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_elementName2859);
            qName178=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName178.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementName

    public static class typeName_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeName
    // etc/XQFT.g:389:6: typeName : qName ;
    public final typeName_return typeName() throws RecognitionException {
        typeName_return retval = new typeName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName179 = null;



        try {
            // etc/XQFT.g:389:37: ( qName )
            // etc/XQFT.g:389:39: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_typeName2893);
            qName179=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName179.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeName

    public static class schemaElementTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaElementTest
    // etc/XQFT.g:390:5: schemaElementTest : SCHEMAELEMENT LPARSi elementDeclaration RPARSi ;
    public final schemaElementTest_return schemaElementTest() throws RecognitionException {
        schemaElementTest_return retval = new schemaElementTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCHEMAELEMENT180=null;
        Token LPARSi181=null;
        Token RPARSi183=null;
        elementDeclaration_return elementDeclaration182 = null;


        XQFTTree SCHEMAELEMENT180_tree=null;
        XQFTTree LPARSi181_tree=null;
        XQFTTree RPARSi183_tree=null;

        try {
            // etc/XQFT.g:390:37: ( SCHEMAELEMENT LPARSi elementDeclaration RPARSi )
            // etc/XQFT.g:390:39: SCHEMAELEMENT LPARSi elementDeclaration RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCHEMAELEMENT180=(Token)input.LT(1);
            match(input,SCHEMAELEMENT,FOLLOW_SCHEMAELEMENT_in_schemaElementTest2918); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMAELEMENT180_tree = (XQFTTree)adaptor.create(SCHEMAELEMENT180);
            adaptor.addChild(root_0, SCHEMAELEMENT180_tree);
            }
            LPARSi181=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_schemaElementTest2920); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi181_tree = (XQFTTree)adaptor.create(LPARSi181);
            adaptor.addChild(root_0, LPARSi181_tree);
            }
            pushFollow(FOLLOW_elementDeclaration_in_schemaElementTest2922);
            elementDeclaration182=elementDeclaration();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, elementDeclaration182.getTree());
            RPARSi183=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_schemaElementTest2924); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi183_tree = (XQFTTree)adaptor.create(RPARSi183);
            adaptor.addChild(root_0, RPARSi183_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaElementTest

    public static class elementDeclaration_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementDeclaration
    // etc/XQFT.g:391:6: elementDeclaration : elementName ;
    public final elementDeclaration_return elementDeclaration() throws RecognitionException {
        elementDeclaration_return retval = new elementDeclaration_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        elementName_return elementName184 = null;



        try {
            // etc/XQFT.g:391:37: ( elementName )
            // etc/XQFT.g:391:39: elementName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_elementName_in_elementDeclaration2948);
            elementName184=elementName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, elementName184.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementDeclaration

    public static class attributeTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeTest
    // etc/XQFT.g:397:4: attributeTest : ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi ;
    public final attributeTest_return attributeTest() throws RecognitionException {
        attributeTest_return retval = new attributeTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ATTRIBUTE185=null;
        Token LPARSi186=null;
        Token COMMASi188=null;
        Token RPARSi190=null;
        attribNameOrWildcard_return attribNameOrWildcard187 = null;

        typeName_return typeName189 = null;


        XQFTTree ATTRIBUTE185_tree=null;
        XQFTTree LPARSi186_tree=null;
        XQFTTree COMMASi188_tree=null;
        XQFTTree RPARSi190_tree=null;

        try {
            // etc/XQFT.g:397:35: ( ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi )
            // etc/XQFT.g:397:37: ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ATTRIBUTE185=(Token)input.LT(1);
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attributeTest2980); if (failed) return retval;
            if ( backtracking==0 ) {
            ATTRIBUTE185_tree = (XQFTTree)adaptor.create(ATTRIBUTE185);
            adaptor.addChild(root_0, ATTRIBUTE185_tree);
            }
            LPARSi186=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_attributeTest2982); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi186_tree = (XQFTTree)adaptor.create(LPARSi186);
            adaptor.addChild(root_0, LPARSi186_tree);
            }
            // etc/XQFT.g:397:54: ( attribNameOrWildcard ( COMMASi typeName )? )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==NCName||LA36_0==STARSi) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // etc/XQFT.g:397:55: attribNameOrWildcard ( COMMASi typeName )?
                    {
                    pushFollow(FOLLOW_attribNameOrWildcard_in_attributeTest2985);
                    attribNameOrWildcard187=attribNameOrWildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attribNameOrWildcard187.getTree());
                    // etc/XQFT.g:397:76: ( COMMASi typeName )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==COMMASi) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // etc/XQFT.g:397:77: COMMASi typeName
                            {
                            COMMASi188=(Token)input.LT(1);
                            match(input,COMMASi,FOLLOW_COMMASi_in_attributeTest2988); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMASi188_tree = (XQFTTree)adaptor.create(COMMASi188);
                            adaptor.addChild(root_0, COMMASi188_tree);
                            }
                            pushFollow(FOLLOW_typeName_in_attributeTest2990);
                            typeName189=typeName();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, typeName189.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPARSi190=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_attributeTest2996); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi190_tree = (XQFTTree)adaptor.create(RPARSi190);
            adaptor.addChild(root_0, RPARSi190_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeTest

    public static class attribNameOrWildcard_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attribNameOrWildcard
    // etc/XQFT.g:398:5: attribNameOrWildcard : ( attributeName | STARSi );
    public final attribNameOrWildcard_return attribNameOrWildcard() throws RecognitionException {
        attribNameOrWildcard_return retval = new attribNameOrWildcard_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STARSi192=null;
        attributeName_return attributeName191 = null;


        XQFTTree STARSi192_tree=null;

        try {
            // etc/XQFT.g:398:36: ( attributeName | STARSi )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==NCName) ) {
                alt37=1;
            }
            else if ( (LA37_0==STARSi) ) {
                alt37=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("398:5: attribNameOrWildcard : ( attributeName | STARSi );", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // etc/XQFT.g:398:38: attributeName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_attributeName_in_attribNameOrWildcard3017);
                    attributeName191=attributeName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attributeName191.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:398:54: STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi192=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_attribNameOrWildcard3021); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi192_tree = (XQFTTree)adaptor.create(STARSi192);
                    adaptor.addChild(root_0, STARSi192_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attribNameOrWildcard

    public static class attributeName_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeName
    // etc/XQFT.g:399:6: attributeName : qName ;
    public final attributeName_return attributeName() throws RecognitionException {
        attributeName_return retval = new attributeName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName193 = null;



        try {
            // etc/XQFT.g:399:37: ( qName )
            // etc/XQFT.g:399:39: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_attributeName3050);
            qName193=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName193.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeName

    public static class schemaAttributeTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaAttributeTest
    // etc/XQFT.g:404:4: schemaAttributeTest : SCHEMAATTRIBUTE LPARSi attributeDeclaration RPARSi ;
    public final schemaAttributeTest_return schemaAttributeTest() throws RecognitionException {
        schemaAttributeTest_return retval = new schemaAttributeTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCHEMAATTRIBUTE194=null;
        Token LPARSi195=null;
        Token RPARSi197=null;
        attributeDeclaration_return attributeDeclaration196 = null;


        XQFTTree SCHEMAATTRIBUTE194_tree=null;
        XQFTTree LPARSi195_tree=null;
        XQFTTree RPARSi197_tree=null;

        try {
            // etc/XQFT.g:404:35: ( SCHEMAATTRIBUTE LPARSi attributeDeclaration RPARSi )
            // etc/XQFT.g:404:37: SCHEMAATTRIBUTE LPARSi attributeDeclaration RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCHEMAATTRIBUTE194=(Token)input.LT(1);
            match(input,SCHEMAATTRIBUTE,FOLLOW_SCHEMAATTRIBUTE_in_schemaAttributeTest3075); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMAATTRIBUTE194_tree = (XQFTTree)adaptor.create(SCHEMAATTRIBUTE194);
            adaptor.addChild(root_0, SCHEMAATTRIBUTE194_tree);
            }
            LPARSi195=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_schemaAttributeTest3077); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi195_tree = (XQFTTree)adaptor.create(LPARSi195);
            adaptor.addChild(root_0, LPARSi195_tree);
            }
            pushFollow(FOLLOW_attributeDeclaration_in_schemaAttributeTest3079);
            attributeDeclaration196=attributeDeclaration();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, attributeDeclaration196.getTree());
            RPARSi197=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_schemaAttributeTest3081); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi197_tree = (XQFTTree)adaptor.create(RPARSi197);
            adaptor.addChild(root_0, RPARSi197_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaAttributeTest

    public static class attributeDeclaration_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeDeclaration
    // etc/XQFT.g:405:5: attributeDeclaration : attributeName ;
    public final attributeDeclaration_return attributeDeclaration() throws RecognitionException {
        attributeDeclaration_return retval = new attributeDeclaration_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        attributeName_return attributeName198 = null;



        try {
            // etc/XQFT.g:405:36: ( attributeName )
            // etc/XQFT.g:405:38: attributeName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_attributeName_in_attributeDeclaration3102);
            attributeName198=attributeName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, attributeName198.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeDeclaration

    public static class piTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start piTest
    // etc/XQFT.g:407:4: piTest : PROCESSING_INSTRUCTION LPARSi ( NCName | StringLiteral )? RPARSi ;
    public final piTest_return piTest() throws RecognitionException {
        piTest_return retval = new piTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token PROCESSING_INSTRUCTION199=null;
        Token LPARSi200=null;
        Token set201=null;
        Token RPARSi202=null;

        XQFTTree PROCESSING_INSTRUCTION199_tree=null;
        XQFTTree LPARSi200_tree=null;
        XQFTTree set201_tree=null;
        XQFTTree RPARSi202_tree=null;

        try {
            // etc/XQFT.g:407:35: ( PROCESSING_INSTRUCTION LPARSi ( NCName | StringLiteral )? RPARSi )
            // etc/XQFT.g:407:37: PROCESSING_INSTRUCTION LPARSi ( NCName | StringLiteral )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            PROCESSING_INSTRUCTION199=(Token)input.LT(1);
            match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_piTest3137); if (failed) return retval;
            if ( backtracking==0 ) {
            PROCESSING_INSTRUCTION199_tree = (XQFTTree)adaptor.create(PROCESSING_INSTRUCTION199);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION199_tree);
            }
            LPARSi200=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_piTest3139); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi200_tree = (XQFTTree)adaptor.create(LPARSi200);
            adaptor.addChild(root_0, LPARSi200_tree);
            }
            // etc/XQFT.g:407:67: ( NCName | StringLiteral )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==StringLiteral||LA38_0==NCName) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // etc/XQFT.g:
                    {
                    set201=(Token)input.LT(1);
                    if ( input.LA(1)==StringLiteral||input.LA(1)==NCName ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set201));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_piTest3141);    throw mse;
                    }


                    }
                    break;

            }

            RPARSi202=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_piTest3150); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi202_tree = (XQFTTree)adaptor.create(RPARSi202);
            adaptor.addChild(root_0, RPARSi202_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end piTest

    public static class commentTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start commentTest
    // etc/XQFT.g:408:4: commentTest : COMMENT LPARSi RPARSi ;
    public final commentTest_return commentTest() throws RecognitionException {
        commentTest_return retval = new commentTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMENT203=null;
        Token LPARSi204=null;
        Token RPARSi205=null;

        XQFTTree COMMENT203_tree=null;
        XQFTTree LPARSi204_tree=null;
        XQFTTree RPARSi205_tree=null;

        try {
            // etc/XQFT.g:408:35: ( COMMENT LPARSi RPARSi )
            // etc/XQFT.g:408:37: COMMENT LPARSi RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            COMMENT203=(Token)input.LT(1);
            match(input,COMMENT,FOLLOW_COMMENT_in_commentTest3179); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMENT203_tree = (XQFTTree)adaptor.create(COMMENT203);
            adaptor.addChild(root_0, COMMENT203_tree);
            }
            LPARSi204=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_commentTest3181); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi204_tree = (XQFTTree)adaptor.create(LPARSi204);
            adaptor.addChild(root_0, LPARSi204_tree);
            }
            RPARSi205=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_commentTest3183); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi205_tree = (XQFTTree)adaptor.create(RPARSi205);
            adaptor.addChild(root_0, RPARSi205_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end commentTest

    public static class textTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start textTest
    // etc/XQFT.g:409:4: textTest : TEXT LPARSi RPARSi ;
    public final textTest_return textTest() throws RecognitionException {
        textTest_return retval = new textTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TEXT206=null;
        Token LPARSi207=null;
        Token RPARSi208=null;

        XQFTTree TEXT206_tree=null;
        XQFTTree LPARSi207_tree=null;
        XQFTTree RPARSi208_tree=null;

        try {
            // etc/XQFT.g:409:35: ( TEXT LPARSi RPARSi )
            // etc/XQFT.g:409:37: TEXT LPARSi RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            TEXT206=(Token)input.LT(1);
            match(input,TEXT,FOLLOW_TEXT_in_textTest3215); if (failed) return retval;
            if ( backtracking==0 ) {
            TEXT206_tree = (XQFTTree)adaptor.create(TEXT206);
            adaptor.addChild(root_0, TEXT206_tree);
            }
            LPARSi207=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_textTest3217); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi207_tree = (XQFTTree)adaptor.create(LPARSi207);
            adaptor.addChild(root_0, LPARSi207_tree);
            }
            RPARSi208=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_textTest3219); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi208_tree = (XQFTTree)adaptor.create(RPARSi208);
            adaptor.addChild(root_0, RPARSi208_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end textTest

    public static class anyKindTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start anyKindTest
    // etc/XQFT.g:410:4: anyKindTest : NODE LPARSi RPARSi ;
    public final anyKindTest_return anyKindTest() throws RecognitionException {
        anyKindTest_return retval = new anyKindTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NODE209=null;
        Token LPARSi210=null;
        Token RPARSi211=null;

        XQFTTree NODE209_tree=null;
        XQFTTree LPARSi210_tree=null;
        XQFTTree RPARSi211_tree=null;

        try {
            // etc/XQFT.g:410:35: ( NODE LPARSi RPARSi )
            // etc/XQFT.g:410:37: NODE LPARSi RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            NODE209=(Token)input.LT(1);
            match(input,NODE,FOLLOW_NODE_in_anyKindTest3248); if (failed) return retval;
            if ( backtracking==0 ) {
            NODE209_tree = (XQFTTree)adaptor.create(NODE209);
            adaptor.addChild(root_0, NODE209_tree);
            }
            LPARSi210=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_anyKindTest3250); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi210_tree = (XQFTTree)adaptor.create(LPARSi210);
            adaptor.addChild(root_0, LPARSi210_tree);
            }
            RPARSi211=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_anyKindTest3252); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi211_tree = (XQFTTree)adaptor.create(RPARSi211);
            adaptor.addChild(root_0, RPARSi211_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end anyKindTest

    public static class occurrenceIndicator_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start occurrenceIndicator
    // etc/XQFT.g:411:2: occurrenceIndicator : ( QUESTIONSi | STARSi | PLUSSi );
    public final occurrenceIndicator_return occurrenceIndicator() throws RecognitionException {
        occurrenceIndicator_return retval = new occurrenceIndicator_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set212=null;

        XQFTTree set212_tree=null;

        try {
            // etc/XQFT.g:411:33: ( QUESTIONSi | STARSi | PLUSSi )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set212=(Token)input.LT(1);
            if ( (input.LA(1)>=QUESTIONSi && input.LA(1)<=PLUSSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set212));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_occurrenceIndicator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end occurrenceIndicator

    public static class exprSingle_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exprSingle
    // etc/XQFT.g:415:1: exprSingle : ( fLWORExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr );
    public final exprSingle_return exprSingle() throws RecognitionException {
        exprSingle_return retval = new exprSingle_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        fLWORExpr_return fLWORExpr213 = null;

        quantifiedExpr_return quantifiedExpr214 = null;

        typeswitchExpr_return typeswitchExpr215 = null;

        ifExpr_return ifExpr216 = null;

        orExpr_return orExpr217 = null;



        try {
            // etc/XQFT.g:415:32: ( fLWORExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr )
            int alt39=5;
            switch ( input.LA(1) ) {
            case FOR:
            case LET:
                {
                alt39=1;
                }
                break;
            case EVERY:
            case SOME:
                {
                alt39=2;
                }
                break;
            case TYPESWITCH:
                {
                alt39=3;
                }
                break;
            case IF:
                {
                alt39=4;
                }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case ATTRIBUTE:
            case CHILD:
            case COMMENT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case NODE:
            case ORDERED:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case SELF:
            case TEXT:
            case UNORDERED:
            case VALIDATE:
            case StringLiteral:
            case NCName:
            case DOLLARSi:
            case LPARSi:
            case STARSi:
            case PLUSSi:
            case MINUSSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case LPRAGSi:
            case DBLSLASHSi:
            case SLASHSi:
            case DOTDOTSi:
            case ATSi:
            case DOTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt39=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("415:1: exprSingle : ( fLWORExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr );", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // etc/XQFT.g:415:34: fLWORExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_fLWORExpr_in_exprSingle3312);
                    fLWORExpr213=fLWORExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, fLWORExpr213.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:416:37: quantifiedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_quantifiedExpr_in_exprSingle3350);
                    quantifiedExpr214=quantifiedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, quantifiedExpr214.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:417:37: typeswitchExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_typeswitchExpr_in_exprSingle3388);
                    typeswitchExpr215=typeswitchExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeswitchExpr215.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:418:37: ifExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ifExpr_in_exprSingle3426);
                    ifExpr216=ifExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ifExpr216.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:419:37: orExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_orExpr_in_exprSingle3464);
                    orExpr217=orExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orExpr217.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end exprSingle

    public static class fLWORExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fLWORExpr
    // etc/XQFT.g:421:2: fLWORExpr : (fc+= forClause | lc+= letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle -> ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle ) ;
    public final fLWORExpr_return fLWORExpr() throws RecognitionException {
        fLWORExpr_return retval = new fLWORExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token RETURN220=null;
        List list_fc=null;
        List list_lc=null;
        whereClause_return whereClause218 = null;

        orderByClause_return orderByClause219 = null;

        exprSingle_return exprSingle221 = null;

        RuleReturnScope fc = null;
        RuleReturnScope lc = null;
        XQFTTree RETURN220_tree=null;
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_letClause=new RewriteRuleSubtreeStream(adaptor,"rule letClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_forClause=new RewriteRuleSubtreeStream(adaptor,"rule forClause");
        try {
            // etc/XQFT.g:421:33: ( (fc+= forClause | lc+= letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle -> ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle ) )
            // etc/XQFT.g:421:35: (fc+= forClause | lc+= letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle
            {
            // etc/XQFT.g:421:35: (fc+= forClause | lc+= letClause )+
            int cnt40=0;
            loop40:
            do {
                int alt40=3;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==FOR) ) {
                    alt40=1;
                }
                else if ( (LA40_0==LET) ) {
                    alt40=2;
                }


                switch (alt40) {
            	case 1 :
            	    // etc/XQFT.g:421:36: fc+= forClause
            	    {
            	    pushFollow(FOLLOW_forClause_in_fLWORExpr3531);
            	    fc=forClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_forClause.add(fc.getTree());
            	    if (list_fc==null) list_fc=new ArrayList();
            	    list_fc.add(fc);


            	    }
            	    break;
            	case 2 :
            	    // etc/XQFT.g:421:52: lc+= letClause
            	    {
            	    pushFollow(FOLLOW_letClause_in_fLWORExpr3537);
            	    lc=letClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_letClause.add(lc.getTree());
            	    if (list_lc==null) list_lc=new ArrayList();
            	    list_lc.add(lc);


            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);

            // etc/XQFT.g:421:68: ( whereClause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==WHERE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // etc/XQFT.g:421:68: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_fLWORExpr3541);
                    whereClause218=whereClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_whereClause.add(whereClause218.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:421:81: ( orderByClause )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ORDER||LA42_0==STABLE) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // etc/XQFT.g:421:81: orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_fLWORExpr3544);
                    orderByClause219=orderByClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_orderByClause.add(orderByClause219.getTree());

                    }
                    break;

            }

            RETURN220=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_fLWORExpr3547); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN220);

            pushFollow(FOLLOW_exprSingle_in_fLWORExpr3549);
            exprSingle221=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle221.getTree());

            // AST REWRITE
            // elements: orderByClause, whereClause, fc, lc, exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: lc, fc
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_lc=new RewriteRuleSubtreeStream(adaptor,"token lc",list_lc);
            RewriteRuleSubtreeStream stream_fc=new RewriteRuleSubtreeStream(adaptor,"token fc",list_fc);
            root_0 = (XQFTTree)adaptor.nil();
            // 422:49: -> ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle )
            {
                // etc/XQFT.g:422:52: ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FLWOR, "AST_FLWOR"), root_1);

                // etc/XQFT.g:422:64: ( $fc)*
                while ( stream_fc.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_fc.next()).getTree());

                }
                stream_fc.reset();
                // etc/XQFT.g:422:69: ( $lc)*
                while ( stream_lc.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_lc.next()).getTree());

                }
                stream_lc.reset();
                // etc/XQFT.g:422:74: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.next());

                }
                stream_whereClause.reset();
                // etc/XQFT.g:422:87: ( orderByClause )?
                if ( stream_orderByClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByClause.next());

                }
                stream_orderByClause.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end fLWORExpr

    public static class forClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forClause
    // etc/XQFT.g:424:3: forClause : FOR forClauseTupletDef ( COMMASi forClauseTupletDef )* -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ ) ;
    public final forClause_return forClause() throws RecognitionException {
        forClause_return retval = new forClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FOR222=null;
        Token COMMASi224=null;
        forClauseTupletDef_return forClauseTupletDef223 = null;

        forClauseTupletDef_return forClauseTupletDef225 = null;


        XQFTTree FOR222_tree=null;
        XQFTTree COMMASi224_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_forClauseTupletDef=new RewriteRuleSubtreeStream(adaptor,"rule forClauseTupletDef");
        try {
            // etc/XQFT.g:424:34: ( FOR forClauseTupletDef ( COMMASi forClauseTupletDef )* -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ ) )
            // etc/XQFT.g:424:36: FOR forClauseTupletDef ( COMMASi forClauseTupletDef )*
            {
            FOR222=(Token)input.LT(1);
            match(input,FOR,FOLLOW_FOR_in_forClause3651); if (failed) return retval;
            if ( backtracking==0 ) stream_FOR.add(FOR222);

            pushFollow(FOLLOW_forClauseTupletDef_in_forClause3653);
            forClauseTupletDef223=forClauseTupletDef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_forClauseTupletDef.add(forClauseTupletDef223.getTree());
            // etc/XQFT.g:424:59: ( COMMASi forClauseTupletDef )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==COMMASi) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // etc/XQFT.g:424:60: COMMASi forClauseTupletDef
            	    {
            	    COMMASi224=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_forClause3656); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi224);

            	    pushFollow(FOLLOW_forClauseTupletDef_in_forClause3658);
            	    forClauseTupletDef225=forClauseTupletDef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_forClauseTupletDef.add(forClauseTupletDef225.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            // AST REWRITE
            // elements: forClauseTupletDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 425:53: -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ )
            {
                // etc/XQFT.g:425:56: ^( AST_FORCLAUSE ( forClauseTupletDef )+ )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FORCLAUSE, "AST_FORCLAUSE"), root_1);

                if ( !(stream_forClauseTupletDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_forClauseTupletDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_forClauseTupletDef.next());

                }
                stream_forClauseTupletDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forClause

    public static class forClauseTupletDef_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forClauseTupletDef
    // etc/XQFT.g:426:13: forClauseTupletDef : DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle ;
    public final forClauseTupletDef_return forClauseTupletDef() throws RecognitionException {
        forClauseTupletDef_return retval = new forClauseTupletDef_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi226=null;
        Token IN231=null;
        varName_return varName227 = null;

        typeDeclaration_return typeDeclaration228 = null;

        positionalVar_return positionalVar229 = null;

        ftScoreVar_return ftScoreVar230 = null;

        exprSingle_return exprSingle232 = null;


        XQFTTree DOLLARSi226_tree=null;
        XQFTTree IN231_tree=null;

        try {
            // etc/XQFT.g:426:49: ( DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle )
            // etc/XQFT.g:426:51: DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOLLARSi226=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_forClauseTupletDef3757); if (failed) return retval;
            pushFollow(FOLLOW_varName_in_forClauseTupletDef3760);
            varName227=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName227.getTree());
            // etc/XQFT.g:426:69: ( typeDeclaration )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==AS) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // etc/XQFT.g:426:69: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_forClauseTupletDef3762);
                    typeDeclaration228=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration228.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:426:86: ( positionalVar )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==AT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // etc/XQFT.g:426:86: positionalVar
                    {
                    pushFollow(FOLLOW_positionalVar_in_forClauseTupletDef3765);
                    positionalVar229=positionalVar();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, positionalVar229.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:426:101: ( ftScoreVar )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SCORE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // etc/XQFT.g:426:101: ftScoreVar
                    {
                    pushFollow(FOLLOW_ftScoreVar_in_forClauseTupletDef3768);
                    ftScoreVar230=ftScoreVar();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftScoreVar230.getTree());

                    }
                    break;

            }

            IN231=(Token)input.LT(1);
            match(input,IN,FOLLOW_IN_in_forClauseTupletDef3771); if (failed) return retval;
            pushFollow(FOLLOW_exprSingle_in_forClauseTupletDef3774);
            exprSingle232=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle232.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forClauseTupletDef

    public static class varName_return extends ParserRuleReturnScope {
        public String name;
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varName
    // etc/XQFT.g:428:4: varName returns [String name] : qn= qName ;
    public final varName_return varName() throws RecognitionException {
        varName_return retval = new varName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qn = null;



        try {
            // etc/XQFT.g:428:43: (qn= qName )
            // etc/XQFT.g:428:45: qn= qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_varName3800);
            qn=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            if ( backtracking==0 ) {
              retval.name = qn.text;
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varName

    public static class positionalVar_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start positionalVar
    // etc/XQFT.g:431:4: positionalVar : AT DOLLARSi varName ;
    public final positionalVar_return positionalVar() throws RecognitionException {
        positionalVar_return retval = new positionalVar_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT233=null;
        Token DOLLARSi234=null;
        varName_return varName235 = null;


        XQFTTree AT233_tree=null;
        XQFTTree DOLLARSi234_tree=null;

        try {
            // etc/XQFT.g:431:35: ( AT DOLLARSi varName )
            // etc/XQFT.g:431:37: AT DOLLARSi varName
            {
            root_0 = (XQFTTree)adaptor.nil();

            AT233=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_positionalVar3831); if (failed) return retval;
            if ( backtracking==0 ) {
            AT233_tree = (XQFTTree)adaptor.create(AT233);
            adaptor.addChild(root_0, AT233_tree);
            }
            DOLLARSi234=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_positionalVar3833); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi234_tree = (XQFTTree)adaptor.create(DOLLARSi234);
            adaptor.addChild(root_0, DOLLARSi234_tree);
            }
            pushFollow(FOLLOW_varName_in_positionalVar3835);
            varName235=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName235.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end positionalVar

    public static class ftScoreVar_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftScoreVar
    // etc/XQFT.g:433:4: ftScoreVar : SCORE DOLLARSi varName ;
    public final ftScoreVar_return ftScoreVar() throws RecognitionException {
        ftScoreVar_return retval = new ftScoreVar_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCORE236=null;
        Token DOLLARSi237=null;
        varName_return varName238 = null;


        XQFTTree SCORE236_tree=null;
        XQFTTree DOLLARSi237_tree=null;

        try {
            // etc/XQFT.g:433:35: ( SCORE DOLLARSi varName )
            // etc/XQFT.g:433:37: SCORE DOLLARSi varName
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCORE236=(Token)input.LT(1);
            match(input,SCORE,FOLLOW_SCORE_in_ftScoreVar3866); if (failed) return retval;
            if ( backtracking==0 ) {
            SCORE236_tree = (XQFTTree)adaptor.create(SCORE236);
            adaptor.addChild(root_0, SCORE236_tree);
            }
            DOLLARSi237=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_ftScoreVar3868); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi237_tree = (XQFTTree)adaptor.create(DOLLARSi237);
            adaptor.addChild(root_0, DOLLARSi237_tree);
            }
            pushFollow(FOLLOW_varName_in_ftScoreVar3870);
            varName238=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName238.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftScoreVar

    public static class letClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start letClause
    // etc/XQFT.g:437:3: letClause : LET varBinding ( COMMASi varBinding )* -> ^( AST_LETCLAUSE ( varBinding )+ ) ;
    public final letClause_return letClause() throws RecognitionException {
        letClause_return retval = new letClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LET239=null;
        Token COMMASi241=null;
        varBinding_return varBinding240 = null;

        varBinding_return varBinding242 = null;


        XQFTTree LET239_tree=null;
        XQFTTree COMMASi241_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_LET=new RewriteRuleTokenStream(adaptor,"token LET");
        RewriteRuleSubtreeStream stream_varBinding=new RewriteRuleSubtreeStream(adaptor,"rule varBinding");
        try {
            // etc/XQFT.g:437:39: ( LET varBinding ( COMMASi varBinding )* -> ^( AST_LETCLAUSE ( varBinding )+ ) )
            // etc/XQFT.g:437:41: LET varBinding ( COMMASi varBinding )*
            {
            LET239=(Token)input.LT(1);
            match(input,LET,FOLLOW_LET_in_letClause3920); if (failed) return retval;
            if ( backtracking==0 ) stream_LET.add(LET239);

            pushFollow(FOLLOW_varBinding_in_letClause3922);
            varBinding240=varBinding();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_varBinding.add(varBinding240.getTree());
            // etc/XQFT.g:437:56: ( COMMASi varBinding )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMASi) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // etc/XQFT.g:437:57: COMMASi varBinding
            	    {
            	    COMMASi241=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_letClause3925); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi241);

            	    pushFollow(FOLLOW_varBinding_in_letClause3927);
            	    varBinding242=varBinding();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_varBinding.add(varBinding242.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            // AST REWRITE
            // elements: varBinding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 438:53: -> ^( AST_LETCLAUSE ( varBinding )+ )
            {
                // etc/XQFT.g:438:56: ^( AST_LETCLAUSE ( varBinding )+ )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_LETCLAUSE, "AST_LETCLAUSE"), root_1);

                if ( !(stream_varBinding.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_varBinding.hasNext() ) {
                    adaptor.addChild(root_1, stream_varBinding.next());

                }
                stream_varBinding.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end letClause

    public static class varBinding_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varBinding
    // etc/XQFT.g:439:3: varBinding : ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle -> ( SCORE )? $v ( typeDeclaration )? exprSingle ;
    public final varBinding_return varBinding() throws RecognitionException {
        varBinding_return retval = new varBinding_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi243=null;
        Token SCORE245=null;
        Token DOLLARSi246=null;
        Token ASSIGNSi247=null;
        varName_return v = null;

        typeDeclaration_return typeDeclaration244 = null;

        exprSingle_return exprSingle248 = null;


        XQFTTree DOLLARSi243_tree=null;
        XQFTTree SCORE245_tree=null;
        XQFTTree DOLLARSi246_tree=null;
        XQFTTree ASSIGNSi247_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_ASSIGNSi=new RewriteRuleTokenStream(adaptor,"token ASSIGNSi");
        RewriteRuleTokenStream stream_SCORE=new RewriteRuleTokenStream(adaptor,"token SCORE");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // etc/XQFT.g:439:14: ( ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle -> ( SCORE )? $v ( typeDeclaration )? exprSingle )
            // etc/XQFT.g:440:4: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle
            {
            // etc/XQFT.g:440:4: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==DOLLARSi) ) {
                alt49=1;
            }
            else if ( (LA49_0==SCORE) ) {
                alt49=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("440:4: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName )", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // etc/XQFT.g:440:5: DOLLARSi v= varName ( typeDeclaration )?
                    {
                    DOLLARSi243=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varBinding4003); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi243);

                    pushFollow(FOLLOW_varName_in_varBinding4007);
                    v=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(v.getTree());
                    // etc/XQFT.g:440:24: ( typeDeclaration )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==AS) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // etc/XQFT.g:440:24: typeDeclaration
                            {
                            pushFollow(FOLLOW_typeDeclaration_in_varBinding4009);
                            typeDeclaration244=typeDeclaration();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_typeDeclaration.add(typeDeclaration244.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:440:43: SCORE DOLLARSi v= varName
                    {
                    SCORE245=(Token)input.LT(1);
                    match(input,SCORE,FOLLOW_SCORE_in_varBinding4014); if (failed) return retval;
                    if ( backtracking==0 ) stream_SCORE.add(SCORE245);

                    DOLLARSi246=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varBinding4016); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi246);

                    pushFollow(FOLLOW_varName_in_varBinding4020);
                    v=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(v.getTree());

                    }
                    break;

            }

            ASSIGNSi247=(Token)input.LT(1);
            match(input,ASSIGNSi,FOLLOW_ASSIGNSi_in_varBinding4036); if (failed) return retval;
            if ( backtracking==0 ) stream_ASSIGNSi.add(ASSIGNSi247);

            pushFollow(FOLLOW_exprSingle_in_varBinding4038);
            exprSingle248=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle248.getTree());

            // AST REWRITE
<<<<<<< .mine
            // elements: exprSingle, v, typeDeclaration, SCORE
=======
            // elements: exprSingle, typeDeclaration, SCORE, v
>>>>>>> .r234
            // token labels: 
            // rule labels: retval, v
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",v!=null?v.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 442:13: -> ( SCORE )? $v ( typeDeclaration )? exprSingle
            {
                // etc/XQFT.g:442:16: ( SCORE )?
                if ( stream_SCORE.hasNext() ) {
                    adaptor.addChild(root_0, stream_SCORE.next());

                }
                stream_SCORE.reset();
                adaptor.addChild(root_0, stream_v.next());
                // etc/XQFT.g:442:26: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeDeclaration.next());

                }
                stream_typeDeclaration.reset();
                adaptor.addChild(root_0, stream_exprSingle.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varBinding

    public static class whereClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whereClause
    // etc/XQFT.g:452:3: whereClause : WHERE exprSingle -> ^( AST_WHERECLAUSE exprSingle ) ;
    public final whereClause_return whereClause() throws RecognitionException {
        whereClause_return retval = new whereClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WHERE249=null;
        exprSingle_return exprSingle250 = null;


        XQFTTree WHERE249_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:452:33: ( WHERE exprSingle -> ^( AST_WHERECLAUSE exprSingle ) )
            // etc/XQFT.g:452:35: WHERE exprSingle
            {
            WHERE249=(Token)input.LT(1);
            match(input,WHERE,FOLLOW_WHERE_in_whereClause4101); if (failed) return retval;
            if ( backtracking==0 ) stream_WHERE.add(WHERE249);

            pushFollow(FOLLOW_exprSingle_in_whereClause4103);
            exprSingle250=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle250.getTree());

            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 453:49: -> ^( AST_WHERECLAUSE exprSingle )
            {
                // etc/XQFT.g:453:52: ^( AST_WHERECLAUSE exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_WHERECLAUSE, "AST_WHERECLAUSE"), root_1);

                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end whereClause

    public static class orderByClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderByClause
    // etc/XQFT.g:456:3: orderByClause : ( ORDER BY | STABLE ORDER BY ) orderSpecList -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList ) ;
    public final orderByClause_return orderByClause() throws RecognitionException {
        orderByClause_return retval = new orderByClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDER251=null;
        Token BY252=null;
        Token STABLE253=null;
        Token ORDER254=null;
        Token BY255=null;
        orderSpecList_return orderSpecList256 = null;


        XQFTTree ORDER251_tree=null;
        XQFTTree BY252_tree=null;
        XQFTTree STABLE253_tree=null;
        XQFTTree ORDER254_tree=null;
        XQFTTree BY255_tree=null;
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_STABLE=new RewriteRuleTokenStream(adaptor,"token STABLE");
        RewriteRuleSubtreeStream stream_orderSpecList=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecList");
        try {
            // etc/XQFT.g:456:33: ( ( ORDER BY | STABLE ORDER BY ) orderSpecList -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList ) )
            // etc/XQFT.g:456:35: ( ORDER BY | STABLE ORDER BY ) orderSpecList
            {
            // etc/XQFT.g:456:35: ( ORDER BY | STABLE ORDER BY )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ORDER) ) {
                alt50=1;
            }
            else if ( (LA50_0==STABLE) ) {
                alt50=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("456:35: ( ORDER BY | STABLE ORDER BY )", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // etc/XQFT.g:456:36: ORDER BY
                    {
                    ORDER251=(Token)input.LT(1);
                    match(input,ORDER,FOLLOW_ORDER_in_orderByClause4190); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDER.add(ORDER251);

                    BY252=(Token)input.LT(1);
                    match(input,BY,FOLLOW_BY_in_orderByClause4192); if (failed) return retval;
                    if ( backtracking==0 ) stream_BY.add(BY252);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:456:47: STABLE ORDER BY
                    {
                    STABLE253=(Token)input.LT(1);
                    match(input,STABLE,FOLLOW_STABLE_in_orderByClause4196); if (failed) return retval;
                    if ( backtracking==0 ) stream_STABLE.add(STABLE253);

                    ORDER254=(Token)input.LT(1);
                    match(input,ORDER,FOLLOW_ORDER_in_orderByClause4198); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDER.add(ORDER254);

                    BY255=(Token)input.LT(1);
                    match(input,BY,FOLLOW_BY_in_orderByClause4200); if (failed) return retval;
                    if ( backtracking==0 ) stream_BY.add(BY255);


                    }
                    break;

            }

            pushFollow(FOLLOW_orderSpecList_in_orderByClause4203);
            orderSpecList256=orderSpecList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_orderSpecList.add(orderSpecList256.getTree());

            // AST REWRITE
            // elements: orderSpecList, STABLE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 457:53: -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList )
            {
                // etc/XQFT.g:457:56: ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_ORDERBYCLAUSE, "AST_ORDERBYCLAUSE"), root_1);

                // etc/XQFT.g:457:76: ( STABLE )?
                if ( stream_STABLE.hasNext() ) {
                    adaptor.addChild(root_1, stream_STABLE.next());

                }
                stream_STABLE.reset();
                adaptor.addChild(root_1, stream_orderSpecList.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderByClause

    public static class orderSpecList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderSpecList
    // etc/XQFT.g:459:4: orderSpecList : orderSpec ( COMMASi orderSpec )* -> ( orderSpec )+ ;
    public final orderSpecList_return orderSpecList() throws RecognitionException {
        orderSpecList_return retval = new orderSpecList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMASi258=null;
        orderSpec_return orderSpec257 = null;

        orderSpec_return orderSpec259 = null;


        XQFTTree COMMASi258_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_orderSpec=new RewriteRuleSubtreeStream(adaptor,"rule orderSpec");
        try {
            // etc/XQFT.g:459:34: ( orderSpec ( COMMASi orderSpec )* -> ( orderSpec )+ )
            // etc/XQFT.g:459:36: orderSpec ( COMMASi orderSpec )*
            {
            pushFollow(FOLLOW_orderSpec_in_orderSpecList4293);
            orderSpec257=orderSpec();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_orderSpec.add(orderSpec257.getTree());
            // etc/XQFT.g:459:46: ( COMMASi orderSpec )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==COMMASi) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // etc/XQFT.g:459:47: COMMASi orderSpec
            	    {
            	    COMMASi258=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_orderSpecList4296); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi258);

            	    pushFollow(FOLLOW_orderSpec_in_orderSpecList4298);
            	    orderSpec259=orderSpec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_orderSpec.add(orderSpec259.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            // AST REWRITE
            // elements: orderSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 460:53: -> ( orderSpec )+
            {
                if ( !(stream_orderSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderSpec.hasNext() ) {
                    adaptor.addChild(root_0, stream_orderSpec.next());

                }
                stream_orderSpec.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderSpecList

    public static class orderSpec_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderSpec
    // etc/XQFT.g:462:5: orderSpec : exprSingle orderModifier ;
    public final orderSpec_return orderSpec() throws RecognitionException {
        orderSpec_return retval = new orderSpec_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        exprSingle_return exprSingle260 = null;

        orderModifier_return orderModifier261 = null;



        try {
            // etc/XQFT.g:462:35: ( exprSingle orderModifier )
            // etc/XQFT.g:462:37: exprSingle orderModifier
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_orderSpec4389);
            exprSingle260=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle260.getTree());
            pushFollow(FOLLOW_orderModifier_in_orderSpec4391);
            orderModifier261=orderModifier();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, orderModifier261.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderSpec

    public static class orderModifier_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderModifier
    // etc/XQFT.g:464:6: orderModifier : ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? ;
    public final orderModifier_return orderModifier() throws RecognitionException {
        orderModifier_return retval = new orderModifier_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set262=null;
        Token EMPTY263=null;
        Token set264=null;
        Token COLLATION265=null;
        uriLiteral_return uriLiteral266 = null;


        XQFTTree set262_tree=null;
        XQFTTree EMPTY263_tree=null;
        XQFTTree set264_tree=null;
        XQFTTree COLLATION265_tree=null;

        try {
            // etc/XQFT.g:464:36: ( ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? )
            // etc/XQFT.g:464:38: ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:464:38: ( ASCENDING | DESCENDING )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASCENDING||LA52_0==DESCENDING) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // etc/XQFT.g:
                    {
                    set262=(Token)input.LT(1);
                    if ( input.LA(1)==ASCENDING||input.LA(1)==DESCENDING ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set262));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderModifier4420);    throw mse;
                    }


                    }
                    break;

            }

            // etc/XQFT.g:464:64: ( EMPTY ( GREATEST | LEAST ) )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==EMPTY) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // etc/XQFT.g:464:65: EMPTY ( GREATEST | LEAST )
                    {
                    EMPTY263=(Token)input.LT(1);
                    match(input,EMPTY,FOLLOW_EMPTY_in_orderModifier4430); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EMPTY263_tree = (XQFTTree)adaptor.create(EMPTY263);
                    adaptor.addChild(root_0, EMPTY263_tree);
                    }
                    set264=(Token)input.LT(1);
                    if ( input.LA(1)==GREATEST||input.LA(1)==LEAST ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set264));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderModifier4432);    throw mse;
                    }


                    }
                    break;

            }

            // etc/XQFT.g:464:92: ( COLLATION uriLiteral )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==COLLATION) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // etc/XQFT.g:464:93: COLLATION uriLiteral
                    {
                    COLLATION265=(Token)input.LT(1);
                    match(input,COLLATION,FOLLOW_COLLATION_in_orderModifier4443); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLLATION265_tree = (XQFTTree)adaptor.create(COLLATION265);
                    adaptor.addChild(root_0, COLLATION265_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_orderModifier4445);
                    uriLiteral266=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral266.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderModifier

    public static class quantifiedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start quantifiedExpr
    // etc/XQFT.g:470:2: quantifiedExpr : quant= ( SOME | EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle ) ;
    public final quantifiedExpr_return quantifiedExpr() throws RecognitionException {
        quantifiedExpr_return retval = new quantifiedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token quant=null;
        Token SOME267=null;
        Token EVERY268=null;
        Token COMMASi270=null;
        Token SATISFIES272=null;
        quantifiedExprTupleDef_return quantifiedExprTupleDef269 = null;

        quantifiedExprTupleDef_return quantifiedExprTupleDef271 = null;

        exprSingle_return exprSingle273 = null;


        XQFTTree quant_tree=null;
        XQFTTree SOME267_tree=null;
        XQFTTree EVERY268_tree=null;
        XQFTTree COMMASi270_tree=null;
        XQFTTree SATISFIES272_tree=null;
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_SATISFIES=new RewriteRuleTokenStream(adaptor,"token SATISFIES");
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_EVERY=new RewriteRuleTokenStream(adaptor,"token EVERY");
        RewriteRuleSubtreeStream stream_quantifiedExprTupleDef=new RewriteRuleSubtreeStream(adaptor,"rule quantifiedExprTupleDef");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:470:33: (quant= ( SOME | EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle ) )
            // etc/XQFT.g:470:35: quant= ( SOME | EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle
            {
            // etc/XQFT.g:470:41: ( SOME | EVERY )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==SOME) ) {
                alt55=1;
            }
            else if ( (LA55_0==EVERY) ) {
                alt55=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("470:41: ( SOME | EVERY )", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // etc/XQFT.g:470:42: SOME
                    {
                    SOME267=(Token)input.LT(1);
                    match(input,SOME,FOLLOW_SOME_in_quantifiedExpr4483); if (failed) return retval;
                    if ( backtracking==0 ) stream_SOME.add(SOME267);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:470:49: EVERY
                    {
                    EVERY268=(Token)input.LT(1);
                    match(input,EVERY,FOLLOW_EVERY_in_quantifiedExpr4487); if (failed) return retval;
                    if ( backtracking==0 ) stream_EVERY.add(EVERY268);


                    }
                    break;

            }

            pushFollow(FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4490);
            quantifiedExprTupleDef269=quantifiedExprTupleDef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_quantifiedExprTupleDef.add(quantifiedExprTupleDef269.getTree());
            // etc/XQFT.g:471:13: ( COMMASi quantifiedExprTupleDef )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMASi) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // etc/XQFT.g:471:14: COMMASi quantifiedExprTupleDef
            	    {
            	    COMMASi270=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_quantifiedExpr4505); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi270);

            	    pushFollow(FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4507);
            	    quantifiedExprTupleDef271=quantifiedExprTupleDef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_quantifiedExprTupleDef.add(quantifiedExprTupleDef271.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            SATISFIES272=(Token)input.LT(1);
            match(input,SATISFIES,FOLLOW_SATISFIES_in_quantifiedExpr4511); if (failed) return retval;
            if ( backtracking==0 ) stream_SATISFIES.add(SATISFIES272);

            pushFollow(FOLLOW_exprSingle_in_quantifiedExpr4513);
            exprSingle273=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle273.getTree());

            // AST REWRITE
<<<<<<< .mine
            // elements: exprSingle, quantifiedExprTupleDef, quant
=======
            // elements: exprSingle, quant, quantifiedExprTupleDef
>>>>>>> .r234
            // token labels: quant
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_quant=new RewriteRuleTokenStream(adaptor,"token quant",quant);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 472:49: -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle )
            {
                // etc/XQFT.g:472:52: ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_QUANTIFIEDEXPR, "AST_QUANTIFIEDEXPR"), root_1);

                adaptor.addChild(root_1, stream_quant.next());
                if ( !(stream_quantifiedExprTupleDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_quantifiedExprTupleDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantifiedExprTupleDef.next());

                }
                stream_quantifiedExprTupleDef.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end quantifiedExpr

    public static class quantifiedExprTupleDef_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start quantifiedExprTupleDef
    // etc/XQFT.g:474:9: quantifiedExprTupleDef : DOLLARSi varName ( typeDeclaration )? exprSingle -> varName ( typeDeclaration )? exprSingle ;
    public final quantifiedExprTupleDef_return quantifiedExprTupleDef() throws RecognitionException {
        quantifiedExprTupleDef_return retval = new quantifiedExprTupleDef_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi274=null;
        varName_return varName275 = null;

        typeDeclaration_return typeDeclaration276 = null;

        exprSingle_return exprSingle277 = null;


        XQFTTree DOLLARSi274_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // etc/XQFT.g:474:45: ( DOLLARSi varName ( typeDeclaration )? exprSingle -> varName ( typeDeclaration )? exprSingle )
            // etc/XQFT.g:474:47: DOLLARSi varName ( typeDeclaration )? exprSingle
            {
            DOLLARSi274=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_quantifiedExprTupleDef4604); if (failed) return retval;
            if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi274);

            pushFollow(FOLLOW_varName_in_quantifiedExprTupleDef4606);
            varName275=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_varName.add(varName275.getTree());
            // etc/XQFT.g:474:64: ( typeDeclaration )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==AS) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // etc/XQFT.g:474:64: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_quantifiedExprTupleDef4608);
                    typeDeclaration276=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeDeclaration.add(typeDeclaration276.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_exprSingle_in_quantifiedExprTupleDef4611);
            exprSingle277=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle277.getTree());

            // AST REWRITE
            // elements: typeDeclaration, varName, exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 475:49: -> varName ( typeDeclaration )? exprSingle
            {
                adaptor.addChild(root_0, stream_varName.next());
                // etc/XQFT.g:475:60: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeDeclaration.next());

                }
                stream_typeDeclaration.reset();
                adaptor.addChild(root_0, stream_exprSingle.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end quantifiedExprTupleDef

    public static class typeswitchExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeswitchExpr
    // etc/XQFT.g:479:2: typeswitchExpr : TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle ) ;
    public final typeswitchExpr_return typeswitchExpr() throws RecognitionException {
        typeswitchExpr_return retval = new typeswitchExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TYPESWITCH278=null;
        Token LPARSi279=null;
        Token RPARSi281=null;
        Token DEFAULT283=null;
        Token DOLLARSi284=null;
        Token RETURN286=null;
        expr_return expr280 = null;

        caseClause_return caseClause282 = null;

        varName_return varName285 = null;

        exprSingle_return exprSingle287 = null;


        XQFTTree TYPESWITCH278_tree=null;
        XQFTTree LPARSi279_tree=null;
        XQFTTree RPARSi281_tree=null;
        XQFTTree DEFAULT283_tree=null;
        XQFTTree DOLLARSi284_tree=null;
        XQFTTree RETURN286_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_TYPESWITCH=new RewriteRuleTokenStream(adaptor,"token TYPESWITCH");
        RewriteRuleSubtreeStream stream_caseClause=new RewriteRuleSubtreeStream(adaptor,"rule caseClause");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:479:33: ( TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle ) )
            // etc/XQFT.g:479:35: TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle
            {
            TYPESWITCH278=(Token)input.LT(1);
            match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_typeswitchExpr4697); if (failed) return retval;
            if ( backtracking==0 ) stream_TYPESWITCH.add(TYPESWITCH278);

            LPARSi279=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_typeswitchExpr4699); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi279);

            pushFollow(FOLLOW_expr_in_typeswitchExpr4701);
            expr280=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr280.getTree());
            RPARSi281=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_typeswitchExpr4703); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi281);

            // etc/XQFT.g:479:65: ( caseClause )+
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==CASE) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // etc/XQFT.g:479:65: caseClause
            	    {
            	    pushFollow(FOLLOW_caseClause_in_typeswitchExpr4705);
            	    caseClause282=caseClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_caseClause.add(caseClause282.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);

            DEFAULT283=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_typeswitchExpr4721); if (failed) return retval;
            if ( backtracking==0 ) stream_DEFAULT.add(DEFAULT283);

            // etc/XQFT.g:480:21: ( DOLLARSi varName )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==DOLLARSi) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // etc/XQFT.g:480:22: DOLLARSi varName
                    {
                    DOLLARSi284=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_typeswitchExpr4724); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi284);

                    pushFollow(FOLLOW_varName_in_typeswitchExpr4726);
                    varName285=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(varName285.getTree());

                    }
                    break;

            }

            RETURN286=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_typeswitchExpr4730); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN286);

            pushFollow(FOLLOW_exprSingle_in_typeswitchExpr4732);
            exprSingle287=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle287.getTree());

            // AST REWRITE
<<<<<<< .mine
            // elements: varName, exprSingle, caseClause, expr
=======
            // elements: expr, caseClause, varName, exprSingle
>>>>>>> .r234
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 481:49: -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle )
            {
                // etc/XQFT.g:481:52: ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_TYPESWITCHEXPR, "AST_TYPESWITCHEXPR"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                if ( !(stream_caseClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_caseClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_caseClause.next());

                }
                stream_caseClause.reset();
                // etc/XQFT.g:481:90: ( varName )?
                if ( stream_varName.hasNext() ) {
                    adaptor.addChild(root_1, stream_varName.next());

                }
                stream_varName.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeswitchExpr

    public static class caseClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start caseClause
    // etc/XQFT.g:485:3: caseClause : CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle ) ;
    public final caseClause_return caseClause() throws RecognitionException {
        caseClause_return retval = new caseClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CASE288=null;
        Token DOLLARSi289=null;
        Token AS291=null;
        Token RETURN293=null;
        varName_return varName290 = null;

        sequenceType_return sequenceType292 = null;

        exprSingle_return exprSingle294 = null;


        XQFTTree CASE288_tree=null;
        XQFTTree DOLLARSi289_tree=null;
        XQFTTree AS291_tree=null;
        XQFTTree RETURN293_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:485:34: ( CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle ) )
            // etc/XQFT.g:485:36: CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle
            {
            CASE288=(Token)input.LT(1);
            match(input,CASE,FOLLOW_CASE_in_caseClause4828); if (failed) return retval;
            if ( backtracking==0 ) stream_CASE.add(CASE288);

            // etc/XQFT.g:485:41: ( DOLLARSi varName AS )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==DOLLARSi) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // etc/XQFT.g:485:42: DOLLARSi varName AS
                    {
                    DOLLARSi289=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_caseClause4831); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi289);

                    pushFollow(FOLLOW_varName_in_caseClause4833);
                    varName290=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(varName290.getTree());
                    AS291=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_caseClause4835); if (failed) return retval;
                    if ( backtracking==0 ) stream_AS.add(AS291);


                    }
                    break;

            }

            pushFollow(FOLLOW_sequenceType_in_caseClause4839);
            sequenceType292=sequenceType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_sequenceType.add(sequenceType292.getTree());
            RETURN293=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_caseClause4841); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN293);

            pushFollow(FOLLOW_exprSingle_in_caseClause4843);
            exprSingle294=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle294.getTree());

            // AST REWRITE
<<<<<<< .mine
            // elements: exprSingle, varName, sequenceType
=======
            // elements: varName, exprSingle, sequenceType
>>>>>>> .r234
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 486:53: -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle )
            {
                // etc/XQFT.g:486:56: ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_CASECLAUSE, "AST_CASECLAUSE"), root_1);

                // etc/XQFT.g:486:73: ( varName )?
                if ( stream_varName.hasNext() ) {
                    adaptor.addChild(root_1, stream_varName.next());

                }
                stream_varName.reset();
                adaptor.addChild(root_1, stream_sequenceType.next());
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end caseClause

    public static class ifExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifExpr
    // etc/XQFT.g:494:2: ifExpr : IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle -> ^( AST_IFEXPR expr exprSingle exprSingle ) ;
    public final ifExpr_return ifExpr() throws RecognitionException {
        ifExpr_return retval = new ifExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token IF295=null;
        Token LPARSi296=null;
        Token RPARSi298=null;
        Token THEN299=null;
        Token ELSE301=null;
        expr_return expr297 = null;

        exprSingle_return exprSingle300 = null;

        exprSingle_return exprSingle302 = null;


        XQFTTree IF295_tree=null;
        XQFTTree LPARSi296_tree=null;
        XQFTTree RPARSi298_tree=null;
        XQFTTree THEN299_tree=null;
        XQFTTree ELSE301_tree=null;
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:494:33: ( IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle -> ^( AST_IFEXPR expr exprSingle exprSingle ) )
            // etc/XQFT.g:494:35: IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle
            {
            IF295=(Token)input.LT(1);
            match(input,IF,FOLLOW_IF_in_ifExpr4949); if (failed) return retval;
            if ( backtracking==0 ) stream_IF.add(IF295);

            LPARSi296=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_ifExpr4951); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi296);

            pushFollow(FOLLOW_expr_in_ifExpr4953);
            expr297=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr297.getTree());
            RPARSi298=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_ifExpr4955); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi298);

            THEN299=(Token)input.LT(1);
            match(input,THEN,FOLLOW_THEN_in_ifExpr4957); if (failed) return retval;
            if ( backtracking==0 ) stream_THEN.add(THEN299);

            pushFollow(FOLLOW_exprSingle_in_ifExpr4959);
            exprSingle300=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle300.getTree());
            ELSE301=(Token)input.LT(1);
            match(input,ELSE,FOLLOW_ELSE_in_ifExpr4961); if (failed) return retval;
            if ( backtracking==0 ) stream_ELSE.add(ELSE301);

            pushFollow(FOLLOW_exprSingle_in_ifExpr4963);
            exprSingle302=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle302.getTree());

            // AST REWRITE
            // elements: exprSingle, expr, exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 495:49: -> ^( AST_IFEXPR expr exprSingle exprSingle )
            {
                // etc/XQFT.g:495:52: ^( AST_IFEXPR expr exprSingle exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_IFEXPR, "AST_IFEXPR"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                adaptor.addChild(root_1, stream_exprSingle.next());
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifExpr

    public static class orExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orExpr
    // etc/XQFT.g:502:2: orExpr : andExpr ( OR andExpr )* ;
    public final orExpr_return orExpr() throws RecognitionException {
        orExpr_return retval = new orExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OR304=null;
        andExpr_return andExpr303 = null;

        andExpr_return andExpr305 = null;


        XQFTTree OR304_tree=null;

        try {
            // etc/XQFT.g:502:33: ( andExpr ( OR andExpr )* )
            // etc/XQFT.g:502:35: andExpr ( OR andExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_andExpr_in_orExpr5065);
            andExpr303=andExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, andExpr303.getTree());
            // etc/XQFT.g:502:43: ( OR andExpr )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==OR) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // etc/XQFT.g:502:45: OR andExpr
            	    {
            	    OR304=(Token)input.LT(1);
            	    match(input,OR,FOLLOW_OR_in_orExpr5069); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    OR304_tree = (XQFTTree)adaptor.create(OR304);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(OR304_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_andExpr_in_orExpr5072);
            	    andExpr305=andExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, andExpr305.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orExpr

    public static class andExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start andExpr
    // etc/XQFT.g:503:3: andExpr : comparisonExpr ( AND comparisonExpr )* ;
    public final andExpr_return andExpr() throws RecognitionException {
        andExpr_return retval = new andExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AND307=null;
        comparisonExpr_return comparisonExpr306 = null;

        comparisonExpr_return comparisonExpr308 = null;


        XQFTTree AND307_tree=null;

        try {
            // etc/XQFT.g:503:34: ( comparisonExpr ( AND comparisonExpr )* )
            // etc/XQFT.g:503:36: comparisonExpr ( AND comparisonExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_comparisonExpr_in_andExpr5107);
            comparisonExpr306=comparisonExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, comparisonExpr306.getTree());
            // etc/XQFT.g:503:51: ( AND comparisonExpr )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==AND) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // etc/XQFT.g:503:53: AND comparisonExpr
            	    {
            	    AND307=(Token)input.LT(1);
            	    match(input,AND,FOLLOW_AND_in_andExpr5111); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    AND307_tree = (XQFTTree)adaptor.create(AND307);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(AND307_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_comparisonExpr_in_andExpr5114);
            	    comparisonExpr308=comparisonExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, comparisonExpr308.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end andExpr

    public static class comparisonExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start comparisonExpr
    // etc/XQFT.g:509:1: comparisonExpr : ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )? ;
    public final comparisonExpr_return comparisonExpr() throws RecognitionException {
        comparisonExpr_return retval = new comparisonExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftContainsExpr_return ftContainsExpr309 = null;

        valueComp_return valueComp310 = null;

        generalComp_return generalComp311 = null;

        nodeComp_return nodeComp312 = null;

        ftContainsExpr_return ftContainsExpr313 = null;



        try {
            // etc/XQFT.g:509:32: ( ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )? )
            // etc/XQFT.g:509:34: ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr5148);
            ftContainsExpr309=ftContainsExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftContainsExpr309.getTree());
            // etc/XQFT.g:509:49: ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==EQ||LA64_0==GE||LA64_0==GT||LA64_0==IS||LA64_0==LE||LA64_0==LT||LA64_0==NE||LA64_0==EQSi||(LA64_0>=NEQSi && LA64_0<=NODEAFTERSi)) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // etc/XQFT.g:509:51: ( valueComp | generalComp | nodeComp ) ftContainsExpr
                    {
                    // etc/XQFT.g:509:51: ( valueComp | generalComp | nodeComp )
                    int alt63=3;
                    switch ( input.LA(1) ) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE:
                        {
                        alt63=1;
                        }
                        break;
                    case EQSi:
                    case NEQSi:
                    case LTSi:
                    case LTOREQSi:
                    case GTSi:
                    case GTOREQSi:
                        {
                        alt63=2;
                        }
                        break;
                    case IS:
                    case NODEBEFORESi:
                    case NODEAFTERSi:
                        {
                        alt63=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("509:51: ( valueComp | generalComp | nodeComp )", 63, 0, input);

                        throw nvae;
                    }

                    switch (alt63) {
                        case 1 :
                            // etc/XQFT.g:509:52: valueComp
                            {
                            pushFollow(FOLLOW_valueComp_in_comparisonExpr5153);
                            valueComp310=valueComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, valueComp310.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:509:64: generalComp
                            {
                            pushFollow(FOLLOW_generalComp_in_comparisonExpr5157);
                            generalComp311=generalComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, generalComp311.getTree());

                            }
                            break;
                        case 3 :
                            // etc/XQFT.g:509:78: nodeComp
                            {
                            pushFollow(FOLLOW_nodeComp_in_comparisonExpr5161);
                            nodeComp312=nodeComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, nodeComp312.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr5165);
                    ftContainsExpr313=ftContainsExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftContainsExpr313.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end comparisonExpr

    public static class ftContainsExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftContainsExpr
    // etc/XQFT.g:512:2: ftContainsExpr : rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )? ;
    public final ftContainsExpr_return ftContainsExpr() throws RecognitionException {
        ftContainsExpr_return retval = new ftContainsExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTCONTAINS315=null;
        rangeExpr_return rangeExpr314 = null;

        ftSelection_return ftSelection316 = null;

        ftIgnoreOption_return ftIgnoreOption317 = null;


        XQFTTree FTCONTAINS315_tree=null;

        try {
            // etc/XQFT.g:512:33: ( rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )? )
            // etc/XQFT.g:512:35: rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_rangeExpr_in_ftContainsExpr5194);
            rangeExpr314=rangeExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, rangeExpr314.getTree());
            // etc/XQFT.g:512:45: ( FTCONTAINS ftSelection ( ftIgnoreOption )? )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==FTCONTAINS) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // etc/XQFT.g:512:47: FTCONTAINS ftSelection ( ftIgnoreOption )?
                    {
                    FTCONTAINS315=(Token)input.LT(1);
                    match(input,FTCONTAINS,FOLLOW_FTCONTAINS_in_ftContainsExpr5198); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FTCONTAINS315_tree = (XQFTTree)adaptor.create(FTCONTAINS315);
                    root_0 = (XQFTTree)adaptor.becomeRoot(FTCONTAINS315_tree, root_0);
                    }
                    pushFollow(FOLLOW_ftSelection_in_ftContainsExpr5201);
                    ftSelection316=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection316.getTree());
                    // etc/XQFT.g:512:71: ( ftIgnoreOption )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==WITHOUT) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // etc/XQFT.g:512:71: ftIgnoreOption
                            {
                            pushFollow(FOLLOW_ftIgnoreOption_in_ftContainsExpr5203);
                            ftIgnoreOption317=ftIgnoreOption();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftIgnoreOption317.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftContainsExpr

    public static class rangeExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rangeExpr
    // etc/XQFT.g:514:3: rangeExpr : additiveExpr ( TO additiveExpr )? ;
    public final rangeExpr_return rangeExpr() throws RecognitionException {
        rangeExpr_return retval = new rangeExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TO319=null;
        additiveExpr_return additiveExpr318 = null;

        additiveExpr_return additiveExpr320 = null;


        XQFTTree TO319_tree=null;

        try {
            // etc/XQFT.g:514:34: ( additiveExpr ( TO additiveExpr )? )
            // etc/XQFT.g:514:36: additiveExpr ( TO additiveExpr )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpr_in_rangeExpr5239);
            additiveExpr318=additiveExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr318.getTree());
            // etc/XQFT.g:514:49: ( TO additiveExpr )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==TO) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // etc/XQFT.g:514:51: TO additiveExpr
                    {
                    TO319=(Token)input.LT(1);
                    match(input,TO,FOLLOW_TO_in_rangeExpr5243); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TO319_tree = (XQFTTree)adaptor.create(TO319);
                    root_0 = (XQFTTree)adaptor.becomeRoot(TO319_tree, root_0);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_rangeExpr5246);
                    additiveExpr320=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr320.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end rangeExpr

    public static class additiveExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start additiveExpr
    // etc/XQFT.g:515:4: additiveExpr : multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )* ;
    public final additiveExpr_return additiveExpr() throws RecognitionException {
        additiveExpr_return retval = new additiveExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set322=null;
        multiplicativeExpr_return multiplicativeExpr321 = null;

        multiplicativeExpr_return multiplicativeExpr323 = null;


        XQFTTree set322_tree=null;

        try {
            // etc/XQFT.g:515:35: ( multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )* )
            // etc/XQFT.g:515:37: multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr5277);
            multiplicativeExpr321=multiplicativeExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpr321.getTree());
            // etc/XQFT.g:515:56: ( ( PLUSSi | MINUSSi ) multiplicativeExpr )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( ((LA68_0>=PLUSSi && LA68_0<=MINUSSi)) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // etc/XQFT.g:515:58: ( PLUSSi | MINUSSi ) multiplicativeExpr
            	    {
            	    set322=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUSSi && input.LA(1)<=MINUSSi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set322), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_additiveExpr5281);    throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr5290);
            	    multiplicativeExpr323=multiplicativeExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpr323.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end additiveExpr

    public static class multiplicativeExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start multiplicativeExpr
    // etc/XQFT.g:516:5: multiplicativeExpr : unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )* ;
    public final multiplicativeExpr_return multiplicativeExpr() throws RecognitionException {
        multiplicativeExpr_return retval = new multiplicativeExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set325=null;
        unionExpr_return unionExpr324 = null;

        unionExpr_return unionExpr326 = null;


        XQFTTree set325_tree=null;

        try {
            // etc/XQFT.g:516:36: ( unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )* )
            // etc/XQFT.g:516:38: unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr5316);
            unionExpr324=unionExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr324.getTree());
            // etc/XQFT.g:516:48: ( ( STARSi | DIV | IDIV | MOD ) unionExpr )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==DIV||LA69_0==IDIV||LA69_0==MOD||LA69_0==STARSi) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // etc/XQFT.g:516:50: ( STARSi | DIV | IDIV | MOD ) unionExpr
            	    {
            	    set325=(Token)input.LT(1);
            	    if ( input.LA(1)==DIV||input.LA(1)==IDIV||input.LA(1)==MOD||input.LA(1)==STARSi ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set325), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_multiplicativeExpr5320);    throw mse;
            	    }

            	    pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr5337);
            	    unionExpr326=unionExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr326.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end multiplicativeExpr

    public static class unionExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unionExpr
    // etc/XQFT.g:517:6: unionExpr : intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )* ;
    public final unionExpr_return unionExpr() throws RecognitionException {
        unionExpr_return retval = new unionExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set328=null;
        intersectExceptExpr_return intersectExceptExpr327 = null;

        intersectExceptExpr_return intersectExceptExpr329 = null;


        XQFTTree set328_tree=null;

        try {
            // etc/XQFT.g:517:37: ( intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )* )
            // etc/XQFT.g:517:39: intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr5373);
            intersectExceptExpr327=intersectExceptExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, intersectExceptExpr327.getTree());
            // etc/XQFT.g:517:59: ( ( UNION | PIPESi ) intersectExceptExpr )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==UNION||LA70_0==PIPESi) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // etc/XQFT.g:517:61: ( UNION | PIPESi ) intersectExceptExpr
            	    {
            	    set328=(Token)input.LT(1);
            	    if ( input.LA(1)==UNION||input.LA(1)==PIPESi ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set328), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_unionExpr5377);    throw mse;
            	    }

            	    pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr5386);
            	    intersectExceptExpr329=intersectExceptExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, intersectExceptExpr329.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unionExpr

    public static class intersectExceptExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start intersectExceptExpr
    // etc/XQFT.g:518:7: intersectExceptExpr : instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )* ;
    public final intersectExceptExpr_return intersectExceptExpr() throws RecognitionException {
        intersectExceptExpr_return retval = new intersectExceptExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set331=null;
        instanceofExpr_return instanceofExpr330 = null;

        instanceofExpr_return instanceofExpr332 = null;


        XQFTTree set331_tree=null;

        try {
            // etc/XQFT.g:518:38: ( instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )* )
            // etc/XQFT.g:518:40: instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr5413);
            instanceofExpr330=instanceofExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, instanceofExpr330.getTree());
            // etc/XQFT.g:518:55: ( ( INTERSECT | EXCEPT ) instanceofExpr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==EXCEPT||LA71_0==INTERSECT) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // etc/XQFT.g:518:57: ( INTERSECT | EXCEPT ) instanceofExpr
            	    {
            	    set331=(Token)input.LT(1);
            	    if ( input.LA(1)==EXCEPT||input.LA(1)==INTERSECT ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set331), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_intersectExceptExpr5417);    throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr5426);
            	    instanceofExpr332=instanceofExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, instanceofExpr332.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end intersectExceptExpr

    public static class instanceofExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start instanceofExpr
    // etc/XQFT.g:519:8: instanceofExpr : treatExpr ( INSTANCE OF sequenceType )? ;
    public final instanceofExpr_return instanceofExpr() throws RecognitionException {
        instanceofExpr_return retval = new instanceofExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token INSTANCE334=null;
        Token OF335=null;
        treatExpr_return treatExpr333 = null;

        sequenceType_return sequenceType336 = null;


        XQFTTree INSTANCE334_tree=null;
        XQFTTree OF335_tree=null;

        try {
            // etc/XQFT.g:519:39: ( treatExpr ( INSTANCE OF sequenceType )? )
            // etc/XQFT.g:519:41: treatExpr ( INSTANCE OF sequenceType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_treatExpr_in_instanceofExpr5459);
            treatExpr333=treatExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, treatExpr333.getTree());
            // etc/XQFT.g:519:51: ( INSTANCE OF sequenceType )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==INSTANCE) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // etc/XQFT.g:519:53: INSTANCE OF sequenceType
                    {
                    INSTANCE334=(Token)input.LT(1);
                    match(input,INSTANCE,FOLLOW_INSTANCE_in_instanceofExpr5463); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSTANCE334_tree = (XQFTTree)adaptor.create(INSTANCE334);
                    root_0 = (XQFTTree)adaptor.becomeRoot(INSTANCE334_tree, root_0);
                    }
                    OF335=(Token)input.LT(1);
                    match(input,OF,FOLLOW_OF_in_instanceofExpr5466); if (failed) return retval;
                    pushFollow(FOLLOW_sequenceType_in_instanceofExpr5469);
                    sequenceType336=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType336.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end instanceofExpr

    public static class treatExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start treatExpr
    // etc/XQFT.g:520:9: treatExpr : castableExpr ( TREAT AS sequenceType )? ;
    public final treatExpr_return treatExpr() throws RecognitionException {
        treatExpr_return retval = new treatExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TREAT338=null;
        Token AS339=null;
        castableExpr_return castableExpr337 = null;

        sequenceType_return sequenceType340 = null;


        XQFTTree TREAT338_tree=null;
        XQFTTree AS339_tree=null;

        try {
            // etc/XQFT.g:520:40: ( castableExpr ( TREAT AS sequenceType )? )
            // etc/XQFT.g:520:42: castableExpr ( TREAT AS sequenceType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_castableExpr_in_treatExpr5508);
            castableExpr337=castableExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, castableExpr337.getTree());
            // etc/XQFT.g:520:55: ( TREAT AS sequenceType )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==TREAT) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // etc/XQFT.g:520:57: TREAT AS sequenceType
                    {
                    TREAT338=(Token)input.LT(1);
                    match(input,TREAT,FOLLOW_TREAT_in_treatExpr5512); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TREAT338_tree = (XQFTTree)adaptor.create(TREAT338);
                    root_0 = (XQFTTree)adaptor.becomeRoot(TREAT338_tree, root_0);
                    }
                    AS339=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_treatExpr5515); if (failed) return retval;
                    pushFollow(FOLLOW_sequenceType_in_treatExpr5518);
                    sequenceType340=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType340.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end treatExpr

    public static class castableExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castableExpr
    // etc/XQFT.g:521:10: castableExpr : castExpr ( CASTABLE AS singleType )? ;
    public final castableExpr_return castableExpr() throws RecognitionException {
        castableExpr_return retval = new castableExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CASTABLE342=null;
        Token AS343=null;
        castExpr_return castExpr341 = null;

        singleType_return singleType344 = null;


        XQFTTree CASTABLE342_tree=null;
        XQFTTree AS343_tree=null;

        try {
            // etc/XQFT.g:521:41: ( castExpr ( CASTABLE AS singleType )? )
            // etc/XQFT.g:521:43: castExpr ( CASTABLE AS singleType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_castExpr_in_castableExpr5555);
            castExpr341=castExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, castExpr341.getTree());
            // etc/XQFT.g:521:52: ( CASTABLE AS singleType )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==CASTABLE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // etc/XQFT.g:521:54: CASTABLE AS singleType
                    {
                    CASTABLE342=(Token)input.LT(1);
                    match(input,CASTABLE,FOLLOW_CASTABLE_in_castableExpr5559); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASTABLE342_tree = (XQFTTree)adaptor.create(CASTABLE342);
                    root_0 = (XQFTTree)adaptor.becomeRoot(CASTABLE342_tree, root_0);
                    }
                    AS343=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_castableExpr5562); if (failed) return retval;
                    pushFollow(FOLLOW_singleType_in_castableExpr5565);
                    singleType344=singleType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, singleType344.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end castableExpr

    public static class castExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castExpr
    // etc/XQFT.g:522:11: castExpr : unaryExpr ( CAST AS singleType )? ;
    public final castExpr_return castExpr() throws RecognitionException {
        castExpr_return retval = new castExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CAST346=null;
        Token AS347=null;
        unaryExpr_return unaryExpr345 = null;

        singleType_return singleType348 = null;


        XQFTTree CAST346_tree=null;
        XQFTTree AS347_tree=null;

        try {
            // etc/XQFT.g:522:42: ( unaryExpr ( CAST AS singleType )? )
            // etc/XQFT.g:522:44: unaryExpr ( CAST AS singleType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpr_in_castExpr5607);
            unaryExpr345=unaryExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpr345.getTree());
            // etc/XQFT.g:522:54: ( CAST AS singleType )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==CAST) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // etc/XQFT.g:522:56: CAST AS singleType
                    {
                    CAST346=(Token)input.LT(1);
                    match(input,CAST,FOLLOW_CAST_in_castExpr5611); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CAST346_tree = (XQFTTree)adaptor.create(CAST346);
                    root_0 = (XQFTTree)adaptor.becomeRoot(CAST346_tree, root_0);
                    }
                    AS347=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_castExpr5614); if (failed) return retval;
                    pushFollow(FOLLOW_singleType_in_castExpr5617);
                    singleType348=singleType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, singleType348.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end castExpr

    public static class unaryExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unaryExpr
    // etc/XQFT.g:523:12: unaryExpr : ( ( MINUSSi | PLUSSi )* ) valueExpr ;
    public final unaryExpr_return unaryExpr() throws RecognitionException {
        unaryExpr_return retval = new unaryExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set349=null;
        valueExpr_return valueExpr350 = null;


        XQFTTree set349_tree=null;

        try {
            // etc/XQFT.g:523:43: ( ( ( MINUSSi | PLUSSi )* ) valueExpr )
            // etc/XQFT.g:523:45: ( ( MINUSSi | PLUSSi )* ) valueExpr
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:523:45: ( ( MINUSSi | PLUSSi )* )
            // etc/XQFT.g:523:46: ( MINUSSi | PLUSSi )*
            {
            // etc/XQFT.g:523:46: ( MINUSSi | PLUSSi )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( ((LA76_0>=PLUSSi && LA76_0<=MINUSSi)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // etc/XQFT.g:
            	    {
            	    set349=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUSSi && input.LA(1)<=MINUSSi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set349));
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_unaryExpr5660);    throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            pushFollow(FOLLOW_valueExpr_in_unaryExpr5671);
            valueExpr350=valueExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, valueExpr350.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unaryExpr

    public static class singleType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start singleType
    // etc/XQFT.g:525:12: singleType : atomicType ( QUESTIONSi )? ;
    public final singleType_return singleType() throws RecognitionException {
        singleType_return retval = new singleType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token QUESTIONSi352=null;
        atomicType_return atomicType351 = null;


        XQFTTree QUESTIONSi352_tree=null;

        try {
            // etc/XQFT.g:525:43: ( atomicType ( QUESTIONSi )? )
            // etc/XQFT.g:525:45: atomicType ( QUESTIONSi )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_atomicType_in_singleType5710);
            atomicType351=atomicType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, atomicType351.getTree());
            // etc/XQFT.g:525:56: ( QUESTIONSi )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==QUESTIONSi) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // etc/XQFT.g:525:56: QUESTIONSi
                    {
                    QUESTIONSi352=(Token)input.LT(1);
                    match(input,QUESTIONSi,FOLLOW_QUESTIONSi_in_singleType5712); if (failed) return retval;
                    if ( backtracking==0 ) {
                    QUESTIONSi352_tree = (XQFTTree)adaptor.create(QUESTIONSi352);
                    adaptor.addChild(root_0, QUESTIONSi352_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end singleType

    public static class atomicType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start atomicType
    // etc/XQFT.g:526:13: atomicType : qName ;
    public final atomicType_return atomicType() throws RecognitionException {
        atomicType_return retval = new atomicType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName353 = null;



        try {
            // etc/XQFT.g:526:44: ( qName )
            // etc/XQFT.g:526:46: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_atomicType5752);
            qName353=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName353.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end atomicType

    public static class ftIgnoreOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftIgnoreOption
    // etc/XQFT.g:534:3: ftIgnoreOption : WITHOUT CONTENT unionExpr ;
    public final ftIgnoreOption_return ftIgnoreOption() throws RecognitionException {
        ftIgnoreOption_return retval = new ftIgnoreOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITHOUT354=null;
        Token CONTENT355=null;
        unionExpr_return unionExpr356 = null;


        XQFTTree WITHOUT354_tree=null;
        XQFTTree CONTENT355_tree=null;

        try {
            // etc/XQFT.g:534:34: ( WITHOUT CONTENT unionExpr )
            // etc/XQFT.g:534:36: WITHOUT CONTENT unionExpr
            {
            root_0 = (XQFTTree)adaptor.nil();

            WITHOUT354=(Token)input.LT(1);
            match(input,WITHOUT,FOLLOW_WITHOUT_in_ftIgnoreOption5788); if (failed) return retval;
            if ( backtracking==0 ) {
            WITHOUT354_tree = (XQFTTree)adaptor.create(WITHOUT354);
            adaptor.addChild(root_0, WITHOUT354_tree);
            }
            CONTENT355=(Token)input.LT(1);
            match(input,CONTENT,FOLLOW_CONTENT_in_ftIgnoreOption5790); if (failed) return retval;
            if ( backtracking==0 ) {
            CONTENT355_tree = (XQFTTree)adaptor.create(CONTENT355);
            adaptor.addChild(root_0, CONTENT355_tree);
            }
            pushFollow(FOLLOW_unionExpr_in_ftIgnoreOption5792);
            unionExpr356=unionExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr356.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftIgnoreOption

    public static class valueComp_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start valueComp
    // etc/XQFT.g:538:2: valueComp : ( EQ | NE | LT | LE | GT | GE );
    public final valueComp_return valueComp() throws RecognitionException {
        valueComp_return retval = new valueComp_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set357=null;

        XQFTTree set357_tree=null;

        try {
            // etc/XQFT.g:538:33: ( EQ | NE | LT | LE | GT | GE )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set357=(Token)input.LT(1);
            if ( input.LA(1)==EQ||input.LA(1)==GE||input.LA(1)==GT||input.LA(1)==LE||input.LA(1)==LT||input.LA(1)==NE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set357));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_valueComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end valueComp

    public static class generalComp_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start generalComp
    // etc/XQFT.g:541:2: generalComp : ( EQSi | NEQSi | LTSi | LTOREQSi | GTSi | GTOREQSi );
    public final generalComp_return generalComp() throws RecognitionException {
        generalComp_return retval = new generalComp_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set358=null;

        XQFTTree set358_tree=null;

        try {
            // etc/XQFT.g:541:33: ( EQSi | NEQSi | LTSi | LTOREQSi | GTSi | GTOREQSi )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set358=(Token)input.LT(1);
            if ( input.LA(1)==EQSi||(input.LA(1)>=NEQSi && input.LA(1)<=GTOREQSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set358));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_generalComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end generalComp

    public static class nodeComp_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nodeComp
    // etc/XQFT.g:544:2: nodeComp : ( IS | NODEBEFORESi | NODEAFTERSi );
    public final nodeComp_return nodeComp() throws RecognitionException {
        nodeComp_return retval = new nodeComp_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set359=null;

        XQFTTree set359_tree=null;

        try {
            // etc/XQFT.g:544:33: ( IS | NODEBEFORESi | NODEAFTERSi )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set359=(Token)input.LT(1);
            if ( input.LA(1)==IS||(input.LA(1)>=NODEBEFORESi && input.LA(1)<=NODEAFTERSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set359));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_nodeComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nodeComp

    public static class ftSelection_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftSelection
    // etc/XQFT.g:548:1: ftSelection : ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )? -> ^( AST_FTSELECTION ftOr ( ftPosFilter )* ( ^( WEIGHT rangeExpr ) )? ) ;
    public final ftSelection_return ftSelection() throws RecognitionException {
        ftSelection_return retval = new ftSelection_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WEIGHT362=null;
        ftOr_return ftOr360 = null;

        ftPosFilter_return ftPosFilter361 = null;

        rangeExpr_return rangeExpr363 = null;


        XQFTTree WEIGHT362_tree=null;
        RewriteRuleTokenStream stream_WEIGHT=new RewriteRuleTokenStream(adaptor,"token WEIGHT");
        RewriteRuleSubtreeStream stream_ftPosFilter=new RewriteRuleSubtreeStream(adaptor,"rule ftPosFilter");
        RewriteRuleSubtreeStream stream_ftOr=new RewriteRuleSubtreeStream(adaptor,"rule ftOr");
        RewriteRuleSubtreeStream stream_rangeExpr=new RewriteRuleSubtreeStream(adaptor,"rule rangeExpr");
        try {
            // etc/XQFT.g:548:32: ( ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )? -> ^( AST_FTSELECTION ftOr ( ftPosFilter )* ( ^( WEIGHT rangeExpr ) )? ) )
            // etc/XQFT.g:548:34: ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )?
            {
            pushFollow(FOLLOW_ftOr_in_ftSelection5962);
            ftOr360=ftOr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_ftOr.add(ftOr360.getTree());
            // etc/XQFT.g:548:39: ( ftPosFilter )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==AT||(LA78_0>=DIFFERENT && LA78_0<=DISTANCE)||LA78_0==ENTIRE||LA78_0==ORDERED||LA78_0==SAME||LA78_0==WINDOW) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // etc/XQFT.g:548:39: ftPosFilter
            	    {
            	    pushFollow(FOLLOW_ftPosFilter_in_ftSelection5964);
            	    ftPosFilter361=ftPosFilter();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_ftPosFilter.add(ftPosFilter361.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // etc/XQFT.g:548:52: ( WEIGHT rangeExpr )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==WEIGHT) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // etc/XQFT.g:548:53: WEIGHT rangeExpr
                    {
                    WEIGHT362=(Token)input.LT(1);
                    match(input,WEIGHT,FOLLOW_WEIGHT_in_ftSelection5968); if (failed) return retval;
                    if ( backtracking==0 ) stream_WEIGHT.add(WEIGHT362);

                    pushFollow(FOLLOW_rangeExpr_in_ftSelection5970);
                    rangeExpr363=rangeExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_rangeExpr.add(rangeExpr363.getTree());

                    }
                    break;

            }


            // AST REWRITE
<<<<<<< .mine
            // elements: rangeExpr, ftOr, ftPosFilter, WEIGHT
=======
            // elements: rangeExpr, ftPosFilter, WEIGHT, ftOr
>>>>>>> .r234
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 549:13: -> ^( AST_FTSELECTION ftOr ( ftPosFilter )* ( ^( WEIGHT rangeExpr ) )? )
            {
                // etc/XQFT.g:549:16: ^( AST_FTSELECTION ftOr ( ftPosFilter )* ( ^( WEIGHT rangeExpr ) )? )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FTSELECTION, "AST_FTSELECTION"), root_1);

                adaptor.addChild(root_1, stream_ftOr.next());
                // etc/XQFT.g:549:39: ( ftPosFilter )*
                while ( stream_ftPosFilter.hasNext() ) {
                    adaptor.addChild(root_1, stream_ftPosFilter.next());

                }
                stream_ftPosFilter.reset();
                // etc/XQFT.g:549:52: ( ^( WEIGHT rangeExpr ) )?
                if ( stream_rangeExpr.hasNext()||stream_WEIGHT.hasNext() ) {
                    // etc/XQFT.g:549:52: ^( WEIGHT rangeExpr )
                    {
                    XQFTTree root_2 = (XQFTTree)adaptor.nil();
                    root_2 = (XQFTTree)adaptor.becomeRoot(stream_WEIGHT.next(), root_2);

                    adaptor.addChild(root_2, stream_rangeExpr.next());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_rangeExpr.reset();
                stream_WEIGHT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftSelection

    public static class ftOr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOr
    // etc/XQFT.g:550:2: ftOr : ftAnd ( FTOR ftAnd )* ;
    public final ftOr_return ftOr() throws RecognitionException {
        ftOr_return retval = new ftOr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTOR365=null;
        ftAnd_return ftAnd364 = null;

        ftAnd_return ftAnd366 = null;


        XQFTTree FTOR365_tree=null;

        try {
            // etc/XQFT.g:550:33: ( ftAnd ( FTOR ftAnd )* )
            // etc/XQFT.g:550:35: ftAnd ( FTOR ftAnd )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftAnd_in_ftOr6036);
            ftAnd364=ftAnd();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftAnd364.getTree());
            // etc/XQFT.g:550:41: ( FTOR ftAnd )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==FTOR) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // etc/XQFT.g:550:43: FTOR ftAnd
            	    {
            	    FTOR365=(Token)input.LT(1);
            	    match(input,FTOR,FOLLOW_FTOR_in_ftOr6040); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    FTOR365_tree = (XQFTTree)adaptor.create(FTOR365);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(FTOR365_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_ftAnd_in_ftOr6043);
            	    ftAnd366=ftAnd();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftAnd366.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOr

    public static class ftAnd_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftAnd
    // etc/XQFT.g:551:3: ftAnd : ftMildNot ( FTAND ftMildNot )* ;
    public final ftAnd_return ftAnd() throws RecognitionException {
        ftAnd_return retval = new ftAnd_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTAND368=null;
        ftMildNot_return ftMildNot367 = null;

        ftMildNot_return ftMildNot369 = null;


        XQFTTree FTAND368_tree=null;

        try {
            // etc/XQFT.g:551:34: ( ftMildNot ( FTAND ftMildNot )* )
            // etc/XQFT.g:551:36: ftMildNot ( FTAND ftMildNot )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftMildNot_in_ftAnd6080);
            ftMildNot367=ftMildNot();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftMildNot367.getTree());
            // etc/XQFT.g:551:46: ( FTAND ftMildNot )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==FTAND) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // etc/XQFT.g:551:48: FTAND ftMildNot
            	    {
            	    FTAND368=(Token)input.LT(1);
            	    match(input,FTAND,FOLLOW_FTAND_in_ftAnd6084); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    FTAND368_tree = (XQFTTree)adaptor.create(FTAND368);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(FTAND368_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_ftMildNot_in_ftAnd6087);
            	    ftMildNot369=ftMildNot();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftMildNot369.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftAnd

    public static class ftMildNot_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMildNot
    // etc/XQFT.g:552:4: ftMildNot : ftUnaryNot ( NOT IN ftUnaryNot )* ;
    public final ftMildNot_return ftMildNot() throws RecognitionException {
        ftMildNot_return retval = new ftMildNot_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NOT371=null;
        Token IN372=null;
        ftUnaryNot_return ftUnaryNot370 = null;

        ftUnaryNot_return ftUnaryNot373 = null;


        XQFTTree NOT371_tree=null;
        XQFTTree IN372_tree=null;

        try {
            // etc/XQFT.g:552:35: ( ftUnaryNot ( NOT IN ftUnaryNot )* )
            // etc/XQFT.g:552:37: ftUnaryNot ( NOT IN ftUnaryNot )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot6121);
            ftUnaryNot370=ftUnaryNot();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot370.getTree());
            // etc/XQFT.g:552:48: ( NOT IN ftUnaryNot )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==NOT) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // etc/XQFT.g:552:50: NOT IN ftUnaryNot
            	    {
            	    NOT371=(Token)input.LT(1);
            	    match(input,NOT,FOLLOW_NOT_in_ftMildNot6125); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    NOT371_tree = (XQFTTree)adaptor.create(NOT371);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(NOT371_tree, root_0);
            	    }
            	    IN372=(Token)input.LT(1);
            	    match(input,IN,FOLLOW_IN_in_ftMildNot6128); if (failed) return retval;
            	    pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot6131);
            	    ftUnaryNot373=ftUnaryNot();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot373.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMildNot

    public static class ftUnaryNot_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftUnaryNot
    // etc/XQFT.g:553:5: ftUnaryNot : ( FTNOT )? ftPrimaryWithOptions ;
    public final ftUnaryNot_return ftUnaryNot() throws RecognitionException {
        ftUnaryNot_return retval = new ftUnaryNot_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTNOT374=null;
        ftPrimaryWithOptions_return ftPrimaryWithOptions375 = null;


        XQFTTree FTNOT374_tree=null;

        try {
            // etc/XQFT.g:553:36: ( ( FTNOT )? ftPrimaryWithOptions )
            // etc/XQFT.g:553:38: ( FTNOT )? ftPrimaryWithOptions
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:553:38: ( FTNOT )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==FTNOT) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // etc/XQFT.g:553:39: FTNOT
                    {
                    FTNOT374=(Token)input.LT(1);
                    match(input,FTNOT,FOLLOW_FTNOT_in_ftUnaryNot6166); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FTNOT374_tree = (XQFTTree)adaptor.create(FTNOT374);
                    root_0 = (XQFTTree)adaptor.becomeRoot(FTNOT374_tree, root_0);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot6171);
            ftPrimaryWithOptions375=ftPrimaryWithOptions();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftPrimaryWithOptions375.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftUnaryNot

    public static class ftPrimaryWithOptions_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPrimaryWithOptions
    // etc/XQFT.g:554:6: ftPrimaryWithOptions : ftPrimary ( ftMatchOptions )? ;
    public final ftPrimaryWithOptions_return ftPrimaryWithOptions() throws RecognitionException {
        ftPrimaryWithOptions_return retval = new ftPrimaryWithOptions_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftPrimary_return ftPrimary376 = null;

        ftMatchOptions_return ftMatchOptions377 = null;



        try {
            // etc/XQFT.g:554:37: ( ftPrimary ( ftMatchOptions )? )
            // etc/XQFT.g:554:39: ftPrimary ( ftMatchOptions )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftPrimary_in_ftPrimaryWithOptions6193);
            ftPrimary376=ftPrimary();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftPrimary376.getTree());
            // etc/XQFT.g:554:49: ( ftMatchOptions )?
            int alt84=2;
            switch ( input.LA(1) ) {
                case DIACRITICS:
                case LANGUAGE:
                case LOWERCASE:
                case OPTION:
                case UPPERCASE:
                case WITH:
                    {
                    alt84=1;
                    }
                    break;
                case WITHOUT:
                    {
                    int LA84_2 = input.LA(2);

                    if ( ((LA84_2>=STEMMING && LA84_2<=STOP)||LA84_2==THESAURUS||LA84_2==WILDCARDS) ) {
                        alt84=1;
                    }
                    }
                    break;
                case CASE:
                    {
                    int LA84_3 = input.LA(2);

                    if ( (LA84_3==INSENSITIVE||LA84_3==SENSITIVE) ) {
                        alt84=1;
                    }
                    }
                    break;
            }

            switch (alt84) {
                case 1 :
                    // etc/XQFT.g:554:49: ftMatchOptions
                    {
                    pushFollow(FOLLOW_ftMatchOptions_in_ftPrimaryWithOptions6195);
                    ftMatchOptions377=ftMatchOptions();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOptions377.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPrimaryWithOptions

    public static class ftPrimary_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPrimary
    // etc/XQFT.g:556:7: ftPrimary : ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection );
    public final ftPrimary_return ftPrimary() throws RecognitionException {
        ftPrimary_return retval = new ftPrimary_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPARSi380=null;
        Token RPARSi382=null;
        ftWords_return ftWords378 = null;

        ftTimes_return ftTimes379 = null;

        ftSelection_return ftSelection381 = null;

        ftExtensionSelection_return ftExtensionSelection383 = null;


        XQFTTree LPARSi380_tree=null;
        XQFTTree RPARSi382_tree=null;

        try {
            // etc/XQFT.g:556:38: ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection )
            int alt86=3;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case LBRACESi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
                {
                alt86=1;
                }
                break;
            case LPARSi:
                {
                alt86=2;
                }
                break;
            case LPRAGSi:
                {
                alt86=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("556:7: ftPrimary : ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection );", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // etc/XQFT.g:556:40: ftWords ( ftTimes )?
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWords_in_ftPrimary6236);
                    ftWords378=ftWords();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWords378.getTree());
                    // etc/XQFT.g:556:48: ( ftTimes )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==OCCURS) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // etc/XQFT.g:556:48: ftTimes
                            {
                            pushFollow(FOLLOW_ftTimes_in_ftPrimary6238);
                            ftTimes379=ftTimes();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftTimes379.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:557:19: LPARSi ftSelection RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    LPARSi380=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftPrimary6260); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi380_tree = (XQFTTree)adaptor.create(LPARSi380);
                    adaptor.addChild(root_0, LPARSi380_tree);
                    }
                    pushFollow(FOLLOW_ftSelection_in_ftPrimary6262);
                    ftSelection381=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection381.getTree());
                    RPARSi382=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftPrimary6264); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi382_tree = (XQFTTree)adaptor.create(RPARSi382);
                    adaptor.addChild(root_0, RPARSi382_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:558:19: ftExtensionSelection
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionSelection_in_ftPrimary6285);
                    ftExtensionSelection383=ftExtensionSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftExtensionSelection383.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPrimary

    public static class ftWords_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWords
    // etc/XQFT.g:560:8: ftWords : ftWordsValue ( ftAnyallOption )? ;
    public final ftWords_return ftWords() throws RecognitionException {
        ftWords_return retval = new ftWords_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftWordsValue_return ftWordsValue384 = null;

        ftAnyallOption_return ftAnyallOption385 = null;



        try {
            // etc/XQFT.g:560:39: ( ftWordsValue ( ftAnyallOption )? )
            // etc/XQFT.g:560:41: ftWordsValue ( ftAnyallOption )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftWordsValue_in_ftWords6339);
            ftWordsValue384=ftWordsValue();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftWordsValue384.getTree());
            // etc/XQFT.g:560:54: ( ftAnyallOption )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( ((LA87_0>=ALL && LA87_0<=ANY)||LA87_0==PHRASE) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // etc/XQFT.g:560:54: ftAnyallOption
                    {
                    pushFollow(FOLLOW_ftAnyallOption_in_ftWords6341);
                    ftAnyallOption385=ftAnyallOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftAnyallOption385.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWords

    public static class ftWordsValue_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWordsValue
    // etc/XQFT.g:561:9: ftWordsValue : ( literal | ( LBRACESi expr RBRACSi ) );
    public final ftWordsValue_return ftWordsValue() throws RecognitionException {
        ftWordsValue_return retval = new ftWordsValue_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi387=null;
        Token RBRACSi389=null;
        literal_return literal386 = null;

        expr_return expr388 = null;


        XQFTTree LBRACESi387_tree=null;
        XQFTTree RBRACSi389_tree=null;

        try {
            // etc/XQFT.g:561:40: ( literal | ( LBRACESi expr RBRACSi ) )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==StringLiteral||(LA88_0>=IntegerLiteral && LA88_0<=DoubleLiteral)) ) {
                alt88=1;
            }
            else if ( (LA88_0==LBRACESi) ) {
                alt88=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("561:9: ftWordsValue : ( literal | ( LBRACESi expr RBRACSi ) );", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // etc/XQFT.g:561:42: literal
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_ftWordsValue6375);
                    literal386=literal();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal386.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:561:52: ( LBRACESi expr RBRACSi )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:561:52: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:561:53: LBRACESi expr RBRACSi
                    {
                    LBRACESi387=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_ftWordsValue6380); if (failed) return retval;
                    pushFollow(FOLLOW_expr_in_ftWordsValue6383);
                    expr388=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr388.getTree());
                    RBRACSi389=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_ftWordsValue6385); if (failed) return retval;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWordsValue

    public static class literal_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start literal
    // etc/XQFT.g:562:10: literal : ( numericLiteral | StringLiteral );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token StringLiteral391=null;
        numericLiteral_return numericLiteral390 = null;


        XQFTTree StringLiteral391_tree=null;

        try {
            // etc/XQFT.g:562:41: ( numericLiteral | StringLiteral )
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( ((LA89_0>=IntegerLiteral && LA89_0<=DoubleLiteral)) ) {
                alt89=1;
            }
            else if ( (LA89_0==StringLiteral) ) {
                alt89=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("562:10: literal : ( numericLiteral | StringLiteral );", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // etc/XQFT.g:562:43: numericLiteral
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_literal6426);
                    numericLiteral390=numericLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, numericLiteral390.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:562:60: StringLiteral
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    StringLiteral391=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_literal6430); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral391_tree = (XQFTTree)adaptor.create(StringLiteral391);
                    adaptor.addChild(root_0, StringLiteral391_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end literal

    public static class numericLiteral_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start numericLiteral
    // etc/XQFT.g:563:11: numericLiteral : ( IntegerLiteral | DecimalLiteral | DoubleLiteral );
    public final numericLiteral_return numericLiteral() throws RecognitionException {
        numericLiteral_return retval = new numericLiteral_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set392=null;

        XQFTTree set392_tree=null;

        try {
            // etc/XQFT.g:563:42: ( IntegerLiteral | DecimalLiteral | DoubleLiteral )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set392=(Token)input.LT(1);
            if ( (input.LA(1)>=IntegerLiteral && input.LA(1)<=DoubleLiteral) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set392));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_numericLiteral0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end numericLiteral

    public static class ftAnyallOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftAnyallOption
    // etc/XQFT.g:564:9: ftAnyallOption : ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE );
    public final ftAnyallOption_return ftAnyallOption() throws RecognitionException {
        ftAnyallOption_return retval = new ftAnyallOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ANY393=null;
        Token WORD394=null;
        Token ALL395=null;
        Token WORDS396=null;
        Token PHRASE397=null;

        XQFTTree ANY393_tree=null;
        XQFTTree WORD394_tree=null;
        XQFTTree ALL395_tree=null;
        XQFTTree WORDS396_tree=null;
        XQFTTree PHRASE397_tree=null;

        try {
            // etc/XQFT.g:564:40: ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE )
            int alt92=3;
            switch ( input.LA(1) ) {
            case ANY:
                {
                alt92=1;
                }
                break;
            case ALL:
                {
                alt92=2;
                }
                break;
            case PHRASE:
                {
                alt92=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("564:9: ftAnyallOption : ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE );", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // etc/XQFT.g:564:42: ( ANY ( WORD )? )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:564:42: ( ANY ( WORD )? )
                    // etc/XQFT.g:564:43: ANY ( WORD )?
                    {
                    ANY393=(Token)input.LT(1);
                    match(input,ANY,FOLLOW_ANY_in_ftAnyallOption6503); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ANY393_tree = (XQFTTree)adaptor.create(ANY393);
                    adaptor.addChild(root_0, ANY393_tree);
                    }
                    // etc/XQFT.g:564:47: ( WORD )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==WORD) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // etc/XQFT.g:564:47: WORD
                            {
                            WORD394=(Token)input.LT(1);
                            match(input,WORD,FOLLOW_WORD_in_ftAnyallOption6505); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WORD394_tree = (XQFTTree)adaptor.create(WORD394);
                            adaptor.addChild(root_0, WORD394_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:564:56: ( ALL ( WORDS )? )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:564:56: ( ALL ( WORDS )? )
                    // etc/XQFT.g:564:57: ALL ( WORDS )?
                    {
                    ALL395=(Token)input.LT(1);
                    match(input,ALL,FOLLOW_ALL_in_ftAnyallOption6512); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ALL395_tree = (XQFTTree)adaptor.create(ALL395);
                    adaptor.addChild(root_0, ALL395_tree);
                    }
                    // etc/XQFT.g:564:61: ( WORDS )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==WORDS) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // etc/XQFT.g:564:61: WORDS
                            {
                            WORDS396=(Token)input.LT(1);
                            match(input,WORDS,FOLLOW_WORDS_in_ftAnyallOption6514); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WORDS396_tree = (XQFTTree)adaptor.create(WORDS396);
                            adaptor.addChild(root_0, WORDS396_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:564:71: PHRASE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    PHRASE397=(Token)input.LT(1);
                    match(input,PHRASE,FOLLOW_PHRASE_in_ftAnyallOption6520); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PHRASE397_tree = (XQFTTree)adaptor.create(PHRASE397);
                    adaptor.addChild(root_0, PHRASE397_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftAnyallOption

    public static class ftTimes_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftTimes
    // etc/XQFT.g:565:8: ftTimes : OCCURS ftRange TIMES ;
    public final ftTimes_return ftTimes() throws RecognitionException {
        ftTimes_return retval = new ftTimes_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OCCURS398=null;
        Token TIMES400=null;
        ftRange_return ftRange399 = null;


        XQFTTree OCCURS398_tree=null;
        XQFTTree TIMES400_tree=null;

        try {
            // etc/XQFT.g:565:39: ( OCCURS ftRange TIMES )
            // etc/XQFT.g:565:41: OCCURS ftRange TIMES
            {
            root_0 = (XQFTTree)adaptor.nil();

            OCCURS398=(Token)input.LT(1);
            match(input,OCCURS,FOLLOW_OCCURS_in_ftTimes6557); if (failed) return retval;
            pushFollow(FOLLOW_ftRange_in_ftTimes6560);
            ftRange399=ftRange();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRange399.getTree());
            TIMES400=(Token)input.LT(1);
            match(input,TIMES,FOLLOW_TIMES_in_ftTimes6562); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftTimes

    public static class ftRange_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftRange
    // etc/XQFT.g:566:9: ftRange : ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );
    public final ftRange_return ftRange() throws RecognitionException {
        ftRange_return retval = new ftRange_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token EXACTLY401=null;
        Token AT403=null;
        Token LEAST404=null;
        Token AT406=null;
        Token MOST407=null;
        Token FROM409=null;
        Token TO411=null;
        additiveExpr_return additiveExpr402 = null;

        additiveExpr_return additiveExpr405 = null;

        additiveExpr_return additiveExpr408 = null;

        additiveExpr_return additiveExpr410 = null;

        additiveExpr_return additiveExpr412 = null;


        XQFTTree EXACTLY401_tree=null;
        XQFTTree AT403_tree=null;
        XQFTTree LEAST404_tree=null;
        XQFTTree AT406_tree=null;
        XQFTTree MOST407_tree=null;
        XQFTTree FROM409_tree=null;
        XQFTTree TO411_tree=null;

        try {
            // etc/XQFT.g:566:40: ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) )
            int alt93=4;
            switch ( input.LA(1) ) {
            case EXACTLY:
                {
                alt93=1;
                }
                break;
            case AT:
                {
                int LA93_2 = input.LA(2);

                if ( (LA93_2==LEAST) ) {
                    alt93=2;
                }
                else if ( (LA93_2==MOST) ) {
                    alt93=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("566:9: ftRange : ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );", 93, 2, input);

                    throw nvae;
                }
                }
                break;
            case FROM:
                {
                alt93=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("566:9: ftRange : ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // etc/XQFT.g:566:42: ( EXACTLY additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:566:42: ( EXACTLY additiveExpr )
                    // etc/XQFT.g:566:43: EXACTLY additiveExpr
                    {
                    EXACTLY401=(Token)input.LT(1);
                    match(input,EXACTLY,FOLLOW_EXACTLY_in_ftRange6602); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXACTLY401_tree = (XQFTTree)adaptor.create(EXACTLY401);
                    adaptor.addChild(root_0, EXACTLY401_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6604);
                    additiveExpr402=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr402.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:567:39: ( AT LEAST additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:567:39: ( AT LEAST additiveExpr )
                    // etc/XQFT.g:567:40: AT LEAST additiveExpr
                    {
                    AT403=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRange6646); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT403_tree = (XQFTTree)adaptor.create(AT403);
                    adaptor.addChild(root_0, AT403_tree);
                    }
                    LEAST404=(Token)input.LT(1);
                    match(input,LEAST,FOLLOW_LEAST_in_ftRange6648); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LEAST404_tree = (XQFTTree)adaptor.create(LEAST404);
                    adaptor.addChild(root_0, LEAST404_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6650);
                    additiveExpr405=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr405.getTree());

                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:568:40: ( AT MOST additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:568:40: ( AT MOST additiveExpr )
                    // etc/XQFT.g:568:41: AT MOST additiveExpr
                    {
                    AT406=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRange6693); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT406_tree = (XQFTTree)adaptor.create(AT406);
                    adaptor.addChild(root_0, AT406_tree);
                    }
                    MOST407=(Token)input.LT(1);
                    match(input,MOST,FOLLOW_MOST_in_ftRange6695); if (failed) return retval;
                    if ( backtracking==0 ) {
                    MOST407_tree = (XQFTTree)adaptor.create(MOST407);
                    adaptor.addChild(root_0, MOST407_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6697);
                    additiveExpr408=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr408.getTree());

                    }


                    }
                    break;
                case 4 :
                    // etc/XQFT.g:569:45: ( FROM additiveExpr TO additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:569:45: ( FROM additiveExpr TO additiveExpr )
                    // etc/XQFT.g:569:46: FROM additiveExpr TO additiveExpr
                    {
                    FROM409=(Token)input.LT(1);
                    match(input,FROM,FOLLOW_FROM_in_ftRange6745); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FROM409_tree = (XQFTTree)adaptor.create(FROM409);
                    adaptor.addChild(root_0, FROM409_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6747);
                    additiveExpr410=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr410.getTree());
                    TO411=(Token)input.LT(1);
                    match(input,TO,FOLLOW_TO_in_ftRange6749); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TO411_tree = (XQFTTree)adaptor.create(TO411);
                    adaptor.addChild(root_0, TO411_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6751);
                    additiveExpr412=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr412.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftRange

    public static class ftExtensionSelection_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftExtensionSelection
    // etc/XQFT.g:572:8: ftExtensionSelection : ( pragma )+ LBRACESi ( ftSelection )? RBRACSi ;
    public final ftExtensionSelection_return ftExtensionSelection() throws RecognitionException {
        ftExtensionSelection_return retval = new ftExtensionSelection_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi414=null;
        Token RBRACSi416=null;
        pragma_return pragma413 = null;

        ftSelection_return ftSelection415 = null;


        XQFTTree LBRACESi414_tree=null;
        XQFTTree RBRACSi416_tree=null;

        try {
            // etc/XQFT.g:572:39: ( ( pragma )+ LBRACESi ( ftSelection )? RBRACSi )
            // etc/XQFT.g:572:41: ( pragma )+ LBRACESi ( ftSelection )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:572:41: ( pragma )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==LPRAGSi) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // etc/XQFT.g:572:41: pragma
            	    {
            	    pushFollow(FOLLOW_pragma_in_ftExtensionSelection6778);
            	    pragma413=pragma();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, pragma413.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);

            LBRACESi414=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_ftExtensionSelection6781); if (failed) return retval;
            // etc/XQFT.g:572:59: ( ftSelection )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==FTNOT||LA95_0==StringLiteral||LA95_0==LPARSi||LA95_0==LBRACESi||(LA95_0>=IntegerLiteral && LA95_0<=LPRAGSi)) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // etc/XQFT.g:572:59: ftSelection
                    {
                    pushFollow(FOLLOW_ftSelection_in_ftExtensionSelection6784);
                    ftSelection415=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection415.getTree());

                    }
                    break;

            }

            RBRACSi416=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_ftExtensionSelection6787); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftExtensionSelection

    public static class pragma_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pragma
    // etc/XQFT.g:573:9: pragma : LPRAGSi qName ( PragmaContents )? RPRAGSi ;
    public final pragma_return pragma() throws RecognitionException {
        pragma_return retval = new pragma_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPRAGSi417=null;
        Token PragmaContents419=null;
        Token RPRAGSi420=null;
        qName_return qName418 = null;


        XQFTTree LPRAGSi417_tree=null;
        XQFTTree PragmaContents419_tree=null;
        XQFTTree RPRAGSi420_tree=null;

        try {
            // etc/XQFT.g:573:40: ( LPRAGSi qName ( PragmaContents )? RPRAGSi )
            // etc/XQFT.g:573:42: LPRAGSi qName ( PragmaContents )? RPRAGSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LPRAGSi417=(Token)input.LT(1);
            match(input,LPRAGSi,FOLLOW_LPRAGSi_in_pragma6827); if (failed) return retval;
            pushFollow(FOLLOW_qName_in_pragma6830);
            qName418=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName418.getTree());
            // etc/XQFT.g:573:57: ( PragmaContents )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==PragmaContents) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // etc/XQFT.g:573:57: PragmaContents
                    {
                    PragmaContents419=(Token)input.LT(1);
                    match(input,PragmaContents,FOLLOW_PragmaContents_in_pragma6832); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PragmaContents419_tree = (XQFTTree)adaptor.create(PragmaContents419);
                    adaptor.addChild(root_0, PragmaContents419_tree);
                    }

                    }
                    break;

            }

            RPRAGSi420=(Token)input.LT(1);
            match(input,RPRAGSi,FOLLOW_RPRAGSi_in_pragma6835); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end pragma

    public static class ftPosFilter_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPosFilter
    // etc/XQFT.g:580:2: ftPosFilter : ( ftOrder | ftWindow | ftDistance | ftScope | ftContent );
    public final ftPosFilter_return ftPosFilter() throws RecognitionException {
        ftPosFilter_return retval = new ftPosFilter_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftOrder_return ftOrder421 = null;

        ftWindow_return ftWindow422 = null;

        ftDistance_return ftDistance423 = null;

        ftScope_return ftScope424 = null;

        ftContent_return ftContent425 = null;



        try {
            // etc/XQFT.g:580:33: ( ftOrder | ftWindow | ftDistance | ftScope | ftContent )
            int alt97=5;
            switch ( input.LA(1) ) {
            case ORDERED:
                {
                alt97=1;
                }
                break;
            case WINDOW:
                {
                alt97=2;
                }
                break;
            case DISTANCE:
                {
                alt97=3;
                }
                break;
            case DIFFERENT:
            case SAME:
                {
                alt97=4;
                }
                break;
            case AT:
            case ENTIRE:
                {
                alt97=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("580:2: ftPosFilter : ( ftOrder | ftWindow | ftDistance | ftScope | ftContent );", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // etc/XQFT.g:580:35: ftOrder
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftOrder_in_ftPosFilter6891);
                    ftOrder421=ftOrder();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftOrder421.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:580:45: ftWindow
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWindow_in_ftPosFilter6895);
                    ftWindow422=ftWindow();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWindow422.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:580:56: ftDistance
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftDistance_in_ftPosFilter6899);
                    ftDistance423=ftDistance();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftDistance423.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:580:69: ftScope
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftScope_in_ftPosFilter6903);
                    ftScope424=ftScope();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftScope424.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:580:79: ftContent
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftContent_in_ftPosFilter6907);
                    ftContent425=ftContent();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftContent425.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPosFilter

    public static class ftOrder_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOrder
    // etc/XQFT.g:581:3: ftOrder : ORDERED ;
    public final ftOrder_return ftOrder() throws RecognitionException {
        ftOrder_return retval = new ftOrder_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDERED426=null;

        XQFTTree ORDERED426_tree=null;

        try {
            // etc/XQFT.g:581:34: ( ORDERED )
            // etc/XQFT.g:581:36: ORDERED
            {
            root_0 = (XQFTTree)adaptor.nil();

            ORDERED426=(Token)input.LT(1);
            match(input,ORDERED,FOLLOW_ORDERED_in_ftOrder6939); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERED426_tree = (XQFTTree)adaptor.create(ORDERED426);
            adaptor.addChild(root_0, ORDERED426_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOrder

    public static class ftWindow_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWindow
    // etc/XQFT.g:582:3: ftWindow : WINDOW additiveExpr ftUnit ;
    public final ftWindow_return ftWindow() throws RecognitionException {
        ftWindow_return retval = new ftWindow_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WINDOW427=null;
        additiveExpr_return additiveExpr428 = null;

        ftUnit_return ftUnit429 = null;


        XQFTTree WINDOW427_tree=null;

        try {
            // etc/XQFT.g:582:34: ( WINDOW additiveExpr ftUnit )
            // etc/XQFT.g:582:36: WINDOW additiveExpr ftUnit
            {
            root_0 = (XQFTTree)adaptor.nil();

            WINDOW427=(Token)input.LT(1);
            match(input,WINDOW,FOLLOW_WINDOW_in_ftWindow6970); if (failed) return retval;
            if ( backtracking==0 ) {
            WINDOW427_tree = (XQFTTree)adaptor.create(WINDOW427);
            adaptor.addChild(root_0, WINDOW427_tree);
            }
            pushFollow(FOLLOW_additiveExpr_in_ftWindow6972);
            additiveExpr428=additiveExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr428.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftWindow6974);
            ftUnit429=ftUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnit429.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWindow

    public static class ftUnit_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftUnit
    // etc/XQFT.g:584:4: ftUnit : ( WORDS | SENTENCES | PARAGRAPHS );
    public final ftUnit_return ftUnit() throws RecognitionException {
        ftUnit_return retval = new ftUnit_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set430=null;

        XQFTTree set430_tree=null;

        try {
            // etc/XQFT.g:584:35: ( WORDS | SENTENCES | PARAGRAPHS )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set430=(Token)input.LT(1);
            if ( input.LA(1)==PARAGRAPHS||input.LA(1)==SENTENCES||input.LA(1)==WORDS ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set430));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftUnit0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftUnit

    public static class ftDistance_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftDistance
    // etc/XQFT.g:585:3: ftDistance : DISTANCE ftRange ftUnit ;
    public final ftDistance_return ftDistance() throws RecognitionException {
        ftDistance_return retval = new ftDistance_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DISTANCE431=null;
        ftRange_return ftRange432 = null;

        ftUnit_return ftUnit433 = null;


        XQFTTree DISTANCE431_tree=null;

        try {
            // etc/XQFT.g:585:34: ( DISTANCE ftRange ftUnit )
            // etc/XQFT.g:585:36: DISTANCE ftRange ftUnit
            {
            root_0 = (XQFTTree)adaptor.nil();

            DISTANCE431=(Token)input.LT(1);
            match(input,DISTANCE,FOLLOW_DISTANCE_in_ftDistance7047); if (failed) return retval;
            if ( backtracking==0 ) {
            DISTANCE431_tree = (XQFTTree)adaptor.create(DISTANCE431);
            adaptor.addChild(root_0, DISTANCE431_tree);
            }
            pushFollow(FOLLOW_ftRange_in_ftDistance7049);
            ftRange432=ftRange();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRange432.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftDistance7051);
            ftUnit433=ftUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnit433.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftDistance

    public static class ftScope_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftScope
    // etc/XQFT.g:592:3: ftScope : ( SAME | DIFFERENT ) ftBigUnit ;
    public final ftScope_return ftScope() throws RecognitionException {
        ftScope_return retval = new ftScope_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set434=null;
        ftBigUnit_return ftBigUnit435 = null;


        XQFTTree set434_tree=null;

        try {
            // etc/XQFT.g:592:34: ( ( SAME | DIFFERENT ) ftBigUnit )
            // etc/XQFT.g:592:36: ( SAME | DIFFERENT ) ftBigUnit
            {
            root_0 = (XQFTTree)adaptor.nil();

            set434=(Token)input.LT(1);
            if ( input.LA(1)==DIFFERENT||input.LA(1)==SAME ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set434));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftScope7089);    throw mse;
            }

            pushFollow(FOLLOW_ftBigUnit_in_ftScope7097);
            ftBigUnit435=ftBigUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftBigUnit435.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftScope

    public static class ftBigUnit_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftBigUnit
    // etc/XQFT.g:593:4: ftBigUnit : ( SENTENCE | PARAGRAPH );
    public final ftBigUnit_return ftBigUnit() throws RecognitionException {
        ftBigUnit_return retval = new ftBigUnit_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set436=null;

        XQFTTree set436_tree=null;

        try {
            // etc/XQFT.g:593:35: ( SENTENCE | PARAGRAPH )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set436=(Token)input.LT(1);
            if ( input.LA(1)==PARAGRAPH||input.LA(1)==SENTENCE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set436));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftBigUnit0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftBigUnit

    public static class ftContent_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftContent
    // etc/XQFT.g:594:3: ftContent : ( AT START | AT END | ENTIRE CONTENT );
    public final ftContent_return ftContent() throws RecognitionException {
        ftContent_return retval = new ftContent_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT437=null;
        Token START438=null;
        Token AT439=null;
        Token END440=null;
        Token ENTIRE441=null;
        Token CONTENT442=null;

        XQFTTree AT437_tree=null;
        XQFTTree START438_tree=null;
        XQFTTree AT439_tree=null;
        XQFTTree END440_tree=null;
        XQFTTree ENTIRE441_tree=null;
        XQFTTree CONTENT442_tree=null;

        try {
            // etc/XQFT.g:594:34: ( AT START | AT END | ENTIRE CONTENT )
            int alt98=3;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==AT) ) {
                int LA98_1 = input.LA(2);

                if ( (LA98_1==END) ) {
                    alt98=2;
                }
                else if ( (LA98_1==START) ) {
                    alt98=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("594:3: ftContent : ( AT START | AT END | ENTIRE CONTENT );", 98, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA98_0==ENTIRE) ) {
                alt98=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("594:3: ftContent : ( AT START | AT END | ENTIRE CONTENT );", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // etc/XQFT.g:594:36: AT START
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    AT437=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftContent7163); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT437_tree = (XQFTTree)adaptor.create(AT437);
                    adaptor.addChild(root_0, AT437_tree);
                    }
                    START438=(Token)input.LT(1);
                    match(input,START,FOLLOW_START_in_ftContent7165); if (failed) return retval;
                    if ( backtracking==0 ) {
                    START438_tree = (XQFTTree)adaptor.create(START438);
                    adaptor.addChild(root_0, START438_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:594:47: AT END
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    AT439=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftContent7169); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT439_tree = (XQFTTree)adaptor.create(AT439);
                    adaptor.addChild(root_0, AT439_tree);
                    }
                    END440=(Token)input.LT(1);
                    match(input,END,FOLLOW_END_in_ftContent7171); if (failed) return retval;
                    if ( backtracking==0 ) {
                    END440_tree = (XQFTTree)adaptor.create(END440);
                    adaptor.addChild(root_0, END440_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:594:56: ENTIRE CONTENT
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    ENTIRE441=(Token)input.LT(1);
                    match(input,ENTIRE,FOLLOW_ENTIRE_in_ftContent7175); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ENTIRE441_tree = (XQFTTree)adaptor.create(ENTIRE441);
                    adaptor.addChild(root_0, ENTIRE441_tree);
                    }
                    CONTENT442=(Token)input.LT(1);
                    match(input,CONTENT,FOLLOW_CONTENT_in_ftContent7177); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CONTENT442_tree = (XQFTTree)adaptor.create(CONTENT442);
                    adaptor.addChild(root_0, CONTENT442_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftContent

    public static class ftMatchOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMatchOption
    // etc/XQFT.g:603:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );
    public final ftMatchOption_return ftMatchOption() throws RecognitionException {
        ftMatchOption_return retval = new ftMatchOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftLanguageOption_return ftLanguageOption443 = null;

        ftWildCardOption_return ftWildCardOption444 = null;

        ftThesaurusOption_return ftThesaurusOption445 = null;

        ftStemOption_return ftStemOption446 = null;

        ftCaseOption_return ftCaseOption447 = null;

        ftDiacriticsOption_return ftDiacriticsOption448 = null;

        ftStopwordOption_return ftStopwordOption449 = null;

        ftExtensionOption_return ftExtensionOption450 = null;



        try {
            // etc/XQFT.g:603:32: ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption )
            int alt99=8;
            switch ( input.LA(1) ) {
            case LANGUAGE:
                {
                alt99=1;
                }
                break;
            case WITH:
                {
                switch ( input.LA(2) ) {
                case STEMMING:
                    {
                    alt99=4;
                    }
                    break;
                case THESAURUS:
                    {
                    alt99=3;
                    }
                    break;
                case DEFAULT:
                case STOP:
                    {
                    alt99=7;
                    }
                    break;
                case WILDCARDS:
                    {
                    alt99=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("603:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );", 99, 2, input);

                    throw nvae;
                }

                }
                break;
            case WITHOUT:
                {
                switch ( input.LA(2) ) {
                case THESAURUS:
                    {
                    alt99=3;
                    }
                    break;
                case STEMMING:
                    {
                    alt99=4;
                    }
                    break;
                case WILDCARDS:
                    {
                    alt99=2;
                    }
                    break;
                case STOP:
                    {
                    alt99=7;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("603:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );", 99, 3, input);

                    throw nvae;
                }

                }
                break;
            case CASE:
            case LOWERCASE:
            case UPPERCASE:
                {
                alt99=5;
                }
                break;
            case DIACRITICS:
                {
                alt99=6;
                }
                break;
            case OPTION:
                {
                alt99=8;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("603:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // etc/XQFT.g:603:34: ftLanguageOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftLanguageOption_in_ftMatchOption7215);
                    ftLanguageOption443=ftLanguageOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftLanguageOption443.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:604:37: ftWildCardOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWildCardOption_in_ftMatchOption7253);
                    ftWildCardOption444=ftWildCardOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWildCardOption444.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:605:37: ftThesaurusOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftThesaurusOption_in_ftMatchOption7291);
                    ftThesaurusOption445=ftThesaurusOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusOption445.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:606:37: ftStemOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftStemOption_in_ftMatchOption7329);
                    ftStemOption446=ftStemOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftStemOption446.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:607:37: ftCaseOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftCaseOption_in_ftMatchOption7367);
                    ftCaseOption447=ftCaseOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftCaseOption447.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:608:37: ftDiacriticsOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftDiacriticsOption_in_ftMatchOption7405);
                    ftDiacriticsOption448=ftDiacriticsOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftDiacriticsOption448.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:609:37: ftStopwordOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftStopwordOption_in_ftMatchOption7443);
                    ftStopwordOption449=ftStopwordOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftStopwordOption449.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:610:37: ftExtensionOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionOption_in_ftMatchOption7481);
                    ftExtensionOption450=ftExtensionOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftExtensionOption450.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMatchOption

    public static class ftLanguageOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftLanguageOption
    // etc/XQFT.g:613:2: ftLanguageOption : LANGUAGE StringLiteral ;
    public final ftLanguageOption_return ftLanguageOption() throws RecognitionException {
        ftLanguageOption_return retval = new ftLanguageOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LANGUAGE451=null;
        Token StringLiteral452=null;

        XQFTTree LANGUAGE451_tree=null;
        XQFTTree StringLiteral452_tree=null;

        try {
            // etc/XQFT.g:613:33: ( LANGUAGE StringLiteral )
            // etc/XQFT.g:613:35: LANGUAGE StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            LANGUAGE451=(Token)input.LT(1);
            match(input,LANGUAGE,FOLLOW_LANGUAGE_in_ftLanguageOption7606); if (failed) return retval;
            if ( backtracking==0 ) {
            LANGUAGE451_tree = (XQFTTree)adaptor.create(LANGUAGE451);
            adaptor.addChild(root_0, LANGUAGE451_tree);
            }
            StringLiteral452=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_ftLanguageOption7608); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral452_tree = (XQFTTree)adaptor.create(StringLiteral452);
            adaptor.addChild(root_0, StringLiteral452_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftLanguageOption

    public static class ftWildCardOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWildCardOption
    // etc/XQFT.g:616:2: ftWildCardOption : ( WITH WILDCARDS | WITHOUT WILDCARDS );
    public final ftWildCardOption_return ftWildCardOption() throws RecognitionException {
        ftWildCardOption_return retval = new ftWildCardOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITH453=null;
        Token WILDCARDS454=null;
        Token WITHOUT455=null;
        Token WILDCARDS456=null;

        XQFTTree WITH453_tree=null;
        XQFTTree WILDCARDS454_tree=null;
        XQFTTree WITHOUT455_tree=null;
        XQFTTree WILDCARDS456_tree=null;

        try {
            // etc/XQFT.g:616:33: ( WITH WILDCARDS | WITHOUT WILDCARDS )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==WITH) ) {
                alt100=1;
            }
            else if ( (LA100_0==WITHOUT) ) {
                alt100=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("616:2: ftWildCardOption : ( WITH WILDCARDS | WITHOUT WILDCARDS );", 100, 0, input);

                throw nvae;
            }
            switch (alt100) {
                case 1 :
                    // etc/XQFT.g:616:35: WITH WILDCARDS
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH453=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftWildCardOption7634); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH453_tree = (XQFTTree)adaptor.create(WITH453);
                    adaptor.addChild(root_0, WITH453_tree);
                    }
                    WILDCARDS454=(Token)input.LT(1);
                    match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftWildCardOption7636); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WILDCARDS454_tree = (XQFTTree)adaptor.create(WILDCARDS454);
                    adaptor.addChild(root_0, WILDCARDS454_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:616:52: WITHOUT WILDCARDS
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITHOUT455=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftWildCardOption7640); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT455_tree = (XQFTTree)adaptor.create(WITHOUT455);
                    adaptor.addChild(root_0, WITHOUT455_tree);
                    }
                    WILDCARDS456=(Token)input.LT(1);
                    match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftWildCardOption7642); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WILDCARDS456_tree = (XQFTTree)adaptor.create(WILDCARDS456);
                    adaptor.addChild(root_0, WILDCARDS456_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWildCardOption

    public static class ftThesaurusOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftThesaurusOption
    // etc/XQFT.g:619:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );
    public final ftThesaurusOption_return ftThesaurusOption() throws RecognitionException {
        ftThesaurusOption_return retval = new ftThesaurusOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITH457=null;
        Token THESAURUS458=null;
        Token DEFAULT460=null;
        Token WITH461=null;
        Token THESAURUS462=null;
        Token LPARSi463=null;
        Token DEFAULT465=null;
        Token COMMASi466=null;
        Token RPARSi468=null;
        Token WITHOUT469=null;
        Token THESAURUS470=null;
        ftThesaurusID_return ftThesaurusID459 = null;

        ftThesaurusID_return ftThesaurusID464 = null;

        ftThesaurusID_return ftThesaurusID467 = null;


        XQFTTree WITH457_tree=null;
        XQFTTree THESAURUS458_tree=null;
        XQFTTree DEFAULT460_tree=null;
        XQFTTree WITH461_tree=null;
        XQFTTree THESAURUS462_tree=null;
        XQFTTree LPARSi463_tree=null;
        XQFTTree DEFAULT465_tree=null;
        XQFTTree COMMASi466_tree=null;
        XQFTTree RPARSi468_tree=null;
        XQFTTree WITHOUT469_tree=null;
        XQFTTree THESAURUS470_tree=null;

        try {
            // etc/XQFT.g:619:31: ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS )
            int alt104=3;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==WITH) ) {
                int LA104_1 = input.LA(2);

                if ( (LA104_1==THESAURUS) ) {
                    int LA104_3 = input.LA(3);

                    if ( (LA104_3==LPARSi) ) {
                        alt104=2;
                    }
                    else if ( (LA104_3==AT||LA104_3==DEFAULT) ) {
                        alt104=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("619:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );", 104, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("619:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );", 104, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA104_0==WITHOUT) ) {
                alt104=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("619:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );", 104, 0, input);

                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    // etc/XQFT.g:619:33: WITH THESAURUS ( ftThesaurusID | DEFAULT )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH457=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftThesaurusOption7665); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH457_tree = (XQFTTree)adaptor.create(WITH457);
                    adaptor.addChild(root_0, WITH457_tree);
                    }
                    THESAURUS458=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption7667); if (failed) return retval;
                    if ( backtracking==0 ) {
                    THESAURUS458_tree = (XQFTTree)adaptor.create(THESAURUS458);
                    adaptor.addChild(root_0, THESAURUS458_tree);
                    }
                    // etc/XQFT.g:619:48: ( ftThesaurusID | DEFAULT )
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==AT) ) {
                        alt101=1;
                    }
                    else if ( (LA101_0==DEFAULT) ) {
                        alt101=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("619:48: ( ftThesaurusID | DEFAULT )", 101, 0, input);

                        throw nvae;
                    }
                    switch (alt101) {
                        case 1 :
                            // etc/XQFT.g:619:49: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption7670);
                            ftThesaurusID459=ftThesaurusID();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID459.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:619:65: DEFAULT
                            {
                            DEFAULT460=(Token)input.LT(1);
                            match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption7674); if (failed) return retval;
                            if ( backtracking==0 ) {
                            DEFAULT460_tree = (XQFTTree)adaptor.create(DEFAULT460);
                            adaptor.addChild(root_0, DEFAULT460_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:620:14: WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH461=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftThesaurusOption7690); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH461_tree = (XQFTTree)adaptor.create(WITH461);
                    adaptor.addChild(root_0, WITH461_tree);
                    }
                    THESAURUS462=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption7692); if (failed) return retval;
                    if ( backtracking==0 ) {
                    THESAURUS462_tree = (XQFTTree)adaptor.create(THESAURUS462);
                    adaptor.addChild(root_0, THESAURUS462_tree);
                    }
                    LPARSi463=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftThesaurusOption7694); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi463_tree = (XQFTTree)adaptor.create(LPARSi463);
                    adaptor.addChild(root_0, LPARSi463_tree);
                    }
                    // etc/XQFT.g:620:36: ( ftThesaurusID | DEFAULT )
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==AT) ) {
                        alt102=1;
                    }
                    else if ( (LA102_0==DEFAULT) ) {
                        alt102=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("620:36: ( ftThesaurusID | DEFAULT )", 102, 0, input);

                        throw nvae;
                    }
                    switch (alt102) {
                        case 1 :
                            // etc/XQFT.g:620:37: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption7697);
                            ftThesaurusID464=ftThesaurusID();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID464.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:620:53: DEFAULT
                            {
                            DEFAULT465=(Token)input.LT(1);
                            match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption7701); if (failed) return retval;
                            if ( backtracking==0 ) {
                            DEFAULT465_tree = (XQFTTree)adaptor.create(DEFAULT465);
                            adaptor.addChild(root_0, DEFAULT465_tree);
                            }

                            }
                            break;

                    }

                    // etc/XQFT.g:620:62: ( COMMASi ftThesaurusID )*
                    loop103:
                    do {
                        int alt103=2;
                        int LA103_0 = input.LA(1);

                        if ( (LA103_0==COMMASi) ) {
                            alt103=1;
                        }


                        switch (alt103) {
                    	case 1 :
                    	    // etc/XQFT.g:620:63: COMMASi ftThesaurusID
                    	    {
                    	    COMMASi466=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_ftThesaurusOption7705); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi466_tree = (XQFTTree)adaptor.create(COMMASi466);
                    	    adaptor.addChild(root_0, COMMASi466_tree);
                    	    }
                    	    pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption7707);
                    	    ftThesaurusID467=ftThesaurusID();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID467.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop103;
                        }
                    } while (true);

                    RPARSi468=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftThesaurusOption7711); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi468_tree = (XQFTTree)adaptor.create(RPARSi468);
                    adaptor.addChild(root_0, RPARSi468_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:621:38: WITHOUT THESAURUS
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITHOUT469=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftThesaurusOption7750); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT469_tree = (XQFTTree)adaptor.create(WITHOUT469);
                    adaptor.addChild(root_0, WITHOUT469_tree);
                    }
                    THESAURUS470=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption7752); if (failed) return retval;
                    if ( backtracking==0 ) {
                    THESAURUS470_tree = (XQFTTree)adaptor.create(THESAURUS470);
                    adaptor.addChild(root_0, THESAURUS470_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftThesaurusOption

    public static class ftThesaurusID_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftThesaurusID
    // etc/XQFT.g:623:3: ftThesaurusID : AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )? ;
    public final ftThesaurusID_return ftThesaurusID() throws RecognitionException {
        ftThesaurusID_return retval = new ftThesaurusID_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT471=null;
        Token RELATIONSHIP473=null;
        Token StringLiteral474=null;
        Token LEVELS476=null;
        uriLiteral_return uriLiteral472 = null;

        ftRange_return ftRange475 = null;


        XQFTTree AT471_tree=null;
        XQFTTree RELATIONSHIP473_tree=null;
        XQFTTree StringLiteral474_tree=null;
        XQFTTree LEVELS476_tree=null;

        try {
            // etc/XQFT.g:623:34: ( AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )? )
            // etc/XQFT.g:623:36: AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            AT471=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_ftThesaurusID7814); if (failed) return retval;
            if ( backtracking==0 ) {
            AT471_tree = (XQFTTree)adaptor.create(AT471);
            adaptor.addChild(root_0, AT471_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_ftThesaurusID7816);
            uriLiteral472=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral472.getTree());
            // etc/XQFT.g:623:50: ( RELATIONSHIP StringLiteral )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==RELATIONSHIP) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // etc/XQFT.g:623:51: RELATIONSHIP StringLiteral
                    {
                    RELATIONSHIP473=(Token)input.LT(1);
                    match(input,RELATIONSHIP,FOLLOW_RELATIONSHIP_in_ftThesaurusID7819); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RELATIONSHIP473_tree = (XQFTTree)adaptor.create(RELATIONSHIP473);
                    adaptor.addChild(root_0, RELATIONSHIP473_tree);
                    }
                    StringLiteral474=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftThesaurusID7821); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral474_tree = (XQFTTree)adaptor.create(StringLiteral474);
                    adaptor.addChild(root_0, StringLiteral474_tree);
                    }

                    }
                    break;

            }

            // etc/XQFT.g:623:80: ( ftRange LEVELS )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==EXACTLY||LA106_0==FROM) ) {
                alt106=1;
            }
            else if ( (LA106_0==AT) ) {
                int LA106_2 = input.LA(2);

                if ( (LA106_2==LEAST||LA106_2==MOST) ) {
                    alt106=1;
                }
            }
            switch (alt106) {
                case 1 :
                    // etc/XQFT.g:623:81: ftRange LEVELS
                    {
                    pushFollow(FOLLOW_ftRange_in_ftThesaurusID7826);
                    ftRange475=ftRange();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftRange475.getTree());
                    LEVELS476=(Token)input.LT(1);
                    match(input,LEVELS,FOLLOW_LEVELS_in_ftThesaurusID7828); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LEVELS476_tree = (XQFTTree)adaptor.create(LEVELS476);
                    adaptor.addChild(root_0, LEVELS476_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftThesaurusID

    public static class ftStemOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftStemOption
    // etc/XQFT.g:633:2: ftStemOption : ( WITH STEMMING | WITHOUT STEMMING );
    public final ftStemOption_return ftStemOption() throws RecognitionException {
        ftStemOption_return retval = new ftStemOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITH477=null;
        Token STEMMING478=null;
        Token WITHOUT479=null;
        Token STEMMING480=null;

        XQFTTree WITH477_tree=null;
        XQFTTree STEMMING478_tree=null;
        XQFTTree WITHOUT479_tree=null;
        XQFTTree STEMMING480_tree=null;

        try {
            // etc/XQFT.g:633:33: ( WITH STEMMING | WITHOUT STEMMING )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==WITH) ) {
                alt107=1;
            }
            else if ( (LA107_0==WITHOUT) ) {
                alt107=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("633:2: ftStemOption : ( WITH STEMMING | WITHOUT STEMMING );", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // etc/XQFT.g:633:35: WITH STEMMING
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH477=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftStemOption7873); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH477_tree = (XQFTTree)adaptor.create(WITH477);
                    adaptor.addChild(root_0, WITH477_tree);
                    }
                    STEMMING478=(Token)input.LT(1);
                    match(input,STEMMING,FOLLOW_STEMMING_in_ftStemOption7875); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STEMMING478_tree = (XQFTTree)adaptor.create(STEMMING478);
                    adaptor.addChild(root_0, STEMMING478_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:633:51: WITHOUT STEMMING
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITHOUT479=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftStemOption7879); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT479_tree = (XQFTTree)adaptor.create(WITHOUT479);
                    adaptor.addChild(root_0, WITHOUT479_tree);
                    }
                    STEMMING480=(Token)input.LT(1);
                    match(input,STEMMING,FOLLOW_STEMMING_in_ftStemOption7881); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STEMMING480_tree = (XQFTTree)adaptor.create(STEMMING480);
                    adaptor.addChild(root_0, STEMMING480_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftStemOption

    public static class ftCaseOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftCaseOption
    // etc/XQFT.g:636:2: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );
    public final ftCaseOption_return ftCaseOption() throws RecognitionException {
        ftCaseOption_return retval = new ftCaseOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CASE481=null;
        Token INSENSITIVE482=null;
        Token CASE483=null;
        Token SENSITIVE484=null;
        Token LOWERCASE485=null;
        Token UPPERCASE486=null;

        XQFTTree CASE481_tree=null;
        XQFTTree INSENSITIVE482_tree=null;
        XQFTTree CASE483_tree=null;
        XQFTTree SENSITIVE484_tree=null;
        XQFTTree LOWERCASE485_tree=null;
        XQFTTree UPPERCASE486_tree=null;

        try {
            // etc/XQFT.g:636:33: ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE )
            int alt108=4;
            switch ( input.LA(1) ) {
            case CASE:
                {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==SENSITIVE) ) {
                    alt108=2;
                }
                else if ( (LA108_1==INSENSITIVE) ) {
                    alt108=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("636:2: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );", 108, 1, input);

                    throw nvae;
                }
                }
                break;
            case LOWERCASE:
                {
                alt108=3;
                }
                break;
            case UPPERCASE:
                {
                alt108=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("636:2: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );", 108, 0, input);

                throw nvae;
            }

            switch (alt108) {
                case 1 :
                    // etc/XQFT.g:636:35: CASE INSENSITIVE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    CASE481=(Token)input.LT(1);
                    match(input,CASE,FOLLOW_CASE_in_ftCaseOption7911); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASE481_tree = (XQFTTree)adaptor.create(CASE481);
                    adaptor.addChild(root_0, CASE481_tree);
                    }
                    INSENSITIVE482=(Token)input.LT(1);
                    match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_ftCaseOption7913); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSENSITIVE482_tree = (XQFTTree)adaptor.create(INSENSITIVE482);
                    adaptor.addChild(root_0, INSENSITIVE482_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:637:38: CASE SENSITIVE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    CASE483=(Token)input.LT(1);
                    match(input,CASE,FOLLOW_CASE_in_ftCaseOption7952); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASE483_tree = (XQFTTree)adaptor.create(CASE483);
                    adaptor.addChild(root_0, CASE483_tree);
                    }
                    SENSITIVE484=(Token)input.LT(1);
                    match(input,SENSITIVE,FOLLOW_SENSITIVE_in_ftCaseOption7954); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SENSITIVE484_tree = (XQFTTree)adaptor.create(SENSITIVE484);
                    adaptor.addChild(root_0, SENSITIVE484_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:638:38: LOWERCASE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    LOWERCASE485=(Token)input.LT(1);
                    match(input,LOWERCASE,FOLLOW_LOWERCASE_in_ftCaseOption7993); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LOWERCASE485_tree = (XQFTTree)adaptor.create(LOWERCASE485);
                    adaptor.addChild(root_0, LOWERCASE485_tree);
                    }

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:639:38: UPPERCASE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    UPPERCASE486=(Token)input.LT(1);
                    match(input,UPPERCASE,FOLLOW_UPPERCASE_in_ftCaseOption8032); if (failed) return retval;
                    if ( backtracking==0 ) {
                    UPPERCASE486_tree = (XQFTTree)adaptor.create(UPPERCASE486);
                    adaptor.addChild(root_0, UPPERCASE486_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftCaseOption

    public static class ftDiacriticsOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftDiacriticsOption
    // etc/XQFT.g:643:2: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );
    public final ftDiacriticsOption_return ftDiacriticsOption() throws RecognitionException {
        ftDiacriticsOption_return retval = new ftDiacriticsOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DIACRITICS487=null;
        Token INSENSITIVE488=null;
        Token DIACRITICS489=null;
        Token SENSITIVE490=null;

        XQFTTree DIACRITICS487_tree=null;
        XQFTTree INSENSITIVE488_tree=null;
        XQFTTree DIACRITICS489_tree=null;
        XQFTTree SENSITIVE490_tree=null;

        try {
            // etc/XQFT.g:643:33: ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==DIACRITICS) ) {
                int LA109_1 = input.LA(2);

                if ( (LA109_1==SENSITIVE) ) {
                    alt109=2;
                }
                else if ( (LA109_1==INSENSITIVE) ) {
                    alt109=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("643:2: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );", 109, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("643:2: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // etc/XQFT.g:643:35: DIACRITICS INSENSITIVE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    DIACRITICS487=(Token)input.LT(1);
                    match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ftDiacriticsOption8194); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DIACRITICS487_tree = (XQFTTree)adaptor.create(DIACRITICS487);
                    adaptor.addChild(root_0, DIACRITICS487_tree);
                    }
                    INSENSITIVE488=(Token)input.LT(1);
                    match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_ftDiacriticsOption8196); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSENSITIVE488_tree = (XQFTTree)adaptor.create(INSENSITIVE488);
                    adaptor.addChild(root_0, INSENSITIVE488_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:644:14: DIACRITICS SENSITIVE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    DIACRITICS489=(Token)input.LT(1);
                    match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ftDiacriticsOption8211); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DIACRITICS489_tree = (XQFTTree)adaptor.create(DIACRITICS489);
                    adaptor.addChild(root_0, DIACRITICS489_tree);
                    }
                    SENSITIVE490=(Token)input.LT(1);
                    match(input,SENSITIVE,FOLLOW_SENSITIVE_in_ftDiacriticsOption8213); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SENSITIVE490_tree = (XQFTTree)adaptor.create(SENSITIVE490);
                    adaptor.addChild(root_0, SENSITIVE490_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftDiacriticsOption

    public static class ftStopwordOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftStopwordOption
    // etc/XQFT.g:647:2: ftStopwordOption : ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );
    public final ftStopwordOption_return ftStopwordOption() throws RecognitionException {
        ftStopwordOption_return retval = new ftStopwordOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITH491=null;
        Token STOP492=null;
        Token WORDS493=null;
        Token WITHOUT496=null;
        Token STOP497=null;
        Token WORDS498=null;
        Token WITH499=null;
        Token DEFAULT500=null;
        Token STOP501=null;
        Token WORDS502=null;
        ftRefOrList_return ftRefOrList494 = null;

        ftInclExclStringLiteral_return ftInclExclStringLiteral495 = null;

        ftInclExclStringLiteral_return ftInclExclStringLiteral503 = null;


        XQFTTree WITH491_tree=null;
        XQFTTree STOP492_tree=null;
        XQFTTree WORDS493_tree=null;
        XQFTTree WITHOUT496_tree=null;
        XQFTTree STOP497_tree=null;
        XQFTTree WORDS498_tree=null;
        XQFTTree WITH499_tree=null;
        XQFTTree DEFAULT500_tree=null;
        XQFTTree STOP501_tree=null;
        XQFTTree WORDS502_tree=null;

        try {
            // etc/XQFT.g:647:33: ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* )
            int alt112=3;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==WITH) ) {
                int LA112_1 = input.LA(2);

                if ( (LA112_1==DEFAULT) ) {
                    alt112=3;
                }
                else if ( (LA112_1==STOP) ) {
                    alt112=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("647:2: ftStopwordOption : ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );", 112, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA112_0==WITHOUT) ) {
                alt112=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("647:2: ftStopwordOption : ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );", 112, 0, input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // etc/XQFT.g:647:35: WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )*
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH491=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftStopwordOption8269); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH491_tree = (XQFTTree)adaptor.create(WITH491);
                    adaptor.addChild(root_0, WITH491_tree);
                    }
                    STOP492=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption8271); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP492_tree = (XQFTTree)adaptor.create(STOP492);
                    adaptor.addChild(root_0, STOP492_tree);
                    }
                    WORDS493=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption8273); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS493_tree = (XQFTTree)adaptor.create(WORDS493);
                    adaptor.addChild(root_0, WORDS493_tree);
                    }
                    pushFollow(FOLLOW_ftRefOrList_in_ftStopwordOption8275);
                    ftRefOrList494=ftRefOrList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftRefOrList494.getTree());
                    // etc/XQFT.g:647:63: ( ftInclExclStringLiteral )*
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==EXCEPT||LA110_0==UNION) ) {
                            alt110=1;
                        }


                        switch (alt110) {
                    	case 1 :
                    	    // etc/XQFT.g:647:63: ftInclExclStringLiteral
                    	    {
                    	    pushFollow(FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8277);
                    	    ftInclExclStringLiteral495=ftInclExclStringLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftInclExclStringLiteral495.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop110;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:648:14: WITHOUT STOP WORDS
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITHOUT496=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftStopwordOption8293); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT496_tree = (XQFTTree)adaptor.create(WITHOUT496);
                    adaptor.addChild(root_0, WITHOUT496_tree);
                    }
                    STOP497=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption8295); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP497_tree = (XQFTTree)adaptor.create(STOP497);
                    adaptor.addChild(root_0, STOP497_tree);
                    }
                    WORDS498=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption8297); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS498_tree = (XQFTTree)adaptor.create(WORDS498);
                    adaptor.addChild(root_0, WORDS498_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:649:38: WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )*
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH499=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftStopwordOption8336); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH499_tree = (XQFTTree)adaptor.create(WITH499);
                    adaptor.addChild(root_0, WITH499_tree);
                    }
                    DEFAULT500=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_ftStopwordOption8338); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEFAULT500_tree = (XQFTTree)adaptor.create(DEFAULT500);
                    adaptor.addChild(root_0, DEFAULT500_tree);
                    }
                    STOP501=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption8340); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP501_tree = (XQFTTree)adaptor.create(STOP501);
                    adaptor.addChild(root_0, STOP501_tree);
                    }
                    WORDS502=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption8342); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS502_tree = (XQFTTree)adaptor.create(WORDS502);
                    adaptor.addChild(root_0, WORDS502_tree);
                    }
                    // etc/XQFT.g:649:62: ( ftInclExclStringLiteral )*
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);

                        if ( (LA111_0==EXCEPT||LA111_0==UNION) ) {
                            alt111=1;
                        }


                        switch (alt111) {
                    	case 1 :
                    	    // etc/XQFT.g:649:62: ftInclExclStringLiteral
                    	    {
                    	    pushFollow(FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8344);
                    	    ftInclExclStringLiteral503=ftInclExclStringLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftInclExclStringLiteral503.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop111;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftStopwordOption

    public static class ftRefOrList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftRefOrList
    // etc/XQFT.g:651:3: ftRefOrList : ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi );
    public final ftRefOrList_return ftRefOrList() throws RecognitionException {
        ftRefOrList_return retval = new ftRefOrList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT504=null;
        Token LPARSi506=null;
        Token StringLiteral507=null;
        Token COMMASi508=null;
        Token StringLiteral509=null;
        Token RPARSi510=null;
        uriLiteral_return uriLiteral505 = null;


        XQFTTree AT504_tree=null;
        XQFTTree LPARSi506_tree=null;
        XQFTTree StringLiteral507_tree=null;
        XQFTTree COMMASi508_tree=null;
        XQFTTree StringLiteral509_tree=null;
        XQFTTree RPARSi510_tree=null;

        try {
            // etc/XQFT.g:651:34: ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==AT) ) {
                alt114=1;
            }
            else if ( (LA114_0==LPARSi) ) {
                alt114=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("651:3: ftRefOrList : ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi );", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // etc/XQFT.g:651:36: ( AT uriLiteral )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:651:36: ( AT uriLiteral )
                    // etc/XQFT.g:651:37: AT uriLiteral
                    {
                    AT504=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRefOrList8410); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT504_tree = (XQFTTree)adaptor.create(AT504);
                    adaptor.addChild(root_0, AT504_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_ftRefOrList8412);
                    uriLiteral505=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral505.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:652:15: LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    LPARSi506=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftRefOrList8429); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi506_tree = (XQFTTree)adaptor.create(LPARSi506);
                    adaptor.addChild(root_0, LPARSi506_tree);
                    }
                    StringLiteral507=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftRefOrList8431); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral507_tree = (XQFTTree)adaptor.create(StringLiteral507);
                    adaptor.addChild(root_0, StringLiteral507_tree);
                    }
                    // etc/XQFT.g:652:36: ( COMMASi StringLiteral )*
                    loop113:
                    do {
                        int alt113=2;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==COMMASi) ) {
                            alt113=1;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // etc/XQFT.g:652:37: COMMASi StringLiteral
                    	    {
                    	    COMMASi508=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_ftRefOrList8434); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi508_tree = (XQFTTree)adaptor.create(COMMASi508);
                    	    adaptor.addChild(root_0, COMMASi508_tree);
                    	    }
                    	    StringLiteral509=(Token)input.LT(1);
                    	    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftRefOrList8436); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    StringLiteral509_tree = (XQFTTree)adaptor.create(StringLiteral509);
                    	    adaptor.addChild(root_0, StringLiteral509_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop113;
                        }
                    } while (true);

                    RPARSi510=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftRefOrList8440); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi510_tree = (XQFTTree)adaptor.create(RPARSi510);
                    adaptor.addChild(root_0, RPARSi510_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftRefOrList

    public static class ftInclExclStringLiteral_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftInclExclStringLiteral
    // etc/XQFT.g:654:3: ftInclExclStringLiteral : ( UNION | EXCEPT ) ftRefOrList ;
    public final ftInclExclStringLiteral_return ftInclExclStringLiteral() throws RecognitionException {
        ftInclExclStringLiteral_return retval = new ftInclExclStringLiteral_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set511=null;
        ftRefOrList_return ftRefOrList512 = null;


        XQFTTree set511_tree=null;

        try {
            // etc/XQFT.g:654:34: ( ( UNION | EXCEPT ) ftRefOrList )
            // etc/XQFT.g:654:36: ( UNION | EXCEPT ) ftRefOrList
            {
            root_0 = (XQFTTree)adaptor.nil();

            set511=(Token)input.LT(1);
            if ( input.LA(1)==EXCEPT||input.LA(1)==UNION ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set511));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftInclExclStringLiteral8457);    throw mse;
            }

            pushFollow(FOLLOW_ftRefOrList_in_ftInclExclStringLiteral8465);
            ftRefOrList512=ftRefOrList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRefOrList512.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftInclExclStringLiteral

    public static class ftExtensionOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftExtensionOption
    // etc/XQFT.g:657:2: ftExtensionOption : OPTION qName StringLiteral ;
    public final ftExtensionOption_return ftExtensionOption() throws RecognitionException {
        ftExtensionOption_return retval = new ftExtensionOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OPTION513=null;
        Token StringLiteral515=null;
        qName_return qName514 = null;


        XQFTTree OPTION513_tree=null;
        XQFTTree StringLiteral515_tree=null;

        try {
            // etc/XQFT.g:657:33: ( OPTION qName StringLiteral )
            // etc/XQFT.g:657:35: OPTION qName StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            OPTION513=(Token)input.LT(1);
            match(input,OPTION,FOLLOW_OPTION_in_ftExtensionOption8499); if (failed) return retval;
            if ( backtracking==0 ) {
            OPTION513_tree = (XQFTTree)adaptor.create(OPTION513);
            adaptor.addChild(root_0, OPTION513_tree);
            }
            pushFollow(FOLLOW_qName_in_ftExtensionOption8501);
            qName514=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName514.getTree());
            StringLiteral515=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_ftExtensionOption8503); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral515_tree = (XQFTTree)adaptor.create(StringLiteral515);
            adaptor.addChild(root_0, StringLiteral515_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftExtensionOption

    public static class valueExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start valueExpr
    // etc/XQFT.g:661:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );
    public final valueExpr_return valueExpr() throws RecognitionException {
        valueExpr_return retval = new valueExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        validateExpr_return validateExpr516 = null;

        pathExpr_return pathExpr517 = null;

        extensionExpr_return extensionExpr518 = null;



        try {
            // etc/XQFT.g:661:32: ( validateExpr | pathExpr | extensionExpr )
            int alt115=3;
            switch ( input.LA(1) ) {
            case VALIDATE:
                {
                alt115=1;
                }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case ATTRIBUTE:
            case CHILD:
            case COMMENT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case NODE:
            case ORDERED:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case SELF:
            case TEXT:
            case UNORDERED:
            case StringLiteral:
            case NCName:
            case DOLLARSi:
            case LPARSi:
            case STARSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case DBLSLASHSi:
            case SLASHSi:
            case DOTDOTSi:
            case ATSi:
            case DOTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt115=2;
                }
                break;
            case LPRAGSi:
                {
                alt115=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("661:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // etc/XQFT.g:661:34: validateExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_validateExpr_in_valueExpr8535);
                    validateExpr516=validateExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, validateExpr516.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:661:49: pathExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_pathExpr_in_valueExpr8539);
                    pathExpr517=pathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, pathExpr517.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:661:60: extensionExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_extensionExpr_in_valueExpr8543);
                    extensionExpr518=extensionExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, extensionExpr518.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end valueExpr

    public static class validateExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start validateExpr
    // etc/XQFT.g:664:2: validateExpr : VALIDATE ( validationMode )? LBRACESi expr RBRACSi ;
    public final validateExpr_return validateExpr() throws RecognitionException {
        validateExpr_return retval = new validateExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token VALIDATE519=null;
        Token LBRACESi521=null;
        Token RBRACSi523=null;
        validationMode_return validationMode520 = null;

        expr_return expr522 = null;


        XQFTTree VALIDATE519_tree=null;
        XQFTTree LBRACESi521_tree=null;
        XQFTTree RBRACSi523_tree=null;

        try {
            // etc/XQFT.g:664:33: ( VALIDATE ( validationMode )? LBRACESi expr RBRACSi )
            // etc/XQFT.g:664:35: VALIDATE ( validationMode )? LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            VALIDATE519=(Token)input.LT(1);
            match(input,VALIDATE,FOLLOW_VALIDATE_in_validateExpr8571); if (failed) return retval;
            if ( backtracking==0 ) {
            VALIDATE519_tree = (XQFTTree)adaptor.create(VALIDATE519);
            adaptor.addChild(root_0, VALIDATE519_tree);
            }
            // etc/XQFT.g:664:44: ( validationMode )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==LAX||LA116_0==STRICT) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // etc/XQFT.g:664:44: validationMode
                    {
                    pushFollow(FOLLOW_validationMode_in_validateExpr8573);
                    validationMode520=validationMode();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, validationMode520.getTree());

                    }
                    break;

            }

            LBRACESi521=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_validateExpr8576); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_validateExpr8579);
            expr522=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr522.getTree());
            RBRACSi523=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_validateExpr8581); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end validateExpr

    public static class validationMode_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start validationMode
    // etc/XQFT.g:665:3: validationMode : ( LAX | STRICT );
    public final validationMode_return validationMode() throws RecognitionException {
        validationMode_return retval = new validationMode_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set524=null;

        XQFTTree set524_tree=null;

        try {
            // etc/XQFT.g:665:34: ( LAX | STRICT )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set524=(Token)input.LT(1);
            if ( input.LA(1)==LAX||input.LA(1)==STRICT ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set524));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_validationMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end validationMode

    public static class pathExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pathExpr
<<<<<<< .mine
    // etc/XQFT.g:665:2: pathExpr : ({...}? DBLSLASHSi relativePathExpr | {...}? SLASHSi relativePathExpr | SLASHSi | relativePathExpr );
=======
    // etc/XQFT.g:670:2: pathExpr : ({...}? DBLSLASHSi relativePathExpr | {...}? SLASHSi relativePathExpr | SLASHSi | relativePathExpr );
>>>>>>> .r234
    public final pathExpr_return pathExpr() throws RecognitionException {
        pathExpr_return retval = new pathExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DBLSLASHSi525=null;
        Token SLASHSi527=null;
        Token SLASHSi529=null;
        relativePathExpr_return relativePathExpr526 = null;

        relativePathExpr_return relativePathExpr528 = null;

        relativePathExpr_return relativePathExpr530 = null;


        XQFTTree DBLSLASHSi525_tree=null;
        XQFTTree SLASHSi527_tree=null;
        XQFTTree SLASHSi529_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:665:33: ({...}? DBLSLASHSi relativePathExpr | {...}? SLASHSi relativePathExpr | SLASHSi | relativePathExpr )
=======
            // etc/XQFT.g:670:33: ({...}? DBLSLASHSi relativePathExpr | {...}? SLASHSi relativePathExpr | SLASHSi | relativePathExpr )
>>>>>>> .r234
            int alt117=4;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:665:35: {...}? DBLSLASHSi relativePathExpr
=======
                    // etc/XQFT.g:670:35: {...}? DBLSLASHSi relativePathExpr
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    if ( !(input.LA(1)=='/' && input.LA(2)=='/') ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "pathExpr", "input.LA(1)=='/' && input.LA(2)=='/'");
                    }
                    DBLSLASHSi527=(Token)input.LT(1);
                    match(input,DBLSLASHSi,FOLLOW_DBLSLASHSi_in_pathExpr8558); if (failed) return retval;
=======
                    if ( !(input.LA(1)=='/' && input.LA(2)=='/') ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "pathExpr", "input.LA(1)=='/' && input.LA(2)=='/'");
                    }
                    DBLSLASHSi525=(Token)input.LT(1);
                    match(input,DBLSLASHSi,FOLLOW_DBLSLASHSi_in_pathExpr8653); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    DBLSLASHSi525_tree = (XQFTTree)adaptor.create(DBLSLASHSi525);
                    adaptor.addChild(root_0, DBLSLASHSi525_tree);
                    }
<<<<<<< .mine
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8560);
                    relativePathExpr528=relativePathExpr();
=======
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8655);
                    relativePathExpr526=relativePathExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr526.getTree());

                    }
                    break;
                case 2 :
<<<<<<< .mine
                    // etc/XQFT.g:666:14: {...}? SLASHSi relativePathExpr
=======
                    // etc/XQFT.g:671:14: {...}? SLASHSi relativePathExpr
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    if ( !(input.LA(2)=='*') ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "pathExpr", "input.LA(2)=='*'");
                    }
                    SLASHSi529=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr8578); if (failed) return retval;
=======
                    if ( !(input.LA(2)=='*') ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "pathExpr", "input.LA(2)=='*'");
                    }
                    SLASHSi527=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr8673); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    SLASHSi527_tree = (XQFTTree)adaptor.create(SLASHSi527);
                    adaptor.addChild(root_0, SLASHSi527_tree);
                    }
<<<<<<< .mine
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8580);
                    relativePathExpr530=relativePathExpr();
=======
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8675);
                    relativePathExpr528=relativePathExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr528.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:672:14: SLASHSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    SLASHSi531=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr8595); if (failed) return retval;
=======
                    SLASHSi529=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr8690); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    SLASHSi529_tree = (XQFTTree)adaptor.create(SLASHSi529);
                    adaptor.addChild(root_0, SLASHSi529_tree);
                    }

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:673:14: relativePathExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8610);
                    relativePathExpr532=relativePathExpr();
=======
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8705);
                    relativePathExpr530=relativePathExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr530.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end pathExpr

    public static class relativePathExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start relativePathExpr
    // etc/XQFT.g:674:3: relativePathExpr : stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )* ;
    public final relativePathExpr_return relativePathExpr() throws RecognitionException {
        relativePathExpr_return retval = new relativePathExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set532=null;
        stepExpr_return stepExpr531 = null;

        stepExpr_return stepExpr533 = null;


        XQFTTree set532_tree=null;

        try {
            // etc/XQFT.g:674:34: ( stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )* )
            // etc/XQFT.g:674:36: stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            pushFollow(FOLLOW_stepExpr_in_relativePathExpr8633);
            stepExpr533=stepExpr();
=======
            pushFollow(FOLLOW_stepExpr_in_relativePathExpr8728);
            stepExpr531=stepExpr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, stepExpr531.getTree());
            // etc/XQFT.g:674:45: ( ( SLASHSi | DBLSLASHSi ) stepExpr )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( ((LA118_0>=DBLSLASHSi && LA118_0<=SLASHSi)) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // etc/XQFT.g:674:46: ( SLASHSi | DBLSLASHSi ) stepExpr
            	    {
            	    set532=(Token)input.LT(1);
            	    if ( (input.LA(1)>=DBLSLASHSi && input.LA(1)<=SLASHSi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set532), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
<<<<<<< .mine
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_relativePathExpr8636);    throw mse;
=======
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_relativePathExpr8731);    throw mse;
>>>>>>> .r234
            	    }

<<<<<<< .mine
            	    pushFollow(FOLLOW_stepExpr_in_relativePathExpr8645);
            	    stepExpr535=stepExpr();
=======
            	    pushFollow(FOLLOW_stepExpr_in_relativePathExpr8740);
            	    stepExpr533=stepExpr();
>>>>>>> .r234
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, stepExpr533.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end relativePathExpr

    public static class stepExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start stepExpr
    // etc/XQFT.g:676:4: stepExpr : ( axisStep | filterExpr );
    public final stepExpr_return stepExpr() throws RecognitionException {
        stepExpr_return retval = new stepExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        axisStep_return axisStep534 = null;

        filterExpr_return filterExpr535 = null;



        try {
            // etc/XQFT.g:676:35: ( axisStep | filterExpr )
            int alt119=2;
            switch ( input.LA(1) ) {
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case CHILD:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DOCUMENT_NODE:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case NODE:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case SELF:
            case STARSi:
            case DOTDOTSi:
            case ATSi:
                {
                alt119=1;
                }
                break;
            case ATTRIBUTE:
                {
                int LA119_2 = input.LA(2);

                if ( (LA119_2==LPARSi||LA119_2==DBLCOLONSi) ) {
                    alt119=1;
                }
                else if ( (LA119_2==NCName||LA119_2==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("676:4: stepExpr : ( axisStep | filterExpr );", 119, 2, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA119_3 = input.LA(2);

                if ( (LA119_3==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_3==NCName||LA119_3==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("676:4: stepExpr : ( axisStep | filterExpr );", 119, 3, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA119_4 = input.LA(2);

                if ( (LA119_4==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_4==NCName||LA119_4==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("676:4: stepExpr : ( axisStep | filterExpr );", 119, 4, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA119_5 = input.LA(2);

                if ( (LA119_5==LBRACESi) ) {
                    alt119=2;
                }
                else if ( (LA119_5==LPARSi) ) {
                    alt119=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("676:4: stepExpr : ( axisStep | filterExpr );", 119, 5, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA119_6 = input.LA(2);

                if ( (LA119_6==LBRACESi) ) {
                    alt119=2;
                }
                else if ( (LA119_6==LPARSi) ) {
                    alt119=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("676:4: stepExpr : ( axisStep | filterExpr );", 119, 6, input);

                    throw nvae;
                }
                }
                break;
            case NCName:
                {
                switch ( input.LA(2) ) {
                case COLONSi:
                    {
                    int LA119_9 = input.LA(3);

                    if ( (LA119_9==STARSi) ) {
                        alt119=1;
                    }
                    else if ( (LA119_9==NCName) ) {
                        int LA119_10 = input.LA(4);

                        if ( (LA119_10==LPARSi) ) {
                            alt119=2;
                        }
                        else if ( (LA119_10==EOF||LA119_10==AND||LA119_10==ASCENDING||(LA119_10>=CASE && LA119_10<=CASTABLE)||LA119_10==COLLATION||LA119_10==DEFAULT||LA119_10==DESCENDING||LA119_10==DIV||LA119_10==ELSE||LA119_10==EMPTY||LA119_10==EQ||LA119_10==EXCEPT||LA119_10==FOR||LA119_10==FTCONTAINS||LA119_10==GE||(LA119_10>=GT && LA119_10<=IDIV)||(LA119_10>=INSTANCE && LA119_10<=IS)||LA119_10==LE||(LA119_10>=LET && LA119_10<=LEVELS)||(LA119_10>=LT && LA119_10<=MOD)||LA119_10==NE||(LA119_10>=OR && LA119_10<=ORDER)||LA119_10==PARAGRAPHS||LA119_10==RETURN||LA119_10==SATISFIES||LA119_10==SENTENCES||LA119_10==STABLE||(LA119_10>=TIMES && LA119_10<=TREAT)||LA119_10==UNION||LA119_10==WHERE||LA119_10==WITHOUT||LA119_10==WORDS||LA119_10==SEMICOLONSi||(LA119_10>=EQSi && LA119_10<=COMMASi)||LA119_10==RPARSi||LA119_10==RBRACSi||(LA119_10>=STARSi && LA119_10<=NODEAFTERSi)||(LA119_10>=DBLSLASHSi && LA119_10<=SLASHSi)||(LA119_10>=LBRACKSi && LA119_10<=RBRACKSi)) ) {
                            alt119=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("676:4: stepExpr : ( axisStep | filterExpr );", 119, 10, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("676:4: stepExpr : ( axisStep | filterExpr );", 119, 9, input);

                        throw nvae;
                    }
                    }
                    break;
                case LPARSi:
                    {
                    alt119=2;
                    }
                    break;
                case EOF:
                case AND:
                case ASCENDING:
                case CASE:
                case CAST:
                case CASTABLE:
                case COLLATION:
                case DEFAULT:
                case DESCENDING:
                case DIV:
                case ELSE:
                case EMPTY:
                case EQ:
                case EXCEPT:
                case FOR:
                case FTCONTAINS:
                case GE:
                case GT:
                case IDIV:
                case INSTANCE:
                case INTERSECT:
                case IS:
                case LE:
                case LET:
                case LEVELS:
                case LT:
                case MOD:
                case NE:
                case OR:
                case ORDER:
                case PARAGRAPHS:
                case RETURN:
                case SATISFIES:
                case SENTENCES:
                case STABLE:
                case TIMES:
                case TO:
                case TREAT:
                case UNION:
                case WHERE:
                case WITHOUT:
                case WORDS:
                case SEMICOLONSi:
                case EQSi:
                case COMMASi:
                case RPARSi:
                case RBRACSi:
                case STARSi:
                case PLUSSi:
                case MINUSSi:
                case PIPESi:
                case NEQSi:
                case LTSi:
                case LTOREQSi:
                case GTSi:
                case GTOREQSi:
                case NODEBEFORESi:
                case NODEAFTERSi:
                case DBLSLASHSi:
                case SLASHSi:
                case LBRACKSi:
                case RBRACKSi:
                    {
                    alt119=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("676:4: stepExpr : ( axisStep | filterExpr );", 119, 7, input);

                    throw nvae;
                }

                }
                break;
            case DOCUMENT:
            case ORDERED:
            case UNORDERED:
            case StringLiteral:
            case DOLLARSi:
            case LPARSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case DOTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt119=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("676:4: stepExpr : ( axisStep | filterExpr );", 119, 0, input);

                throw nvae;
            }

            switch (alt119) {
                case 1 :
                    // etc/XQFT.g:676:37: axisStep
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_axisStep_in_stepExpr8680);
                    axisStep536=axisStep();
=======
                    pushFollow(FOLLOW_axisStep_in_stepExpr8775);
                    axisStep534=axisStep();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, axisStep534.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:677:16: filterExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_filterExpr_in_stepExpr8697);
                    filterExpr537=filterExpr();
=======
                    pushFollow(FOLLOW_filterExpr_in_stepExpr8792);
                    filterExpr535=filterExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, filterExpr535.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end stepExpr

    public static class axisStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start axisStep
    // etc/XQFT.g:680:4: axisStep : ( reverseStep | forwardStep ) predicateList ;
    public final axisStep_return axisStep() throws RecognitionException {
        axisStep_return retval = new axisStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        reverseStep_return reverseStep536 = null;

        forwardStep_return forwardStep537 = null;

        predicateList_return predicateList538 = null;



        try {
            // etc/XQFT.g:680:35: ( ( reverseStep | forwardStep ) predicateList )
            // etc/XQFT.g:680:37: ( reverseStep | forwardStep ) predicateList
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:680:37: ( reverseStep | forwardStep )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( ((LA120_0>=ANCESTOR && LA120_0<=ANCESTOR_OR_SELF)||LA120_0==PARENT||(LA120_0>=PRECEDING && LA120_0<=PRECEDING_SIBLING)||LA120_0==DOTDOTSi) ) {
                alt120=1;
            }
            else if ( (LA120_0==ATTRIBUTE||LA120_0==CHILD||LA120_0==COMMENT||(LA120_0>=DESCENDANT && LA120_0<=DESCENDANT_OR_SELF)||(LA120_0>=DOCUMENT_NODE && LA120_0<=ELEMENT)||(LA120_0>=FOLLOWING && LA120_0<=FOLLOWING_SIBLING)||LA120_0==NODE||LA120_0==PROCESSING_INSTRUCTION||(LA120_0>=SCHEMAATTRIBUTE && LA120_0<=SCHEMAELEMENT)||LA120_0==SELF||LA120_0==TEXT||LA120_0==NCName||LA120_0==STARSi||LA120_0==ATSi) ) {
                alt120=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("680:37: ( reverseStep | forwardStep )", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // etc/XQFT.g:680:38: reverseStep
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_reverseStep_in_axisStep8745);
                    reverseStep538=reverseStep();
=======
                    pushFollow(FOLLOW_reverseStep_in_axisStep8840);
                    reverseStep536=reverseStep();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, reverseStep536.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:680:52: forwardStep
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_forwardStep_in_axisStep8749);
                    forwardStep539=forwardStep();
=======
                    pushFollow(FOLLOW_forwardStep_in_axisStep8844);
                    forwardStep537=forwardStep();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, forwardStep537.getTree());

                    }
                    break;

            }

<<<<<<< .mine
            pushFollow(FOLLOW_predicateList_in_axisStep8753);
            predicateList540=predicateList();
=======
            pushFollow(FOLLOW_predicateList_in_axisStep8848);
            predicateList538=predicateList();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, predicateList538.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end axisStep

    public static class reverseStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start reverseStep
    // etc/XQFT.g:682:5: reverseStep : ( reverseAxis nodeTest | abbrevReverseStep );
    public final reverseStep_return reverseStep() throws RecognitionException {
        reverseStep_return retval = new reverseStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        reverseAxis_return reverseAxis539 = null;

        nodeTest_return nodeTest540 = null;

        abbrevReverseStep_return abbrevReverseStep541 = null;



        try {
            // etc/XQFT.g:682:36: ( reverseAxis nodeTest | abbrevReverseStep )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( ((LA121_0>=ANCESTOR && LA121_0<=ANCESTOR_OR_SELF)||LA121_0==PARENT||(LA121_0>=PRECEDING && LA121_0<=PRECEDING_SIBLING)) ) {
                alt121=1;
            }
            else if ( (LA121_0==DOTDOTSi) ) {
                alt121=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("682:5: reverseStep : ( reverseAxis nodeTest | abbrevReverseStep );", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // etc/XQFT.g:682:38: reverseAxis nodeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_reverseAxis_in_reverseStep8787);
                    reverseAxis541=reverseAxis();
=======
                    pushFollow(FOLLOW_reverseAxis_in_reverseStep8882);
                    reverseAxis539=reverseAxis();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
<<<<<<< .mine
                    if ( backtracking==0 ) adaptor.addChild(root_0, reverseAxis541.getTree());
                    pushFollow(FOLLOW_nodeTest_in_reverseStep8789);
                    nodeTest542=nodeTest();
=======
                    if ( backtracking==0 ) adaptor.addChild(root_0, reverseAxis539.getTree());
                    pushFollow(FOLLOW_nodeTest_in_reverseStep8884);
                    nodeTest540=nodeTest();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest540.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:682:61: abbrevReverseStep
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_abbrevReverseStep_in_reverseStep8793);
                    abbrevReverseStep543=abbrevReverseStep();
=======
                    pushFollow(FOLLOW_abbrevReverseStep_in_reverseStep8888);
                    abbrevReverseStep541=abbrevReverseStep();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, abbrevReverseStep541.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end reverseStep

    public static class reverseAxis_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start reverseAxis
    // etc/XQFT.g:683:6: reverseAxis : ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi ;
    public final reverseAxis_return reverseAxis() throws RecognitionException {
        reverseAxis_return retval = new reverseAxis_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set542=null;
        Token DBLCOLONSi543=null;

        XQFTTree set542_tree=null;
        XQFTTree DBLCOLONSi543_tree=null;

        try {
            // etc/XQFT.g:683:37: ( ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi )
            // etc/XQFT.g:683:39: ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            set542=(Token)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=ANCESTOR_OR_SELF)||input.LA(1)==PARENT||(input.LA(1)>=PRECEDING && input.LA(1)<=PRECEDING_SIBLING) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set542));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
<<<<<<< .mine
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_reverseAxis8824);    throw mse;
=======
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_reverseAxis8919);    throw mse;
>>>>>>> .r234
            }

<<<<<<< .mine
            DBLCOLONSi545=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_reverseAxis8844); if (failed) return retval;
=======
            DBLCOLONSi543=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_reverseAxis8939); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            DBLCOLONSi543_tree = (XQFTTree)adaptor.create(DBLCOLONSi543);
            adaptor.addChild(root_0, DBLCOLONSi543_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end reverseAxis

    public static class nodeTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nodeTest
    // etc/XQFT.g:684:6: nodeTest : ( kindTest | nameTest );
    public final nodeTest_return nodeTest() throws RecognitionException {
        nodeTest_return retval = new nodeTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        kindTest_return kindTest544 = null;

        nameTest_return nameTest545 = null;



        try {
            // etc/XQFT.g:684:37: ( kindTest | nameTest )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==ATTRIBUTE||LA122_0==COMMENT||(LA122_0>=DOCUMENT_NODE && LA122_0<=ELEMENT)||LA122_0==NODE||LA122_0==PROCESSING_INSTRUCTION||(LA122_0>=SCHEMAATTRIBUTE && LA122_0<=SCHEMAELEMENT)||LA122_0==TEXT) ) {
                alt122=1;
            }
            else if ( (LA122_0==NCName||LA122_0==STARSi) ) {
                alt122=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("684:6: nodeTest : ( kindTest | nameTest );", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // etc/XQFT.g:684:39: kindTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_kindTest_in_nodeTest8878);
                    kindTest546=kindTest();
=======
                    pushFollow(FOLLOW_kindTest_in_nodeTest8973);
                    kindTest544=kindTest();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, kindTest544.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:684:50: nameTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_nameTest_in_nodeTest8882);
                    nameTest547=nameTest();
=======
                    pushFollow(FOLLOW_nameTest_in_nodeTest8977);
                    nameTest545=nameTest();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nameTest545.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nodeTest

    public static class nameTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nameTest
    // etc/XQFT.g:686:7: nameTest : ( qName | wildcard );
    public final nameTest_return nameTest() throws RecognitionException {
        nameTest_return retval = new nameTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName546 = null;

        wildcard_return wildcard547 = null;



        try {
            // etc/XQFT.g:686:38: ( qName | wildcard )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==NCName) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==COLONSi) ) {
                    int LA123_3 = input.LA(3);

                    if ( (LA123_3==STARSi) ) {
                        alt123=2;
                    }
                    else if ( (LA123_3==NCName) ) {
                        alt123=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("686:7: nameTest : ( qName | wildcard );", 123, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA123_1==EOF||LA123_1==AND||LA123_1==ASCENDING||(LA123_1>=CASE && LA123_1<=CASTABLE)||LA123_1==COLLATION||LA123_1==DEFAULT||LA123_1==DESCENDING||LA123_1==DIV||LA123_1==ELSE||LA123_1==EMPTY||LA123_1==EQ||LA123_1==EXCEPT||LA123_1==FOR||LA123_1==FTCONTAINS||LA123_1==GE||(LA123_1>=GT && LA123_1<=IDIV)||(LA123_1>=INSTANCE && LA123_1<=IS)||LA123_1==LE||(LA123_1>=LET && LA123_1<=LEVELS)||(LA123_1>=LT && LA123_1<=MOD)||LA123_1==NE||(LA123_1>=OR && LA123_1<=ORDER)||LA123_1==PARAGRAPHS||LA123_1==RETURN||LA123_1==SATISFIES||LA123_1==SENTENCES||LA123_1==STABLE||(LA123_1>=TIMES && LA123_1<=TREAT)||LA123_1==UNION||LA123_1==WHERE||LA123_1==WITHOUT||LA123_1==WORDS||LA123_1==SEMICOLONSi||(LA123_1>=EQSi && LA123_1<=COMMASi)||LA123_1==RPARSi||LA123_1==RBRACSi||(LA123_1>=STARSi && LA123_1<=NODEAFTERSi)||(LA123_1>=DBLSLASHSi && LA123_1<=SLASHSi)||(LA123_1>=LBRACKSi && LA123_1<=RBRACKSi)) ) {
                    alt123=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("686:7: nameTest : ( qName | wildcard );", 123, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==STARSi) ) {
                alt123=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("686:7: nameTest : ( qName | wildcard );", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // etc/XQFT.g:686:40: qName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_qName_in_nameTest8918);
                    qName548=qName();
=======
                    pushFollow(FOLLOW_qName_in_nameTest9013);
                    qName546=qName();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName546.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:686:48: wildcard
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_wildcard_in_nameTest8922);
                    wildcard549=wildcard();
=======
                    pushFollow(FOLLOW_wildcard_in_nameTest9017);
                    wildcard547=wildcard();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, wildcard547.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nameTest

    public static class wildcard_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start wildcard
    // etc/XQFT.g:687:8: wildcard : ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi );
    public final wildcard_return wildcard() throws RecognitionException {
        wildcard_return retval = new wildcard_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STARSi548=null;
        Token COLONSi549=null;
        Token NCName550=null;
        Token STARSi551=null;
        Token NCName552=null;
        Token COLONSi553=null;
        Token STARSi554=null;

        XQFTTree STARSi548_tree=null;
        XQFTTree COLONSi549_tree=null;
        XQFTTree NCName550_tree=null;
        XQFTTree STARSi551_tree=null;
        XQFTTree NCName552_tree=null;
        XQFTTree COLONSi553_tree=null;
        XQFTTree STARSi554_tree=null;

        try {
            // etc/XQFT.g:687:39: ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi )
            int alt124=3;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==STARSi) ) {
                int LA124_1 = input.LA(2);

                if ( (LA124_1==COLONSi) && (synpred2())) {
                    alt124=1;
                }
                else if ( (LA124_1==EOF||LA124_1==AND||LA124_1==ASCENDING||(LA124_1>=CASE && LA124_1<=CASTABLE)||LA124_1==COLLATION||LA124_1==DEFAULT||LA124_1==DESCENDING||LA124_1==DIV||LA124_1==ELSE||LA124_1==EMPTY||LA124_1==EQ||LA124_1==EXCEPT||LA124_1==FOR||LA124_1==FTCONTAINS||LA124_1==GE||(LA124_1>=GT && LA124_1<=IDIV)||(LA124_1>=INSTANCE && LA124_1<=IS)||LA124_1==LE||(LA124_1>=LET && LA124_1<=LEVELS)||(LA124_1>=LT && LA124_1<=MOD)||LA124_1==NE||(LA124_1>=OR && LA124_1<=ORDER)||LA124_1==PARAGRAPHS||LA124_1==RETURN||LA124_1==SATISFIES||LA124_1==SENTENCES||LA124_1==STABLE||(LA124_1>=TIMES && LA124_1<=TREAT)||LA124_1==UNION||LA124_1==WHERE||LA124_1==WITHOUT||LA124_1==WORDS||LA124_1==SEMICOLONSi||(LA124_1>=EQSi && LA124_1<=COMMASi)||LA124_1==RPARSi||LA124_1==RBRACSi||(LA124_1>=STARSi && LA124_1<=NODEAFTERSi)||(LA124_1>=DBLSLASHSi && LA124_1<=SLASHSi)||(LA124_1>=LBRACKSi && LA124_1<=RBRACKSi)) ) {
                    alt124=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("687:8: wildcard : ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi );", 124, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA124_0==NCName) ) {
                alt124=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("687:8: wildcard : ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi );", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // etc/XQFT.g:687:41: ( STARSi COLONSi NCName )=> STARSi COLONSi NCName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    STARSi550=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard8968); if (failed) return retval;
=======
                    STARSi548=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard9063); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    STARSi548_tree = (XQFTTree)adaptor.create(STARSi548);
                    adaptor.addChild(root_0, STARSi548_tree);
                    }
<<<<<<< .mine
                    COLONSi551=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard8970); if (failed) return retval;
=======
                    COLONSi549=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard9065); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    COLONSi549_tree = (XQFTTree)adaptor.create(COLONSi549);
                    adaptor.addChild(root_0, COLONSi549_tree);
                    }
<<<<<<< .mine
                    NCName552=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_wildcard8972); if (failed) return retval;
=======
                    NCName550=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_wildcard9067); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    NCName550_tree = (XQFTTree)adaptor.create(NCName550);
                    adaptor.addChild(root_0, NCName550_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:688:20: STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    STARSi553=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard8997); if (failed) return retval;
=======
                    STARSi551=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard9092); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    STARSi551_tree = (XQFTTree)adaptor.create(STARSi551);
                    adaptor.addChild(root_0, STARSi551_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:689:44: NCName COLONSi STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    NCName554=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_wildcard9042); if (failed) return retval;
=======
                    NCName552=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_wildcard9137); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    NCName552_tree = (XQFTTree)adaptor.create(NCName552);
                    adaptor.addChild(root_0, NCName552_tree);
                    }
<<<<<<< .mine
                    COLONSi555=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard9044); if (failed) return retval;
=======
                    COLONSi553=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard9139); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    COLONSi553_tree = (XQFTTree)adaptor.create(COLONSi553);
                    adaptor.addChild(root_0, COLONSi553_tree);
                    }
<<<<<<< .mine
                    STARSi556=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard9046); if (failed) return retval;
=======
                    STARSi554=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard9141); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    STARSi554_tree = (XQFTTree)adaptor.create(STARSi554);
                    adaptor.addChild(root_0, STARSi554_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end wildcard

    public static class abbrevReverseStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start abbrevReverseStep
    // etc/XQFT.g:690:21: abbrevReverseStep : DOTDOTSi ;
    public final abbrevReverseStep_return abbrevReverseStep() throws RecognitionException {
        abbrevReverseStep_return retval = new abbrevReverseStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOTDOTSi555=null;

        XQFTTree DOTDOTSi555_tree=null;

        try {
            // etc/XQFT.g:690:52: ( DOTDOTSi )
            // etc/XQFT.g:690:54: DOTDOTSi
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            DOTDOTSi557=(Token)input.LT(1);
            match(input,DOTDOTSi,FOLLOW_DOTDOTSi_in_abbrevReverseStep9087); if (failed) return retval;
=======
            DOTDOTSi555=(Token)input.LT(1);
            match(input,DOTDOTSi,FOLLOW_DOTDOTSi_in_abbrevReverseStep9182); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            DOTDOTSi555_tree = (XQFTTree)adaptor.create(DOTDOTSi555);
            adaptor.addChild(root_0, DOTDOTSi555_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end abbrevReverseStep

    public static class forwardStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forwardStep
    // etc/XQFT.g:692:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );
    public final forwardStep_return forwardStep() throws RecognitionException {
        forwardStep_return retval = new forwardStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        forwardAxis_return forwardAxis556 = null;

        nodeTest_return nodeTest557 = null;

        abbrevForwardStep_return abbrevForwardStep558 = null;



        try {
            // etc/XQFT.g:692:48: ( forwardAxis nodeTest | abbrevForwardStep )
            int alt125=2;
            switch ( input.LA(1) ) {
            case ATTRIBUTE:
                {
                int LA125_1 = input.LA(2);

                if ( (LA125_1==DBLCOLONSi) ) {
                    alt125=1;
                }
                else if ( (LA125_1==LPARSi) ) {
                    alt125=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("692:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 1, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case NODE:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case TEXT:
            case NCName:
            case STARSi:
            case ATSi:
                {
                alt125=2;
                }
                break;
            case CHILD:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case SELF:
                {
                alt125=1;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("692:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // etc/XQFT.g:692:50: forwardAxis nodeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_forwardAxis_in_forwardStep9150);
                    forwardAxis558=forwardAxis();
=======
                    pushFollow(FOLLOW_forwardAxis_in_forwardStep9245);
                    forwardAxis556=forwardAxis();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
<<<<<<< .mine
                    if ( backtracking==0 ) adaptor.addChild(root_0, forwardAxis558.getTree());
                    pushFollow(FOLLOW_nodeTest_in_forwardStep9152);
                    nodeTest559=nodeTest();
=======
                    if ( backtracking==0 ) adaptor.addChild(root_0, forwardAxis556.getTree());
                    pushFollow(FOLLOW_nodeTest_in_forwardStep9247);
                    nodeTest557=nodeTest();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest557.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:692:73: abbrevForwardStep
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_abbrevForwardStep_in_forwardStep9156);
                    abbrevForwardStep560=abbrevForwardStep();
=======
                    pushFollow(FOLLOW_abbrevForwardStep_in_forwardStep9251);
                    abbrevForwardStep558=abbrevForwardStep();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, abbrevForwardStep558.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forwardStep

    public static class forwardAxis_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forwardAxis
    // etc/XQFT.g:693:18: forwardAxis : ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi ;
    public final forwardAxis_return forwardAxis() throws RecognitionException {
        forwardAxis_return retval = new forwardAxis_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set559=null;
        Token DBLCOLONSi560=null;

        XQFTTree set559_tree=null;
        XQFTTree DBLCOLONSi560_tree=null;

        try {
            // etc/XQFT.g:693:49: ( ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi )
            // etc/XQFT.g:693:51: ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            set559=(Token)input.LT(1);
            if ( input.LA(1)==ATTRIBUTE||input.LA(1)==CHILD||(input.LA(1)>=DESCENDANT && input.LA(1)<=DESCENDANT_OR_SELF)||(input.LA(1)>=FOLLOWING && input.LA(1)<=FOLLOWING_SIBLING)||input.LA(1)==SELF ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set559));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
<<<<<<< .mine
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_forwardAxis9203);    throw mse;
=======
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_forwardAxis9298);    throw mse;
>>>>>>> .r234
            }

<<<<<<< .mine
            DBLCOLONSi562=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_forwardAxis9259); if (failed) return retval;
=======
            DBLCOLONSi560=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_forwardAxis9354); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            DBLCOLONSi560_tree = (XQFTTree)adaptor.create(DBLCOLONSi560);
            adaptor.addChild(root_0, DBLCOLONSi560_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forwardAxis

    public static class abbrevForwardStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start abbrevForwardStep
    // etc/XQFT.g:701:6: abbrevForwardStep : ( ATSi )? nodeTest ;
    public final abbrevForwardStep_return abbrevForwardStep() throws RecognitionException {
        abbrevForwardStep_return retval = new abbrevForwardStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ATSi561=null;
        nodeTest_return nodeTest562 = null;


        XQFTTree ATSi561_tree=null;

        try {
            // etc/XQFT.g:701:37: ( ( ATSi )? nodeTest )
            // etc/XQFT.g:701:39: ( ATSi )? nodeTest
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:701:39: ( ATSi )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ATSi) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // etc/XQFT.g:701:39: ATSi
                    {
<<<<<<< .mine
                    ATSi563=(Token)input.LT(1);
                    match(input,ATSi,FOLLOW_ATSi_in_abbrevForwardStep9290); if (failed) return retval;
=======
                    ATSi561=(Token)input.LT(1);
                    match(input,ATSi,FOLLOW_ATSi_in_abbrevForwardStep9385); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    ATSi561_tree = (XQFTTree)adaptor.create(ATSi561);
                    adaptor.addChild(root_0, ATSi561_tree);
                    }

                    }
                    break;

            }

<<<<<<< .mine
            pushFollow(FOLLOW_nodeTest_in_abbrevForwardStep9293);
            nodeTest564=nodeTest();
=======
            pushFollow(FOLLOW_nodeTest_in_abbrevForwardStep9388);
            nodeTest562=nodeTest();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest562.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end abbrevForwardStep

    public static class predicateList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start predicateList
    // etc/XQFT.g:703:17: predicateList : ( predicate )* ;
    public final predicateList_return predicateList() throws RecognitionException {
        predicateList_return retval = new predicateList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        predicate_return predicate563 = null;



        try {
            // etc/XQFT.g:703:48: ( ( predicate )* )
            // etc/XQFT.g:703:50: ( predicate )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:703:50: ( predicate )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==LBRACKSi) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // etc/XQFT.g:703:50: predicate
            	    {
<<<<<<< .mine
            	    pushFollow(FOLLOW_predicate_in_predicateList9367);
            	    predicate565=predicate();
=======
            	    pushFollow(FOLLOW_predicate_in_predicateList9462);
            	    predicate563=predicate();
>>>>>>> .r234
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, predicate563.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end predicateList

    public static class predicate_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start predicate
    // etc/XQFT.g:704:18: predicate : LBRACKSi expr RBRACKSi ;
    public final predicate_return predicate() throws RecognitionException {
        predicate_return retval = new predicate_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACKSi564=null;
        Token RBRACKSi566=null;
        expr_return expr565 = null;


        XQFTTree LBRACKSi564_tree=null;
        XQFTTree RBRACKSi566_tree=null;

        try {
            // etc/XQFT.g:704:49: ( LBRACKSi expr RBRACKSi )
            // etc/XQFT.g:704:51: LBRACKSi expr RBRACKSi
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            LBRACKSi566=(Token)input.LT(1);
            match(input,LBRACKSi,FOLLOW_LBRACKSi_in_predicate9427); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_predicate9430);
            expr567=expr();
=======
            LBRACKSi564=(Token)input.LT(1);
            match(input,LBRACKSi,FOLLOW_LBRACKSi_in_predicate9522); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_predicate9525);
            expr565=expr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, expr567.getTree());
            RBRACKSi568=(Token)input.LT(1);
            match(input,RBRACKSi,FOLLOW_RBRACKSi_in_predicate9432); if (failed) return retval;
=======
            if ( backtracking==0 ) adaptor.addChild(root_0, expr565.getTree());
            RBRACKSi566=(Token)input.LT(1);
            match(input,RBRACKSi,FOLLOW_RBRACKSi_in_predicate9527); if (failed) return retval;
>>>>>>> .r234

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end predicate

    public static class extensionExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start extensionExpr
    // etc/XQFT.g:709:5: extensionExpr : ( pragma )+ LBRACESi ( expr )? RBRACSi ;
    public final extensionExpr_return extensionExpr() throws RecognitionException {
        extensionExpr_return retval = new extensionExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi568=null;
        Token RBRACSi570=null;
        pragma_return pragma567 = null;

        expr_return expr569 = null;


        XQFTTree LBRACESi568_tree=null;
        XQFTTree RBRACSi570_tree=null;

        try {
            // etc/XQFT.g:709:36: ( ( pragma )+ LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:709:38: ( pragma )+ LBRACESi ( expr )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:709:38: ( pragma )+
            int cnt128=0;
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==LPRAGSi) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // etc/XQFT.g:709:38: pragma
            	    {
<<<<<<< .mine
            	    pushFollow(FOLLOW_pragma_in_extensionExpr9473);
            	    pragma569=pragma();
=======
            	    pushFollow(FOLLOW_pragma_in_extensionExpr9568);
            	    pragma567=pragma();
>>>>>>> .r234
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, pragma567.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);

<<<<<<< .mine
            LBRACESi570=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_extensionExpr9476); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi570_tree = (CommonTree)adaptor.create(LBRACESi570);
            adaptor.addChild(root_0, LBRACESi570_tree);
            }
            // etc/XQFT.g:704:55: ( expr )?
=======
            LBRACESi568=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_extensionExpr9571); if (failed) return retval;
            // etc/XQFT.g:709:56: ( expr )?
>>>>>>> .r234
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=ANCESTOR && LA129_0<=ANCESTOR_OR_SELF)||LA129_0==ATTRIBUTE||LA129_0==CHILD||LA129_0==COMMENT||(LA129_0>=DESCENDANT && LA129_0<=DESCENDANT_OR_SELF)||(LA129_0>=DOCUMENT && LA129_0<=ELEMENT)||LA129_0==EVERY||(LA129_0>=FOLLOWING && LA129_0<=FOR)||LA129_0==IF||LA129_0==LET||LA129_0==NODE||LA129_0==ORDERED||LA129_0==PARENT||(LA129_0>=PRECEDING && LA129_0<=PRECEDING_SIBLING)||LA129_0==PROCESSING_INSTRUCTION||(LA129_0>=SCHEMAATTRIBUTE && LA129_0<=SCHEMAELEMENT)||LA129_0==SELF||LA129_0==SOME||LA129_0==TEXT||LA129_0==TYPESWITCH||LA129_0==UNORDERED||LA129_0==VALIDATE||LA129_0==StringLiteral||LA129_0==NCName||LA129_0==DOLLARSi||LA129_0==LPARSi||(LA129_0>=STARSi && LA129_0<=MINUSSi)||LA129_0==LTSi||(LA129_0>=IntegerLiteral && LA129_0<=LPRAGSi)||(LA129_0>=DBLSLASHSi && LA129_0<=SLASHSi)||(LA129_0>=DOTDOTSi && LA129_0<=ATSi)||LA129_0==DOTSi||LA129_0==LCOMMENTSi||LA129_0==LPISi) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // etc/XQFT.g:709:56: expr
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_expr_in_extensionExpr9478);
                    expr571=expr();
=======
                    pushFollow(FOLLOW_expr_in_extensionExpr9574);
                    expr569=expr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr569.getTree());

                    }
                    break;

            }

<<<<<<< .mine
            RBRACSi572=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_extensionExpr9481); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi572_tree = (CommonTree)adaptor.create(RBRACSi572);
            adaptor.addChild(root_0, RBRACSi572_tree);
            }
=======
            RBRACSi570=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_extensionExpr9577); if (failed) return retval;
>>>>>>> .r234

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end extensionExpr

    public static class filterExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start filterExpr
    // etc/XQFT.g:717:1: filterExpr : primaryExpr predicateList ;
    public final filterExpr_return filterExpr() throws RecognitionException {
        filterExpr_return retval = new filterExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        primaryExpr_return primaryExpr571 = null;

        predicateList_return predicateList572 = null;



        try {
            // etc/XQFT.g:717:32: ( primaryExpr predicateList )
            // etc/XQFT.g:717:34: primaryExpr predicateList
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            pushFollow(FOLLOW_primaryExpr_in_filterExpr9516);
            primaryExpr573=primaryExpr();
=======
            pushFollow(FOLLOW_primaryExpr_in_filterExpr9613);
            primaryExpr571=primaryExpr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, primaryExpr573.getTree());
            pushFollow(FOLLOW_predicateList_in_filterExpr9518);
            predicateList574=predicateList();
=======
            if ( backtracking==0 ) adaptor.addChild(root_0, primaryExpr571.getTree());
            pushFollow(FOLLOW_predicateList_in_filterExpr9615);
            predicateList572=predicateList();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, predicateList572.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end filterExpr

    public static class primaryExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primaryExpr
    // etc/XQFT.g:720:2: primaryExpr : ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor );
    public final primaryExpr_return primaryExpr() throws RecognitionException {
        primaryExpr_return retval = new primaryExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        literal_return literal573 = null;

        varRef_return varRef574 = null;

        parenthesizedExpr_return parenthesizedExpr575 = null;

        contextItemExpr_return contextItemExpr576 = null;

        functionCall_return functionCall577 = null;

        orderedExpr_return orderedExpr578 = null;

        unorderedExpr_return unorderedExpr579 = null;

        constructor_return constructor580 = null;



        try {
            // etc/XQFT.g:720:33: ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor )
            int alt130=8;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
                {
                alt130=1;
                }
                break;
            case DOLLARSi:
                {
                alt130=2;
                }
                break;
            case LPARSi:
                {
                alt130=3;
                }
                break;
            case DOTSi:
                {
                alt130=4;
                }
                break;
            case NCName:
                {
                alt130=5;
                }
                break;
            case ORDERED:
                {
                alt130=6;
                }
                break;
            case UNORDERED:
                {
                alt130=7;
                }
                break;
            case ATTRIBUTE:
            case COMMENT:
            case DOCUMENT:
            case ELEMENT:
            case PROCESSING_INSTRUCTION:
            case TEXT:
            case LTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt130=8;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("720:2: primaryExpr : ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // etc/XQFT.g:720:35: literal
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_literal_in_primaryExpr9547);
                    literal575=literal();
=======
                    pushFollow(FOLLOW_literal_in_primaryExpr9644);
                    literal573=literal();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal573.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:721:14: varRef
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_varRef_in_primaryExpr9563);
                    varRef576=varRef();
=======
                    pushFollow(FOLLOW_varRef_in_primaryExpr9660);
                    varRef574=varRef();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, varRef574.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:722:14: parenthesizedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_parenthesizedExpr_in_primaryExpr9579);
                    parenthesizedExpr577=parenthesizedExpr();
=======
                    pushFollow(FOLLOW_parenthesizedExpr_in_primaryExpr9676);
                    parenthesizedExpr575=parenthesizedExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpr575.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:723:14: contextItemExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_contextItemExpr_in_primaryExpr9595);
                    contextItemExpr578=contextItemExpr();
=======
                    pushFollow(FOLLOW_contextItemExpr_in_primaryExpr9692);
                    contextItemExpr576=contextItemExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, contextItemExpr576.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:724:14: functionCall
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_functionCall_in_primaryExpr9611);
                    functionCall579=functionCall();
=======
                    pushFollow(FOLLOW_functionCall_in_primaryExpr9708);
                    functionCall577=functionCall();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, functionCall577.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:725:14: orderedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_orderedExpr_in_primaryExpr9627);
                    orderedExpr580=orderedExpr();
=======
                    pushFollow(FOLLOW_orderedExpr_in_primaryExpr9724);
                    orderedExpr578=orderedExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orderedExpr578.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:726:14: unorderedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_unorderedExpr_in_primaryExpr9643);
                    unorderedExpr581=unorderedExpr();
=======
                    pushFollow(FOLLOW_unorderedExpr_in_primaryExpr9740);
                    unorderedExpr579=unorderedExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, unorderedExpr579.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:727:14: constructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_constructor_in_primaryExpr9659);
                    constructor582=constructor();
=======
                    pushFollow(FOLLOW_constructor_in_primaryExpr9756);
                    constructor580=constructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, constructor580.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end primaryExpr

    public static class varRef_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varRef
    // etc/XQFT.g:731:3: varRef : DOLLARSi varName ;
    public final varRef_return varRef() throws RecognitionException {
        varRef_return retval = new varRef_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi581=null;
        varName_return varName582 = null;


        XQFTTree DOLLARSi581_tree=null;

        try {
            // etc/XQFT.g:731:34: ( DOLLARSi varName )
            // etc/XQFT.g:731:36: DOLLARSi varName
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            DOLLARSi583=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varRef9697); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi583_tree = (CommonTree)adaptor.create(DOLLARSi583);
            adaptor.addChild(root_0, DOLLARSi583_tree);
            }
            pushFollow(FOLLOW_varName_in_varRef9699);
            varName584=varName();
=======
            DOLLARSi581=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varRef9794); if (failed) return retval;
            pushFollow(FOLLOW_varName_in_varRef9797);
            varName582=varName();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName582.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varRef

    public static class parenthesizedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start parenthesizedExpr
    // etc/XQFT.g:733:3: parenthesizedExpr : LPARSi ( expr )? RPARSi ;
    public final parenthesizedExpr_return parenthesizedExpr() throws RecognitionException {
        parenthesizedExpr_return retval = new parenthesizedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPARSi583=null;
        Token RPARSi585=null;
        expr_return expr584 = null;


        XQFTTree LPARSi583_tree=null;
        XQFTTree RPARSi585_tree=null;

        try {
            // etc/XQFT.g:733:34: ( LPARSi ( expr )? RPARSi )
            // etc/XQFT.g:733:36: LPARSi ( expr )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            LPARSi585=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_parenthesizedExpr9722); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi585_tree = (CommonTree)adaptor.create(LPARSi585);
            adaptor.addChild(root_0, LPARSi585_tree);
            }
            // etc/XQFT.g:728:43: ( expr )?
=======
            LPARSi583=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_parenthesizedExpr9820); if (failed) return retval;
            // etc/XQFT.g:733:44: ( expr )?
>>>>>>> .r234
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=ANCESTOR && LA131_0<=ANCESTOR_OR_SELF)||LA131_0==ATTRIBUTE||LA131_0==CHILD||LA131_0==COMMENT||(LA131_0>=DESCENDANT && LA131_0<=DESCENDANT_OR_SELF)||(LA131_0>=DOCUMENT && LA131_0<=ELEMENT)||LA131_0==EVERY||(LA131_0>=FOLLOWING && LA131_0<=FOR)||LA131_0==IF||LA131_0==LET||LA131_0==NODE||LA131_0==ORDERED||LA131_0==PARENT||(LA131_0>=PRECEDING && LA131_0<=PRECEDING_SIBLING)||LA131_0==PROCESSING_INSTRUCTION||(LA131_0>=SCHEMAATTRIBUTE && LA131_0<=SCHEMAELEMENT)||LA131_0==SELF||LA131_0==SOME||LA131_0==TEXT||LA131_0==TYPESWITCH||LA131_0==UNORDERED||LA131_0==VALIDATE||LA131_0==StringLiteral||LA131_0==NCName||LA131_0==DOLLARSi||LA131_0==LPARSi||(LA131_0>=STARSi && LA131_0<=MINUSSi)||LA131_0==LTSi||(LA131_0>=IntegerLiteral && LA131_0<=LPRAGSi)||(LA131_0>=DBLSLASHSi && LA131_0<=SLASHSi)||(LA131_0>=DOTDOTSi && LA131_0<=ATSi)||LA131_0==DOTSi||LA131_0==LCOMMENTSi||LA131_0==LPISi) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // etc/XQFT.g:733:44: expr
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_expr_in_parenthesizedExpr9724);
                    expr586=expr();
=======
                    pushFollow(FOLLOW_expr_in_parenthesizedExpr9823);
                    expr584=expr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr584.getTree());

                    }
                    break;

            }

<<<<<<< .mine
            RPARSi587=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_parenthesizedExpr9727); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi587_tree = (CommonTree)adaptor.create(RPARSi587);
            adaptor.addChild(root_0, RPARSi587_tree);
            }
=======
            RPARSi585=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_parenthesizedExpr9826); if (failed) return retval;
>>>>>>> .r234

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end parenthesizedExpr

    public static class contextItemExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start contextItemExpr
    // etc/XQFT.g:736:3: contextItemExpr : DOTSi ;
    public final contextItemExpr_return contextItemExpr() throws RecognitionException {
        contextItemExpr_return retval = new contextItemExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOTSi586=null;

        XQFTTree DOTSi586_tree=null;

        try {
            // etc/XQFT.g:736:34: ( DOTSi )
            // etc/XQFT.g:736:36: DOTSi
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            DOTSi588=(Token)input.LT(1);
            match(input,DOTSi,FOLLOW_DOTSi_in_contextItemExpr9753); if (failed) return retval;
=======
            DOTSi586=(Token)input.LT(1);
            match(input,DOTSi,FOLLOW_DOTSi_in_contextItemExpr9853); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            DOTSi586_tree = (XQFTTree)adaptor.create(DOTSi586);
            adaptor.addChild(root_0, DOTSi586_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end contextItemExpr

    public static class functionCall_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionCall
    // etc/XQFT.g:737:3: functionCall : qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi -> ^( AST_FUNCTIONCALL qName ( exprSingle )+ ) ;
    public final functionCall_return functionCall() throws RecognitionException {
        functionCall_return retval = new functionCall_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPARSi588=null;
        Token COMMASi590=null;
        Token RPARSi592=null;
        qName_return qName587 = null;

        exprSingle_return exprSingle589 = null;

        exprSingle_return exprSingle591 = null;


        XQFTTree LPARSi588_tree=null;
        XQFTTree COMMASi590_tree=null;
        XQFTTree RPARSi592_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:737:34: ( qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi -> ^( AST_FUNCTIONCALL qName ( exprSingle )+ ) )
            // etc/XQFT.g:737:36: qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi
            {
<<<<<<< .mine
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_functionCall9780);
            qName589=qName();
=======
            pushFollow(FOLLOW_qName_in_functionCall9880);
            qName587=qName();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, qName589.getTree());
            LPARSi590=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_functionCall9782); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi590_tree = (CommonTree)adaptor.create(LPARSi590);
            adaptor.addChild(root_0, LPARSi590_tree);
            }
            // etc/XQFT.g:733:14: ( exprSingle ( COMMASi exprSingle )* )?
=======
            if ( backtracking==0 ) stream_qName.add(qName587.getTree());
            LPARSi588=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_functionCall9882); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi588);

            // etc/XQFT.g:738:14: ( exprSingle ( COMMASi exprSingle )* )?
>>>>>>> .r234
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( ((LA133_0>=ANCESTOR && LA133_0<=ANCESTOR_OR_SELF)||LA133_0==ATTRIBUTE||LA133_0==CHILD||LA133_0==COMMENT||(LA133_0>=DESCENDANT && LA133_0<=DESCENDANT_OR_SELF)||(LA133_0>=DOCUMENT && LA133_0<=ELEMENT)||LA133_0==EVERY||(LA133_0>=FOLLOWING && LA133_0<=FOR)||LA133_0==IF||LA133_0==LET||LA133_0==NODE||LA133_0==ORDERED||LA133_0==PARENT||(LA133_0>=PRECEDING && LA133_0<=PRECEDING_SIBLING)||LA133_0==PROCESSING_INSTRUCTION||(LA133_0>=SCHEMAATTRIBUTE && LA133_0<=SCHEMAELEMENT)||LA133_0==SELF||LA133_0==SOME||LA133_0==TEXT||LA133_0==TYPESWITCH||LA133_0==UNORDERED||LA133_0==VALIDATE||LA133_0==StringLiteral||LA133_0==NCName||LA133_0==DOLLARSi||LA133_0==LPARSi||(LA133_0>=STARSi && LA133_0<=MINUSSi)||LA133_0==LTSi||(LA133_0>=IntegerLiteral && LA133_0<=LPRAGSi)||(LA133_0>=DBLSLASHSi && LA133_0<=SLASHSi)||(LA133_0>=DOTDOTSi && LA133_0<=ATSi)||LA133_0==DOTSi||LA133_0==LCOMMENTSi||LA133_0==LPISi) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // etc/XQFT.g:738:15: exprSingle ( COMMASi exprSingle )*
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_exprSingle_in_functionCall9800);
                    exprSingle591=exprSingle();
=======
                    pushFollow(FOLLOW_exprSingle_in_functionCall9900);
                    exprSingle589=exprSingle();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_exprSingle.add(exprSingle589.getTree());
                    // etc/XQFT.g:738:26: ( COMMASi exprSingle )*
                    loop132:
                    do {
                        int alt132=2;
                        int LA132_0 = input.LA(1);

                        if ( (LA132_0==COMMASi) ) {
                            alt132=1;
                        }


                        switch (alt132) {
                    	case 1 :
                    	    // etc/XQFT.g:738:27: COMMASi exprSingle
                    	    {
<<<<<<< .mine
                    	    COMMASi592=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_functionCall9803); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi592_tree = (CommonTree)adaptor.create(COMMASi592);
                    	    adaptor.addChild(root_0, COMMASi592_tree);
                    	    }
                    	    pushFollow(FOLLOW_exprSingle_in_functionCall9805);
                    	    exprSingle593=exprSingle();
=======
                    	    COMMASi590=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_functionCall9903); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi590);

                    	    pushFollow(FOLLOW_exprSingle_in_functionCall9905);
                    	    exprSingle591=exprSingle();
>>>>>>> .r234
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_exprSingle.add(exprSingle591.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);


                    }
                    break;

            }

<<<<<<< .mine
            RPARSi594=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_functionCall9825); if (failed) return retval;
=======
            RPARSi592=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_functionCall9925); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi592);


            // AST REWRITE
            // elements: exprSingle, qName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
>>>>>>> .r234
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 740:53: -> ^( AST_FUNCTIONCALL qName ( exprSingle )+ )
            {
                // etc/XQFT.g:740:56: ^( AST_FUNCTIONCALL qName ( exprSingle )+ )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FUNCTIONCALL, "AST_FUNCTIONCALL"), root_1);

                adaptor.addChild(root_1, stream_qName.next());
                if ( !(stream_exprSingle.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_exprSingle.hasNext() ) {
                    adaptor.addChild(root_1, stream_exprSingle.next());

                }
                stream_exprSingle.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionCall

    public static class orderedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderedExpr
    // etc/XQFT.g:743:3: orderedExpr : ORDERED LBRACESi expr RBRACSi ;
    public final orderedExpr_return orderedExpr() throws RecognitionException {
        orderedExpr_return retval = new orderedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDERED593=null;
        Token LBRACESi594=null;
        Token RBRACSi596=null;
        expr_return expr595 = null;


        XQFTTree ORDERED593_tree=null;
        XQFTTree LBRACESi594_tree=null;
        XQFTTree RBRACSi596_tree=null;

        try {
            // etc/XQFT.g:743:34: ( ORDERED LBRACESi expr RBRACSi )
            // etc/XQFT.g:743:36: ORDERED LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            ORDERED595=(Token)input.LT(1);
            match(input,ORDERED,FOLLOW_ORDERED_in_orderedExpr9855); if (failed) return retval;
=======
            ORDERED593=(Token)input.LT(1);
            match(input,ORDERED,FOLLOW_ORDERED_in_orderedExpr10018); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            ORDERED593_tree = (XQFTTree)adaptor.create(ORDERED593);
            adaptor.addChild(root_0, ORDERED593_tree);
            }
<<<<<<< .mine
            LBRACESi596=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_orderedExpr9857); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi596_tree = (CommonTree)adaptor.create(LBRACESi596);
            adaptor.addChild(root_0, LBRACESi596_tree);
            }
            pushFollow(FOLLOW_expr_in_orderedExpr9859);
            expr597=expr();
=======
            LBRACESi594=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_orderedExpr10020); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_orderedExpr10023);
            expr595=expr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, expr597.getTree());
            RBRACSi598=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_orderedExpr9861); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi598_tree = (CommonTree)adaptor.create(RBRACSi598);
            adaptor.addChild(root_0, RBRACSi598_tree);
            }
=======
            if ( backtracking==0 ) adaptor.addChild(root_0, expr595.getTree());
            RBRACSi596=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_orderedExpr10025); if (failed) return retval;
>>>>>>> .r234

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderedExpr

    public static class unorderedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unorderedExpr
    // etc/XQFT.g:746:3: unorderedExpr : UNORDERED LBRACESi expr RBRACSi ;
    public final unorderedExpr_return unorderedExpr() throws RecognitionException {
        unorderedExpr_return retval = new unorderedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token UNORDERED597=null;
        Token LBRACESi598=null;
        Token RBRACSi600=null;
        expr_return expr599 = null;


        XQFTTree UNORDERED597_tree=null;
        XQFTTree LBRACESi598_tree=null;
        XQFTTree RBRACSi600_tree=null;

        try {
            // etc/XQFT.g:746:34: ( UNORDERED LBRACESi expr RBRACSi )
            // etc/XQFT.g:746:36: UNORDERED LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            UNORDERED599=(Token)input.LT(1);
            match(input,UNORDERED,FOLLOW_UNORDERED_in_unorderedExpr9889); if (failed) return retval;
=======
            UNORDERED597=(Token)input.LT(1);
            match(input,UNORDERED,FOLLOW_UNORDERED_in_unorderedExpr10054); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            UNORDERED597_tree = (XQFTTree)adaptor.create(UNORDERED597);
            adaptor.addChild(root_0, UNORDERED597_tree);
            }
<<<<<<< .mine
            LBRACESi600=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_unorderedExpr9891); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi600_tree = (CommonTree)adaptor.create(LBRACESi600);
            adaptor.addChild(root_0, LBRACESi600_tree);
            }
            pushFollow(FOLLOW_expr_in_unorderedExpr9893);
            expr601=expr();
=======
            LBRACESi598=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_unorderedExpr10056); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_unorderedExpr10059);
            expr599=expr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, expr601.getTree());
            RBRACSi602=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_unorderedExpr9895); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi602_tree = (CommonTree)adaptor.create(RBRACSi602);
            adaptor.addChild(root_0, RBRACSi602_tree);
            }
=======
            if ( backtracking==0 ) adaptor.addChild(root_0, expr599.getTree());
            RBRACSi600=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_unorderedExpr10061); if (failed) return retval;
>>>>>>> .r234

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unorderedExpr

    public static class constructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constructor
    // etc/XQFT.g:749:3: constructor : ( directConstructor | computedConstructor );
    public final constructor_return constructor() throws RecognitionException {
        constructor_return retval = new constructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        directConstructor_return directConstructor601 = null;

        computedConstructor_return computedConstructor602 = null;



        try {
            // etc/XQFT.g:749:34: ( directConstructor | computedConstructor )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==LTSi||LA134_0==LCOMMENTSi||LA134_0==LPISi) ) {
                alt134=1;
            }
            else if ( (LA134_0==ATTRIBUTE||LA134_0==COMMENT||LA134_0==DOCUMENT||LA134_0==ELEMENT||LA134_0==PROCESSING_INSTRUCTION||LA134_0==TEXT) ) {
                alt134=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("749:3: constructor : ( directConstructor | computedConstructor );", 134, 0, input);

                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    // etc/XQFT.g:749:36: directConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_directConstructor_in_constructor9926);
                    directConstructor603=directConstructor();
=======
                    pushFollow(FOLLOW_directConstructor_in_constructor10093);
                    directConstructor601=directConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, directConstructor601.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:749:56: computedConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_computedConstructor_in_constructor9930);
                    computedConstructor604=computedConstructor();
=======
                    pushFollow(FOLLOW_computedConstructor_in_constructor10097);
                    computedConstructor602=computedConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, computedConstructor602.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end constructor

    public static class directConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start directConstructor
    // etc/XQFT.g:752:4: directConstructor : ( dirElemConstructor | dirCommentConstructor | dirPIConstructor );
    public final directConstructor_return directConstructor() throws RecognitionException {
        directConstructor_return retval = new directConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        dirElemConstructor_return dirElemConstructor603 = null;

        dirCommentConstructor_return dirCommentConstructor604 = null;

        dirPIConstructor_return dirPIConstructor605 = null;



        try {
            // etc/XQFT.g:752:35: ( dirElemConstructor | dirCommentConstructor | dirPIConstructor )
            int alt135=3;
            switch ( input.LA(1) ) {
            case LTSi:
                {
                alt135=1;
                }
                break;
            case LCOMMENTSi:
                {
                alt135=2;
                }
                break;
            case LPISi:
                {
                alt135=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("752:4: directConstructor : ( dirElemConstructor | dirCommentConstructor | dirPIConstructor );", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // etc/XQFT.g:752:37: dirElemConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_dirElemConstructor_in_directConstructor9970);
                    dirElemConstructor605=dirElemConstructor();
=======
                    pushFollow(FOLLOW_dirElemConstructor_in_directConstructor10137);
                    dirElemConstructor603=dirElemConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirElemConstructor603.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:753:40: dirCommentConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_dirCommentConstructor_in_directConstructor10011);
                    dirCommentConstructor606=dirCommentConstructor();
=======
                    pushFollow(FOLLOW_dirCommentConstructor_in_directConstructor10178);
                    dirCommentConstructor604=dirCommentConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirCommentConstructor604.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:754:28: dirPIConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_dirPIConstructor_in_directConstructor10040);
                    dirPIConstructor607=dirPIConstructor();
=======
                    pushFollow(FOLLOW_dirPIConstructor_in_directConstructor10207);
                    dirPIConstructor605=dirPIConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirPIConstructor605.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end directConstructor

    public static class dirElemConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirElemConstructor
    // etc/XQFT.g:756:14: dirElemConstructor : LTSi qn= qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi ) -> ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* ) ;
    public final dirElemConstructor_return dirElemConstructor() throws RecognitionException {
        dirElemConstructor_return retval = new dirElemConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LTSi606=null;
        Token RSELFTERMSi608=null;
        Token GTSi609=null;
        Token LENDTAGSi611=null;
        Token GTSi613=null;
        qName_return qn = null;

        dirAttributeList_return dirAttributeList607 = null;

        dirElemContent_return dirElemContent610 = null;

        qName_return qName612 = null;


        XQFTTree LTSi606_tree=null;
        XQFTTree RSELFTERMSi608_tree=null;
        XQFTTree GTSi609_tree=null;
        XQFTTree LENDTAGSi611_tree=null;
        XQFTTree GTSi613_tree=null;
        RewriteRuleTokenStream stream_RSELFTERMSi=new RewriteRuleTokenStream(adaptor,"token RSELFTERMSi");
        RewriteRuleTokenStream stream_LENDTAGSi=new RewriteRuleTokenStream(adaptor,"token LENDTAGSi");
        RewriteRuleTokenStream stream_GTSi=new RewriteRuleTokenStream(adaptor,"token GTSi");
        RewriteRuleTokenStream stream_LTSi=new RewriteRuleTokenStream(adaptor,"token LTSi");
        RewriteRuleSubtreeStream stream_dirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule dirAttributeList");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_dirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule dirElemContent");
        try {
            // etc/XQFT.g:756:45: ( LTSi qn= qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi ) -> ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* ) )
            // etc/XQFT.g:756:47: LTSi qn= qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )
            {
            LTSi606=(Token)input.LT(1);
            match(input,LTSi,FOLLOW_LTSi_in_dirElemConstructor10265); if (failed) return retval;
            if ( backtracking==0 ) stream_LTSi.add(LTSi606);

<<<<<<< .mine
            LTSi608=(Token)input.LT(1);
            match(input,LTSi,FOLLOW_LTSi_in_dirElemConstructor10098); if (failed) return retval;
=======
>>>>>>> .r234
            if ( backtracking==0 ) {
              lexer.stack.pushState(lexer.state); lexer.state=State.IN_TAG;
            }
<<<<<<< .mine
            pushFollow(FOLLOW_qName_in_dirElemConstructor10127);
            qName609=qName();
=======
            pushFollow(FOLLOW_qName_in_dirElemConstructor10331);
            qn=qName();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, qName609.getTree());
            pushFollow(FOLLOW_dirAttributeList_in_dirElemConstructor10129);
            dirAttributeList610=dirAttributeList();
=======
            if ( backtracking==0 ) stream_qName.add(qn.getTree());
            pushFollow(FOLLOW_dirAttributeList_in_dirElemConstructor10333);
            dirAttributeList607=dirAttributeList();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_dirAttributeList.add(dirAttributeList607.getTree());
            // etc/XQFT.g:758:61: ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==RSELFTERMSi) ) {
                alt137=1;
            }
            else if ( (LA137_0==GTSi) ) {
                alt137=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("758:61: ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // etc/XQFT.g:758:62: RSELFTERMSi
                    {
<<<<<<< .mine
                    RSELFTERMSi611=(Token)input.LT(1);
                    match(input,RSELFTERMSi,FOLLOW_RSELFTERMSi_in_dirElemConstructor10159); if (failed) return retval;
=======
                    RSELFTERMSi608=(Token)input.LT(1);
                    match(input,RSELFTERMSi,FOLLOW_RSELFTERMSi_in_dirElemConstructor10396); if (failed) return retval;
                    if ( backtracking==0 ) stream_RSELFTERMSi.add(RSELFTERMSi608);

>>>>>>> .r234
                    if ( backtracking==0 ) {
                      lexer.state=lexer.stack.pop();
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:760:34: GTSi ( dirElemContent )* LENDTAGSi qName GTSi
                    {
<<<<<<< .mine
                    GTSi612=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor10188); if (failed) return retval;
=======
                    GTSi609=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor10497); if (failed) return retval;
                    if ( backtracking==0 ) stream_GTSi.add(GTSi609);

>>>>>>> .r234
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_ELEMENT;
                    }
                    // etc/XQFT.g:763:26: ( dirElemContent )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==LBRACESi||LA136_0==LTSi||(LA136_0>=ElementContent && LA136_0<=LCDATASi)||LA136_0==LCOMMENTSi||LA136_0==LPISi) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // etc/XQFT.g:763:26: dirElemContent
                    	    {
<<<<<<< .mine
                    	    pushFollow(FOLLOW_dirElemContent_in_dirElemConstructor10217);
                    	    dirElemContent613=dirElemContent();
=======
                    	    pushFollow(FOLLOW_dirElemContent_in_dirElemConstructor10592);
                    	    dirElemContent610=dirElemContent();
>>>>>>> .r234
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_dirElemContent.add(dirElemContent610.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);

<<<<<<< .mine
                    LENDTAGSi614=(Token)input.LT(1);
                    match(input,LENDTAGSi,FOLLOW_LENDTAGSi_in_dirElemConstructor10246); if (failed) return retval;
=======
                    LENDTAGSi611=(Token)input.LT(1);
                    match(input,LENDTAGSi,FOLLOW_LENDTAGSi_in_dirElemConstructor10621); if (failed) return retval;
                    if ( backtracking==0 ) stream_LENDTAGSi.add(LENDTAGSi611);

>>>>>>> .r234
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }
<<<<<<< .mine
                    pushFollow(FOLLOW_qName_in_dirElemConstructor10276);
                    qName615=qName();
=======
                    pushFollow(FOLLOW_qName_in_dirElemConstructor10651);
                    qName612=qName();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
<<<<<<< .mine
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName615.getTree());
                    GTSi616=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor10305); if (failed) return retval;
=======
                    if ( backtracking==0 ) stream_qName.add(qName612.getTree());
                    GTSi613=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor10680); if (failed) return retval;
                    if ( backtracking==0 ) stream_GTSi.add(GTSi613);

>>>>>>> .r234
                    if ( backtracking==0 ) {
                      lexer.state=lexer.stack.pop();
                    }

                    }
                    break;

            }


            // AST REWRITE
            // elements: dirAttributeList, dirElemContent, qn
            // token labels: 
            // rule labels: qn, retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"token qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 768:61: -> ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* )
            {
                // etc/XQFT.g:768:64: ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONSTRUCTOR, "AST_DIRELEMCONSTRUCTOR"), root_1);

                adaptor.addChild(root_1, stream_qn.next());
                adaptor.addChild(root_1, stream_dirAttributeList.next());
                // etc/XQFT.g:768:110: ( dirElemContent )*
                while ( stream_dirElemContent.hasNext() ) {
                    adaptor.addChild(root_1, stream_dirElemContent.next());

                }
                stream_dirElemContent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirElemConstructor

    public static class dirAttributeList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirAttributeList
    // etc/XQFT.g:770:15: dirAttributeList : ( qName EQSi dirAttributeValue )* ;
    public final dirAttributeList_return dirAttributeList() throws RecognitionException {
        dirAttributeList_return retval = new dirAttributeList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token EQSi615=null;
        qName_return qName614 = null;

        dirAttributeValue_return dirAttributeValue616 = null;


        XQFTTree EQSi615_tree=null;

        try {
            // etc/XQFT.g:770:46: ( ( qName EQSi dirAttributeValue )* )
            // etc/XQFT.g:770:48: ( qName EQSi dirAttributeValue )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:770:48: ( qName EQSi dirAttributeValue )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==NCName) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // etc/XQFT.g:770:49: qName EQSi dirAttributeValue
            	    {
<<<<<<< .mine
            	    pushFollow(FOLLOW_qName_in_dirAttributeList10372);
            	    qName617=qName();
=======
            	    pushFollow(FOLLOW_qName_in_dirAttributeList10821);
            	    qName614=qName();
>>>>>>> .r234
            	    _fsp--;
            	    if (failed) return retval;
<<<<<<< .mine
            	    if ( backtracking==0 ) adaptor.addChild(root_0, qName617.getTree());
            	    EQSi618=(Token)input.LT(1);
            	    match(input,EQSi,FOLLOW_EQSi_in_dirAttributeList10374); if (failed) return retval;
=======
            	    if ( backtracking==0 ) adaptor.addChild(root_0, qName614.getTree());
            	    EQSi615=(Token)input.LT(1);
            	    match(input,EQSi,FOLLOW_EQSi_in_dirAttributeList10823); if (failed) return retval;
>>>>>>> .r234
            	    if ( backtracking==0 ) {
            	    EQSi615_tree = (XQFTTree)adaptor.create(EQSi615);
            	    adaptor.addChild(root_0, EQSi615_tree);
            	    }
<<<<<<< .mine
            	    pushFollow(FOLLOW_dirAttributeValue_in_dirAttributeList10376);
            	    dirAttributeValue619=dirAttributeValue();
=======
            	    pushFollow(FOLLOW_dirAttributeValue_in_dirAttributeList10825);
            	    dirAttributeValue616=dirAttributeValue();
>>>>>>> .r234
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, dirAttributeValue616.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirAttributeList

    public static class dirAttributeValue_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirAttributeValue
    // etc/XQFT.g:771:16: dirAttributeValue : ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi );
    public final dirAttributeValue_return dirAttributeValue() throws RecognitionException {
        dirAttributeValue_return retval = new dirAttributeValue_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token QUOTSi617=null;
        Token QuotAttributeContent618=null;
        Token QUOTSi620=null;
        Token APOSSi621=null;
        Token AposAttributeContent622=null;
        Token APOSSi624=null;
        xmlEnclosedExpr_return xmlEnclosedExpr619 = null;

        xmlEnclosedExpr_return xmlEnclosedExpr623 = null;


        XQFTTree QUOTSi617_tree=null;
        XQFTTree QuotAttributeContent618_tree=null;
        XQFTTree QUOTSi620_tree=null;
        XQFTTree APOSSi621_tree=null;
        XQFTTree AposAttributeContent622_tree=null;
        XQFTTree APOSSi624_tree=null;

        try {
            // etc/XQFT.g:771:47: ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==QUOTSi) ) {
                alt141=1;
            }
            else if ( (LA141_0==APOSSi) ) {
                alt141=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("771:16: dirAttributeValue : ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi );", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // etc/XQFT.g:771:49: QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    QUOTSi620=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue10414); if (failed) return retval;
=======
                    QUOTSi617=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue10863); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    QUOTSi617_tree = (XQFTTree)adaptor.create(QUOTSi617);
                    adaptor.addChild(root_0, QUOTSi617_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_QUOT_ATTRIBUTE;
                    }
                    // etc/XQFT.g:772:27: ( QuotAttributeContent | xmlEnclosedExpr )*
                    loop139:
                    do {
                        int alt139=3;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==QuotAttributeContent) ) {
                            alt139=1;
                        }
                        else if ( (LA139_0==LBRACESi) ) {
                            alt139=2;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // etc/XQFT.g:772:28: QuotAttributeContent
                    	    {
<<<<<<< .mine
                    	    QuotAttributeContent621=(Token)input.LT(1);
                    	    match(input,QuotAttributeContent,FOLLOW_QuotAttributeContent_in_dirAttributeValue10445); if (failed) return retval;
=======
                    	    QuotAttributeContent618=(Token)input.LT(1);
                    	    match(input,QuotAttributeContent,FOLLOW_QuotAttributeContent_in_dirAttributeValue10894); if (failed) return retval;
>>>>>>> .r234
                    	    if ( backtracking==0 ) {
                    	    QuotAttributeContent618_tree = (XQFTTree)adaptor.create(QuotAttributeContent618);
                    	    adaptor.addChild(root_0, QuotAttributeContent618_tree);
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // etc/XQFT.g:772:51: xmlEnclosedExpr
                    	    {
<<<<<<< .mine
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10449);
                    	    xmlEnclosedExpr622=xmlEnclosedExpr();
=======
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10898);
                    	    xmlEnclosedExpr619=xmlEnclosedExpr();
>>>>>>> .r234
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, xmlEnclosedExpr619.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

<<<<<<< .mine
                    QUOTSi623=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue10481); if (failed) return retval;
=======
                    QUOTSi620=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue10930); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    QUOTSi620_tree = (XQFTTree)adaptor.create(QUOTSi620);
                    adaptor.addChild(root_0, QUOTSi620_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:774:31: APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    APOSSi624=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue10515); if (failed) return retval;
=======
                    APOSSi621=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue10964); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    APOSSi621_tree = (XQFTTree)adaptor.create(APOSSi621);
                    adaptor.addChild(root_0, APOSSi621_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_APOS_ATTRIBUTE;
                    }
                    // etc/XQFT.g:775:30: ( AposAttributeContent | xmlEnclosedExpr )*
                    loop140:
                    do {
                        int alt140=3;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==AposAttributeContent) ) {
                            alt140=1;
                        }
                        else if ( (LA140_0==LBRACESi) ) {
                            alt140=2;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // etc/XQFT.g:775:31: AposAttributeContent
                    	    {
<<<<<<< .mine
                    	    AposAttributeContent625=(Token)input.LT(1);
                    	    match(input,AposAttributeContent,FOLLOW_AposAttributeContent_in_dirAttributeValue10549); if (failed) return retval;
=======
                    	    AposAttributeContent622=(Token)input.LT(1);
                    	    match(input,AposAttributeContent,FOLLOW_AposAttributeContent_in_dirAttributeValue10998); if (failed) return retval;
>>>>>>> .r234
                    	    if ( backtracking==0 ) {
                    	    AposAttributeContent622_tree = (XQFTTree)adaptor.create(AposAttributeContent622);
                    	    adaptor.addChild(root_0, AposAttributeContent622_tree);
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // etc/XQFT.g:775:54: xmlEnclosedExpr
                    	    {
<<<<<<< .mine
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10553);
                    	    xmlEnclosedExpr626=xmlEnclosedExpr();
=======
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue11002);
                    	    xmlEnclosedExpr623=xmlEnclosedExpr();
>>>>>>> .r234
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, xmlEnclosedExpr623.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);

<<<<<<< .mine
                    APOSSi627=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue10588); if (failed) return retval;
=======
                    APOSSi624=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue11037); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    APOSSi624_tree = (XQFTTree)adaptor.create(APOSSi624);
                    adaptor.addChild(root_0, APOSSi624_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirAttributeValue

    public static class xmlEnclosedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start xmlEnclosedExpr
    // etc/XQFT.g:777:14: xmlEnclosedExpr : LBRACESi expr RBRACSi ;
    public final xmlEnclosedExpr_return xmlEnclosedExpr() throws RecognitionException {
        xmlEnclosedExpr_return retval = new xmlEnclosedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi625=null;
        Token RBRACSi627=null;
        expr_return expr626 = null;


        XQFTTree LBRACESi625_tree=null;
        XQFTTree RBRACSi627_tree=null;

        try {
            // etc/XQFT.g:777:48: ( LBRACESi expr RBRACSi )
            // etc/XQFT.g:777:50: LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            LBRACESi628=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_xmlEnclosedExpr10629); if (failed) return retval;
=======
            LBRACESi625=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_xmlEnclosedExpr11078); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
              lexer.stack.pushState(lexer.state);System.out.println("Pushstate: " +lexer.state); lexer.state=State.DEFAULT;
            }
<<<<<<< .mine
            if ( backtracking==0 ) {
              lexer.stack.pushState(lexer.state);System.out.println("Pushstate: " +lexer.state); lexer.state=State.DEFAULT;
            }
            pushFollow(FOLLOW_expr_in_xmlEnclosedExpr10657);
            expr629=expr();
=======
            pushFollow(FOLLOW_expr_in_xmlEnclosedExpr11107);
            expr626=expr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, expr629.getTree());
            if ( backtracking==0 ) {
              lexer.state = lexer.stack.pop(); System.err.println("Setter nå state til " +lexer.state);
            }
            RBRACSi630=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_xmlEnclosedExpr10711); if (failed) return retval;
=======
            if ( backtracking==0 ) adaptor.addChild(root_0, expr626.getTree());
>>>>>>> .r234
            if ( backtracking==0 ) {
              lexer.state = lexer.stack.pop(); System.err.println("Setter nå state til " +lexer.state);
            }
<<<<<<< .mine
=======
            RBRACSi627=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_xmlEnclosedExpr11161); if (failed) return retval;
>>>>>>> .r234

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end xmlEnclosedExpr

    public static class dirElemContent_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirElemContent
<<<<<<< .mine
    // etc/XQFT.g:772:6: dirElemContent : ( directConstructor | cDataSection | ElementContent | xmlEnclosedExpr );
=======
    // etc/XQFT.g:784:6: dirElemContent : (dc= directConstructor | cd= cDataSection | ec= ElementContent | xe= xmlEnclosedExpr -> ^( AST_DIRELEMCONTENT ( $dc)? ( $cd)? ( $ec)? ( $xe)? ) );
>>>>>>> .r234
    public final dirElemContent_return dirElemContent() throws RecognitionException {
        dirElemContent_return retval = new dirElemContent_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ec=null;
        directConstructor_return dc = null;

        cDataSection_return cd = null;

        xmlEnclosedExpr_return xe = null;


        XQFTTree ec_tree=null;
        RewriteRuleSubtreeStream stream_xmlEnclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule xmlEnclosedExpr");
        try {
<<<<<<< .mine
            // etc/XQFT.g:772:37: ( directConstructor | cDataSection | ElementContent | xmlEnclosedExpr )
=======
            // etc/XQFT.g:784:37: (dc= directConstructor | cd= cDataSection | ec= ElementContent | xe= xmlEnclosedExpr -> ^( AST_DIRELEMCONTENT ( $dc)? ( $cd)? ( $ec)? ( $xe)? ) )
>>>>>>> .r234
            int alt142=4;
            switch ( input.LA(1) ) {
            case LTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt142=1;
                }
                break;
            case LCDATASi:
                {
                alt142=2;
                }
                break;
            case ElementContent:
                {
                alt142=3;
                }
                break;
            case LBRACESi:
                {
                alt142=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
<<<<<<< .mine
                    new NoViableAltException("772:6: dirElemContent : ( directConstructor | cDataSection | ElementContent | xmlEnclosedExpr );", 142, 0, input);
=======
                    new NoViableAltException("784:6: dirElemContent : (dc= directConstructor | cd= cDataSection | ec= ElementContent | xe= xmlEnclosedExpr -> ^( AST_DIRELEMCONTENT ( $dc)? ( $cd)? ( $ec)? ( $xe)? ) );", 142, 0, input);
>>>>>>> .r234

                throw nvae;
            }

            switch (alt142) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:772:39: directConstructor
=======
                    // etc/XQFT.g:784:39: dc= directConstructor
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_directConstructor_in_dirElemContent10743);
                    directConstructor631=directConstructor();
=======
                    pushFollow(FOLLOW_directConstructor_in_dirElemContent11196);
                    dc=directConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dc.getTree());

                    }
                    break;
                case 2 :
<<<<<<< .mine
                    // etc/XQFT.g:772:59: cDataSection
=======
                    // etc/XQFT.g:784:62: cd= cDataSection
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_cDataSection_in_dirElemContent10747);
                    cDataSection632=cDataSection();
=======
                    pushFollow(FOLLOW_cDataSection_in_dirElemContent11202);
                    cd=cDataSection();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, cd.getTree());

                    }
                    break;
                case 3 :
<<<<<<< .mine
                    // etc/XQFT.g:772:74: ElementContent
=======
                    // etc/XQFT.g:784:80: ec= ElementContent
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    ElementContent633=(Token)input.LT(1);
                    match(input,ElementContent,FOLLOW_ElementContent_in_dirElemContent10751); if (failed) return retval;
=======
                    ec=(Token)input.LT(1);
                    match(input,ElementContent,FOLLOW_ElementContent_in_dirElemContent11208); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    ec_tree = (XQFTTree)adaptor.create(ec);
                    adaptor.addChild(root_0, ec_tree);
                    }

                    }
                    break;
                case 4 :
<<<<<<< .mine
                    // etc/XQFT.g:772:91: xmlEnclosedExpr
=======
                    // etc/XQFT.g:784:100: xe= xmlEnclosedExpr
>>>>>>> .r234
                    {
<<<<<<< .mine
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirElemContent10755);
                    xmlEnclosedExpr634=xmlEnclosedExpr();
=======
                    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirElemContent11214);
                    xe=xmlEnclosedExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_xmlEnclosedExpr.add(xe.getTree());

                    // AST REWRITE
                    // elements: dc, cd, ec, xe
                    // token labels: ec
                    // rule labels: dc, retval, xe, cd
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_ec=new RewriteRuleTokenStream(adaptor,"token ec",ec);
                    RewriteRuleSubtreeStream stream_dc=new RewriteRuleSubtreeStream(adaptor,"token dc",dc!=null?dc.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_xe=new RewriteRuleSubtreeStream(adaptor,"token xe",xe!=null?xe.tree:null);
                    RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"token cd",cd!=null?cd.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 785:65: -> ^( AST_DIRELEMCONTENT ( $dc)? ( $cd)? ( $ec)? ( $xe)? )
                    {
                        // etc/XQFT.g:785:68: ^( AST_DIRELEMCONTENT ( $dc)? ( $cd)? ( $ec)? ( $xe)? )
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONTENT, "AST_DIRELEMCONTENT"), root_1);

                        // etc/XQFT.g:785:89: ( $dc)?
                        if ( stream_dc.hasNext() ) {
                            adaptor.addChild(root_1, stream_dc.next());

                        }
                        stream_dc.reset();
                        // etc/XQFT.g:785:94: ( $cd)?
                        if ( stream_cd.hasNext() ) {
                            adaptor.addChild(root_1, stream_cd.next());

                        }
                        stream_cd.reset();
                        // etc/XQFT.g:785:99: ( $ec)?
                        if ( stream_ec.hasNext() ) {
                            adaptor.addChild(root_1, stream_ec.next());

                        }
                        stream_ec.reset();
                        // etc/XQFT.g:785:104: ( $xe)?
                        if ( stream_xe.hasNext() ) {
                            adaptor.addChild(root_1, stream_xe.next());

                        }
                        stream_xe.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirElemContent

    public static class cDataSection_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start cDataSection
<<<<<<< .mine
    // etc/XQFT.g:774:7: cDataSection : LCDATASi CDataContents RCDATASi ;
=======
    // etc/XQFT.g:788:7: cDataSection : LCDATASi CDataContents RCDATASi ;
>>>>>>> .r234
    public final cDataSection_return cDataSection() throws RecognitionException {
        cDataSection_return retval = new cDataSection_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LCDATASi628=null;
        Token CDataContents629=null;
        Token RCDATASi630=null;

        XQFTTree LCDATASi628_tree=null;
        XQFTTree CDataContents629_tree=null;
        XQFTTree RCDATASi630_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:774:26: ( LCDATASi CDataContents RCDATASi )
            // etc/XQFT.g:774:28: LCDATASi CDataContents RCDATASi
=======
            // etc/XQFT.g:788:26: ( LCDATASi CDataContents RCDATASi )
            // etc/XQFT.g:788:28: LCDATASi CDataContents RCDATASi
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            LCDATASi635=(Token)input.LT(1);
            match(input,LCDATASi,FOLLOW_LCDATASi_in_cDataSection10775); if (failed) return retval;
=======
            LCDATASi628=(Token)input.LT(1);
            match(input,LCDATASi,FOLLOW_LCDATASi_in_cDataSection11321); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            LCDATASi628_tree = (XQFTTree)adaptor.create(LCDATASi628);
            adaptor.addChild(root_0, LCDATASi628_tree);
            }
<<<<<<< .mine
            CDataContents636=(Token)input.LT(1);
            match(input,CDataContents,FOLLOW_CDataContents_in_cDataSection10777); if (failed) return retval;
=======
            CDataContents629=(Token)input.LT(1);
            match(input,CDataContents,FOLLOW_CDataContents_in_cDataSection11323); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            CDataContents629_tree = (XQFTTree)adaptor.create(CDataContents629);
            adaptor.addChild(root_0, CDataContents629_tree);
            }
<<<<<<< .mine
            RCDATASi637=(Token)input.LT(1);
            match(input,RCDATASi,FOLLOW_RCDATASi_in_cDataSection10779); if (failed) return retval;
=======
            RCDATASi630=(Token)input.LT(1);
            match(input,RCDATASi,FOLLOW_RCDATASi_in_cDataSection11325); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            RCDATASi630_tree = (XQFTTree)adaptor.create(RCDATASi630);
            adaptor.addChild(root_0, RCDATASi630_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end cDataSection

    public static class dirCommentConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirCommentConstructor
<<<<<<< .mine
    // etc/XQFT.g:779:5: dirCommentConstructor : LCOMMENTSi DirCommentContent RCOMMENTSi ;
=======
    // etc/XQFT.g:793:5: dirCommentConstructor : LCOMMENTSi DirCommentContent RCOMMENTSi ;
>>>>>>> .r234
    public final dirCommentConstructor_return dirCommentConstructor() throws RecognitionException {
        dirCommentConstructor_return retval = new dirCommentConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LCOMMENTSi631=null;
        Token DirCommentContent632=null;
        Token RCOMMENTSi633=null;

        XQFTTree LCOMMENTSi631_tree=null;
        XQFTTree DirCommentContent632_tree=null;
        XQFTTree RCOMMENTSi633_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:779:31: ( LCOMMENTSi DirCommentContent RCOMMENTSi )
            // etc/XQFT.g:779:33: LCOMMENTSi DirCommentContent RCOMMENTSi
=======
            // etc/XQFT.g:793:31: ( LCOMMENTSi DirCommentContent RCOMMENTSi )
            // etc/XQFT.g:793:33: LCOMMENTSi DirCommentContent RCOMMENTSi
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            LCOMMENTSi638=(Token)input.LT(1);
            match(input,LCOMMENTSi,FOLLOW_LCOMMENTSi_in_dirCommentConstructor10802); if (failed) return retval;
=======
            LCOMMENTSi631=(Token)input.LT(1);
            match(input,LCOMMENTSi,FOLLOW_LCOMMENTSi_in_dirCommentConstructor11348); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            LCOMMENTSi631_tree = (XQFTTree)adaptor.create(LCOMMENTSi631);
            adaptor.addChild(root_0, LCOMMENTSi631_tree);
            }
<<<<<<< .mine
            DirCommentContent639=(Token)input.LT(1);
            match(input,DirCommentContent,FOLLOW_DirCommentContent_in_dirCommentConstructor10804); if (failed) return retval;
=======
            DirCommentContent632=(Token)input.LT(1);
            match(input,DirCommentContent,FOLLOW_DirCommentContent_in_dirCommentConstructor11350); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            DirCommentContent632_tree = (XQFTTree)adaptor.create(DirCommentContent632);
            adaptor.addChild(root_0, DirCommentContent632_tree);
            }
<<<<<<< .mine
            RCOMMENTSi640=(Token)input.LT(1);
            match(input,RCOMMENTSi,FOLLOW_RCOMMENTSi_in_dirCommentConstructor10806); if (failed) return retval;
=======
            RCOMMENTSi633=(Token)input.LT(1);
            match(input,RCOMMENTSi,FOLLOW_RCOMMENTSi_in_dirCommentConstructor11352); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            RCOMMENTSi633_tree = (XQFTTree)adaptor.create(RCOMMENTSi633);
            adaptor.addChild(root_0, RCOMMENTSi633_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirCommentConstructor

    public static class dirPIConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirPIConstructor
<<<<<<< .mine
    // etc/XQFT.g:781:5: dirPIConstructor : LPISi PiTarget ( DirPiContents )? RPISi ;
=======
    // etc/XQFT.g:795:5: dirPIConstructor : LPISi PiTarget ( DirPiContents )? RPISi ;
>>>>>>> .r234
    public final dirPIConstructor_return dirPIConstructor() throws RecognitionException {
        dirPIConstructor_return retval = new dirPIConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPISi634=null;
        Token PiTarget635=null;
        Token DirPiContents636=null;
        Token RPISi637=null;

        XQFTTree LPISi634_tree=null;
        XQFTTree PiTarget635_tree=null;
        XQFTTree DirPiContents636_tree=null;
        XQFTTree RPISi637_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:781:27: ( LPISi PiTarget ( DirPiContents )? RPISi )
            // etc/XQFT.g:781:29: LPISi PiTarget ( DirPiContents )? RPISi
=======
            // etc/XQFT.g:795:27: ( LPISi PiTarget ( DirPiContents )? RPISi )
            // etc/XQFT.g:795:29: LPISi PiTarget ( DirPiContents )? RPISi
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            LPISi641=(Token)input.LT(1);
            match(input,LPISi,FOLLOW_LPISi_in_dirPIConstructor10827); if (failed) return retval;
=======
            LPISi634=(Token)input.LT(1);
            match(input,LPISi,FOLLOW_LPISi_in_dirPIConstructor11373); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            LPISi634_tree = (XQFTTree)adaptor.create(LPISi634);
            adaptor.addChild(root_0, LPISi634_tree);
            }
<<<<<<< .mine
            PiTarget642=(Token)input.LT(1);
            match(input,PiTarget,FOLLOW_PiTarget_in_dirPIConstructor10829); if (failed) return retval;
=======
            PiTarget635=(Token)input.LT(1);
            match(input,PiTarget,FOLLOW_PiTarget_in_dirPIConstructor11375); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            PiTarget635_tree = (XQFTTree)adaptor.create(PiTarget635);
            adaptor.addChild(root_0, PiTarget635_tree);
            }
<<<<<<< .mine
            // etc/XQFT.g:781:44: ( DirPiContents )?
=======
            // etc/XQFT.g:795:44: ( DirPiContents )?
>>>>>>> .r234
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==DirPiContents) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:781:44: DirPiContents
=======
                    // etc/XQFT.g:795:44: DirPiContents
>>>>>>> .r234
                    {
<<<<<<< .mine
                    DirPiContents643=(Token)input.LT(1);
                    match(input,DirPiContents,FOLLOW_DirPiContents_in_dirPIConstructor10831); if (failed) return retval;
=======
                    DirPiContents636=(Token)input.LT(1);
                    match(input,DirPiContents,FOLLOW_DirPiContents_in_dirPIConstructor11377); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    DirPiContents636_tree = (XQFTTree)adaptor.create(DirPiContents636);
                    adaptor.addChild(root_0, DirPiContents636_tree);
                    }

                    }
                    break;

            }

<<<<<<< .mine
            RPISi644=(Token)input.LT(1);
            match(input,RPISi,FOLLOW_RPISi_in_dirPIConstructor10834); if (failed) return retval;
=======
            RPISi637=(Token)input.LT(1);
            match(input,RPISi,FOLLOW_RPISi_in_dirPIConstructor11380); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            RPISi637_tree = (XQFTTree)adaptor.create(RPISi637);
            adaptor.addChild(root_0, RPISi637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirPIConstructor

    public static class computedConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start computedConstructor
<<<<<<< .mine
    // etc/XQFT.g:783:4: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );
=======
    // etc/XQFT.g:797:4: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );
>>>>>>> .r234
    public final computedConstructor_return computedConstructor() throws RecognitionException {
        computedConstructor_return retval = new computedConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        compDocConstructor_return compDocConstructor638 = null;

        compElemConstructor_return compElemConstructor639 = null;

        compAttrConstructor_return compAttrConstructor640 = null;

        compTextConstructor_return compTextConstructor641 = null;

        compCommentConstructor_return compCommentConstructor642 = null;

        compPIConstructor_return compPIConstructor643 = null;



        try {
<<<<<<< .mine
            // etc/XQFT.g:783:35: ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor )
=======
            // etc/XQFT.g:797:35: ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor )
>>>>>>> .r234
            int alt144=6;
            switch ( input.LA(1) ) {
            case DOCUMENT:
                {
                alt144=1;
                }
                break;
            case ELEMENT:
                {
                alt144=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt144=3;
                }
                break;
            case TEXT:
                {
                alt144=4;
                }
                break;
            case COMMENT:
                {
                alt144=5;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt144=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
<<<<<<< .mine
                    new NoViableAltException("783:4: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );", 144, 0, input);
=======
                    new NoViableAltException("797:4: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );", 144, 0, input);
>>>>>>> .r234

                throw nvae;
            }

            switch (alt144) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:783:37: compDocConstructor
=======
                    // etc/XQFT.g:797:37: compDocConstructor
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_compDocConstructor_in_computedConstructor10860);
                    compDocConstructor645=compDocConstructor();
=======
                    pushFollow(FOLLOW_compDocConstructor_in_computedConstructor11406);
                    compDocConstructor638=compDocConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compDocConstructor638.getTree());

                    }
                    break;
                case 2 :
<<<<<<< .mine
                    // etc/XQFT.g:784:40: compElemConstructor
=======
                    // etc/XQFT.g:798:40: compElemConstructor
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_compElemConstructor_in_computedConstructor10901);
                    compElemConstructor646=compElemConstructor();
=======
                    pushFollow(FOLLOW_compElemConstructor_in_computedConstructor11447);
                    compElemConstructor639=compElemConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compElemConstructor639.getTree());

                    }
                    break;
                case 3 :
<<<<<<< .mine
                    // etc/XQFT.g:785:40: compAttrConstructor
=======
                    // etc/XQFT.g:799:40: compAttrConstructor
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_compAttrConstructor_in_computedConstructor10942);
                    compAttrConstructor647=compAttrConstructor();
=======
                    pushFollow(FOLLOW_compAttrConstructor_in_computedConstructor11488);
                    compAttrConstructor640=compAttrConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compAttrConstructor640.getTree());

                    }
                    break;
                case 4 :
<<<<<<< .mine
                    // etc/XQFT.g:786:40: compTextConstructor
=======
                    // etc/XQFT.g:800:40: compTextConstructor
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_compTextConstructor_in_computedConstructor10983);
                    compTextConstructor648=compTextConstructor();
=======
                    pushFollow(FOLLOW_compTextConstructor_in_computedConstructor11529);
                    compTextConstructor641=compTextConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compTextConstructor641.getTree());

                    }
                    break;
                case 5 :
<<<<<<< .mine
                    // etc/XQFT.g:787:40: compCommentConstructor
=======
                    // etc/XQFT.g:801:40: compCommentConstructor
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_compCommentConstructor_in_computedConstructor11024);
                    compCommentConstructor649=compCommentConstructor();
=======
                    pushFollow(FOLLOW_compCommentConstructor_in_computedConstructor11570);
                    compCommentConstructor642=compCommentConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compCommentConstructor642.getTree());

                    }
                    break;
                case 6 :
<<<<<<< .mine
                    // etc/XQFT.g:788:40: compPIConstructor
=======
                    // etc/XQFT.g:802:40: compPIConstructor
>>>>>>> .r234
                    {
                    root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
                    pushFollow(FOLLOW_compPIConstructor_in_computedConstructor11065);
                    compPIConstructor650=compPIConstructor();
=======
                    pushFollow(FOLLOW_compPIConstructor_in_computedConstructor11611);
                    compPIConstructor643=compPIConstructor();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compPIConstructor643.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end computedConstructor

    public static class compDocConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compDocConstructor
<<<<<<< .mine
    // etc/XQFT.g:790:5: compDocConstructor : DOCUMENT LBRACESi expr RBRACSi ;
=======
    // etc/XQFT.g:804:5: compDocConstructor : DOCUMENT LBRACESi expr RBRACSi ;
>>>>>>> .r234
    public final compDocConstructor_return compDocConstructor() throws RecognitionException {
        compDocConstructor_return retval = new compDocConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOCUMENT644=null;
        Token LBRACESi645=null;
        Token RBRACSi647=null;
        expr_return expr646 = null;


        XQFTTree DOCUMENT644_tree=null;
        XQFTTree LBRACESi645_tree=null;
        XQFTTree RBRACSi647_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:790:36: ( DOCUMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:790:38: DOCUMENT LBRACESi expr RBRACSi
=======
            // etc/XQFT.g:804:36: ( DOCUMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:804:38: DOCUMENT LBRACESi expr RBRACSi
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            DOCUMENT651=(Token)input.LT(1);
            match(input,DOCUMENT,FOLLOW_DOCUMENT_in_compDocConstructor11093); if (failed) return retval;
=======
            DOCUMENT644=(Token)input.LT(1);
            match(input,DOCUMENT,FOLLOW_DOCUMENT_in_compDocConstructor11639); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            DOCUMENT644_tree = (XQFTTree)adaptor.create(DOCUMENT644);
            adaptor.addChild(root_0, DOCUMENT644_tree);
            }
<<<<<<< .mine
            LBRACESi652=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compDocConstructor11095); if (failed) return retval;
=======
            LBRACESi645=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compDocConstructor11641); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            LBRACESi645_tree = (XQFTTree)adaptor.create(LBRACESi645);
            adaptor.addChild(root_0, LBRACESi645_tree);
            }
<<<<<<< .mine
            pushFollow(FOLLOW_expr_in_compDocConstructor11097);
            expr653=expr();
=======
            pushFollow(FOLLOW_expr_in_compDocConstructor11643);
            expr646=expr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, expr653.getTree());
            RBRACSi654=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compDocConstructor11099); if (failed) return retval;
=======
            if ( backtracking==0 ) adaptor.addChild(root_0, expr646.getTree());
            RBRACSi647=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compDocConstructor11645); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            RBRACSi647_tree = (XQFTTree)adaptor.create(RBRACSi647);
            adaptor.addChild(root_0, RBRACSi647_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compDocConstructor

    public static class compElemConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compElemConstructor
<<<<<<< .mine
    // etc/XQFT.g:794:5: compElemConstructor : ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi ;
=======
    // etc/XQFT.g:808:5: compElemConstructor : ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi ;
>>>>>>> .r234
    public final compElemConstructor_return compElemConstructor() throws RecognitionException {
        compElemConstructor_return retval = new compElemConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ELEMENT648=null;
        Token LBRACESi650=null;
        Token RBRACSi652=null;
        Token LBRACESi653=null;
        Token RBRACSi655=null;
        qName_return qName649 = null;

        expr_return expr651 = null;

        contentExpr_return contentExpr654 = null;


        XQFTTree ELEMENT648_tree=null;
        XQFTTree LBRACESi650_tree=null;
        XQFTTree RBRACSi652_tree=null;
        XQFTTree LBRACESi653_tree=null;
        XQFTTree RBRACSi655_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:794:36: ( ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi )
            // etc/XQFT.g:794:38: ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi
=======
            // etc/XQFT.g:808:36: ( ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi )
            // etc/XQFT.g:808:38: ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            ELEMENT655=(Token)input.LT(1);
            match(input,ELEMENT,FOLLOW_ELEMENT_in_compElemConstructor11128); if (failed) return retval;
=======
            ELEMENT648=(Token)input.LT(1);
            match(input,ELEMENT,FOLLOW_ELEMENT_in_compElemConstructor11674); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            ELEMENT648_tree = (XQFTTree)adaptor.create(ELEMENT648);
            adaptor.addChild(root_0, ELEMENT648_tree);
            }
<<<<<<< .mine
            // etc/XQFT.g:794:46: ( qName | LBRACESi expr RBRACSi )
=======
            // etc/XQFT.g:808:46: ( qName | LBRACESi expr RBRACSi )
>>>>>>> .r234
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==NCName) ) {
                alt145=1;
            }
            else if ( (LA145_0==LBRACESi) ) {
                alt145=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
<<<<<<< .mine
                    new NoViableAltException("794:46: ( qName | LBRACESi expr RBRACSi )", 145, 0, input);
=======
                    new NoViableAltException("808:46: ( qName | LBRACESi expr RBRACSi )", 145, 0, input);
>>>>>>> .r234

                throw nvae;
            }
            switch (alt145) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:794:47: qName
=======
                    // etc/XQFT.g:808:47: qName
>>>>>>> .r234
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_qName_in_compElemConstructor11131);
                    qName656=qName();
=======
                    pushFollow(FOLLOW_qName_in_compElemConstructor11677);
                    qName649=qName();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName649.getTree());

                    }
                    break;
                case 2 :
<<<<<<< .mine
                    // etc/XQFT.g:794:55: LBRACESi expr RBRACSi
=======
                    // etc/XQFT.g:808:55: LBRACESi expr RBRACSi
>>>>>>> .r234
                    {
<<<<<<< .mine
                    LBRACESi657=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor11135); if (failed) return retval;
=======
                    LBRACESi650=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor11681); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    LBRACESi650_tree = (XQFTTree)adaptor.create(LBRACESi650);
                    adaptor.addChild(root_0, LBRACESi650_tree);
                    }
<<<<<<< .mine
                    pushFollow(FOLLOW_expr_in_compElemConstructor11137);
                    expr658=expr();
=======
                    pushFollow(FOLLOW_expr_in_compElemConstructor11683);
                    expr651=expr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
<<<<<<< .mine
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr658.getTree());
                    RBRACSi659=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor11139); if (failed) return retval;
=======
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr651.getTree());
                    RBRACSi652=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor11685); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    RBRACSi652_tree = (XQFTTree)adaptor.create(RBRACSi652);
                    adaptor.addChild(root_0, RBRACSi652_tree);
                    }

                    }
                    break;

            }

<<<<<<< .mine
            LBRACESi660=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor11158); if (failed) return retval;
=======
            LBRACESi653=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor11704); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            LBRACESi653_tree = (XQFTTree)adaptor.create(LBRACESi653);
            adaptor.addChild(root_0, LBRACESi653_tree);
            }
<<<<<<< .mine
            // etc/XQFT.g:795:25: ( contentExpr )?
=======
            // etc/XQFT.g:809:25: ( contentExpr )?
>>>>>>> .r234
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=ANCESTOR && LA146_0<=ANCESTOR_OR_SELF)||LA146_0==ATTRIBUTE||LA146_0==CHILD||LA146_0==COMMENT||(LA146_0>=DESCENDANT && LA146_0<=DESCENDANT_OR_SELF)||(LA146_0>=DOCUMENT && LA146_0<=ELEMENT)||LA146_0==EVERY||(LA146_0>=FOLLOWING && LA146_0<=FOR)||LA146_0==IF||LA146_0==LET||LA146_0==NODE||LA146_0==ORDERED||LA146_0==PARENT||(LA146_0>=PRECEDING && LA146_0<=PRECEDING_SIBLING)||LA146_0==PROCESSING_INSTRUCTION||(LA146_0>=SCHEMAATTRIBUTE && LA146_0<=SCHEMAELEMENT)||LA146_0==SELF||LA146_0==SOME||LA146_0==TEXT||LA146_0==TYPESWITCH||LA146_0==UNORDERED||LA146_0==VALIDATE||LA146_0==StringLiteral||LA146_0==NCName||LA146_0==DOLLARSi||LA146_0==LPARSi||(LA146_0>=STARSi && LA146_0<=MINUSSi)||LA146_0==LTSi||(LA146_0>=IntegerLiteral && LA146_0<=LPRAGSi)||(LA146_0>=DBLSLASHSi && LA146_0<=SLASHSi)||(LA146_0>=DOTDOTSi && LA146_0<=ATSi)||LA146_0==DOTSi||LA146_0==LCOMMENTSi||LA146_0==LPISi) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:795:25: contentExpr
=======
                    // etc/XQFT.g:809:25: contentExpr
>>>>>>> .r234
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_contentExpr_in_compElemConstructor11160);
                    contentExpr661=contentExpr();
=======
                    pushFollow(FOLLOW_contentExpr_in_compElemConstructor11706);
                    contentExpr654=contentExpr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, contentExpr654.getTree());

                    }
                    break;

            }

<<<<<<< .mine
            RBRACSi662=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor11163); if (failed) return retval;
=======
            RBRACSi655=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor11709); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            RBRACSi655_tree = (XQFTTree)adaptor.create(RBRACSi655);
            adaptor.addChild(root_0, RBRACSi655_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compElemConstructor

    public static class contentExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start contentExpr
<<<<<<< .mine
    // etc/XQFT.g:798:6: contentExpr : expr ;
=======
    // etc/XQFT.g:812:6: contentExpr : expr ;
>>>>>>> .r234
    public final contentExpr_return contentExpr() throws RecognitionException {
        contentExpr_return retval = new contentExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        expr_return expr656 = null;



        try {
<<<<<<< .mine
            // etc/XQFT.g:798:37: ( expr )
            // etc/XQFT.g:798:39: expr
=======
            // etc/XQFT.g:812:37: ( expr )
            // etc/XQFT.g:812:39: expr
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            pushFollow(FOLLOW_expr_in_contentExpr11196);
            expr663=expr();
=======
            pushFollow(FOLLOW_expr_in_contentExpr11742);
            expr656=expr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr656.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end contentExpr

    public static class compAttrConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compAttrConstructor
<<<<<<< .mine
    // etc/XQFT.g:802:5: compAttrConstructor : ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
=======
    // etc/XQFT.g:816:5: compAttrConstructor : ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
>>>>>>> .r234
    public final compAttrConstructor_return compAttrConstructor() throws RecognitionException {
        compAttrConstructor_return retval = new compAttrConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ATTRIBUTE657=null;
        Token LBRACESi659=null;
        Token RBRACSi661=null;
        Token LBRACESi662=null;
        Token RBRACSi664=null;
        qName_return qName658 = null;

        expr_return expr660 = null;

        expr_return expr663 = null;


        XQFTTree ATTRIBUTE657_tree=null;
        XQFTTree LBRACESi659_tree=null;
        XQFTTree RBRACSi661_tree=null;
        XQFTTree LBRACESi662_tree=null;
        XQFTTree RBRACSi664_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:802:36: ( ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:802:38: ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
=======
            // etc/XQFT.g:816:36: ( ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:816:38: ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            ATTRIBUTE664=(Token)input.LT(1);
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_compAttrConstructor11241); if (failed) return retval;
=======
            ATTRIBUTE657=(Token)input.LT(1);
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_compAttrConstructor11787); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            ATTRIBUTE657_tree = (XQFTTree)adaptor.create(ATTRIBUTE657);
            adaptor.addChild(root_0, ATTRIBUTE657_tree);
            }
<<<<<<< .mine
            // etc/XQFT.g:802:48: ( qName | ( LBRACESi expr RBRACSi ) )
=======
            // etc/XQFT.g:816:48: ( qName | ( LBRACESi expr RBRACSi ) )
>>>>>>> .r234
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==NCName) ) {
                alt147=1;
            }
            else if ( (LA147_0==LBRACESi) ) {
                alt147=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
<<<<<<< .mine
                    new NoViableAltException("802:48: ( qName | ( LBRACESi expr RBRACSi ) )", 147, 0, input);
=======
                    new NoViableAltException("816:48: ( qName | ( LBRACESi expr RBRACSi ) )", 147, 0, input);
>>>>>>> .r234

                throw nvae;
            }
            switch (alt147) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:802:49: qName
=======
                    // etc/XQFT.g:816:49: qName
>>>>>>> .r234
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_qName_in_compAttrConstructor11244);
                    qName665=qName();
=======
                    pushFollow(FOLLOW_qName_in_compAttrConstructor11790);
                    qName658=qName();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName658.getTree());

                    }
                    break;
                case 2 :
<<<<<<< .mine
                    // etc/XQFT.g:802:57: ( LBRACESi expr RBRACSi )
=======
                    // etc/XQFT.g:816:57: ( LBRACESi expr RBRACSi )
>>>>>>> .r234
                    {
<<<<<<< .mine
                    // etc/XQFT.g:802:57: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:802:58: LBRACESi expr RBRACSi
=======
                    // etc/XQFT.g:816:57: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:816:58: LBRACESi expr RBRACSi
>>>>>>> .r234
                    {
<<<<<<< .mine
                    LBRACESi666=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor11249); if (failed) return retval;
=======
                    LBRACESi659=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor11795); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    LBRACESi659_tree = (XQFTTree)adaptor.create(LBRACESi659);
                    adaptor.addChild(root_0, LBRACESi659_tree);
                    }
<<<<<<< .mine
                    pushFollow(FOLLOW_expr_in_compAttrConstructor11251);
                    expr667=expr();
=======
                    pushFollow(FOLLOW_expr_in_compAttrConstructor11797);
                    expr660=expr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
<<<<<<< .mine
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr667.getTree());
                    RBRACSi668=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor11253); if (failed) return retval;
=======
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr660.getTree());
                    RBRACSi661=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor11799); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    RBRACSi661_tree = (XQFTTree)adaptor.create(RBRACSi661);
                    adaptor.addChild(root_0, RBRACSi661_tree);
                    }

                    }


                    }
                    break;

            }

<<<<<<< .mine
            LBRACESi669=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor11273); if (failed) return retval;
=======
            LBRACESi662=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor11819); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            LBRACESi662_tree = (XQFTTree)adaptor.create(LBRACESi662);
            adaptor.addChild(root_0, LBRACESi662_tree);
            }
<<<<<<< .mine
            // etc/XQFT.g:803:25: ( expr )?
=======
            // etc/XQFT.g:817:25: ( expr )?
>>>>>>> .r234
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=ANCESTOR && LA148_0<=ANCESTOR_OR_SELF)||LA148_0==ATTRIBUTE||LA148_0==CHILD||LA148_0==COMMENT||(LA148_0>=DESCENDANT && LA148_0<=DESCENDANT_OR_SELF)||(LA148_0>=DOCUMENT && LA148_0<=ELEMENT)||LA148_0==EVERY||(LA148_0>=FOLLOWING && LA148_0<=FOR)||LA148_0==IF||LA148_0==LET||LA148_0==NODE||LA148_0==ORDERED||LA148_0==PARENT||(LA148_0>=PRECEDING && LA148_0<=PRECEDING_SIBLING)||LA148_0==PROCESSING_INSTRUCTION||(LA148_0>=SCHEMAATTRIBUTE && LA148_0<=SCHEMAELEMENT)||LA148_0==SELF||LA148_0==SOME||LA148_0==TEXT||LA148_0==TYPESWITCH||LA148_0==UNORDERED||LA148_0==VALIDATE||LA148_0==StringLiteral||LA148_0==NCName||LA148_0==DOLLARSi||LA148_0==LPARSi||(LA148_0>=STARSi && LA148_0<=MINUSSi)||LA148_0==LTSi||(LA148_0>=IntegerLiteral && LA148_0<=LPRAGSi)||(LA148_0>=DBLSLASHSi && LA148_0<=SLASHSi)||(LA148_0>=DOTDOTSi && LA148_0<=ATSi)||LA148_0==DOTSi||LA148_0==LCOMMENTSi||LA148_0==LPISi) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:803:25: expr
=======
                    // etc/XQFT.g:817:25: expr
>>>>>>> .r234
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_expr_in_compAttrConstructor11275);
                    expr670=expr();
=======
                    pushFollow(FOLLOW_expr_in_compAttrConstructor11821);
                    expr663=expr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr663.getTree());

                    }
                    break;

            }

<<<<<<< .mine
            RBRACSi671=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor11278); if (failed) return retval;
=======
            RBRACSi664=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor11824); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            RBRACSi664_tree = (XQFTTree)adaptor.create(RBRACSi664);
            adaptor.addChild(root_0, RBRACSi664_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compAttrConstructor

    public static class compTextConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compTextConstructor
<<<<<<< .mine
    // etc/XQFT.g:805:5: compTextConstructor : TEXT LBRACESi expr RBRACSi ;
=======
    // etc/XQFT.g:819:5: compTextConstructor : TEXT LBRACESi expr RBRACSi ;
>>>>>>> .r234
    public final compTextConstructor_return compTextConstructor() throws RecognitionException {
        compTextConstructor_return retval = new compTextConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TEXT665=null;
        Token LBRACESi666=null;
        Token RBRACSi668=null;
        expr_return expr667 = null;


        XQFTTree TEXT665_tree=null;
        XQFTTree LBRACESi666_tree=null;
        XQFTTree RBRACSi668_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:805:36: ( TEXT LBRACESi expr RBRACSi )
            // etc/XQFT.g:805:38: TEXT LBRACESi expr RBRACSi
=======
            // etc/XQFT.g:819:36: ( TEXT LBRACESi expr RBRACSi )
            // etc/XQFT.g:819:38: TEXT LBRACESi expr RBRACSi
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            TEXT672=(Token)input.LT(1);
            match(input,TEXT,FOLLOW_TEXT_in_compTextConstructor11314); if (failed) return retval;
=======
            TEXT665=(Token)input.LT(1);
            match(input,TEXT,FOLLOW_TEXT_in_compTextConstructor11860); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            TEXT665_tree = (XQFTTree)adaptor.create(TEXT665);
            adaptor.addChild(root_0, TEXT665_tree);
            }
<<<<<<< .mine
            LBRACESi673=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compTextConstructor11316); if (failed) return retval;
=======
            LBRACESi666=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compTextConstructor11862); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            LBRACESi666_tree = (XQFTTree)adaptor.create(LBRACESi666);
            adaptor.addChild(root_0, LBRACESi666_tree);
            }
<<<<<<< .mine
            pushFollow(FOLLOW_expr_in_compTextConstructor11318);
            expr674=expr();
=======
            pushFollow(FOLLOW_expr_in_compTextConstructor11864);
            expr667=expr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, expr674.getTree());
            RBRACSi675=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compTextConstructor11320); if (failed) return retval;
=======
            if ( backtracking==0 ) adaptor.addChild(root_0, expr667.getTree());
            RBRACSi668=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compTextConstructor11866); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            RBRACSi668_tree = (XQFTTree)adaptor.create(RBRACSi668);
            adaptor.addChild(root_0, RBRACSi668_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compTextConstructor

    public static class compCommentConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compCommentConstructor
<<<<<<< .mine
    // etc/XQFT.g:807:5: compCommentConstructor : COMMENT LBRACESi expr RBRACSi ;
=======
    // etc/XQFT.g:821:5: compCommentConstructor : COMMENT LBRACESi expr RBRACSi ;
>>>>>>> .r234
    public final compCommentConstructor_return compCommentConstructor() throws RecognitionException {
        compCommentConstructor_return retval = new compCommentConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMENT669=null;
        Token LBRACESi670=null;
        Token RBRACSi672=null;
        expr_return expr671 = null;


        XQFTTree COMMENT669_tree=null;
        XQFTTree LBRACESi670_tree=null;
        XQFTTree RBRACSi672_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:807:36: ( COMMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:807:38: COMMENT LBRACESi expr RBRACSi
=======
            // etc/XQFT.g:821:36: ( COMMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:821:38: COMMENT LBRACESi expr RBRACSi
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            COMMENT676=(Token)input.LT(1);
            match(input,COMMENT,FOLLOW_COMMENT_in_compCommentConstructor11344); if (failed) return retval;
=======
            COMMENT669=(Token)input.LT(1);
            match(input,COMMENT,FOLLOW_COMMENT_in_compCommentConstructor11890); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            COMMENT669_tree = (XQFTTree)adaptor.create(COMMENT669);
            adaptor.addChild(root_0, COMMENT669_tree);
            }
<<<<<<< .mine
            LBRACESi677=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compCommentConstructor11346); if (failed) return retval;
=======
            LBRACESi670=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compCommentConstructor11892); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            LBRACESi670_tree = (XQFTTree)adaptor.create(LBRACESi670);
            adaptor.addChild(root_0, LBRACESi670_tree);
            }
<<<<<<< .mine
            pushFollow(FOLLOW_expr_in_compCommentConstructor11348);
            expr678=expr();
=======
            pushFollow(FOLLOW_expr_in_compCommentConstructor11894);
            expr671=expr();
>>>>>>> .r234
            _fsp--;
            if (failed) return retval;
<<<<<<< .mine
            if ( backtracking==0 ) adaptor.addChild(root_0, expr678.getTree());
            RBRACSi679=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compCommentConstructor11350); if (failed) return retval;
=======
            if ( backtracking==0 ) adaptor.addChild(root_0, expr671.getTree());
            RBRACSi672=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compCommentConstructor11896); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            RBRACSi672_tree = (XQFTTree)adaptor.create(RBRACSi672);
            adaptor.addChild(root_0, RBRACSi672_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compCommentConstructor

    public static class compPIConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compPIConstructor
<<<<<<< .mine
    // etc/XQFT.g:809:5: compPIConstructor : PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
=======
    // etc/XQFT.g:823:5: compPIConstructor : PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
>>>>>>> .r234
    public final compPIConstructor_return compPIConstructor() throws RecognitionException {
        compPIConstructor_return retval = new compPIConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token PROCESSING_INSTRUCTION673=null;
        Token NCName674=null;
        Token LBRACESi675=null;
        Token RBRACSi677=null;
        Token LBRACESi678=null;
        Token RBRACSi680=null;
        expr_return expr676 = null;

        expr_return expr679 = null;


        XQFTTree PROCESSING_INSTRUCTION673_tree=null;
        XQFTTree NCName674_tree=null;
        XQFTTree LBRACESi675_tree=null;
        XQFTTree RBRACSi677_tree=null;
        XQFTTree LBRACESi678_tree=null;
        XQFTTree RBRACSi680_tree=null;

        try {
<<<<<<< .mine
            // etc/XQFT.g:809:36: ( PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:809:38: PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
=======
            // etc/XQFT.g:823:36: ( PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:823:38: PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
>>>>>>> .r234
            {
            root_0 = (XQFTTree)adaptor.nil();

<<<<<<< .mine
            PROCESSING_INSTRUCTION680=(Token)input.LT(1);
            match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor11379); if (failed) return retval;
=======
            PROCESSING_INSTRUCTION673=(Token)input.LT(1);
            match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor11925); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            PROCESSING_INSTRUCTION673_tree = (XQFTTree)adaptor.create(PROCESSING_INSTRUCTION673);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION673_tree);
            }
<<<<<<< .mine
            // etc/XQFT.g:809:61: ( NCName | ( LBRACESi expr RBRACSi ) )
=======
            // etc/XQFT.g:823:61: ( NCName | ( LBRACESi expr RBRACSi ) )
>>>>>>> .r234
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==NCName) ) {
                alt149=1;
            }
            else if ( (LA149_0==LBRACESi) ) {
                alt149=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
<<<<<<< .mine
                    new NoViableAltException("809:61: ( NCName | ( LBRACESi expr RBRACSi ) )", 149, 0, input);
=======
                    new NoViableAltException("823:61: ( NCName | ( LBRACESi expr RBRACSi ) )", 149, 0, input);
>>>>>>> .r234

                throw nvae;
            }
            switch (alt149) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:809:62: NCName
=======
                    // etc/XQFT.g:823:62: NCName
>>>>>>> .r234
                    {
<<<<<<< .mine
                    NCName681=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_compPIConstructor11382); if (failed) return retval;
=======
                    NCName674=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_compPIConstructor11928); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    NCName674_tree = (XQFTTree)adaptor.create(NCName674);
                    adaptor.addChild(root_0, NCName674_tree);
                    }

                    }
                    break;
                case 2 :
<<<<<<< .mine
                    // etc/XQFT.g:809:71: ( LBRACESi expr RBRACSi )
=======
                    // etc/XQFT.g:823:71: ( LBRACESi expr RBRACSi )
>>>>>>> .r234
                    {
<<<<<<< .mine
                    // etc/XQFT.g:809:71: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:809:72: LBRACESi expr RBRACSi
=======
                    // etc/XQFT.g:823:71: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:823:72: LBRACESi expr RBRACSi
>>>>>>> .r234
                    {
<<<<<<< .mine
                    LBRACESi682=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor11387); if (failed) return retval;
=======
                    LBRACESi675=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor11933); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    LBRACESi675_tree = (XQFTTree)adaptor.create(LBRACESi675);
                    adaptor.addChild(root_0, LBRACESi675_tree);
                    }
<<<<<<< .mine
                    pushFollow(FOLLOW_expr_in_compPIConstructor11389);
                    expr683=expr();
=======
                    pushFollow(FOLLOW_expr_in_compPIConstructor11935);
                    expr676=expr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
<<<<<<< .mine
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr683.getTree());
                    RBRACSi684=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor11391); if (failed) return retval;
=======
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr676.getTree());
                    RBRACSi677=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor11937); if (failed) return retval;
>>>>>>> .r234
                    if ( backtracking==0 ) {
                    RBRACSi677_tree = (XQFTTree)adaptor.create(RBRACSi677);
                    adaptor.addChild(root_0, RBRACSi677_tree);
                    }

                    }


                    }
                    break;

            }

<<<<<<< .mine
            LBRACESi685=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor11411); if (failed) return retval;
=======
            LBRACESi678=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor11957); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            LBRACESi678_tree = (XQFTTree)adaptor.create(LBRACESi678);
            adaptor.addChild(root_0, LBRACESi678_tree);
            }
<<<<<<< .mine
            // etc/XQFT.g:810:25: ( expr )?
=======
            // etc/XQFT.g:824:25: ( expr )?
>>>>>>> .r234
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0>=ANCESTOR && LA150_0<=ANCESTOR_OR_SELF)||LA150_0==ATTRIBUTE||LA150_0==CHILD||LA150_0==COMMENT||(LA150_0>=DESCENDANT && LA150_0<=DESCENDANT_OR_SELF)||(LA150_0>=DOCUMENT && LA150_0<=ELEMENT)||LA150_0==EVERY||(LA150_0>=FOLLOWING && LA150_0<=FOR)||LA150_0==IF||LA150_0==LET||LA150_0==NODE||LA150_0==ORDERED||LA150_0==PARENT||(LA150_0>=PRECEDING && LA150_0<=PRECEDING_SIBLING)||LA150_0==PROCESSING_INSTRUCTION||(LA150_0>=SCHEMAATTRIBUTE && LA150_0<=SCHEMAELEMENT)||LA150_0==SELF||LA150_0==SOME||LA150_0==TEXT||LA150_0==TYPESWITCH||LA150_0==UNORDERED||LA150_0==VALIDATE||LA150_0==StringLiteral||LA150_0==NCName||LA150_0==DOLLARSi||LA150_0==LPARSi||(LA150_0>=STARSi && LA150_0<=MINUSSi)||LA150_0==LTSi||(LA150_0>=IntegerLiteral && LA150_0<=LPRAGSi)||(LA150_0>=DBLSLASHSi && LA150_0<=SLASHSi)||(LA150_0>=DOTDOTSi && LA150_0<=ATSi)||LA150_0==DOTSi||LA150_0==LCOMMENTSi||LA150_0==LPISi) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
<<<<<<< .mine
                    // etc/XQFT.g:810:25: expr
=======
                    // etc/XQFT.g:824:25: expr
>>>>>>> .r234
                    {
<<<<<<< .mine
                    pushFollow(FOLLOW_expr_in_compPIConstructor11413);
                    expr686=expr();
=======
                    pushFollow(FOLLOW_expr_in_compPIConstructor11959);
                    expr679=expr();
>>>>>>> .r234
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr679.getTree());

                    }
                    break;

            }

<<<<<<< .mine
            RBRACSi687=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor11416); if (failed) return retval;
=======
            RBRACSi680=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor11962); if (failed) return retval;
>>>>>>> .r234
            if ( backtracking==0 ) {
            RBRACSi680_tree = (XQFTTree)adaptor.create(RBRACSi680);
            adaptor.addChild(root_0, RBRACSi680_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compPIConstructor

    // $ANTLR start synpred1
    public final void synpred1_fragment() throws RecognitionException {   
        // etc/XQFT.g:371:34: ( itemType occurrenceIndicator )
        // etc/XQFT.g:371:35: itemType occurrenceIndicator
        {
        pushFollow(FOLLOW_itemType_in_synpred12229);
        itemType();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_occurrenceIndicator_in_synpred12231);
        occurrenceIndicator();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred2
    public final void synpred2_fragment() throws RecognitionException {   
<<<<<<< .mine
        // etc/XQFT.g:682:41: ( STARSi COLONSi NCName )
        // etc/XQFT.g:682:42: STARSi COLONSi NCName
        {
        match(input,STARSi,FOLLOW_STARSi_in_synpred28959); if (failed) return ;
        match(input,COLONSi,FOLLOW_COLONSi_in_synpred28961); if (failed) return ;
        match(input,NCName,FOLLOW_NCName_in_synpred28963); if (failed) return ;

        }
    }
    // $ANTLR end synpred2

=======
        // etc/XQFT.g:687:41: ( STARSi COLONSi NCName )
        // etc/XQFT.g:687:42: STARSi COLONSi NCName
        {
        match(input,STARSi,FOLLOW_STARSi_in_synpred29054); if (failed) return ;
        match(input,COLONSi,FOLLOW_COLONSi_in_synpred29056); if (failed) return ;
        match(input,NCName,FOLLOW_NCName_in_synpred29058); if (failed) return ;

        }
    }
    // $ANTLR end synpred2

>>>>>>> .r234
    public final boolean synpred2() {
        backtracking++;
        int start = input.mark();
        try {
            synpred2_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
<<<<<<< .mine
    public final boolean synpred1() {
        backtracking++;
        int start = input.mark();
        try {
            synpred1_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
=======
>>>>>>> .r234


    protected DFA117 dfa117 = new DFA117(this);
    static final String DFA117_eotS =
<<<<<<< .mine
        "\u00de\uffff";
=======
        "\u011b\uffff";
>>>>>>> .r234
    static final String DFA117_eofS =
<<<<<<< .mine
        "\2\uffff\1\4\2\uffff\1\7\3\uffff\1\4\2\uffff\2\4\35\uffff\2\7\u00b1"+
        "\uffff";
=======
        "\2\uffff\1\4\2\uffff\1\7\3\uffff\1\4\2\uffff\2\4\34\uffff\2\7\u00ef"+
        "\uffff";
>>>>>>> .r234
    static final String DFA117_minS =
<<<<<<< .mine
        "\1\6\1\uffff\1\6\2\uffff\2\6\1\uffff\5\6\1\10\1\u00bb\1\0\1\u009d"+
        "\1\14\1\u00a3\1\u009d\1\u00bb\2\u00a3\1\u009d\3\u00a3\4\0\1\u009d"+
        "\2\0\2\u00a5\1\u009d\1\u00cc\1\u00cf\1\u00a5\6\6\u00b0\0";
=======
        "\1\6\1\uffff\1\6\2\uffff\2\6\1\uffff\5\6\1\10\1\u00bf\1\0\1\u00a1"+
        "\1\14\1\u00a7\1\u00a1\1\u00bf\2\u00a7\1\u00a1\3\u00a7\4\0\1\u00a1"+
        "\2\0\2\u00a9\1\u00a1\1\u00d0\1\u00d3\1\u00a9\5\6\1\110\1\6\1\0\1"+
        "\u00bf\1\0\1\u00a1\1\14\1\u00a7\1\u00a1\1\u00bf\2\u00a7\1\u00a1"+
        "\3\u00a7\4\0\1\u00a1\2\0\2\u00a9\1\u00a1\1\u00d0\1\u00d3\1\u00a9"+
        "\1\u00a1\1\6\u00cf\0";
>>>>>>> .r234
    static final String DFA117_maxS =
<<<<<<< .mine
        "\1\u00ce\1\uffff\1\u00ce\2\uffff\2\u00ce\1\uffff\5\u00ce\1\u00c1"+
        "\1\u00bb\1\0\1\u00bb\1\u00a8\1\u00a3\1\u00a5\1\u00bb\2\u00a3\3\u00a5"+
        "\1\u00a3\4\0\1\u009d\2\0\2\u00a5\1\u009d\1\u00cc\1\u00cf\1\u00a5"+
        "\6\u00ce\u00b0\0";
=======
        "\1\u00d2\1\uffff\1\u00d2\2\uffff\2\u00d2\1\uffff\5\u00d2\1\u00c5"+
        "\1\u00bf\1\0\1\u00bf\1\u00ac\1\u00a7\1\u00a9\1\u00bf\2\u00a7\3\u00a9"+
        "\1\u00a7\4\0\1\u00a1\2\0\2\u00a9\1\u00a1\1\u00d0\1\u00d3\1\u00a9"+
        "\5\u00d2\1\u00a9\1\u00d2\1\0\1\u00bf\1\0\1\u00bf\1\u00ac\1\u00a7"+
        "\1\u00a9\1\u00bf\2\u00a7\3\u00a9\1\u00a7\4\0\1\u00a1\2\0\2\u00a9"+
        "\1\u00a1\1\u00d0\1\u00d3\1\u00a9\1\u00a1\1\u00d2\u00cf\0";
>>>>>>> .r234
    static final String DFA117_acceptS =
<<<<<<< .mine
        "\1\uffff\1\1\1\uffff\1\4\1\3\2\uffff\1\2\u00d6\uffff";
=======
        "\1\uffff\1\1\1\uffff\1\4\1\3\2\uffff\1\2\u0113\uffff";
>>>>>>> .r234
    static final String DFA117_specialS =
<<<<<<< .mine
        "\17\uffff\1\2\13\uffff\1\4\1\1\1\5\1\0\1\uffff\1\6\1\3\u00bc\uffff}>";
=======
        "\17\uffff\1\10\13\uffff\1\1\1\11\1\7\1\12\1\uffff\1\14\1\2\15\uffff"+
        "\1\13\1\uffff\1\4\13\uffff\1\0\1\6\1\5\1\3\1\uffff\1\16\1\15\u00d7"+
        "\uffff}>";
>>>>>>> .r234
    static final String[] DFA117_transitionS = {
            "\2\3\4\uffff\1\3\6\uffff\1\3\1\uffff\1\3\5\uffff\2\3\5\uffff"+
            "\3\3\13\uffff\2\3\42\uffff\1\3\10\uffff\1\3\3\uffff\1\3\1\uffff"+
            "\2\3\1\uffff\1\3\5\uffff\2\3\1\uffff\1\3\12\uffff\1\3\7\uffff"+
            "\1\3\34\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\4\uffff"+
            "\1\3\4\uffff\1\3\5\uffff\3\3\3\uffff\1\1\1\2\1\uffff\2\3\2\uffff"+
            "\1\3\12\uffff\1\3\2\uffff\1\3",
            "",
<<<<<<< .mine
            "\2\7\1\4\1\uffff\1\4\1\uffff\1\7\3\uffff\3\4\1\7\1\4\1\7\4\uffff"+
            "\1\4\2\7\1\4\3\uffff\1\4\3\7\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff"+
            "\1\4\1\uffff\2\7\1\4\2\uffff\1\4\4\uffff\1\4\1\uffff\2\4\5\uffff"+
            "\3\4\3\uffff\1\4\1\uffff\2\4\1\uffff\2\4\3\uffff\1\4\1\7\6\uffff"+
            "\2\4\1\7\2\uffff\1\4\1\7\1\uffff\2\7\1\uffff\1\7\1\uffff\1\4"+
            "\1\uffff\1\4\1\uffff\2\7\1\uffff\1\7\1\uffff\1\4\2\uffff\1\4"+
            "\5\uffff\1\7\2\uffff\3\4\1\uffff\1\4\1\7\5\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\14\uffff\1\7\1\4\1\7\2\4\1\7\2\uffff\1\7\1"+
            "\4\1\uffff\1\4\1\uffff\1\5\4\4\1\6\5\4\3\7\6\uffff\2\7\1\uffff"+
            "\1\4\1\7\12\uffff\1\7\2\uffff\1\7",
=======
            "\2\7\1\4\1\uffff\1\4\1\uffff\1\7\3\uffff\3\4\1\7\1\4\1\7\4\uffff"+
            "\1\4\2\7\1\4\3\uffff\1\4\3\7\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff"+
            "\1\4\1\uffff\2\7\1\4\2\uffff\1\4\4\uffff\1\4\1\uffff\2\4\5\uffff"+
            "\3\4\3\uffff\1\4\1\uffff\2\4\1\uffff\2\4\3\uffff\1\4\1\7\6\uffff"+
            "\2\4\1\7\2\uffff\1\4\1\7\1\uffff\2\7\1\uffff\1\7\1\uffff\1\4"+
            "\1\uffff\1\4\1\uffff\2\7\1\uffff\1\7\1\uffff\1\4\2\uffff\1\4"+
            "\5\uffff\1\7\2\uffff\3\4\1\uffff\1\4\1\7\5\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\20\uffff\1\7\1\4\1\7\2\4\1\7\2\uffff\1\7\1"+
            "\4\1\uffff\1\4\1\uffff\1\5\4\4\1\6\5\4\3\7\6\uffff\2\7\1\uffff"+
            "\1\4\1\7\12\uffff\1\7\2\uffff\1\7",
>>>>>>> .r234
            "",
            "",
<<<<<<< .mine
            "\2\4\1\7\1\uffff\1\7\1\uffff\1\4\3\uffff\3\7\1\4\1\7\1\4\4\uffff"+
            "\1\7\2\4\1\7\3\uffff\1\7\3\4\1\7\3\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\1\uffff\2\4\1\7\2\uffff\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff"+
            "\3\7\3\uffff\1\7\1\uffff\2\7\1\uffff\2\7\3\uffff\1\7\1\4\6\uffff"+
            "\2\7\1\4\2\uffff\1\7\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\2\4\1\uffff\1\4\1\uffff\1\7\2\uffff\1\7"+
            "\5\uffff\1\4\2\uffff\3\7\1\uffff\1\7\1\4\1\uffff\1\4\3\uffff"+
            "\1\7\3\uffff\1\7\1\uffff\1\7\14\uffff\1\4\1\7\1\4\2\7\1\4\1"+
            "\uffff\1\7\1\4\1\7\1\uffff\1\7\1\uffff\1\11\2\12\2\7\1\13\5"+
            "\7\4\4\2\uffff\1\10\1\14\1\uffff\2\4\2\7\1\4\12\uffff\1\4\2"+
            "\uffff\1\4",
=======
            "\2\4\1\7\1\uffff\1\7\1\uffff\1\4\3\uffff\3\7\1\4\1\7\1\4\4\uffff"+
            "\1\7\2\4\1\7\3\uffff\1\7\3\4\1\7\3\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\1\uffff\2\4\1\7\2\uffff\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff"+
            "\3\7\3\uffff\1\7\1\uffff\2\7\1\uffff\2\7\3\uffff\1\7\1\4\6\uffff"+
            "\2\7\1\4\2\uffff\1\7\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\2\4\1\uffff\1\4\1\uffff\1\7\2\uffff\1\7"+
            "\5\uffff\1\4\2\uffff\3\7\1\uffff\1\7\1\4\1\uffff\1\4\3\uffff"+
            "\1\7\3\uffff\1\7\1\uffff\1\7\20\uffff\1\4\1\7\1\4\2\7\1\4\1"+
            "\uffff\1\7\1\4\1\7\1\uffff\1\7\1\uffff\1\11\2\12\2\7\1\13\5"+
            "\7\4\4\2\uffff\1\10\1\14\1\uffff\2\4\2\7\1\4\12\uffff\1\4\2"+
            "\uffff\1\4",
>>>>>>> .r234
            "\2\4\4\uffff\1\4\6\uffff\1\4\1\uffff\1\4\5\uffff\2\4\5\uffff"+
            "\3\4\13\uffff\2\4\42\uffff\1\4\10\uffff\1\4\3\uffff\1\4\1\uffff"+
            "\2\4\1\uffff\1\4\5\uffff\2\4\1\uffff\1\4\12\uffff\1\4\7\uffff"+
<<<<<<< .mine
            "\1\4\1\uffff\1\4\26\uffff\1\4\1\uffff\1\15\2\uffff\1\4\2\uffff"+
=======
            "\1\4\1\uffff\1\4\32\uffff\1\4\1\uffff\1\15\2\uffff\1\4\2\uffff"+
>>>>>>> .r234
            "\1\4\4\uffff\3\4\2\uffff\1\4\5\uffff\4\4\2\uffff\2\4\1\uffff"+
            "\2\4\2\uffff\1\4\12\uffff\1\4\2\uffff\1\4",
            "",
<<<<<<< .mine
            "\2\16\4\uffff\1\20\6\uffff\1\24\1\uffff\1\30\5\uffff\2\24\5"+
            "\uffff\1\47\1\22\1\23\13\uffff\2\24\42\uffff\1\32\10\uffff\1"+
            "\42\3\uffff\1\16\1\uffff\2\16\1\uffff\1\27\5\uffff\1\26\1\25"+
            "\1\uffff\1\24\12\uffff\1\31\7\uffff\1\43\30\uffff\1\36\1\uffff"+
            "\1\33\2\uffff\1\37\2\uffff\1\40\4\uffff\1\34\4\uffff\1\44\5"+
            "\uffff\3\35\6\uffff\1\17\1\21\2\uffff\1\41\12\uffff\1\45\2\uffff"+
            "\1\46",
            "\2\7\1\4\1\uffff\1\4\1\uffff\1\7\3\uffff\3\4\1\7\1\4\1\7\4\uffff"+
            "\1\4\2\7\1\4\3\uffff\1\4\3\7\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff"+
            "\1\4\1\uffff\2\7\1\4\2\uffff\1\4\4\uffff\1\4\1\uffff\2\4\5\uffff"+
            "\3\4\3\uffff\1\4\1\uffff\2\4\1\uffff\2\4\3\uffff\1\4\1\7\6\uffff"+
            "\2\4\1\7\2\uffff\1\4\1\7\1\uffff\2\7\1\uffff\1\7\1\uffff\1\4"+
            "\1\uffff\1\4\1\uffff\2\7\1\uffff\1\7\1\uffff\1\4\2\uffff\1\4"+
            "\5\uffff\1\7\2\uffff\3\4\1\uffff\1\4\1\7\1\uffff\1\7\3\uffff"+
            "\1\4\3\uffff\1\4\1\uffff\1\4\14\uffff\1\7\1\4\1\7\2\4\1\7\1"+
            "\uffff\1\4\1\7\1\4\1\uffff\1\4\1\uffff\1\53\2\51\2\4\1\52\5"+
            "\4\4\7\2\uffff\1\50\1\54\1\uffff\2\7\2\4\1\7\12\uffff\1\7\2"+
            "\uffff\1\7",
            "\2\61\4\uffff\1\63\6\uffff\1\67\1\uffff\1\73\5\uffff\2\67\5"+
            "\uffff\1\112\1\65\1\66\13\uffff\2\67\42\uffff\1\75\10\uffff"+
            "\1\105\3\uffff\1\61\1\uffff\2\61\1\uffff\1\72\5\uffff\1\71\1"+
            "\70\1\uffff\1\67\12\uffff\1\74\7\uffff\1\106\1\uffff\1\56\26"+
            "\uffff\1\101\1\uffff\1\76\2\uffff\1\102\2\uffff\1\103\4\uffff"+
            "\1\77\2\55\2\uffff\1\107\5\uffff\3\100\1\113\2\uffff\1\57\1"+
            "\60\1\uffff\1\62\1\64\2\uffff\1\104\12\uffff\1\110\2\uffff\1"+
            "\111",
            "\2\7\4\uffff\1\7\6\uffff\1\7\1\uffff\1\7\5\uffff\2\7\5\uffff"+
            "\3\7\13\uffff\2\7\42\uffff\1\7\10\uffff\1\7\3\uffff\1\7\1\uffff"+
            "\2\7\1\uffff\1\7\5\uffff\2\7\1\uffff\1\7\12\uffff\1\7\7\uffff"+
            "\1\7\1\uffff\1\7\26\uffff\1\7\1\uffff\1\114\2\uffff\1\7\2\uffff"+
            "\1\7\4\uffff\3\7\2\uffff\1\7\5\uffff\4\7\2\uffff\2\7\1\uffff"+
            "\2\7\2\uffff\1\7\12\uffff\1\7\2\uffff\1\7",
            "\2\115\1\4\1\uffff\1\4\1\uffff\1\117\3\uffff\3\4\1\123\1\4\1"+
            "\127\4\uffff\1\4\2\123\1\4\3\uffff\1\4\1\146\1\121\1\122\1\4"+
            "\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\2\123\1\4\2\uffff"+
=======
            "\2\16\4\uffff\1\20\6\uffff\1\24\1\uffff\1\30\5\uffff\2\24\5"+
            "\uffff\1\47\1\22\1\23\13\uffff\2\24\42\uffff\1\32\10\uffff\1"+
            "\42\3\uffff\1\16\1\uffff\2\16\1\uffff\1\27\5\uffff\1\26\1\25"+
            "\1\uffff\1\24\12\uffff\1\31\7\uffff\1\43\34\uffff\1\36\1\uffff"+
            "\1\33\2\uffff\1\37\2\uffff\1\40\4\uffff\1\34\4\uffff\1\44\5"+
            "\uffff\3\35\6\uffff\1\17\1\21\2\uffff\1\41\12\uffff\1\45\2\uffff"+
            "\1\46",
            "\2\7\1\4\1\uffff\1\4\1\uffff\1\7\3\uffff\3\4\1\7\1\4\1\7\4\uffff"+
            "\1\4\2\7\1\4\3\uffff\1\4\3\7\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff"+
            "\1\4\1\uffff\2\7\1\4\2\uffff\1\4\4\uffff\1\4\1\uffff\2\4\5\uffff"+
            "\3\4\3\uffff\1\4\1\uffff\2\4\1\uffff\2\4\3\uffff\1\4\1\7\6\uffff"+
            "\2\4\1\7\2\uffff\1\4\1\7\1\uffff\2\7\1\uffff\1\7\1\uffff\1\4"+
            "\1\uffff\1\4\1\uffff\2\7\1\uffff\1\7\1\uffff\1\4\2\uffff\1\4"+
            "\5\uffff\1\7\2\uffff\3\4\1\uffff\1\4\1\7\1\uffff\1\7\3\uffff"+
            "\1\4\3\uffff\1\4\1\uffff\1\4\20\uffff\1\7\1\4\1\7\2\4\1\7\1"+
            "\uffff\1\4\1\7\1\4\1\uffff\1\4\1\uffff\1\53\2\50\2\4\1\54\5"+
            "\4\4\7\2\uffff\1\51\1\52\1\uffff\2\7\2\4\1\7\12\uffff\1\7\2"+
            "\uffff\1\7",
            "\2\60\4\uffff\1\62\6\uffff\1\66\1\uffff\1\72\5\uffff\2\66\5"+
            "\uffff\1\111\1\64\1\65\13\uffff\2\66\42\uffff\1\74\10\uffff"+
            "\1\104\3\uffff\1\60\1\uffff\2\60\1\uffff\1\71\5\uffff\1\70\1"+
            "\67\1\uffff\1\66\12\uffff\1\73\7\uffff\1\105\1\uffff\1\55\32"+
            "\uffff\1\100\1\uffff\1\75\2\uffff\1\101\2\uffff\1\102\4\uffff"+
            "\1\76\2\113\2\uffff\1\106\5\uffff\3\77\1\112\2\uffff\1\56\1"+
            "\57\1\uffff\1\61\1\63\2\uffff\1\103\12\uffff\1\107\2\uffff\1"+
            "\110",
            "\2\7\4\uffff\1\7\6\uffff\1\7\1\uffff\1\7\5\uffff\2\7\5\uffff"+
            "\3\7\13\uffff\2\7\42\uffff\1\7\10\uffff\1\7\3\uffff\1\7\1\uffff"+
            "\2\7\1\uffff\1\7\5\uffff\2\7\1\uffff\1\7\12\uffff\1\7\7\uffff"+
            "\1\7\1\uffff\1\7\32\uffff\1\7\1\uffff\1\114\2\uffff\1\7\2\uffff"+
            "\1\7\4\uffff\3\7\2\uffff\1\7\5\uffff\4\7\2\uffff\2\7\1\uffff"+
            "\2\7\2\uffff\1\7\12\uffff\1\7\2\uffff\1\7",
            "\2\115\1\4\1\uffff\1\4\1\uffff\1\117\3\uffff\3\4\1\123\1\4\1"+
            "\127\4\uffff\1\4\2\123\1\4\3\uffff\1\4\1\146\1\121\1\122\1\4"+
            "\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\2\123\1\4\2\uffff"+
>>>>>>> .r234
            "\1\4\4\uffff\1\4\1\uffff\2\4\5\uffff\3\4\3\uffff\1\4\1\uffff"+
<<<<<<< .mine
            "\2\4\1\uffff\2\4\3\uffff\1\4\1\131\6\uffff\2\4\1\141\2\uffff"+
            "\1\4\1\115\1\uffff\2\115\1\uffff\1\126\1\uffff\1\4\1\uffff\1"+
            "\4\1\uffff\1\125\1\124\1\uffff\1\123\1\uffff\1\4\2\uffff\1\4"+
            "\5\uffff\1\130\2\uffff\3\4\1\uffff\1\4\1\142\5\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\14\uffff\1\135\1\4\1\132\2\4\1\136\2\uffff"+
            "\1\137\1\4\1\uffff\1\4\1\uffff\1\133\4\4\1\143\5\4\3\134\6\uffff"+
            "\1\116\1\120\1\uffff\1\4\1\140\12\uffff\1\144\2\uffff\1\145",
=======
            "\2\4\1\uffff\2\4\3\uffff\1\4\1\131\6\uffff\2\4\1\141\2\uffff"+
            "\1\4\1\115\1\uffff\2\115\1\uffff\1\126\1\uffff\1\4\1\uffff\1"+
            "\4\1\uffff\1\125\1\124\1\uffff\1\123\1\uffff\1\4\2\uffff\1\4"+
            "\5\uffff\1\130\2\uffff\3\4\1\uffff\1\4\1\142\5\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\20\uffff\1\135\1\4\1\132\2\4\1\136\2\uffff"+
            "\1\137\1\4\1\uffff\1\4\1\uffff\1\133\4\4\1\143\5\4\3\134\6\uffff"+
            "\1\116\1\120\1\uffff\1\4\1\140\12\uffff\1\144\2\uffff\1\145",
>>>>>>> .r234
            "\1\4\1\uffff\1\4\5\uffff\3\4\1\uffff\1\4\5\uffff\1\4\2\uffff"+
            "\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\4\uffff\1\4\3\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\5\uffff\2\4\6\uffff\1\4\3\uffff"+
            "\1\4\13\uffff\2\4\13\uffff\1\4\1\uffff\1\4\11\uffff\1\4\11\uffff"+
<<<<<<< .mine
            "\2\4\1\uffff\1\4\6\uffff\1\4\23\uffff\1\4\1\7\1\uffff\1\4\2"+
            "\uffff\1\147\2\4\1\uffff\1\4\1\uffff\4\4\3\uffff\1\7\11\uffff"+
            "\2\4\3\uffff\2\4\1\uffff\1\7",
            "\1\150",
=======
            "\2\4\1\uffff\1\4\6\uffff\1\4\27\uffff\1\4\1\7\1\uffff\1\4\2"+
            "\uffff\1\147\2\4\1\uffff\1\4\1\uffff\4\4\3\uffff\1\7\11\uffff"+
            "\2\4\3\uffff\2\4\1\uffff\1\7",
            "\1\150",
>>>>>>> .r234
            "\1\uffff",
<<<<<<< .mine
            "\1\153\5\uffff\1\151\1\uffff\1\154\25\uffff\1\152",
            "\1\156\10\uffff\1\160\15\uffff\1\22\1\155\57\uffff\1\32\21\uffff"+
            "\1\157\5\uffff\1\26\1\25\14\uffff\1\161\42\uffff\1\162\12\uffff"+
            "\1\34",
            "\1\163",
            "\1\165\5\uffff\1\164\1\uffff\1\166",
            "\1\152",
            "\1\167",
            "\1\170",
            "\1\172\5\uffff\1\171\1\uffff\1\173",
            "\1\174\1\uffff\1\175",
            "\1\177\1\uffff\1\176",
            "\1\u0080",
=======
            "\1\153\5\uffff\1\152\1\uffff\1\154\25\uffff\1\151",
            "\1\156\10\uffff\1\160\15\uffff\1\22\1\155\57\uffff\1\32\21\uffff"+
            "\1\157\5\uffff\1\26\1\25\14\uffff\1\161\46\uffff\1\162\12\uffff"+
            "\1\34",
            "\1\163",
            "\1\165\5\uffff\1\164\1\uffff\1\166",
            "\1\151",
            "\1\167",
            "\1\170",
            "\1\172\5\uffff\1\171\1\uffff\1\173",
            "\1\175\1\uffff\1\174",
            "\1\177\1\uffff\1\176",
            "\1\u0080",
>>>>>>> .r234
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0081",
            "\1\uffff",
            "\1\uffff",
<<<<<<< .mine
            "\1\u0082",
            "\1\u0083",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\u0087",
            "\2\u0088\4\uffff\1\u008a\6\uffff\1\u008e\1\uffff\1\u0092\5\uffff"+
            "\2\u008e\5\uffff\1\u00a1\1\u008c\1\u008d\13\uffff\2\u008e\42"+
            "\uffff\1\u0094\10\uffff\1\u009c\3\uffff\1\u0088\1\uffff\2\u0088"+
            "\1\uffff\1\u0091\5\uffff\1\u0090\1\u008f\1\uffff\1\u008e\12"+
            "\uffff\1\u0093\7\uffff\1\u009d\30\uffff\1\u0098\1\uffff\1\u0095"+
            "\2\uffff\1\u0099\2\uffff\1\u009a\4\uffff\1\u0096\4\uffff\1\u009e"+
            "\5\uffff\3\u0097\6\uffff\1\u0089\1\u008b\2\uffff\1\u009b\12"+
            "\uffff\1\u009f\2\uffff\1\u00a0",
            "\2\u00a6\4\uffff\1\u00a8\6\uffff\1\u00ac\1\uffff\1\u00b0\5\uffff"+
            "\2\u00ac\5\uffff\1\u00bf\1\u00aa\1\u00ab\13\uffff\2\u00ac\42"+
            "\uffff\1\u00b2\10\uffff\1\u00ba\3\uffff\1\u00a6\1\uffff\2\u00a6"+
            "\1\uffff\1\u00af\5\uffff\1\u00ae\1\u00ad\1\uffff\1\u00ac\12"+
            "\uffff\1\u00b1\7\uffff\1\u00bb\1\uffff\1\u00a3\26\uffff\1\u00b6"+
            "\1\uffff\1\u00b3\2\uffff\1\u00b7\2\uffff\1\u00b8\4\uffff\1\u00b4"+
            "\2\u00a2\2\uffff\1\u00bc\5\uffff\3\u00b5\1\u00c0\2\uffff\1\u00a4"+
            "\1\u00a5\1\uffff\1\u00a7\1\u00a9\2\uffff\1\u00b9\12\uffff\1"+
            "\u00bd\2\uffff\1\u00be",
=======
            "\1\u0082",
            "\1\u0083",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\u0087",
            "\2\u008b\4\uffff\1\u008d\6\uffff\1\u0091\1\uffff\1\u0095\5\uffff"+
            "\2\u0091\5\uffff\1\u00a4\1\u008f\1\u0090\13\uffff\2\u0091\42"+
            "\uffff\1\u0097\10\uffff\1\u009f\3\uffff\1\u008b\1\uffff\2\u008b"+
            "\1\uffff\1\u0094\5\uffff\1\u0093\1\u0092\1\uffff\1\u0091\12"+
            "\uffff\1\u0096\7\uffff\1\u00a0\1\uffff\1\u0088\32\uffff\1\u009b"+
            "\1\uffff\1\u0098\2\uffff\1\u009c\2\uffff\1\u009d\4\uffff\1\u0099"+
            "\2\u00a6\2\uffff\1\u00a1\5\uffff\3\u009a\1\u00a5\2\uffff\1\u0089"+
            "\1\u008a\1\uffff\1\u008c\1\u008e\2\uffff\1\u009e\12\uffff\1"+
            "\u00a2\2\uffff\1\u00a3",
            "\2\u00a7\4\uffff\1\u00a9\6\uffff\1\u00ad\1\uffff\1\u00b1\5\uffff"+
            "\2\u00ad\5\uffff\1\u00c0\1\u00ab\1\u00ac\13\uffff\2\u00ad\42"+
            "\uffff\1\u00b3\10\uffff\1\u00bb\3\uffff\1\u00a7\1\uffff\2\u00a7"+
            "\1\uffff\1\u00b0\5\uffff\1\u00af\1\u00ae\1\uffff\1\u00ad\12"+
            "\uffff\1\u00b2\7\uffff\1\u00bc\34\uffff\1\u00b7\1\uffff\1\u00b4"+
            "\2\uffff\1\u00b8\2\uffff\1\u00b9\4\uffff\1\u00b5\4\uffff\1\u00bd"+
            "\5\uffff\3\u00b6\6\uffff\1\u00a8\1\u00aa\2\uffff\1\u00ba\12"+
            "\uffff\1\u00be\2\uffff\1\u00bf",
            "\2\u00c1\1\7\1\uffff\1\7\1\uffff\1\u00c3\3\uffff\3\7\1\u00c7"+
            "\1\7\1\u00cb\4\uffff\1\7\2\u00c7\1\7\3\uffff\1\7\1\u00da\1\u00c5"+
            "\1\u00c6\1\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\u00c7"+
            "\1\7\2\uffff\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff\3\7\3\uffff"+
            "\1\7\1\uffff\2\7\1\uffff\2\7\3\uffff\1\7\1\u00cd\6\uffff\2\7"+
            "\1\u00d5\2\uffff\1\7\1\u00c1\1\uffff\2\u00c1\1\uffff\1\u00ca"+
            "\1\uffff\1\7\1\uffff\1\7\1\uffff\1\u00c9\1\u00c8\1\uffff\1\u00c7"+
            "\1\uffff\1\7\2\uffff\1\7\5\uffff\1\u00cc\2\uffff\3\7\1\uffff"+
            "\1\7\1\u00d6\5\uffff\1\7\3\uffff\1\7\1\uffff\1\7\20\uffff\1"+
            "\u00d1\1\7\1\u00ce\2\7\1\u00d2\2\uffff\1\u00d3\1\7\1\uffff\1"+
            "\7\1\uffff\1\u00cf\4\7\1\u00d7\5\7\3\u00d0\6\uffff\1\u00c2\1"+
            "\u00c4\1\uffff\1\7\1\u00d4\12\uffff\1\u00d8\2\uffff\1\u00d9",
            "\2\4\1\7\1\uffff\1\7\1\uffff\1\4\3\uffff\3\7\1\4\1\7\1\4\4\uffff"+
            "\1\7\2\4\1\7\3\uffff\1\7\3\4\1\7\3\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\1\uffff\2\4\1\7\2\uffff\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff"+
            "\3\7\3\uffff\1\7\1\uffff\2\7\1\uffff\2\7\3\uffff\1\7\1\4\6\uffff"+
            "\2\7\1\4\2\uffff\1\7\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\2\4\1\uffff\1\4\1\uffff\1\7\2\uffff\1\7"+
            "\5\uffff\1\4\2\uffff\3\7\1\uffff\1\7\1\4\1\uffff\1\4\3\uffff"+
            "\1\7\3\uffff\1\7\1\uffff\1\7\20\uffff\1\4\1\7\1\4\2\7\1\4\1"+
            "\uffff\1\7\1\4\1\7\1\uffff\1\7\1\uffff\1\11\2\12\2\7\1\13\5"+
            "\7\4\4\2\uffff\1\u00db\1\u00dc\1\uffff\2\4\2\7\1\4\12\uffff"+
            "\1\4\2\uffff\1\4",
>>>>>>> .r234
            "\2\4\4\uffff\1\4\6\uffff\1\4\1\uffff\1\4\5\uffff\2\4\5\uffff"+
            "\3\4\13\uffff\2\4\42\uffff\1\4\10\uffff\1\4\3\uffff\1\4\1\uffff"+
            "\2\4\1\uffff\1\4\5\uffff\2\4\1\uffff\1\4\12\uffff\1\4\7\uffff"+
<<<<<<< .mine
            "\1\4\1\uffff\1\4\26\uffff\1\4\1\uffff\1\u00c1\2\uffff\1\4\2"+
=======
            "\1\4\1\uffff\1\4\32\uffff\1\4\1\uffff\1\u00dd\2\uffff\1\4\2"+
>>>>>>> .r234
            "\uffff\1\4\4\uffff\3\4\2\uffff\1\4\5\uffff\4\4\2\uffff\2\4\1"+
            "\uffff\2\4\2\uffff\1\4\12\uffff\1\4\2\uffff\1\4",
<<<<<<< .mine
            "\2\4\1\7\1\uffff\1\7\1\uffff\1\4\3\uffff\3\7\1\4\1\7\1\4\4\uffff"+
            "\1\7\2\4\1\7\3\uffff\1\7\3\4\1\7\3\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\1\uffff\2\4\1\7\2\uffff\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff"+
            "\3\7\3\uffff\1\7\1\uffff\2\7\1\uffff\2\7\3\uffff\1\7\1\4\6\uffff"+
            "\2\7\1\4\2\uffff\1\7\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\2\4\1\uffff\1\4\1\uffff\1\7\2\uffff\1\7"+
            "\5\uffff\1\4\2\uffff\3\7\1\uffff\1\7\1\4\1\uffff\1\4\3\uffff"+
            "\1\7\3\uffff\1\7\1\uffff\1\7\14\uffff\1\4\1\7\1\4\2\7\1\4\1"+
            "\uffff\1\7\1\4\1\7\1\uffff\1\7\1\uffff\1\11\2\12\2\7\1\13\5"+
            "\7\4\4\2\uffff\1\u00c2\1\u00c3\1\uffff\2\4\2\7\1\4\12\uffff"+
            "\1\4\2\uffff\1\4",
            "\2\u00c4\1\7\1\uffff\1\7\1\uffff\1\u00c6\3\uffff\3\7\1\u00ca"+
            "\1\7\1\u00ce\4\uffff\1\7\2\u00ca\1\7\3\uffff\1\7\1\u00dd\1\u00c8"+
            "\1\u00c9\1\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\u00ca"+
            "\1\7\2\uffff\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff\3\7\3\uffff"+
            "\1\7\1\uffff\2\7\1\uffff\2\7\3\uffff\1\7\1\u00d0\6\uffff\2\7"+
            "\1\u00d8\2\uffff\1\7\1\u00c4\1\uffff\2\u00c4\1\uffff\1\u00cd"+
            "\1\uffff\1\7\1\uffff\1\7\1\uffff\1\u00cc\1\u00cb\1\uffff\1\u00ca"+
            "\1\uffff\1\7\2\uffff\1\7\5\uffff\1\u00cf\2\uffff\3\7\1\uffff"+
            "\1\7\1\u00d9\5\uffff\1\7\3\uffff\1\7\1\uffff\1\7\14\uffff\1"+
            "\u00d4\1\7\1\u00d1\2\7\1\u00d5\2\uffff\1\u00d6\1\7\1\uffff\1"+
            "\7\1\uffff\1\u00d2\4\7\1\u00da\5\7\3\u00d3\6\uffff\1\u00c5\1"+
            "\u00c7\1\uffff\1\7\1\u00d7\12\uffff\1\u00db\2\uffff\1\u00dc",
            "\2\61\4\uffff\1\63\6\uffff\1\67\1\uffff\1\73\5\uffff\2\67\5"+
            "\uffff\1\112\1\65\1\66\13\uffff\2\67\42\uffff\1\75\10\uffff"+
            "\1\105\3\uffff\1\61\1\uffff\2\61\1\uffff\1\72\5\uffff\1\71\1"+
            "\70\1\uffff\1\67\12\uffff\1\74\7\uffff\1\106\1\uffff\1\56\26"+
            "\uffff\1\101\1\uffff\1\76\2\uffff\1\102\2\uffff\1\103\4\uffff"+
            "\1\77\2\55\2\uffff\1\107\5\uffff\3\100\1\113\2\uffff\1\57\1"+
            "\60\1\uffff\1\62\1\64\2\uffff\1\104\12\uffff\1\110\2\uffff\1"+
            "\111",
=======
            "\1\u00de\57\uffff\1\u00de\60\uffff\1\u00df",
            "\2\u00e0\4\uffff\1\u00e2\6\uffff\1\u00e6\1\uffff\1\u00ea\5\uffff"+
            "\2\u00e6\5\uffff\1\u00f9\1\u00e4\1\u00e5\13\uffff\2\u00e6\42"+
            "\uffff\1\u00ec\10\uffff\1\u00f4\3\uffff\1\u00e0\1\uffff\2\u00e0"+
            "\1\uffff\1\u00e9\5\uffff\1\u00e8\1\u00e7\1\uffff\1\u00e6\12"+
            "\uffff\1\u00eb\7\uffff\1\u00f5\34\uffff\1\u00f0\1\uffff\1\u00ed"+
            "\2\uffff\1\u00f1\2\uffff\1\u00f2\4\uffff\1\u00ee\4\uffff\1\u00f6"+
            "\5\uffff\3\u00ef\6\uffff\1\u00e1\1\u00e3\2\uffff\1\u00f3\12"+
            "\uffff\1\u00f7\2\uffff\1\u00f8",
>>>>>>> .r234
            "\1\uffff",
<<<<<<< .mine
=======
            "\1\u00fa",
>>>>>>> .r234
            "\1\uffff",
<<<<<<< .mine
=======
            "\1\u00fd\5\uffff\1\u00fc\1\uffff\1\u00fe\25\uffff\1\u00fb",
            "\1\u0100\10\uffff\1\u0102\15\uffff\1\64\1\u00ff\57\uffff\1\74"+
            "\21\uffff\1\u0101\5\uffff\1\70\1\67\14\uffff\1\u0103\46\uffff"+
            "\1\u0104\12\uffff\1\76",
            "\1\u0105",
            "\1\u0107\5\uffff\1\u0106\1\uffff\1\u0108",
            "\1\u00fb",
            "\1\u0109",
            "\1\u010a",
            "\1\u010c\5\uffff\1\u010b\1\uffff\1\u010d",
            "\1\u010f\1\uffff\1\u010e",
            "\1\u0111\1\uffff\1\u0110",
            "\1\u0112",
>>>>>>> .r234
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
<<<<<<< .mine
=======
            "\1\u0113",
>>>>>>> .r234
            "\1\uffff",
            "\1\uffff",
<<<<<<< .mine
=======
            "\1\u0114",
            "\1\u0115",
            "\1\u0116",
            "\1\u0117",
            "\1\u0118",
            "\1\u0119",
            "\1\u011a",
            "\2\60\4\uffff\1\62\6\uffff\1\66\1\uffff\1\72\5\uffff\2\66\5"+
            "\uffff\1\111\1\64\1\65\13\uffff\2\66\42\uffff\1\74\10\uffff"+
            "\1\104\3\uffff\1\60\1\uffff\2\60\1\uffff\1\71\5\uffff\1\70\1"+
            "\67\1\uffff\1\66\12\uffff\1\73\7\uffff\1\105\1\uffff\1\55\32"+
            "\uffff\1\100\1\uffff\1\75\2\uffff\1\101\2\uffff\1\102\4\uffff"+
            "\1\76\2\113\2\uffff\1\106\5\uffff\3\77\1\112\2\uffff\1\56\1"+
            "\57\1\uffff\1\61\1\63\2\uffff\1\103\12\uffff\1\107\2\uffff\1"+
            "\110",
>>>>>>> .r234
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
<<<<<<< .mine
            return "665:2: pathExpr : ({...}? DBLSLASHSi relativePathExpr | {...}? SLASHSi relativePathExpr | SLASHSi | relativePathExpr );";
=======
            return "670:2: pathExpr : ({...}? DBLSLASHSi relativePathExpr | {...}? SLASHSi relativePathExpr | SLASHSi | relativePathExpr );";
>>>>>>> .r234
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
<<<<<<< .mine
                        int LA117_30 = input.LA(1);
=======
                        int LA117_61 = input.LA(1);
>>>>>>> .r234

                         
<<<<<<< .mine
                        int index117_30 = input.index();
=======
                        int index117_61 = input.index();
>>>>>>> .r234
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
<<<<<<< .mine
                        input.seek(index117_30);
=======
                        input.seek(index117_61);
>>>>>>> .r234
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
<<<<<<< .mine
                        int LA117_28 = input.LA(1);
=======
                        int LA117_27 = input.LA(1);
>>>>>>> .r234

                         
<<<<<<< .mine
                        int index117_28 = input.index();
=======
                        int index117_27 = input.index();
>>>>>>> .r234
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
<<<<<<< .mine
                        input.seek(index117_28);
=======
                        input.seek(index117_27);
>>>>>>> .r234
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
<<<<<<< .mine
                        int LA117_15 = input.LA(1);
=======
                        int LA117_33 = input.LA(1);
>>>>>>> .r234

                         
<<<<<<< .mine
                        int index117_15 = input.index();
=======
                        int index117_33 = input.index();
>>>>>>> .r234
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
<<<<<<< .mine
                        input.seek(index117_15);
=======
                        input.seek(index117_33);
>>>>>>> .r234
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
<<<<<<< .mine
                        int LA117_33 = input.LA(1);
=======
                        int LA117_64 = input.LA(1);
>>>>>>> .r234

                         
<<<<<<< .mine
                        int index117_33 = input.index();
=======
                        int index117_64 = input.index();
>>>>>>> .r234
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
<<<<<<< .mine
                        input.seek(index117_33);
=======
                        input.seek(index117_64);
>>>>>>> .r234
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
<<<<<<< .mine
                        int LA117_27 = input.LA(1);
=======
                        int LA117_49 = input.LA(1);
>>>>>>> .r234

                         
<<<<<<< .mine
                        int index117_27 = input.index();
=======
                        int index117_49 = input.index();
>>>>>>> .r234
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
<<<<<<< .mine
                        input.seek(index117_27);
=======
                        input.seek(index117_49);
>>>>>>> .r234
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
<<<<<<< .mine
                        int LA117_29 = input.LA(1);
=======
                        int LA117_63 = input.LA(1);
>>>>>>> .r234

                         
<<<<<<< .mine
                        int index117_29 = input.index();
=======
                        int index117_63 = input.index();
>>>>>>> .r234
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
<<<<<<< .mine
                        input.seek(index117_29);
=======
                        input.seek(index117_63);
>>>>>>> .r234
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
<<<<<<< .mine
                        int LA117_32 = input.LA(1);
=======
                        int LA117_62 = input.LA(1);
>>>>>>> .r234

                         
<<<<<<< .mine
                        int index117_32 = input.index();
=======
                        int index117_62 = input.index();
>>>>>>> .r234
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

<<<<<<< .mine
=======
                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_62);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA117_29 = input.LA(1);

                         
                        int index117_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

>>>>>>> .r234
                        else if ( (true) ) {s = 4;}

                         
<<<<<<< .mine
                        input.seek(index117_32);
=======
                        input.seek(index117_29);
>>>>>>> .r234
                        if ( s>=0 ) return s;
                        break;
<<<<<<< .mine
=======
                    case 8 : 
                        int LA117_15 = input.LA(1);

                         
                        int index117_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA117_28 = input.LA(1);

                         
                        int index117_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_28);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA117_30 = input.LA(1);

                         
                        int index117_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_30);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA117_47 = input.LA(1);

                         
                        int index117_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_47);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA117_32 = input.LA(1);

                         
                        int index117_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_32);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA117_67 = input.LA(1);

                         
                        int index117_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_67);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA117_66 = input.LA(1);

                         
                        int index117_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 7;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_66);
                        if ( s>=0 ) return s;
                        break;
>>>>>>> .r234
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_versionDecl_in_module582 = new BitSet(new long[]{0xC007101C1A2810C0L,0x0408B05A20110800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_libraryModule_in_module586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mainModule_in_module590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_versionDecl619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_VERSION_in_versionDecl621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_StringLiteral_in_versionDecl623 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_ENCODING_in_versionDecl626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_StringLiteral_in_versionDecl628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_separator_in_versionDecl632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLONSi_in_separator662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleDecl_in_libraryModule690 = new BitSet(new long[]{0x8000000002000002L});
    public static final BitSet FOLLOW_prolog_in_libraryModule692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_moduleDecl721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleDecl723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_NCName_in_moduleDecl725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_moduleDecl727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleDecl729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_separator_in_moduleDecl731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_uriLiteral761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prolog_in_mainModule793 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_queryBody_in_mainModule795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_queryBody826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_expr862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_expr865 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_expr867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_defaultNamespaceDecl_in_prolog994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_setter_in_prolog998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_namespaceDecl_in_prolog1002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_importStmt_in_prolog1006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_separator_in_prolog1021 = new BitSet(new long[]{0x8000000002000002L});
    public static final BitSet FOLLOW_varDecl_in_prolog1063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_functionDecl_in_prolog1067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_optionDecl_in_prolog1071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_ftOptionDecl_in_prolog1075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_separator_in_prolog1089 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_DECLARE_in_defaultNamespaceDecl1122 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultNamespaceDecl1124 = new BitSet(new long[]{0x0200001000000000L});
    public static final BitSet FOLLOW_set_in_defaultNamespaceDecl1126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_defaultNamespaceDecl1134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_defaultNamespaceDecl1136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boundarySpaceDecl_in_setter1168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defaultCollationDecl_in_setter1183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseURIDecl_in_setter1198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructionDecl_in_setter1213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderingModeDecl_in_setter1228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emptyOrderDecl_in_setter1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copyNamespacesDecl_in_setter1258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_boundarySpaceDecl1279 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_BOUNDARYSPACE_in_boundarySpaceDecl1281 = new BitSet(new long[]{0x0000000000000000L,0x0200002000000000L});
    public static final BitSet FOLLOW_set_in_boundarySpaceDecl1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_defaultCollationDecl1307 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultCollationDecl1309 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLLATION_in_defaultCollationDecl1311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_defaultCollationDecl1313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_baseURIDecl1340 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_BASE_URI_in_baseURIDecl1342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_baseURIDecl1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_constructionDecl1366 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_constructionDecl1368 = new BitSet(new long[]{0x0000000000000000L,0x0200002000000000L});
    public static final BitSet FOLLOW_set_in_constructionDecl1370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_orderingModeDecl1398 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ORDERING_in_orderingModeDecl1400 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_orderingModeDecl1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_emptyOrderDecl1432 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_emptyOrderDecl1434 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ORDER_in_emptyOrderDecl1436 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EMPTY_in_emptyOrderDecl1438 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_in_emptyOrderDecl1440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_copyNamespacesDecl1466 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl1468 = new BitSet(new long[]{0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_preserveMode_in_copyNamespacesDecl1470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_copyNamespacesDecl1472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200002L});
    public static final BitSet FOLLOW_inheritMode_in_copyNamespacesDecl1474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_preserveMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_inheritMode0 = new BitSet(new long[]{0x0000000000000002L});
<<<<<<< .mine
    public static final BitSet FOLLOW_DECLARE_in_namespaceDecl1552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespaceDecl1554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_namespaceDecl1556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_EQSi_in_namespaceDecl1558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_namespaceDecl1560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaImport_in_importStmt1588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleImport_in_importStmt1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_schemaImport1618 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_schemaImport1620 = new BitSet(new long[]{0x0000000004000000L,0x0000000000040000L,0x0000000008000000L});
    public static final BitSet FOLLOW_schemaPrefix_in_schemaImport1622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1625 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AT_in_schemaImport1628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1630 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_schemaImport1633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix1667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_schemaPrefix1669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_EQSi_in_schemaPrefix1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_schemaPrefix1677 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_schemaPrefix1679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix1681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_moduleImport1708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_MODULE_in_moduleImport1710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000008000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleImport1713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_moduleImport1715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_EQSi_in_moduleImport1717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1721 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AT_in_moduleImport1724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_moduleImport1729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1731 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_DECLARE_in_varDecl1767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VARIABLE_in_varDecl1769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varDecl1771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_varDecl1773 = new BitSet(new long[]{0x0000800000000200L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_varDecl1775 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGNSi_in_varDecl1780 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_varDecl1782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_varDecl1787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCName_in_qName1809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COLONSi_in_qName1813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_qName1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_typeDeclaration1844 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000020000000L});
    public static final BitSet FOLLOW_sequenceType_in_typeDeclaration1846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_functionDecl1875 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDecl1877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_functionDecl1879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_functionDecl1881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001100000000L});
    public static final BitSet FOLLOW_paramList_in_functionDecl1883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_functionDecl1886 = new BitSet(new long[]{0x0000800000000200L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_AS_in_functionDecl1901 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000020000000L});
    public static final BitSet FOLLOW_sequenceType_in_functionDecl1903 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_enclosedExpr_in_functionDecl1908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_functionDecl1912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_paramList1942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_paramList1945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_param_in_paramList1947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_param1983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_param1985 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_typeDeclaration_in_param1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_enclosedExpr2032 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_enclosedExpr2047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_enclosedExpr2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_optionDecl2109 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_OPTION_in_optionDecl2111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_optionDecl2113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_StringLiteral_in_optionDecl2115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_ftOptionDecl2141 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_FTOPTION_in_ftOptionDecl2143 = new BitSet(new long[]{0x0000000040010000L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_ftMatchOptions_in_ftOptionDecl2145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftMatchOption_in_ftMatchOptions2169 = new BitSet(new long[]{0x0000000040010002L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_itemType_in_sequenceType2221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_sequenceType2223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_sequenceType2237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_sequenceType2251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_sequenceType2253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_sequenceType2255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_itemType2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_itemType2302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_itemType2304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_itemType2306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_itemType2311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_documentTest_in_kindTest2343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementTest_in_kindTest2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeTest_in_kindTest2423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaElementTest_in_kindTest2463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaAttributeTest_in_kindTest2503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_piTest_in_kindTest2543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commentTest_in_kindTest2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_textTest_in_kindTest2623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anyKindTest_in_kindTest2663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_documentTest2691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_documentTest2693 = new BitSet(new long[]{0x0000001000000000L,0x0000200000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_elementTest_in_documentTest2696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_schemaElementTest_in_documentTest2700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_documentTest2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_elementTest2732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_elementTest2734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000011020000000L});
    public static final BitSet FOLLOW_elementNameOrWildcard_in_elementTest2737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_COMMASi_in_elementTest2740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_typeName_in_elementTest2742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_QUESTIONSi_in_elementTest2744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_elementTest2751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementNameOrWildcard2808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_elementNameOrWildcard2812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_elementName2844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_typeName2878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMAELEMENT_in_schemaElementTest2903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_schemaElementTest2905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_elementDeclaration_in_schemaElementTest2907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_schemaElementTest2909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementDeclaration2933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_attributeTest2965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_attributeTest2967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000011020000000L});
    public static final BitSet FOLLOW_attribNameOrWildcard_in_attributeTest2970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_COMMASi_in_attributeTest2973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_typeName_in_attributeTest2975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_attributeTest2981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attribNameOrWildcard3002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_attribNameOrWildcard3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_attributeName3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMAATTRIBUTE_in_schemaAttributeTest3060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_schemaAttributeTest3062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_attributeDeclaration_in_schemaAttributeTest3064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_schemaAttributeTest3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attributeDeclaration3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_piTest3122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_piTest3124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001028000000L});
    public static final BitSet FOLLOW_set_in_piTest3126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_piTest3135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_commentTest3164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_commentTest3166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_commentTest3168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_textTest3200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_textTest3202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_textTest3204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_anyKindTest3233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_anyKindTest3235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_anyKindTest3237 = new BitSet(new long[]{0x0000000000000002L});
=======
    public static final BitSet FOLLOW_DECLARE_in_namespaceDecl1565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespaceDecl1567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_NCName_in_namespaceDecl1569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_namespaceDecl1571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_namespaceDecl1573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaImport_in_importStmt1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleImport_in_importStmt1605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_schemaImport1631 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_schemaImport1633 = new BitSet(new long[]{0x0000000004000000L,0x0000000000040000L,0x0000000080000000L});
    public static final BitSet FOLLOW_schemaPrefix_in_schemaImport1635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1638 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AT_in_schemaImport1641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_schemaImport1646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix1680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_NCName_in_schemaPrefix1682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_schemaPrefix1684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_schemaPrefix1690 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_schemaPrefix1692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix1694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_moduleImport1721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_MODULE_in_moduleImport1723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000080000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleImport1726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_NCName_in_moduleImport1728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_moduleImport1730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1734 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AT_in_moduleImport1737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_moduleImport1742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1744 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_DECLARE_in_varDecl1780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VARIABLE_in_varDecl1782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varDecl1784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qName_in_varDecl1786 = new BitSet(new long[]{0x0000800000000200L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_varDecl1788 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_ASSIGNSi_in_varDecl1793 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_varDecl1795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_varDecl1800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCName_in_qName1822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLONSi_in_qName1826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_NCName_in_qName1832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_typeDeclaration1857 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000200000000L});
    public static final BitSet FOLLOW_sequenceType_in_typeDeclaration1859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_functionDecl1888 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDecl1890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qName_in_functionDecl1892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_functionDecl1894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000011000000000L});
    public static final BitSet FOLLOW_paramList_in_functionDecl1896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_functionDecl1899 = new BitSet(new long[]{0x0000800000000200L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_AS_in_functionDecl1914 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000200000000L});
    public static final BitSet FOLLOW_sequenceType_in_functionDecl1916 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_enclosedExpr_in_functionDecl1921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_functionDecl1925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_paramList1955 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_paramList1958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_param_in_paramList1960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_param1996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qName_in_param1998 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_typeDeclaration_in_param2000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_enclosedExpr2045 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_enclosedExpr2061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_enclosedExpr2076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_optionDecl2124 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_OPTION_in_optionDecl2126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qName_in_optionDecl2128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_StringLiteral_in_optionDecl2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_ftOptionDecl2156 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_FTOPTION_in_ftOptionDecl2158 = new BitSet(new long[]{0x0000000040010000L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_ftMatchOptions_in_ftOptionDecl2160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftMatchOption_in_ftMatchOptions2184 = new BitSet(new long[]{0x0000000040010002L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_itemType_in_sequenceType2236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000380000000000L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_sequenceType2238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_sequenceType2252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_sequenceType2266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_sequenceType2268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_sequenceType2270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_itemType2312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_itemType2317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_itemType2319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_itemType2321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_itemType2326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_documentTest_in_kindTest2358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementTest_in_kindTest2398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeTest_in_kindTest2438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaElementTest_in_kindTest2478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaAttributeTest_in_kindTest2518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_piTest_in_kindTest2558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commentTest_in_kindTest2598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_textTest_in_kindTest2638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anyKindTest_in_kindTest2678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_documentTest2706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_documentTest2708 = new BitSet(new long[]{0x0000001000000000L,0x0000200000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_elementTest_in_documentTest2711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_schemaElementTest_in_documentTest2715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_documentTest2719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_elementTest2747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_elementTest2749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000110200000000L});
    public static final BitSet FOLLOW_elementNameOrWildcard_in_elementTest2752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMASi_in_elementTest2755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_typeName_in_elementTest2757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000090000000000L});
    public static final BitSet FOLLOW_QUESTIONSi_in_elementTest2759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_elementTest2766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementNameOrWildcard2823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_elementNameOrWildcard2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_elementName2859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_typeName2893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMAELEMENT_in_schemaElementTest2918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_schemaElementTest2920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_elementDeclaration_in_schemaElementTest2922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_schemaElementTest2924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementDeclaration2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_attributeTest2980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_attributeTest2982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000110200000000L});
    public static final BitSet FOLLOW_attribNameOrWildcard_in_attributeTest2985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMASi_in_attributeTest2988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_typeName_in_attributeTest2990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_attributeTest2996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attribNameOrWildcard3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_attribNameOrWildcard3021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_attributeName3050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMAATTRIBUTE_in_schemaAttributeTest3075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_schemaAttributeTest3077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_attributeDeclaration_in_schemaAttributeTest3079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_schemaAttributeTest3081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attributeDeclaration3102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_piTest3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_piTest3139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010280000000L});
    public static final BitSet FOLLOW_set_in_piTest3141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_piTest3150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_commentTest3179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_commentTest3181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_commentTest3183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_textTest3215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_textTest3217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_textTest3219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_anyKindTest3248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_anyKindTest3250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_anyKindTest3252 = new BitSet(new long[]{0x0000000000000002L});
>>>>>>> .r234
    public static final BitSet FOLLOW_set_in_occurrenceIndicator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fLWORExpr_in_exprSingle3312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantifiedExpr_in_exprSingle3350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeswitchExpr_in_exprSingle3388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifExpr_in_exprSingle3426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpr_in_exprSingle3464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forClause_in_fLWORExpr3531 = new BitSet(new long[]{0x0004000000000000L,0x0010010010000800L,0x0000000000000100L});
    public static final BitSet FOLLOW_letClause_in_fLWORExpr3537 = new BitSet(new long[]{0x0004000000000000L,0x0010010010000800L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_fLWORExpr3541 = new BitSet(new long[]{0x0000000000000000L,0x0010010010000000L});
    public static final BitSet FOLLOW_orderByClause_in_fLWORExpr3544 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RETURN_in_fLWORExpr3547 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_fLWORExpr3549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forClause3651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_forClauseTupletDef_in_forClause3653 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_forClause3656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_forClauseTupletDef_in_forClause3658 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_forClauseTupletDef3757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_varName_in_forClauseTupletDef3760 = new BitSet(new long[]{0x0000000000000A00L,0x0000400000000001L});
    public static final BitSet FOLLOW_typeDeclaration_in_forClauseTupletDef3762 = new BitSet(new long[]{0x0000000000000800L,0x0000400000000001L});
    public static final BitSet FOLLOW_positionalVar_in_forClauseTupletDef3765 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000001L});
    public static final BitSet FOLLOW_ftScoreVar_in_forClauseTupletDef3768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IN_in_forClauseTupletDef3771 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_forClauseTupletDef3774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_varName3800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_positionalVar3831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_positionalVar3833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_varName_in_positionalVar3835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCORE_in_ftScoreVar3866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_ftScoreVar3868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_varName_in_ftScoreVar3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_letClause3920 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_varBinding_in_letClause3922 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_letClause3925 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_varBinding_in_letClause3927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varBinding4003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_varName_in_varBinding4007 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_varBinding4009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_SCORE_in_varBinding4014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varBinding4016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_varName_in_varBinding4020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_ASSIGNSi_in_varBinding4036 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_varBinding4038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_whereClause4101 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_whereClause4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause4190 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_BY_in_orderByClause4192 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_STABLE_in_orderByClause4196 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause4198 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_BY_in_orderByClause4200 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_orderSpecList_in_orderByClause4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList4293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_orderSpecList4296 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList4298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_exprSingle_in_orderSpec4389 = new BitSet(new long[]{0x0000020020100402L});
    public static final BitSet FOLLOW_orderModifier_in_orderSpec4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_orderModifier4420 = new BitSet(new long[]{0x0000020000100002L});
    public static final BitSet FOLLOW_EMPTY_in_orderModifier4430 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_in_orderModifier4432 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_COLLATION_in_orderModifier4443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_orderModifier4445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_quantifiedExpr4483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EVERY_in_quantifiedExpr4487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4490 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_quantifiedExpr4505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4507 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_SATISFIES_in_quantifiedExpr4511 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExpr4513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_quantifiedExprTupleDef4604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_varName_in_quantifiedExprTupleDef4606 = new BitSet(new long[]{0x4007101C182812C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_typeDeclaration_in_quantifiedExprTupleDef4608 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExprTupleDef4611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_typeswitchExpr4697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_typeswitchExpr4699 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_typeswitchExpr4701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_typeswitchExpr4703 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_caseClause_in_typeswitchExpr4705 = new BitSet(new long[]{0x0000000004010000L});
    public static final BitSet FOLLOW_DEFAULT_in_typeswitchExpr4721 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_typeswitchExpr4724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_varName_in_typeswitchExpr4726 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RETURN_in_typeswitchExpr4730 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_typeswitchExpr4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseClause4828 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000001200000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_caseClause4831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_varName_in_caseClause4833 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_caseClause4835 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000200000000L});
    public static final BitSet FOLLOW_sequenceType_in_caseClause4839 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RETURN_in_caseClause4841 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_caseClause4843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifExpr4949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_ifExpr4951 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_ifExpr4953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_ifExpr4955 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_THEN_in_ifExpr4957 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr4959 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_ELSE_in_ifExpr4961 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr4963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpr_in_orExpr5065 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_OR_in_orExpr5069 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_andExpr_in_orExpr5072 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr5107 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_AND_in_andExpr5111 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr5114 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr5148 = new BitSet(new long[]{0x1400080000000002L,0x0000000000084220L,0x007F000400000000L});
    public static final BitSet FOLLOW_valueComp_in_comparisonExpr5153 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_generalComp_in_comparisonExpr5157 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_nodeComp_in_comparisonExpr5161 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr5165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeExpr_in_ftContainsExpr5194 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_FTCONTAINS_in_ftContainsExpr5198 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0780028080000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftContainsExpr5201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_ftIgnoreOption_in_ftContainsExpr5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr5239 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_TO_in_rangeExpr5243 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr5246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr5277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_set_in_additiveExpr5281 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr5290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr5316 = new BitSet(new long[]{0x2000000200000002L,0x0000000000008000L,0x0000100000000000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpr5320 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr5337 = new BitSet(new long[]{0x2000000200000002L,0x0000000000008000L,0x0000100000000000L});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr5373 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000002L});
    public static final BitSet FOLLOW_set_in_unionExpr5377 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr5386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000800000000002L});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr5413 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_set_in_intersectExceptExpr5417 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr5426 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_treatExpr_in_instanceofExpr5459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_INSTANCE_in_instanceofExpr5463 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_OF_in_instanceofExpr5466 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000200000000L});
    public static final BitSet FOLLOW_sequenceType_in_instanceofExpr5469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castableExpr_in_treatExpr5508 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_TREAT_in_treatExpr5512 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_treatExpr5515 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000200000000L});
    public static final BitSet FOLLOW_sequenceType_in_treatExpr5518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpr_in_castableExpr5555 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_CASTABLE_in_castableExpr5559 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_castableExpr5562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_singleType_in_castableExpr5565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpr_in_castExpr5607 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_CAST_in_castExpr5611 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_castExpr5614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_singleType_in_castExpr5617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryExpr5660 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_valueExpr_in_unaryExpr5671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_singleType5710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUESTIONSi_in_singleType5712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_atomicType5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftIgnoreOption5788 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CONTENT_in_ftIgnoreOption5790 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_unionExpr_in_ftIgnoreOption5792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_valueComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_generalComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_nodeComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOr_in_ftSelection5962 = new BitSet(new long[]{0x0000010180000802L,0x0000020020000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_ftPosFilter_in_ftSelection5964 = new BitSet(new long[]{0x0000010180000802L,0x0000020020000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_WEIGHT_in_ftSelection5968 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_rangeExpr_in_ftSelection5970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr6036 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_FTOR_in_ftOr6040 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0780028080000000L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr6043 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd6080 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_FTAND_in_ftAnd6084 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0780028080000000L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd6087 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot6121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_NOT_in_ftMildNot6125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IN_in_ftMildNot6128 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0780028080000000L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot6131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_FTNOT_in_ftUnaryNot6166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0780028080000000L});
    public static final BitSet FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot6171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftPrimary_in_ftPrimaryWithOptions6193 = new BitSet(new long[]{0x0000000040010002L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_ftMatchOptions_in_ftPrimaryWithOptions6195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWords_in_ftPrimary6236 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftTimes_in_ftPrimary6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_ftPrimary6260 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0780028080000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftPrimary6262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_ftPrimary6264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionSelection_in_ftPrimary6285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWordsValue_in_ftWords6339 = new BitSet(new long[]{0x0000000000000032L,0x0000000400000000L});
    public static final BitSet FOLLOW_ftAnyallOption_in_ftWords6341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_ftWordsValue6375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_ftWordsValue6380 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_ftWordsValue6383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_ftWordsValue6385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_literal6426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal6430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_numericLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANY_in_ftAnyallOption6503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WORD_in_ftAnyallOption6505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_ftAnyallOption6512 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftAnyallOption6514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PHRASE_in_ftAnyallOption6520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCCURS_in_ftTimes6557 = new BitSet(new long[]{0x0008200000000800L});
    public static final BitSet FOLLOW_ftRange_in_ftTimes6560 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_TIMES_in_ftTimes6562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXACTLY_in_ftRange6602 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRange6646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEAST_in_ftRange6648 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRange6693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_MOST_in_ftRange6695 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_ftRange6745 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6747 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TO_in_ftRange6749 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_in_ftExtensionSelection6778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_ftExtensionSelection6781 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0780068080000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftExtensionSelection6784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_ftExtensionSelection6787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPRAGSi_in_pragma6827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qName_in_pragma6830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_PragmaContents_in_pragma6832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_RPRAGSi_in_pragma6835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOrder_in_ftPosFilter6891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWindow_in_ftPosFilter6895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDistance_in_ftPosFilter6899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftScope_in_ftPosFilter6903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftContent_in_ftPosFilter6907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_ftOrder6939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_ftWindow6970 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x6782709280000014L,0x0000000000048013L});
    public static final BitSet FOLLOW_additiveExpr_in_ftWindow6972 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_ftUnit_in_ftWindow6974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTANCE_in_ftDistance7047 = new BitSet(new long[]{0x0008200000000800L});
    public static final BitSet FOLLOW_ftRange_in_ftDistance7049 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_ftUnit_in_ftDistance7051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftScope7089 = new BitSet(new long[]{0x0000000000000000L,0x0004000080000000L});
    public static final BitSet FOLLOW_ftBigUnit_in_ftScope7097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftBigUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftContent7163 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_START_in_ftContent7165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftContent7169 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_END_in_ftContent7171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENTIRE_in_ftContent7175 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CONTENT_in_ftContent7177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftLanguageOption_in_ftMatchOption7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWildCardOption_in_ftMatchOption7253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftThesaurusOption_in_ftMatchOption7291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftStemOption_in_ftMatchOption7329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftCaseOption_in_ftMatchOption7367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDiacriticsOption_in_ftMatchOption7405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftStopwordOption_in_ftMatchOption7443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionOption_in_ftMatchOption7481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGUAGE_in_ftLanguageOption7606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftLanguageOption7608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftWildCardOption7634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftWildCardOption7636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftWildCardOption7640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftWildCardOption7642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftThesaurusOption7665 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption7667 = new BitSet(new long[]{0x0000000004000800L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption7670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption7674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftThesaurusOption7690 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption7692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_ftThesaurusOption7694 = new BitSet(new long[]{0x0000000004000800L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption7697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption7701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMASi_in_ftThesaurusOption7705 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption7707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_RPARSi_in_ftThesaurusOption7711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftThesaurusOption7750 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption7752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftThesaurusID7814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_ftThesaurusID7816 = new BitSet(new long[]{0x0008200000000802L,0x0000008000000000L});
    public static final BitSet FOLLOW_RELATIONSHIP_in_ftThesaurusID7819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftThesaurusID7821 = new BitSet(new long[]{0x0008200000000802L});
    public static final BitSet FOLLOW_ftRange_in_ftThesaurusID7826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEVELS_in_ftThesaurusID7828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftStemOption7873 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_STEMMING_in_ftStemOption7875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftStemOption7879 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_STEMMING_in_ftStemOption7881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ftCaseOption7911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_INSENSITIVE_in_ftCaseOption7913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ftCaseOption7952 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_ftCaseOption7954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOWERCASE_in_ftCaseOption7993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPPERCASE_in_ftCaseOption8032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ftDiacriticsOption8194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_INSENSITIVE_in_ftDiacriticsOption8196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ftDiacriticsOption8211 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_ftDiacriticsOption8213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftStopwordOption8269 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption8271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption8273 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ftRefOrList_in_ftStopwordOption8275 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8277 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftStopwordOption8293 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption8295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption8297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftStopwordOption8336 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_ftStopwordOption8338 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption8340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption8342 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8344 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRefOrList8410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_uriLiteral_in_ftRefOrList8412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_ftRefOrList8429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftRefOrList8431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMASi_in_ftRefOrList8434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftRefOrList8436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_RPARSi_in_ftRefOrList8440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftInclExclStringLiteral8457 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ftRefOrList_in_ftInclExclStringLiteral8465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTION_in_ftExtensionOption8499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qName_in_ftExtensionOption8501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftExtensionOption8503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_validateExpr_in_valueExpr8535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathExpr_in_valueExpr8539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extensionExpr_in_valueExpr8543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_validateExpr8571 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000100L,0x0000020000000000L});
    public static final BitSet FOLLOW_validationMode_in_validateExpr8573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_validateExpr8576 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_validateExpr8579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_validateExpr8581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_validationMode0 = new BitSet(new long[]{0x0000000000000002L});
<<<<<<< .mine
    public static final BitSet FOLLOW_DBLSLASHSi_in_pathExpr8558 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3038210928000004L,0x0000000000004801L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr8578 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3038210928000004L,0x0000000000004801L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr8595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr8633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_set_in_relativePathExpr8636 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3038210928000004L,0x0000000000004801L});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr8645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_axisStep_in_stepExpr8680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filterExpr_in_stepExpr8697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseStep_in_axisStep8745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_forwardStep_in_axisStep8749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_predicateList_in_axisStep8753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseAxis_in_reverseStep8787 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000010020000000L});
    public static final BitSet FOLLOW_nodeTest_in_reverseStep8789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevReverseStep_in_reverseStep8793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_reverseAxis8824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_reverseAxis8844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_nodeTest8878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameTest_in_nodeTest8882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_nameTest8918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wildcard_in_nameTest8922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard8968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard8970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_wildcard8972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard8997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCName_in_wildcard9042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard9044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_STARSi_in_wildcard9046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTDOTSi_in_abbrevReverseStep9087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forwardAxis_in_forwardStep9150 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000010020000000L});
    public static final BitSet FOLLOW_nodeTest_in_forwardStep9152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevForwardStep_in_forwardStep9156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_forwardAxis9203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_forwardAxis9259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATSi_in_abbrevForwardStep9290 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000010020000000L});
    public static final BitSet FOLLOW_nodeTest_in_abbrevForwardStep9293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predicate_in_predicateList9367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LBRACKSi_in_predicate9427 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_predicate9430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RBRACKSi_in_predicate9432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_in_extensionExpr9473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_extensionExpr9476 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678274928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_extensionExpr9478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_extensionExpr9481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpr_in_filterExpr9516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_predicateList_in_filterExpr9518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpr9547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varRef_in_primaryExpr9563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpr_in_primaryExpr9579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextItemExpr_in_primaryExpr9595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_primaryExpr9611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderedExpr_in_primaryExpr9627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unorderedExpr_in_primaryExpr9643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_in_primaryExpr9659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_varRef9697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_varRef9699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_parenthesizedExpr9722 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678271928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_parenthesizedExpr9724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_parenthesizedExpr9727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTSi_in_contextItemExpr9753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_functionCall9780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_functionCall9782 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678271928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_functionCall9800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_COMMASi_in_functionCall9803 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_functionCall9805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_RPARSi_in_functionCall9825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_orderedExpr9855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_orderedExpr9857 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_orderedExpr9859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_orderedExpr9861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_unorderedExpr9889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_unorderedExpr9891 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_unorderedExpr9893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_unorderedExpr9895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_constructor9926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_computedConstructor_in_constructor9930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirElemConstructor_in_directConstructor9970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirCommentConstructor_in_directConstructor10011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirPIConstructor_in_directConstructor10040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTSi_in_dirElemConstructor10098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor10127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800020000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dirAttributeList_in_dirElemConstructor10129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_RSELFTERMSi_in_dirElemConstructor10159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor10188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000004984L});
    public static final BitSet FOLLOW_dirElemContent_in_dirElemConstructor10217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000004984L});
    public static final BitSet FOLLOW_LENDTAGSi_in_dirElemConstructor10246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor10276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor10305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_dirAttributeList10372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_EQSi_in_dirAttributeList10374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_dirAttributeValue_in_dirAttributeList10376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue10414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_QuotAttributeContent_in_dirAttributeValue10445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue10481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue10515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_AposAttributeContent_in_dirAttributeValue10549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue10588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_xmlEnclosedExpr10629 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_xmlEnclosedExpr10657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_xmlEnclosedExpr10711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_dirElemContent10743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cDataSection_in_dirElemContent10747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ElementContent_in_dirElemContent10751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirElemContent10755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCDATASi_in_cDataSection10775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CDataContents_in_cDataSection10777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RCDATASi_in_cDataSection10779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCOMMENTSi_in_dirCommentConstructor10802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DirCommentContent_in_dirCommentConstructor10804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RCOMMENTSi_in_dirCommentConstructor10806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPISi_in_dirPIConstructor10827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_PiTarget_in_dirPIConstructor10829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_DirPiContents_in_dirPIConstructor10831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPISi_in_dirPIConstructor10834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compDocConstructor_in_computedConstructor10860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compElemConstructor_in_computedConstructor10901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compAttrConstructor_in_computedConstructor10942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compTextConstructor_in_computedConstructor10983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compCommentConstructor_in_computedConstructor11024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compPIConstructor_in_computedConstructor11065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_compDocConstructor11093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compDocConstructor11095 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compDocConstructor11097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compDocConstructor11099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_compElemConstructor11128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_qName_in_compElemConstructor11131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor11135 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compElemConstructor11137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor11139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor11158 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678274928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_contentExpr_in_compElemConstructor11160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor11163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_contentExpr11196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_compAttrConstructor11241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_qName_in_compAttrConstructor11244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor11249 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor11251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor11253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor11273 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678274928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor11275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor11278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_compTextConstructor11314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compTextConstructor11316 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compTextConstructor11318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compTextConstructor11320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_compCommentConstructor11344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compCommentConstructor11346 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compCommentConstructor11348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compCommentConstructor11350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor11379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_NCName_in_compPIConstructor11382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor11387 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compPIConstructor11389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor11391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor11411 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678274928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compPIConstructor11413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor11416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_synpred12214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_synpred12216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_synpred28959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COLONSi_in_synpred28961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_synpred28963 = new BitSet(new long[]{0x0000000000000002L});
=======
    public static final BitSet FOLLOW_DBLSLASHSi_in_pathExpr8653 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x0382109280000004L,0x0000000000048013L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr8673 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x0382109280000004L,0x0000000000048013L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr8690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr8728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_set_in_relativePathExpr8731 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x0382109280000004L,0x0000000000048013L});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr8740 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_axisStep_in_stepExpr8775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filterExpr_in_stepExpr8792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseStep_in_axisStep8840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_forwardStep_in_axisStep8844 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_predicateList_in_axisStep8848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseAxis_in_reverseStep8882 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000100200000000L});
    public static final BitSet FOLLOW_nodeTest_in_reverseStep8884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevReverseStep_in_reverseStep8888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_reverseAxis8919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_reverseAxis8939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_nodeTest8973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameTest_in_nodeTest8977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_nameTest9013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wildcard_in_nameTest9017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard9063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard9065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_NCName_in_wildcard9067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard9092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCName_in_wildcard9137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard9139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STARSi_in_wildcard9141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTDOTSi_in_abbrevReverseStep9182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forwardAxis_in_forwardStep9245 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000100200000000L});
    public static final BitSet FOLLOW_nodeTest_in_forwardStep9247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevForwardStep_in_forwardStep9251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_forwardAxis9298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_forwardAxis9354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATSi_in_abbrevForwardStep9385 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000100200000000L});
    public static final BitSet FOLLOW_nodeTest_in_abbrevForwardStep9388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predicate_in_predicateList9462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LBRACKSi_in_predicate9522 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_predicate9525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RBRACKSi_in_predicate9527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_in_extensionExpr9568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_extensionExpr9571 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782749280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_extensionExpr9574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_extensionExpr9577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpr_in_filterExpr9613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_predicateList_in_filterExpr9615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpr9644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varRef_in_primaryExpr9660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpr_in_primaryExpr9676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextItemExpr_in_primaryExpr9692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_primaryExpr9708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderedExpr_in_primaryExpr9724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unorderedExpr_in_primaryExpr9740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_in_primaryExpr9756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_varRef9794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_varName_in_varRef9797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_parenthesizedExpr9820 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782719280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_parenthesizedExpr9823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPARSi_in_parenthesizedExpr9826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTSi_in_contextItemExpr9853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_functionCall9880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPARSi_in_functionCall9882 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782719280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_functionCall9900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMASi_in_functionCall9903 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_exprSingle_in_functionCall9905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_RPARSi_in_functionCall9925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_orderedExpr10018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_orderedExpr10020 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_orderedExpr10023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_orderedExpr10025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_unorderedExpr10054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_unorderedExpr10056 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_unorderedExpr10059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_unorderedExpr10061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_constructor10093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_computedConstructor_in_constructor10097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirElemConstructor_in_directConstructor10137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirCommentConstructor_in_directConstructor10178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirPIConstructor_in_directConstructor10207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTSi_in_dirElemConstructor10265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor10331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000200000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_dirAttributeList_in_dirElemConstructor10333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RSELFTERMSi_in_dirElemConstructor10396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor10497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002020000000000L,0x0000000000049840L});
    public static final BitSet FOLLOW_dirElemContent_in_dirElemConstructor10592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002020000000000L,0x0000000000049840L});
    public static final BitSet FOLLOW_LENDTAGSi_in_dirElemConstructor10621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor10651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor10680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_dirAttributeList10821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_dirAttributeList10823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_dirAttributeValue_in_dirAttributeList10825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue10863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_QuotAttributeContent_in_dirAttributeValue10894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue10930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue10964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_AposAttributeContent_in_dirAttributeValue10998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue11002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue11037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_xmlEnclosedExpr11078 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_xmlEnclosedExpr11107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_xmlEnclosedExpr11161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_dirElemContent11196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cDataSection_in_dirElemContent11202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ElementContent_in_dirElemContent11208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirElemContent11214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCDATASi_in_cDataSection11321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_CDataContents_in_cDataSection11323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RCDATASi_in_cDataSection11325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCOMMENTSi_in_dirCommentConstructor11348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DirCommentContent_in_dirCommentConstructor11350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RCOMMENTSi_in_dirCommentConstructor11352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPISi_in_dirPIConstructor11373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_PiTarget_in_dirPIConstructor11375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_DirPiContents_in_dirPIConstructor11377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RPISi_in_dirPIConstructor11380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compDocConstructor_in_computedConstructor11406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compElemConstructor_in_computedConstructor11447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compAttrConstructor_in_computedConstructor11488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compTextConstructor_in_computedConstructor11529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compCommentConstructor_in_computedConstructor11570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compPIConstructor_in_computedConstructor11611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_compDocConstructor11639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compDocConstructor11641 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_compDocConstructor11643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compDocConstructor11645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_compElemConstructor11674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_qName_in_compElemConstructor11677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor11681 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_compElemConstructor11683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor11685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor11704 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782749280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_contentExpr_in_compElemConstructor11706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor11709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_contentExpr11742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_compAttrConstructor11787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_qName_in_compAttrConstructor11790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor11795 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor11797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor11799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor11819 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782749280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor11821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor11824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_compTextConstructor11860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compTextConstructor11862 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_compTextConstructor11864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compTextConstructor11866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_compCommentConstructor11890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compCommentConstructor11892 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_compCommentConstructor11894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compCommentConstructor11896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor11925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_NCName_in_compPIConstructor11928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor11933 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782709280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_compPIConstructor11935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor11937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor11957 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x6782749280000015L,0x0000000000048013L});
    public static final BitSet FOLLOW_expr_in_compPIConstructor11959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor11962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_synpred12229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000380000000000L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_synpred12231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_synpred29054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLONSi_in_synpred29056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_NCName_in_synpred29058 = new BitSet(new long[]{0x0000000000000002L});
>>>>>>> .r234

}