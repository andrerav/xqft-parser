// $ANTLR 3.0.1 etc/XQFT.g 2007-12-07 16:58:45

	package no.ntnu.xqft.parse;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class XQFTParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "ANY", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BY", "BOUNDARYSPACE", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "CONTENT", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIACRITICS", "DIFFERENT", "DISTANCE", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "ENCODING", "END", "ENTIRE", "EMPTY", "EMPTY_SEQUENCE", "EQ", "EVERY", "EXACTLY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FROM", "FTAND", "FTCONTAINS", "FTNOT", "FTOPTION", "FTOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSENSITIVE", "INSTANCE", "INTERSECT", "IS", "ITEM", "LANGUAGE", "LAX", "LE", "LEAST", "LET", "LEVELS", "LOWERCASE", "LT", "MOD", "MODULE", "MOST", "NAMESPACE", "NE", "NODE", "NOINHERIT", "NOPRESERVE", "NOT", "OCCURS", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARAGRAPH", "PARAGRAPHS", "PARENT", "PHRASE", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RELATIONSHIP", "RETURN", "SAME", "SATISFIES", "SCHEMA", "SCHEMAATTRIBUTE", "SCHEMAELEMENT", "SCORE", "SELF", "SENSITIVE", "SENTENCES", "SENTENCE", "SOME", "STABLE", "START", "STEMMING", "STOP", "STRICT", "STRIP", "TEXT", "THESAURUS", "THEN", "TIMES", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "UPPERCASE", "VALIDATE", "VARIABLE", "VERSION", "WEIGHT", "WHERE", "WILDCARDS", "WINDOW", "WITH", "WITHOUT", "WORD", "WORDS", "XQUERY", "AST_FORCLAUSE", "AST_LETCLAUSE", "AST_ORDERBYCLAUSE", "AST_WHERECLAUSE", "AST_RETURNCLAUSE", "AST_QUANTIFIEDEXPR", "AST_TYPESWITCHEXPR", "AST_CASECLAUSE", "AST_IFEXPR", "AST_OREXPR", "AST_ANDEXPR", "StringLiteral", "SEMICOLONSi", "NCName", "EQSi", "COMMASi", "DOLLARSi", "ASSIGNSi", "COLONSi", "LPARSi", "RPARSi", "LBRACESi", "RBRACSi", "QUESTIONSi", "STARSi", "PLUSSi", "MINUSSi", "PIPESi", "NEQSi", "LTSi", "LTOREQSi", "GTSi", "GTOREQSi", "NODEBEFORESi", "NODEAFTERSi", "IntegerLiteral", "DecimalLiteral", "DoubleLiteral", "LPRAGSi", "PragmaContents", "RPRAGSi", "DBLSLASHSi", "SLASHSi", "DBLCOLONSi", "DOTDOTSi", "ATSi", "LBRACKSi", "RBRACKSi", "DOTSi", "RSELFTERMSi", "LENDTAGSi", "QUOTSi", "QuotAttributeContent", "APOSSi", "AposAttributeContent", "ElementContent", "LCDATASi", "CDataContents", "RCDATASi", "LCOMMENTSi", "DirCommentContent", "RCOMMENTSi", "LPISi", "PiTarget", "DirPiContents", "RPISi", "CDataSectionLEX", "DirPIConstructor", "DirCommentConstLEX", "PragmaLEX", "Comment", "NumberLEX", "LexSigns", "S", "LexLiterals", "TOKENSWITCH", "PredefinedEntityRef", "CharRef", "AMPERSi", "QuotAttrContentChar", "AposAttrContentChar", "ElementContentChar", "CREFDECSi", "CREFHEXSi", "NotChar", "Name", "Letter", "UNDERSCORESi", "NameChar", "Digit", "CombiningChar", "Extender", "SHARPSi", "LXQCOMMENTSi", "RXQCOMMENTSi", "Digits", "NCNameStartChar", "NCNameChar", "EXCLSi", "BACKSLASHSi", "ExtraChar", "BaseChar", "Ideographic", "CleanChar", "Char"
    };
    public static final int FUNCTION=57;
    public static final int AST_FORCLAUSE=144;
    public static final int MOD=79;
    public static final int LPISi=206;
    public static final int CREFHEXSi=227;
    public static final int NOT=87;
    public static final int EXCEPT=46;
    public static final int EOF=-1;
    public static final int AST_IFEXPR=152;
    public static final int PragmaContents=183;
    public static final int BaseChar=245;
    public static final int Ideographic=246;
    public static final int DISTANCE=32;
    public static final int IMPORT=63;
    public static final int ASSIGNSi=161;
    public static final int CREFDECSi=226;
    public static final int SENTENCE=114;
    public static final int PRECEDING=99;
    public static final int WORDS=142;
    public static final int NumberLEX=215;
    public static final int RETURN=104;
    public static final int ELEMENT=36;
    public static final int RPARSi=164;
    public static final int EQ=43;
    public static final int AST_CASECLAUSE=151;
    public static final int DOLLARSi=160;
    public static final int DIACRITICS=30;
    public static final int DBLCOLONSi=187;
    public static final int CHILD=19;
    public static final int GE=58;
    public static final int STRICT=120;
    public static final int PRESERVE=101;
    public static final int UNDERSCORESi=231;
    public static final int ELSE=37;
    public static final int RCDATASi=202;
    public static final int TYPESWITCH=128;
    public static final int STOP=119;
    public static final int CONTENT=23;
    public static final int S=217;
    public static final int FTOR=56;
    public static final int EMPTY=41;
    public static final int INTERSECT=68;
    public static final int MINUSSi=170;
    public static final int FTAND=52;
    public static final int LANGUAGE=71;
    public static final int LOWERCASE=77;
    public static final int LPRAGSi=182;
    public static final int INSENSITIVE=66;
    public static final int APOSSi=197;
    public static final int AST_TYPESWITCHEXPR=150;
    public static final int RSELFTERMSi=193;
    public static final int LBRACKSi=190;
    public static final int GT=60;
    public static final int END=39;
    public static final int DoubleLiteral=181;
    public static final int QUOTSi=195;
    public static final int AST_ANDEXPR=154;
    public static final int LexLiterals=218;
    public static final int DirCommentContent=204;
    public static final int CharRef=221;
    public static final int OPTION=90;
    public static final int Extender=235;
    public static final int OCCURS=88;
    public static final int THESAURUS=123;
    public static final int SATISFIES=106;
    public static final int VERSION=134;
    public static final int RXQCOMMENTSi=238;
    public static final int IDIV=61;
    public static final int ASCENDING=10;
    public static final int ExtraChar=244;
    public static final int AT=11;
    public static final int AS=9;
    public static final int EMPTY_SEQUENCE=42;
    public static final int PARENT=97;
    public static final int CONSTRUCTION=22;
    public static final int ATSi=189;
    public static final int THEN=124;
    public static final int DOCUMENT=34;
    public static final int DBLSLASHSi=185;
    public static final int COLLATION=20;
    public static final int LCOMMENTSi=203;
    public static final int ANCESTOR=6;
    public static final int AMPERSi=222;
    public static final int CleanChar=247;
    public static final int ElementContent=199;
    public static final int CASTABLE=18;
    public static final int MOST=81;
    public static final int EQSi=158;
    public static final int BY=14;
    public static final int NODEBEFORESi=177;
    public static final int DOTSi=192;
    public static final int NCNameChar=241;
    public static final int ITEM=70;
    public static final int TO=126;
    public static final int INHERIT=65;
    public static final int ANCESTOR_OR_SELF=7;
    public static final int DOTDOTSi=188;
    public static final int STEMMING=118;
    public static final int AST_WHERECLAUSE=147;
    public static final int LTOREQSi=174;
    public static final int NotChar=228;
    public static final int DirPIConstructor=211;
    public static final int TEXT=122;
    public static final int MODULE=80;
    public static final int FTNOT=54;
    public static final int ORDERED=93;
    public static final int SAME=105;
    public static final int UNION=129;
    public static final int FOLLOWING_SIBLING=49;
    public static final int StringLiteral=155;
    public static final int SCHEMA=107;
    public static final int COLONSi=162;
    public static final int PiTarget=207;
    public static final int ENTIRE=40;
    public static final int INSTANCE=67;
    public static final int VALIDATE=132;
    public static final int WILDCARDS=137;
    public static final int NOINHERIT=85;
    public static final int DECLARE=25;
    public static final int START=117;
    public static final int IntegerLiteral=179;
    public static final int DIV=33;
    public static final int CombiningChar=234;
    public static final int DESCENDING=29;
    public static final int SELF=111;
    public static final int RPRAGSi=184;
    public static final int NEQSi=172;
    public static final int CAST=17;
    public static final int SENTENCES=113;
    public static final int EXTERNAL=47;
    public static final int LT=78;
    public static final int RBRACKSi=191;
    public static final int QUESTIONSi=167;
    public static final int BACKSLASHSi=243;
    public static final int AST_LETCLAUSE=145;
    public static final int CASE=16;
    public static final int ENCODING=38;
    public static final int RCOMMENTSi=205;
    public static final int DIFFERENT=31;
    public static final int PLUSSi=169;
    public static final int PragmaLEX=213;
    public static final int DOCUMENT_NODE=35;
    public static final int SCHEMAATTRIBUTE=108;
    public static final int LXQCOMMENTSi=237;
    public static final int SEMICOLONSi=156;
    public static final int WORD=141;
    public static final int SHARPSi=236;
    public static final int UPPERCASE=131;
    public static final int Comment=214;
    public static final int Char=248;
    public static final int Digits=239;
    public static final int QuotAttrContentChar=223;
    public static final int FTOPTION=55;
    public static final int AposAttributeContent=198;
    public static final int COMMENT=21;
    public static final int NE=83;
    public static final int CDataSectionLEX=210;
    public static final int BOUNDARYSPACE=15;
    public static final int NODE=84;
    public static final int CDataContents=201;
    public static final int AST_QUANTIFIEDEXPR=149;
    public static final int AposAttrContentChar=224;
    public static final int GREATEST=59;
    public static final int WITHOUT=140;
    public static final int EVERY=44;
    public static final int SENSITIVE=112;
    public static final int PROCESSING_INSTRUCTION=102;
    public static final int WEIGHT=135;
    public static final int OF=89;
    public static final int LTSi=173;
    public static final int NODEAFTERSi=178;
    public static final int RELATIONSHIP=103;
    public static final int NAMESPACE=82;
    public static final int LCDATASi=200;
    public static final int LBRACESi=165;
    public static final int VARIABLE=133;
    public static final int DESCENDANT_OR_SELF=28;
    public static final int BASE_URI=13;
    public static final int NOPRESERVE=86;
    public static final int DirPiContents=208;
    public static final int OR=91;
    public static final int AST_OREXPR=153;
    public static final int LPARSi=163;
    public static final int STARSi=168;
    public static final int QuotAttributeContent=196;
    public static final int RPISi=209;
    public static final int FROM=51;
    public static final int PRECEDING_SIBLING=100;
    public static final int Letter=230;
    public static final int NCName=157;
    public static final int WHERE=136;
    public static final int LAX=72;
    public static final int AST_ORDERBYCLAUSE=146;
    public static final int ORDER=92;
    public static final int ATTRIBUTE=12;
    public static final int FOR=50;
    public static final int EXCLSi=242;
    public static final int FOLLOWING=48;
    public static final int AND=8;
    public static final int FTCONTAINS=53;
    public static final int IF=62;
    public static final int SCHEMAELEMENT=109;
    public static final int IN=64;
    public static final int PARAGRAPH=95;
    public static final int COPY_NAMESPACES=24;
    public static final int IS=69;
    public static final int SOME=115;
    public static final int ALL=4;
    public static final int STRIP=121;
    public static final int STABLE=116;
    public static final int PIPESi=171;
    public static final int WITH=139;
    public static final int NCNameStartChar=240;
    public static final int LENDTAGSi=194;
    public static final int RBRACSi=166;
    public static final int GTSi=175;
    public static final int XQUERY=143;
    public static final int EXACTLY=45;
    public static final int DEFAULT=26;
    public static final int DESCENDANT=27;
    public static final int NameChar=232;
    public static final int COMMASi=159;
    public static final int SLASHSi=186;
    public static final int Digit=233;
    public static final int DecimalLiteral=180;
    public static final int GTOREQSi=176;
    public static final int UNORDERED=130;
    public static final int PHRASE=98;
    public static final int TOKENSWITCH=219;
    public static final int ElementContentChar=225;
    public static final int ANY=5;
    public static final int SCORE=110;
    public static final int AST_RETURNCLAUSE=148;
    public static final int LexSigns=216;
    public static final int ORDERING=94;
    public static final int PredefinedEntityRef=220;
    public static final int Name=229;
    public static final int LEAST=74;
    public static final int WINDOW=138;
    public static final int LEVELS=76;
    public static final int PARAGRAPHS=96;
    public static final int TIMES=125;
    public static final int DirCommentConstLEX=212;
    public static final int LET=75;
    public static final int LE=73;
    public static final int TREAT=127;

        public XQFTParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[180+1];
         }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "etc/XQFT.g"; }


    	
    	/* Root scope */
    	//Scope currentScope = new Scope();	   // @init-ting her ogsaa
    	XQFTLexer lexer;
    	/*
    	public void setTokenStream(TokenStream input) {
    				String inputz =  "<html> \n" +                                                   //1
                            "{ \n"+                                                         //2
                            "for $act in doc(\"hamlet.xml\")//ACT\n" +                      //3
                            "let $speakers := distinct-values($act//SPEAKER)\n"+            //4
                            "return\n"+                                                     //5
                            "<span>\n"+                                                     //6
                            "<h1>{ $act/TITLE/text() }</h1>\n"+                             //7
                            "<ul>\n"+                                                       //8
                            "{\n"+                                                          //9
                            "for $speaker in $speakers\n"+                                  //10
                            "return <li>{ $speaker }</li>\n"+                               //11
                            "}\n"+                                                          //12
                            "</ul>\n"+                                                      //13
                            "</span>\n"+                                                    //14
                            "}\n"+                                                          //15
                            "</html>\n";                                                    //16
                            	CharStream cs = new ANTLRStringStream(inputz);
    		lexer = (XQFTLexer)input.getTokenSource();
    		lexer.setCharStream(cs);
    		UnbufferedCommonTokenStream tokenz = new UnbufferedCommonTokenStream();
    		tokenz.setTokenSource(lexer);
    		super.setTokenStream(tokenz);
     	
    	}
    */
    	public void setLexer(XQFTLexer lex)
    	{
    		this.lexer=lex;
    	}

        protected void mismatch(IntStream input, int ttype, BitSet follow)
            throws RecognitionException
        {
            throw new MismatchedTokenException(ttype, input);
        }

        public void recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
            throws RecognitionException
        {
            throw e;
        }



    public static class module_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start module
    // etc/XQFT.g:278:1: module : ( versionDecl )? ( libraryModule | mainModule ) ;
    public final module_return module() throws RecognitionException {
        module_return retval = new module_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        versionDecl_return versionDecl1 = null;

        libraryModule_return libraryModule2 = null;

        mainModule_return mainModule3 = null;



        try {
            // etc/XQFT.g:278:32: ( ( versionDecl )? ( libraryModule | mainModule ) )
            // etc/XQFT.g:278:34: ( versionDecl )? ( libraryModule | mainModule )
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:278:34: ( versionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // etc/XQFT.g:278:34: versionDecl
                    {
                    pushFollow(FOLLOW_versionDecl_in_module568);
                    versionDecl1=versionDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, versionDecl1.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:278:47: ( libraryModule | mainModule )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                alt2=1;
            }
            else if ( ((LA2_0>=ANCESTOR && LA2_0<=ANCESTOR_OR_SELF)||LA2_0==ATTRIBUTE||LA2_0==CHILD||LA2_0==COMMENT||LA2_0==DECLARE||(LA2_0>=DESCENDANT && LA2_0<=DESCENDANT_OR_SELF)||(LA2_0>=DOCUMENT && LA2_0<=ELEMENT)||LA2_0==EVERY||(LA2_0>=FOLLOWING && LA2_0<=FOR)||(LA2_0>=IF && LA2_0<=IMPORT)||LA2_0==LET||LA2_0==NODE||LA2_0==ORDERED||LA2_0==PARENT||(LA2_0>=PRECEDING && LA2_0<=PRECEDING_SIBLING)||LA2_0==PROCESSING_INSTRUCTION||(LA2_0>=SCHEMAATTRIBUTE && LA2_0<=SCHEMAELEMENT)||LA2_0==SELF||LA2_0==SOME||LA2_0==TEXT||LA2_0==TYPESWITCH||LA2_0==UNORDERED||LA2_0==VALIDATE||LA2_0==StringLiteral||LA2_0==NCName||LA2_0==DOLLARSi||LA2_0==LPARSi||(LA2_0>=STARSi && LA2_0<=MINUSSi)||LA2_0==LTSi||(LA2_0>=IntegerLiteral && LA2_0<=LPRAGSi)||(LA2_0>=DBLSLASHSi && LA2_0<=SLASHSi)||(LA2_0>=DOTDOTSi && LA2_0<=ATSi)||LA2_0==DOTSi||LA2_0==LCOMMENTSi||LA2_0==LPISi) ) {
                alt2=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("278:47: ( libraryModule | mainModule )", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // etc/XQFT.g:278:48: libraryModule
                    {
                    pushFollow(FOLLOW_libraryModule_in_module572);
                    libraryModule2=libraryModule();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, libraryModule2.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:278:64: mainModule
                    {
                    pushFollow(FOLLOW_mainModule_in_module576);
                    mainModule3=mainModule();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, mainModule3.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end module

    public static class versionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start versionDecl
    // etc/XQFT.g:280:2: versionDecl : XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? separator ;
    public final versionDecl_return versionDecl() throws RecognitionException {
        versionDecl_return retval = new versionDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token XQUERY4=null;
        Token VERSION5=null;
        Token StringLiteral6=null;
        Token ENCODING7=null;
        Token StringLiteral8=null;
        separator_return separator9 = null;


        CommonTree XQUERY4_tree=null;
        CommonTree VERSION5_tree=null;
        CommonTree StringLiteral6_tree=null;
        CommonTree ENCODING7_tree=null;
        CommonTree StringLiteral8_tree=null;

        try {
            // etc/XQFT.g:280:33: ( XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? separator )
            // etc/XQFT.g:280:35: XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? separator
            {
            root_0 = (CommonTree)adaptor.nil();

            XQUERY4=(Token)input.LT(1);
            match(input,XQUERY,FOLLOW_XQUERY_in_versionDecl605); if (failed) return retval;
            if ( backtracking==0 ) {
            XQUERY4_tree = (CommonTree)adaptor.create(XQUERY4);
            adaptor.addChild(root_0, XQUERY4_tree);
            }
            VERSION5=(Token)input.LT(1);
            match(input,VERSION,FOLLOW_VERSION_in_versionDecl607); if (failed) return retval;
            if ( backtracking==0 ) {
            VERSION5_tree = (CommonTree)adaptor.create(VERSION5);
            adaptor.addChild(root_0, VERSION5_tree);
            }
            StringLiteral6=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_versionDecl609); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral6_tree = (CommonTree)adaptor.create(StringLiteral6);
            adaptor.addChild(root_0, StringLiteral6_tree);
            }
            // etc/XQFT.g:280:64: ( ENCODING StringLiteral )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==ENCODING) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // etc/XQFT.g:280:65: ENCODING StringLiteral
                    {
                    ENCODING7=(Token)input.LT(1);
                    match(input,ENCODING,FOLLOW_ENCODING_in_versionDecl612); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ENCODING7_tree = (CommonTree)adaptor.create(ENCODING7);
                    adaptor.addChild(root_0, ENCODING7_tree);
                    }
                    StringLiteral8=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_versionDecl614); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral8_tree = (CommonTree)adaptor.create(StringLiteral8);
                    adaptor.addChild(root_0, StringLiteral8_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_separator_in_versionDecl618);
            separator9=separator();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, separator9.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end versionDecl

    public static class separator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start separator
    // etc/XQFT.g:281:3: separator : SEMICOLONSi ;
    public final separator_return separator() throws RecognitionException {
        separator_return retval = new separator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SEMICOLONSi10=null;

        CommonTree SEMICOLONSi10_tree=null;

        try {
            // etc/XQFT.g:281:34: ( SEMICOLONSi )
            // etc/XQFT.g:281:36: SEMICOLONSi
            {
            root_0 = (CommonTree)adaptor.nil();

            SEMICOLONSi10=(Token)input.LT(1);
            match(input,SEMICOLONSi,FOLLOW_SEMICOLONSi_in_separator648); if (failed) return retval;
            if ( backtracking==0 ) {
            SEMICOLONSi10_tree = (CommonTree)adaptor.create(SEMICOLONSi10);
            adaptor.addChild(root_0, SEMICOLONSi10_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end separator

    public static class libraryModule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start libraryModule
    // etc/XQFT.g:283:2: libraryModule : moduleDecl prolog ;
    public final libraryModule_return libraryModule() throws RecognitionException {
        libraryModule_return retval = new libraryModule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        moduleDecl_return moduleDecl11 = null;

        prolog_return prolog12 = null;



        try {
            // etc/XQFT.g:283:33: ( moduleDecl prolog )
            // etc/XQFT.g:283:35: moduleDecl prolog
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_moduleDecl_in_libraryModule676);
            moduleDecl11=moduleDecl();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, moduleDecl11.getTree());
            pushFollow(FOLLOW_prolog_in_libraryModule678);
            prolog12=prolog();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, prolog12.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end libraryModule

    public static class moduleDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start moduleDecl
    // etc/XQFT.g:284:3: moduleDecl : MODULE NAMESPACE NCName EQSi uriLiteral separator ;
    public final moduleDecl_return moduleDecl() throws RecognitionException {
        moduleDecl_return retval = new moduleDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MODULE13=null;
        Token NAMESPACE14=null;
        Token NCName15=null;
        Token EQSi16=null;
        uriLiteral_return uriLiteral17 = null;

        separator_return separator18 = null;


        CommonTree MODULE13_tree=null;
        CommonTree NAMESPACE14_tree=null;
        CommonTree NCName15_tree=null;
        CommonTree EQSi16_tree=null;

        try {
            // etc/XQFT.g:284:34: ( MODULE NAMESPACE NCName EQSi uriLiteral separator )
            // etc/XQFT.g:284:36: MODULE NAMESPACE NCName EQSi uriLiteral separator
            {
            root_0 = (CommonTree)adaptor.nil();

            MODULE13=(Token)input.LT(1);
            match(input,MODULE,FOLLOW_MODULE_in_moduleDecl707); if (failed) return retval;
            if ( backtracking==0 ) {
            MODULE13_tree = (CommonTree)adaptor.create(MODULE13);
            adaptor.addChild(root_0, MODULE13_tree);
            }
            NAMESPACE14=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleDecl709); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE14_tree = (CommonTree)adaptor.create(NAMESPACE14);
            adaptor.addChild(root_0, NAMESPACE14_tree);
            }
            NCName15=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_moduleDecl711); if (failed) return retval;
            if ( backtracking==0 ) {
            NCName15_tree = (CommonTree)adaptor.create(NCName15);
            adaptor.addChild(root_0, NCName15_tree);
            }
            EQSi16=(Token)input.LT(1);
            match(input,EQSi,FOLLOW_EQSi_in_moduleDecl713); if (failed) return retval;
            if ( backtracking==0 ) {
            EQSi16_tree = (CommonTree)adaptor.create(EQSi16);
            adaptor.addChild(root_0, EQSi16_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_moduleDecl715);
            uriLiteral17=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral17.getTree());
            pushFollow(FOLLOW_separator_in_moduleDecl717);
            separator18=separator();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, separator18.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end moduleDecl

    public static class uriLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uriLiteral
    // etc/XQFT.g:285:4: uriLiteral : StringLiteral ;
    public final uriLiteral_return uriLiteral() throws RecognitionException {
        uriLiteral_return retval = new uriLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token StringLiteral19=null;

        CommonTree StringLiteral19_tree=null;

        try {
            // etc/XQFT.g:285:35: ( StringLiteral )
            // etc/XQFT.g:285:37: StringLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            StringLiteral19=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_uriLiteral747); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral19_tree = (CommonTree)adaptor.create(StringLiteral19);
            adaptor.addChild(root_0, StringLiteral19_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end uriLiteral

    public static class mainModule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start mainModule
    // etc/XQFT.g:288:2: mainModule : prolog queryBody ;
    public final mainModule_return mainModule() throws RecognitionException {
        mainModule_return retval = new mainModule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        prolog_return prolog20 = null;

        queryBody_return queryBody21 = null;



        try {
            // etc/XQFT.g:288:33: ( prolog queryBody )
            // etc/XQFT.g:288:35: prolog queryBody
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_prolog_in_mainModule779);
            prolog20=prolog();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, prolog20.getTree());
            pushFollow(FOLLOW_queryBody_in_mainModule781);
            queryBody21=queryBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, queryBody21.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end mainModule

    public static class queryBody_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryBody
    // etc/XQFT.g:290:3: queryBody : expr ;
    public final queryBody_return queryBody() throws RecognitionException {
        queryBody_return retval = new queryBody_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expr_return expr22 = null;



        try {
            // etc/XQFT.g:290:34: ( expr )
            // etc/XQFT.g:290:36: expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_queryBody812);
            expr22=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr22.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryBody

    public static class expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expr
    // etc/XQFT.g:291:4: expr : exprSingle ( COMMASi exprSingle )* ;
    public final expr_return expr() throws RecognitionException {
        expr_return retval = new expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMASi24=null;
        exprSingle_return exprSingle23 = null;

        exprSingle_return exprSingle25 = null;


        CommonTree COMMASi24_tree=null;

        try {
            // etc/XQFT.g:291:35: ( exprSingle ( COMMASi exprSingle )* )
            // etc/XQFT.g:291:37: exprSingle ( COMMASi exprSingle )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_expr848);
            exprSingle23=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle23.getTree());
            // etc/XQFT.g:291:48: ( COMMASi exprSingle )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==COMMASi) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // etc/XQFT.g:291:49: COMMASi exprSingle
            	    {
            	    COMMASi24=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_expr851); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMASi24_tree = (CommonTree)adaptor.create(COMMASi24);
            	    adaptor.addChild(root_0, COMMASi24_tree);
            	    }
            	    pushFollow(FOLLOW_exprSingle_in_expr853);
            	    exprSingle25=exprSingle();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle25.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr

    public static class prolog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start prolog
    // etc/XQFT.g:297:1: prolog : ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )* ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )* ;
    public final prolog_return prolog() throws RecognitionException {
        prolog_return retval = new prolog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        defaultNamespaceDecl_return defaultNamespaceDecl26 = null;

        setter_return setter27 = null;

        namespaceDecl_return namespaceDecl28 = null;

        importStmt_return importStmt29 = null;

        separator_return separator30 = null;

        varDecl_return varDecl31 = null;

        functionDecl_return functionDecl32 = null;

        optionDecl_return optionDecl33 = null;

        ftOptionDecl_return ftOptionDecl34 = null;

        separator_return separator35 = null;



        try {
            // etc/XQFT.g:297:32: ( ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )* ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )* )
            // etc/XQFT.g:297:35: ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )* ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:297:35: ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==DECLARE) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==BASE_URI||LA6_1==BOUNDARYSPACE||LA6_1==CONSTRUCTION||LA6_1==COPY_NAMESPACES||LA6_1==DEFAULT||LA6_1==NAMESPACE||LA6_1==ORDERING) ) {
                        alt6=1;
                    }


                }
                else if ( (LA6_0==IMPORT) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // etc/XQFT.g:298:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator
            	    {
            	    // etc/XQFT.g:298:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )
            	    int alt5=4;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0==DECLARE) ) {
            	        switch ( input.LA(2) ) {
            	        case BASE_URI:
            	        case BOUNDARYSPACE:
            	        case CONSTRUCTION:
            	        case COPY_NAMESPACES:
            	        case ORDERING:
            	            {
            	            alt5=2;
            	            }
            	            break;
            	        case DEFAULT:
            	            {
            	            int LA5_4 = input.LA(3);

            	            if ( (LA5_4==COLLATION||LA5_4==ORDER) ) {
            	                alt5=2;
            	            }
            	            else if ( (LA5_4==ELEMENT||LA5_4==FUNCTION) ) {
            	                alt5=1;
            	            }
            	            else {
            	                if (backtracking>0) {failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("298:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 4, input);

            	                throw nvae;
            	            }
            	            }
            	            break;
            	        case NAMESPACE:
            	            {
            	            alt5=3;
            	            }
            	            break;
            	        default:
            	            if (backtracking>0) {failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("298:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 1, input);

            	            throw nvae;
            	        }

            	    }
            	    else if ( (LA5_0==IMPORT) ) {
            	        alt5=4;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("298:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt5) {
            	        case 1 :
            	            // etc/XQFT.g:298:13: defaultNamespaceDecl
            	            {
            	            pushFollow(FOLLOW_defaultNamespaceDecl_in_prolog918);
            	            defaultNamespaceDecl26=defaultNamespaceDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, defaultNamespaceDecl26.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // etc/XQFT.g:298:36: setter
            	            {
            	            pushFollow(FOLLOW_setter_in_prolog922);
            	            setter27=setter();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, setter27.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // etc/XQFT.g:298:45: namespaceDecl
            	            {
            	            pushFollow(FOLLOW_namespaceDecl_in_prolog926);
            	            namespaceDecl28=namespaceDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, namespaceDecl28.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // etc/XQFT.g:298:61: importStmt
            	            {
            	            pushFollow(FOLLOW_importStmt_in_prolog930);
            	            importStmt29=importStmt();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, importStmt29.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_separator_in_prolog945);
            	    separator30=separator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, separator30.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // etc/XQFT.g:301:12: ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==DECLARE) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // etc/XQFT.g:302:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator
            	    {
            	    // etc/XQFT.g:302:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl )
            	    int alt7=4;
            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0==DECLARE) ) {
            	        switch ( input.LA(2) ) {
            	        case VARIABLE:
            	            {
            	            alt7=1;
            	            }
            	            break;
            	        case FTOPTION:
            	            {
            	            alt7=4;
            	            }
            	            break;
            	        case FUNCTION:
            	            {
            	            alt7=2;
            	            }
            	            break;
            	        case OPTION:
            	            {
            	            alt7=3;
            	            }
            	            break;
            	        default:
            	            if (backtracking>0) {failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("302:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl )", 7, 1, input);

            	            throw nvae;
            	        }

            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("302:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl )", 7, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt7) {
            	        case 1 :
            	            // etc/XQFT.g:302:13: varDecl
            	            {
            	            pushFollow(FOLLOW_varDecl_in_prolog987);
            	            varDecl31=varDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, varDecl31.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // etc/XQFT.g:302:23: functionDecl
            	            {
            	            pushFollow(FOLLOW_functionDecl_in_prolog991);
            	            functionDecl32=functionDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, functionDecl32.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // etc/XQFT.g:302:38: optionDecl
            	            {
            	            pushFollow(FOLLOW_optionDecl_in_prolog995);
            	            optionDecl33=optionDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, optionDecl33.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // etc/XQFT.g:302:51: ftOptionDecl
            	            {
            	            pushFollow(FOLLOW_ftOptionDecl_in_prolog999);
            	            ftOptionDecl34=ftOptionDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, ftOptionDecl34.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_separator_in_prolog1013);
            	    separator35=separator();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, separator35.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end prolog

    public static class defaultNamespaceDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defaultNamespaceDecl
    // etc/XQFT.g:307:1: defaultNamespaceDecl : DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral ;
    public final defaultNamespaceDecl_return defaultNamespaceDecl() throws RecognitionException {
        defaultNamespaceDecl_return retval = new defaultNamespaceDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE36=null;
        Token DEFAULT37=null;
        Token set38=null;
        Token NAMESPACE39=null;
        uriLiteral_return uriLiteral40 = null;


        CommonTree DECLARE36_tree=null;
        CommonTree DEFAULT37_tree=null;
        CommonTree set38_tree=null;
        CommonTree NAMESPACE39_tree=null;

        try {
            // etc/XQFT.g:307:32: ( DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral )
            // etc/XQFT.g:307:34: DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE36=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_defaultNamespaceDecl1046); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE36_tree = (CommonTree)adaptor.create(DECLARE36);
            adaptor.addChild(root_0, DECLARE36_tree);
            }
            DEFAULT37=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultNamespaceDecl1048); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT37_tree = (CommonTree)adaptor.create(DEFAULT37);
            adaptor.addChild(root_0, DEFAULT37_tree);
            }
            set38=(Token)input.LT(1);
            if ( input.LA(1)==ELEMENT||input.LA(1)==FUNCTION ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set38));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_defaultNamespaceDecl1050);    throw mse;
            }

            NAMESPACE39=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_defaultNamespaceDecl1058); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE39_tree = (CommonTree)adaptor.create(NAMESPACE39);
            adaptor.addChild(root_0, NAMESPACE39_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_defaultNamespaceDecl1060);
            uriLiteral40=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral40.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end defaultNamespaceDecl

    public static class setter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start setter
    // etc/XQFT.g:309:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );
    public final setter_return setter() throws RecognitionException {
        setter_return retval = new setter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        boundarySpaceDecl_return boundarySpaceDecl41 = null;

        defaultCollationDecl_return defaultCollationDecl42 = null;

        baseURIDecl_return baseURIDecl43 = null;

        constructionDecl_return constructionDecl44 = null;

        orderingModeDecl_return orderingModeDecl45 = null;

        emptyOrderDecl_return emptyOrderDecl46 = null;

        copyNamespacesDecl_return copyNamespacesDecl47 = null;



        try {
            // etc/XQFT.g:309:32: ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl )
            int alt9=7;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==DECLARE) ) {
                switch ( input.LA(2) ) {
                case CONSTRUCTION:
                    {
                    alt9=4;
                    }
                    break;
                case BASE_URI:
                    {
                    alt9=3;
                    }
                    break;
                case DEFAULT:
                    {
                    int LA9_4 = input.LA(3);

                    if ( (LA9_4==ORDER) ) {
                        alt9=6;
                    }
                    else if ( (LA9_4==COLLATION) ) {
                        alt9=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("309:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case ORDERING:
                    {
                    alt9=5;
                    }
                    break;
                case BOUNDARYSPACE:
                    {
                    alt9=1;
                    }
                    break;
                case COPY_NAMESPACES:
                    {
                    alt9=7;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("309:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 1, input);

                    throw nvae;
                }

            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("309:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // etc/XQFT.g:309:34: boundarySpaceDecl
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_boundarySpaceDecl_in_setter1092);
                    boundarySpaceDecl41=boundarySpaceDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, boundarySpaceDecl41.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:310:13: defaultCollationDecl
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_defaultCollationDecl_in_setter1107);
                    defaultCollationDecl42=defaultCollationDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, defaultCollationDecl42.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:311:13: baseURIDecl
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_baseURIDecl_in_setter1122);
                    baseURIDecl43=baseURIDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, baseURIDecl43.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:312:13: constructionDecl
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constructionDecl_in_setter1137);
                    constructionDecl44=constructionDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, constructionDecl44.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:313:13: orderingModeDecl
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_orderingModeDecl_in_setter1152);
                    orderingModeDecl45=orderingModeDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orderingModeDecl45.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:314:13: emptyOrderDecl
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_emptyOrderDecl_in_setter1167);
                    emptyOrderDecl46=emptyOrderDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, emptyOrderDecl46.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:315:13: copyNamespacesDecl
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_copyNamespacesDecl_in_setter1182);
                    copyNamespacesDecl47=copyNamespacesDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, copyNamespacesDecl47.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end setter

    public static class boundarySpaceDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start boundarySpaceDecl
    // etc/XQFT.g:316:2: boundarySpaceDecl : DECLARE BOUNDARYSPACE ( PRESERVE | STRIP ) ;
    public final boundarySpaceDecl_return boundarySpaceDecl() throws RecognitionException {
        boundarySpaceDecl_return retval = new boundarySpaceDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE48=null;
        Token BOUNDARYSPACE49=null;
        Token set50=null;

        CommonTree DECLARE48_tree=null;
        CommonTree BOUNDARYSPACE49_tree=null;
        CommonTree set50_tree=null;

        try {
            // etc/XQFT.g:316:33: ( DECLARE BOUNDARYSPACE ( PRESERVE | STRIP ) )
            // etc/XQFT.g:316:35: DECLARE BOUNDARYSPACE ( PRESERVE | STRIP )
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE48=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_boundarySpaceDecl1203); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE48_tree = (CommonTree)adaptor.create(DECLARE48);
            adaptor.addChild(root_0, DECLARE48_tree);
            }
            BOUNDARYSPACE49=(Token)input.LT(1);
            match(input,BOUNDARYSPACE,FOLLOW_BOUNDARYSPACE_in_boundarySpaceDecl1205); if (failed) return retval;
            if ( backtracking==0 ) {
            BOUNDARYSPACE49_tree = (CommonTree)adaptor.create(BOUNDARYSPACE49);
            adaptor.addChild(root_0, BOUNDARYSPACE49_tree);
            }
            set50=(Token)input.LT(1);
            if ( input.LA(1)==PRESERVE||input.LA(1)==STRIP ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set50));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_boundarySpaceDecl1207);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end boundarySpaceDecl

    public static class defaultCollationDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defaultCollationDecl
    // etc/XQFT.g:317:2: defaultCollationDecl : DECLARE DEFAULT COLLATION uriLiteral ;
    public final defaultCollationDecl_return defaultCollationDecl() throws RecognitionException {
        defaultCollationDecl_return retval = new defaultCollationDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE51=null;
        Token DEFAULT52=null;
        Token COLLATION53=null;
        uriLiteral_return uriLiteral54 = null;


        CommonTree DECLARE51_tree=null;
        CommonTree DEFAULT52_tree=null;
        CommonTree COLLATION53_tree=null;

        try {
            // etc/XQFT.g:317:33: ( DECLARE DEFAULT COLLATION uriLiteral )
            // etc/XQFT.g:317:35: DECLARE DEFAULT COLLATION uriLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE51=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_defaultCollationDecl1231); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE51_tree = (CommonTree)adaptor.create(DECLARE51);
            adaptor.addChild(root_0, DECLARE51_tree);
            }
            DEFAULT52=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultCollationDecl1233); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT52_tree = (CommonTree)adaptor.create(DEFAULT52);
            adaptor.addChild(root_0, DEFAULT52_tree);
            }
            COLLATION53=(Token)input.LT(1);
            match(input,COLLATION,FOLLOW_COLLATION_in_defaultCollationDecl1235); if (failed) return retval;
            if ( backtracking==0 ) {
            COLLATION53_tree = (CommonTree)adaptor.create(COLLATION53);
            adaptor.addChild(root_0, COLLATION53_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_defaultCollationDecl1237);
            uriLiteral54=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral54.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end defaultCollationDecl

    public static class baseURIDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start baseURIDecl
    // etc/XQFT.g:318:2: baseURIDecl : DECLARE BASE_URI uriLiteral ;
    public final baseURIDecl_return baseURIDecl() throws RecognitionException {
        baseURIDecl_return retval = new baseURIDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE55=null;
        Token BASE_URI56=null;
        uriLiteral_return uriLiteral57 = null;


        CommonTree DECLARE55_tree=null;
        CommonTree BASE_URI56_tree=null;

        try {
            // etc/XQFT.g:318:33: ( DECLARE BASE_URI uriLiteral )
            // etc/XQFT.g:318:35: DECLARE BASE_URI uriLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE55=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_baseURIDecl1264); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE55_tree = (CommonTree)adaptor.create(DECLARE55);
            adaptor.addChild(root_0, DECLARE55_tree);
            }
            BASE_URI56=(Token)input.LT(1);
            match(input,BASE_URI,FOLLOW_BASE_URI_in_baseURIDecl1266); if (failed) return retval;
            if ( backtracking==0 ) {
            BASE_URI56_tree = (CommonTree)adaptor.create(BASE_URI56);
            adaptor.addChild(root_0, BASE_URI56_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_baseURIDecl1268);
            uriLiteral57=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral57.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end baseURIDecl

    public static class constructionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constructionDecl
    // etc/XQFT.g:319:2: constructionDecl : DECLARE CONSTRUCTION ( STRIP | PRESERVE ) ;
    public final constructionDecl_return constructionDecl() throws RecognitionException {
        constructionDecl_return retval = new constructionDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE58=null;
        Token CONSTRUCTION59=null;
        Token set60=null;

        CommonTree DECLARE58_tree=null;
        CommonTree CONSTRUCTION59_tree=null;
        CommonTree set60_tree=null;

        try {
            // etc/XQFT.g:319:33: ( DECLARE CONSTRUCTION ( STRIP | PRESERVE ) )
            // etc/XQFT.g:319:35: DECLARE CONSTRUCTION ( STRIP | PRESERVE )
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE58=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_constructionDecl1290); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE58_tree = (CommonTree)adaptor.create(DECLARE58);
            adaptor.addChild(root_0, DECLARE58_tree);
            }
            CONSTRUCTION59=(Token)input.LT(1);
            match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_constructionDecl1292); if (failed) return retval;
            if ( backtracking==0 ) {
            CONSTRUCTION59_tree = (CommonTree)adaptor.create(CONSTRUCTION59);
            adaptor.addChild(root_0, CONSTRUCTION59_tree);
            }
            set60=(Token)input.LT(1);
            if ( input.LA(1)==PRESERVE||input.LA(1)==STRIP ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set60));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_constructionDecl1294);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end constructionDecl

    public static class orderingModeDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderingModeDecl
    // etc/XQFT.g:320:2: orderingModeDecl : DECLARE ORDERING ( ORDERED | UNORDERED ) ;
    public final orderingModeDecl_return orderingModeDecl() throws RecognitionException {
        orderingModeDecl_return retval = new orderingModeDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE61=null;
        Token ORDERING62=null;
        Token set63=null;

        CommonTree DECLARE61_tree=null;
        CommonTree ORDERING62_tree=null;
        CommonTree set63_tree=null;

        try {
            // etc/XQFT.g:320:33: ( DECLARE ORDERING ( ORDERED | UNORDERED ) )
            // etc/XQFT.g:320:35: DECLARE ORDERING ( ORDERED | UNORDERED )
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE61=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_orderingModeDecl1322); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE61_tree = (CommonTree)adaptor.create(DECLARE61);
            adaptor.addChild(root_0, DECLARE61_tree);
            }
            ORDERING62=(Token)input.LT(1);
            match(input,ORDERING,FOLLOW_ORDERING_in_orderingModeDecl1324); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERING62_tree = (CommonTree)adaptor.create(ORDERING62);
            adaptor.addChild(root_0, ORDERING62_tree);
            }
            set63=(Token)input.LT(1);
            if ( input.LA(1)==ORDERED||input.LA(1)==UNORDERED ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set63));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderingModeDecl1326);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderingModeDecl

    public static class emptyOrderDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start emptyOrderDecl
    // etc/XQFT.g:321:2: emptyOrderDecl : DECLARE DEFAULT ORDER EMPTY ( GREATEST | LEAST ) ;
    public final emptyOrderDecl_return emptyOrderDecl() throws RecognitionException {
        emptyOrderDecl_return retval = new emptyOrderDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE64=null;
        Token DEFAULT65=null;
        Token ORDER66=null;
        Token EMPTY67=null;
        Token set68=null;

        CommonTree DECLARE64_tree=null;
        CommonTree DEFAULT65_tree=null;
        CommonTree ORDER66_tree=null;
        CommonTree EMPTY67_tree=null;
        CommonTree set68_tree=null;

        try {
            // etc/XQFT.g:321:33: ( DECLARE DEFAULT ORDER EMPTY ( GREATEST | LEAST ) )
            // etc/XQFT.g:321:35: DECLARE DEFAULT ORDER EMPTY ( GREATEST | LEAST )
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE64=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_emptyOrderDecl1356); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE64_tree = (CommonTree)adaptor.create(DECLARE64);
            adaptor.addChild(root_0, DECLARE64_tree);
            }
            DEFAULT65=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_emptyOrderDecl1358); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT65_tree = (CommonTree)adaptor.create(DEFAULT65);
            adaptor.addChild(root_0, DEFAULT65_tree);
            }
            ORDER66=(Token)input.LT(1);
            match(input,ORDER,FOLLOW_ORDER_in_emptyOrderDecl1360); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDER66_tree = (CommonTree)adaptor.create(ORDER66);
            adaptor.addChild(root_0, ORDER66_tree);
            }
            EMPTY67=(Token)input.LT(1);
            match(input,EMPTY,FOLLOW_EMPTY_in_emptyOrderDecl1362); if (failed) return retval;
            if ( backtracking==0 ) {
            EMPTY67_tree = (CommonTree)adaptor.create(EMPTY67);
            adaptor.addChild(root_0, EMPTY67_tree);
            }
            set68=(Token)input.LT(1);
            if ( input.LA(1)==GREATEST||input.LA(1)==LEAST ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set68));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_emptyOrderDecl1364);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end emptyOrderDecl

    public static class copyNamespacesDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start copyNamespacesDecl
    // etc/XQFT.g:322:2: copyNamespacesDecl : DECLARE COPY_NAMESPACES preserveMode COMMASi inheritMode ;
    public final copyNamespacesDecl_return copyNamespacesDecl() throws RecognitionException {
        copyNamespacesDecl_return retval = new copyNamespacesDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE69=null;
        Token COPY_NAMESPACES70=null;
        Token COMMASi72=null;
        preserveMode_return preserveMode71 = null;

        inheritMode_return inheritMode73 = null;


        CommonTree DECLARE69_tree=null;
        CommonTree COPY_NAMESPACES70_tree=null;
        CommonTree COMMASi72_tree=null;

        try {
            // etc/XQFT.g:322:33: ( DECLARE COPY_NAMESPACES preserveMode COMMASi inheritMode )
            // etc/XQFT.g:322:35: DECLARE COPY_NAMESPACES preserveMode COMMASi inheritMode
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE69=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_copyNamespacesDecl1390); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE69_tree = (CommonTree)adaptor.create(DECLARE69);
            adaptor.addChild(root_0, DECLARE69_tree);
            }
            COPY_NAMESPACES70=(Token)input.LT(1);
            match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl1392); if (failed) return retval;
            if ( backtracking==0 ) {
            COPY_NAMESPACES70_tree = (CommonTree)adaptor.create(COPY_NAMESPACES70);
            adaptor.addChild(root_0, COPY_NAMESPACES70_tree);
            }
            pushFollow(FOLLOW_preserveMode_in_copyNamespacesDecl1394);
            preserveMode71=preserveMode();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, preserveMode71.getTree());
            COMMASi72=(Token)input.LT(1);
            match(input,COMMASi,FOLLOW_COMMASi_in_copyNamespacesDecl1396); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMASi72_tree = (CommonTree)adaptor.create(COMMASi72);
            adaptor.addChild(root_0, COMMASi72_tree);
            }
            pushFollow(FOLLOW_inheritMode_in_copyNamespacesDecl1398);
            inheritMode73=inheritMode();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, inheritMode73.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end copyNamespacesDecl

    public static class preserveMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start preserveMode
    // etc/XQFT.g:323:3: preserveMode : ( PRESERVE | NOPRESERVE );
    public final preserveMode_return preserveMode() throws RecognitionException {
        preserveMode_return retval = new preserveMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set74=null;

        CommonTree set74_tree=null;

        try {
            // etc/XQFT.g:323:34: ( PRESERVE | NOPRESERVE )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set74=(Token)input.LT(1);
            if ( input.LA(1)==NOPRESERVE||input.LA(1)==PRESERVE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set74));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_preserveMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end preserveMode

    public static class inheritMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start inheritMode
    // etc/XQFT.g:324:3: inheritMode : ( INHERIT | NOINHERIT );
    public final inheritMode_return inheritMode() throws RecognitionException {
        inheritMode_return retval = new inheritMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set75=null;

        CommonTree set75_tree=null;

        try {
            // etc/XQFT.g:324:34: ( INHERIT | NOINHERIT )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set75=(Token)input.LT(1);
            if ( input.LA(1)==INHERIT||input.LA(1)==NOINHERIT ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set75));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_inheritMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end inheritMode

    public static class namespaceDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start namespaceDecl
    // etc/XQFT.g:326:1: namespaceDecl : DECLARE NAMESPACE NCName EQSi uriLiteral ;
    public final namespaceDecl_return namespaceDecl() throws RecognitionException {
        namespaceDecl_return retval = new namespaceDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE76=null;
        Token NAMESPACE77=null;
        Token NCName78=null;
        Token EQSi79=null;
        uriLiteral_return uriLiteral80 = null;


        CommonTree DECLARE76_tree=null;
        CommonTree NAMESPACE77_tree=null;
        CommonTree NCName78_tree=null;
        CommonTree EQSi79_tree=null;

        try {
            // etc/XQFT.g:326:32: ( DECLARE NAMESPACE NCName EQSi uriLiteral )
            // etc/XQFT.g:326:34: DECLARE NAMESPACE NCName EQSi uriLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE76=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_namespaceDecl1489); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE76_tree = (CommonTree)adaptor.create(DECLARE76);
            adaptor.addChild(root_0, DECLARE76_tree);
            }
            NAMESPACE77=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespaceDecl1491); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE77_tree = (CommonTree)adaptor.create(NAMESPACE77);
            adaptor.addChild(root_0, NAMESPACE77_tree);
            }
            NCName78=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_namespaceDecl1493); if (failed) return retval;
            if ( backtracking==0 ) {
            NCName78_tree = (CommonTree)adaptor.create(NCName78);
            adaptor.addChild(root_0, NCName78_tree);
            }
            EQSi79=(Token)input.LT(1);
            match(input,EQSi,FOLLOW_EQSi_in_namespaceDecl1495); if (failed) return retval;
            if ( backtracking==0 ) {
            EQSi79_tree = (CommonTree)adaptor.create(EQSi79);
            adaptor.addChild(root_0, EQSi79_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_namespaceDecl1497);
            uriLiteral80=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral80.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end namespaceDecl

    public static class importStmt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start importStmt
    // etc/XQFT.g:328:1: importStmt : ( schemaImport | moduleImport );
    public final importStmt_return importStmt() throws RecognitionException {
        importStmt_return retval = new importStmt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        schemaImport_return schemaImport81 = null;

        moduleImport_return moduleImport82 = null;



        try {
            // etc/XQFT.g:328:32: ( schemaImport | moduleImport )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==IMPORT) ) {
                int LA10_1 = input.LA(2);

                if ( (LA10_1==MODULE) ) {
                    alt10=2;
                }
                else if ( (LA10_1==SCHEMA) ) {
                    alt10=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("328:1: importStmt : ( schemaImport | moduleImport );", 10, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("328:1: importStmt : ( schemaImport | moduleImport );", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // etc/XQFT.g:328:34: schemaImport
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaImport_in_importStmt1525);
                    schemaImport81=schemaImport();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaImport81.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:328:49: moduleImport
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_moduleImport_in_importStmt1529);
                    moduleImport82=moduleImport();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, moduleImport82.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end importStmt

    public static class schemaImport_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaImport
    // etc/XQFT.g:329:2: schemaImport : IMPORT SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? ;
    public final schemaImport_return schemaImport() throws RecognitionException {
        schemaImport_return retval = new schemaImport_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IMPORT83=null;
        Token SCHEMA84=null;
        Token AT87=null;
        Token COMMASi89=null;
        schemaPrefix_return schemaPrefix85 = null;

        uriLiteral_return uriLiteral86 = null;

        uriLiteral_return uriLiteral88 = null;

        uriLiteral_return uriLiteral90 = null;


        CommonTree IMPORT83_tree=null;
        CommonTree SCHEMA84_tree=null;
        CommonTree AT87_tree=null;
        CommonTree COMMASi89_tree=null;

        try {
            // etc/XQFT.g:329:33: ( IMPORT SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? )
            // etc/XQFT.g:329:35: IMPORT SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IMPORT83=(Token)input.LT(1);
            match(input,IMPORT,FOLLOW_IMPORT_in_schemaImport1555); if (failed) return retval;
            if ( backtracking==0 ) {
            IMPORT83_tree = (CommonTree)adaptor.create(IMPORT83);
            adaptor.addChild(root_0, IMPORT83_tree);
            }
            SCHEMA84=(Token)input.LT(1);
            match(input,SCHEMA,FOLLOW_SCHEMA_in_schemaImport1557); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMA84_tree = (CommonTree)adaptor.create(SCHEMA84);
            adaptor.addChild(root_0, SCHEMA84_tree);
            }
            // etc/XQFT.g:329:49: ( schemaPrefix )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==DEFAULT||LA11_0==NAMESPACE) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // etc/XQFT.g:329:49: schemaPrefix
                    {
                    pushFollow(FOLLOW_schemaPrefix_in_schemaImport1559);
                    schemaPrefix85=schemaPrefix();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaPrefix85.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_schemaImport1562);
            uriLiteral86=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral86.getTree());
            // etc/XQFT.g:329:74: ( AT uriLiteral ( COMMASi uriLiteral )* )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==AT) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // etc/XQFT.g:329:75: AT uriLiteral ( COMMASi uriLiteral )*
                    {
                    AT87=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_schemaImport1565); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT87_tree = (CommonTree)adaptor.create(AT87);
                    adaptor.addChild(root_0, AT87_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_schemaImport1567);
                    uriLiteral88=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral88.getTree());
                    // etc/XQFT.g:329:89: ( COMMASi uriLiteral )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==COMMASi) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // etc/XQFT.g:329:90: COMMASi uriLiteral
                    	    {
                    	    COMMASi89=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_schemaImport1570); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi89_tree = (CommonTree)adaptor.create(COMMASi89);
                    	    adaptor.addChild(root_0, COMMASi89_tree);
                    	    }
                    	    pushFollow(FOLLOW_uriLiteral_in_schemaImport1572);
                    	    uriLiteral90=uriLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral90.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaImport

    public static class schemaPrefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaPrefix
    // etc/XQFT.g:330:3: schemaPrefix : ( ( NAMESPACE NCName EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) );
    public final schemaPrefix_return schemaPrefix() throws RecognitionException {
        schemaPrefix_return retval = new schemaPrefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NAMESPACE91=null;
        Token NCName92=null;
        Token EQSi93=null;
        Token DEFAULT94=null;
        Token ELEMENT95=null;
        Token NAMESPACE96=null;

        CommonTree NAMESPACE91_tree=null;
        CommonTree NCName92_tree=null;
        CommonTree EQSi93_tree=null;
        CommonTree DEFAULT94_tree=null;
        CommonTree ELEMENT95_tree=null;
        CommonTree NAMESPACE96_tree=null;

        try {
            // etc/XQFT.g:330:34: ( ( NAMESPACE NCName EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==NAMESPACE) ) {
                alt14=1;
            }
            else if ( (LA14_0==DEFAULT) ) {
                alt14=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("330:3: schemaPrefix : ( ( NAMESPACE NCName EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) );", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // etc/XQFT.g:330:36: ( NAMESPACE NCName EQSi )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:330:36: ( NAMESPACE NCName EQSi )
                    // etc/XQFT.g:330:37: NAMESPACE NCName EQSi
                    {
                    NAMESPACE91=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix1604); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE91_tree = (CommonTree)adaptor.create(NAMESPACE91);
                    adaptor.addChild(root_0, NAMESPACE91_tree);
                    }
                    NCName92=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_schemaPrefix1606); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName92_tree = (CommonTree)adaptor.create(NCName92);
                    adaptor.addChild(root_0, NCName92_tree);
                    }
                    EQSi93=(Token)input.LT(1);
                    match(input,EQSi,FOLLOW_EQSi_in_schemaPrefix1608); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQSi93_tree = (CommonTree)adaptor.create(EQSi93);
                    adaptor.addChild(root_0, EQSi93_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:330:62: ( DEFAULT ELEMENT NAMESPACE )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:330:62: ( DEFAULT ELEMENT NAMESPACE )
                    // etc/XQFT.g:330:63: DEFAULT ELEMENT NAMESPACE
                    {
                    DEFAULT94=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_schemaPrefix1614); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEFAULT94_tree = (CommonTree)adaptor.create(DEFAULT94);
                    adaptor.addChild(root_0, DEFAULT94_tree);
                    }
                    ELEMENT95=(Token)input.LT(1);
                    match(input,ELEMENT,FOLLOW_ELEMENT_in_schemaPrefix1616); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ELEMENT95_tree = (CommonTree)adaptor.create(ELEMENT95);
                    adaptor.addChild(root_0, ELEMENT95_tree);
                    }
                    NAMESPACE96=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix1618); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE96_tree = (CommonTree)adaptor.create(NAMESPACE96);
                    adaptor.addChild(root_0, NAMESPACE96_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaPrefix

    public static class moduleImport_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start moduleImport
    // etc/XQFT.g:331:2: moduleImport : IMPORT MODULE ( NAMESPACE NCName EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? ;
    public final moduleImport_return moduleImport() throws RecognitionException {
        moduleImport_return retval = new moduleImport_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IMPORT97=null;
        Token MODULE98=null;
        Token NAMESPACE99=null;
        Token NCName100=null;
        Token EQSi101=null;
        Token AT103=null;
        Token COMMASi105=null;
        uriLiteral_return uriLiteral102 = null;

        uriLiteral_return uriLiteral104 = null;

        uriLiteral_return uriLiteral106 = null;


        CommonTree IMPORT97_tree=null;
        CommonTree MODULE98_tree=null;
        CommonTree NAMESPACE99_tree=null;
        CommonTree NCName100_tree=null;
        CommonTree EQSi101_tree=null;
        CommonTree AT103_tree=null;
        CommonTree COMMASi105_tree=null;

        try {
            // etc/XQFT.g:331:33: ( IMPORT MODULE ( NAMESPACE NCName EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? )
            // etc/XQFT.g:331:35: IMPORT MODULE ( NAMESPACE NCName EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IMPORT97=(Token)input.LT(1);
            match(input,IMPORT,FOLLOW_IMPORT_in_moduleImport1645); if (failed) return retval;
            if ( backtracking==0 ) {
            IMPORT97_tree = (CommonTree)adaptor.create(IMPORT97);
            adaptor.addChild(root_0, IMPORT97_tree);
            }
            MODULE98=(Token)input.LT(1);
            match(input,MODULE,FOLLOW_MODULE_in_moduleImport1647); if (failed) return retval;
            if ( backtracking==0 ) {
            MODULE98_tree = (CommonTree)adaptor.create(MODULE98);
            adaptor.addChild(root_0, MODULE98_tree);
            }
            // etc/XQFT.g:331:49: ( NAMESPACE NCName EQSi )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==NAMESPACE) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // etc/XQFT.g:331:50: NAMESPACE NCName EQSi
                    {
                    NAMESPACE99=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleImport1650); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE99_tree = (CommonTree)adaptor.create(NAMESPACE99);
                    adaptor.addChild(root_0, NAMESPACE99_tree);
                    }
                    NCName100=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_moduleImport1652); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName100_tree = (CommonTree)adaptor.create(NCName100);
                    adaptor.addChild(root_0, NCName100_tree);
                    }
                    EQSi101=(Token)input.LT(1);
                    match(input,EQSi,FOLLOW_EQSi_in_moduleImport1654); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQSi101_tree = (CommonTree)adaptor.create(EQSi101);
                    adaptor.addChild(root_0, EQSi101_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_moduleImport1658);
            uriLiteral102=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral102.getTree());
            // etc/XQFT.g:331:85: ( AT uriLiteral ( COMMASi uriLiteral )* )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==AT) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // etc/XQFT.g:331:86: AT uriLiteral ( COMMASi uriLiteral )*
                    {
                    AT103=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_moduleImport1661); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT103_tree = (CommonTree)adaptor.create(AT103);
                    adaptor.addChild(root_0, AT103_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_moduleImport1663);
                    uriLiteral104=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral104.getTree());
                    // etc/XQFT.g:331:100: ( COMMASi uriLiteral )*
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==COMMASi) ) {
                            alt16=1;
                        }


                        switch (alt16) {
                    	case 1 :
                    	    // etc/XQFT.g:331:101: COMMASi uriLiteral
                    	    {
                    	    COMMASi105=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_moduleImport1666); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi105_tree = (CommonTree)adaptor.create(COMMASi105);
                    	    adaptor.addChild(root_0, COMMASi105_tree);
                    	    }
                    	    pushFollow(FOLLOW_uriLiteral_in_moduleImport1668);
                    	    uriLiteral106=uriLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral106.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop16;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end moduleImport

    public static class varDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varDecl
    // etc/XQFT.g:333:1: varDecl : DECLARE VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL ) ;
    public final varDecl_return varDecl() throws RecognitionException {
        varDecl_return retval = new varDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE107=null;
        Token VARIABLE108=null;
        Token DOLLARSi109=null;
        Token ASSIGNSi112=null;
        Token EXTERNAL114=null;
        qName_return qName110 = null;

        typeDeclaration_return typeDeclaration111 = null;

        exprSingle_return exprSingle113 = null;


        CommonTree DECLARE107_tree=null;
        CommonTree VARIABLE108_tree=null;
        CommonTree DOLLARSi109_tree=null;
        CommonTree ASSIGNSi112_tree=null;
        CommonTree EXTERNAL114_tree=null;

        try {
            // etc/XQFT.g:333:32: ( DECLARE VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL ) )
            // etc/XQFT.g:333:34: DECLARE VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL )
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE107=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_varDecl1704); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE107_tree = (CommonTree)adaptor.create(DECLARE107);
            adaptor.addChild(root_0, DECLARE107_tree);
            }
            VARIABLE108=(Token)input.LT(1);
            match(input,VARIABLE,FOLLOW_VARIABLE_in_varDecl1706); if (failed) return retval;
            if ( backtracking==0 ) {
            VARIABLE108_tree = (CommonTree)adaptor.create(VARIABLE108);
            adaptor.addChild(root_0, VARIABLE108_tree);
            }
            DOLLARSi109=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varDecl1708); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi109_tree = (CommonTree)adaptor.create(DOLLARSi109);
            adaptor.addChild(root_0, DOLLARSi109_tree);
            }
            pushFollow(FOLLOW_qName_in_varDecl1710);
            qName110=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName110.getTree());
            // etc/XQFT.g:333:66: ( typeDeclaration )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==AS) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // etc/XQFT.g:333:66: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_varDecl1712);
                    typeDeclaration111=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration111.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:333:83: ( ( ASSIGNSi exprSingle ) | EXTERNAL )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==ASSIGNSi) ) {
                alt19=1;
            }
            else if ( (LA19_0==EXTERNAL) ) {
                alt19=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("333:83: ( ( ASSIGNSi exprSingle ) | EXTERNAL )", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // etc/XQFT.g:333:84: ( ASSIGNSi exprSingle )
                    {
                    // etc/XQFT.g:333:84: ( ASSIGNSi exprSingle )
                    // etc/XQFT.g:333:85: ASSIGNSi exprSingle
                    {
                    ASSIGNSi112=(Token)input.LT(1);
                    match(input,ASSIGNSi,FOLLOW_ASSIGNSi_in_varDecl1717); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ASSIGNSi112_tree = (CommonTree)adaptor.create(ASSIGNSi112);
                    adaptor.addChild(root_0, ASSIGNSi112_tree);
                    }
                    pushFollow(FOLLOW_exprSingle_in_varDecl1719);
                    exprSingle113=exprSingle();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle113.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:333:108: EXTERNAL
                    {
                    EXTERNAL114=(Token)input.LT(1);
                    match(input,EXTERNAL,FOLLOW_EXTERNAL_in_varDecl1724); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXTERNAL114_tree = (CommonTree)adaptor.create(EXTERNAL114);
                    adaptor.addChild(root_0, EXTERNAL114_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varDecl

    public static class qName_return extends ParserRuleReturnScope {
        public String text;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qName
    // etc/XQFT.g:334:2: qName returns [String text] : nc1= NCName (c= COLONSi nc2= NCName )? ;
    public final qName_return qName() throws RecognitionException {
        qName_return retval = new qName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token nc1=null;
        Token c=null;
        Token nc2=null;

        CommonTree nc1_tree=null;
        CommonTree c_tree=null;
        CommonTree nc2_tree=null;

        try {
            // etc/XQFT.g:334:36: (nc1= NCName (c= COLONSi nc2= NCName )? )
            // etc/XQFT.g:334:38: nc1= NCName (c= COLONSi nc2= NCName )?
            {
            root_0 = (CommonTree)adaptor.nil();

            nc1=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_qName1745); if (failed) return retval;
            if ( backtracking==0 ) {
            nc1_tree = (CommonTree)adaptor.create(nc1);
            adaptor.addChild(root_0, nc1_tree);
            }
            // etc/XQFT.g:334:49: (c= COLONSi nc2= NCName )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==COLONSi) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // etc/XQFT.g:334:50: c= COLONSi nc2= NCName
                    {
                    c=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_qName1750); if (failed) return retval;
                    if ( backtracking==0 ) {
                    c_tree = (CommonTree)adaptor.create(c);
                    adaptor.addChild(root_0, c_tree);
                    }
                    nc2=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_qName1754); if (failed) return retval;
                    if ( backtracking==0 ) {
                    nc2_tree = (CommonTree)adaptor.create(nc2);
                    adaptor.addChild(root_0, nc2_tree);
                    }

                    }
                    break;

            }

            if ( backtracking==0 ) {
               retval.text = nc1.getText() + (c != null ? c.getText() + nc2.getText() : ""); 
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end qName

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeDeclaration
    // etc/XQFT.g:335:2: typeDeclaration : AS sequenceType ;
    public final typeDeclaration_return typeDeclaration() throws RecognitionException {
        typeDeclaration_return retval = new typeDeclaration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AS115=null;
        sequenceType_return sequenceType116 = null;


        CommonTree AS115_tree=null;

        try {
            // etc/XQFT.g:335:33: ( AS sequenceType )
            // etc/XQFT.g:335:35: AS sequenceType
            {
            root_0 = (CommonTree)adaptor.nil();

            AS115=(Token)input.LT(1);
            match(input,AS,FOLLOW_AS_in_typeDeclaration1781); if (failed) return retval;
            if ( backtracking==0 ) {
            AS115_tree = (CommonTree)adaptor.create(AS115);
            adaptor.addChild(root_0, AS115_tree);
            }
            pushFollow(FOLLOW_sequenceType_in_typeDeclaration1783);
            sequenceType116=sequenceType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType116.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeDeclaration

    public static class functionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionDecl
    // etc/XQFT.g:339:1: functionDecl : DECLARE FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL ) ;
    public final functionDecl_return functionDecl() throws RecognitionException {
        functionDecl_return retval = new functionDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE117=null;
        Token FUNCTION118=null;
        Token LPARSi120=null;
        Token RPARSi122=null;
        Token AS123=null;
        Token EXTERNAL126=null;
        qName_return qName119 = null;

        paramList_return paramList121 = null;

        sequenceType_return sequenceType124 = null;

        enclosedExpr_return enclosedExpr125 = null;


        CommonTree DECLARE117_tree=null;
        CommonTree FUNCTION118_tree=null;
        CommonTree LPARSi120_tree=null;
        CommonTree RPARSi122_tree=null;
        CommonTree AS123_tree=null;
        CommonTree EXTERNAL126_tree=null;

        try {
            // etc/XQFT.g:339:32: ( DECLARE FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL ) )
            // etc/XQFT.g:339:34: DECLARE FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL )
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE117=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_functionDecl1812); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE117_tree = (CommonTree)adaptor.create(DECLARE117);
            adaptor.addChild(root_0, DECLARE117_tree);
            }
            FUNCTION118=(Token)input.LT(1);
            match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDecl1814); if (failed) return retval;
            if ( backtracking==0 ) {
            FUNCTION118_tree = (CommonTree)adaptor.create(FUNCTION118);
            adaptor.addChild(root_0, FUNCTION118_tree);
            }
            pushFollow(FOLLOW_qName_in_functionDecl1816);
            qName119=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName119.getTree());
            LPARSi120=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_functionDecl1818); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi120_tree = (CommonTree)adaptor.create(LPARSi120);
            adaptor.addChild(root_0, LPARSi120_tree);
            }
            // etc/XQFT.g:339:64: ( paramList )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==DOLLARSi) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // etc/XQFT.g:339:64: paramList
                    {
                    pushFollow(FOLLOW_paramList_in_functionDecl1820);
                    paramList121=paramList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, paramList121.getTree());

                    }
                    break;

            }

            RPARSi122=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_functionDecl1823); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi122_tree = (CommonTree)adaptor.create(RPARSi122);
            adaptor.addChild(root_0, RPARSi122_tree);
            }
            // etc/XQFT.g:340:12: ( AS sequenceType )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==AS) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // etc/XQFT.g:340:13: AS sequenceType
                    {
                    AS123=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_functionDecl1838); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AS123_tree = (CommonTree)adaptor.create(AS123);
                    adaptor.addChild(root_0, AS123_tree);
                    }
                    pushFollow(FOLLOW_sequenceType_in_functionDecl1840);
                    sequenceType124=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType124.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:340:31: ( enclosedExpr | EXTERNAL )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LBRACESi) ) {
                alt23=1;
            }
            else if ( (LA23_0==EXTERNAL) ) {
                alt23=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("340:31: ( enclosedExpr | EXTERNAL )", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // etc/XQFT.g:340:32: enclosedExpr
                    {
                    pushFollow(FOLLOW_enclosedExpr_in_functionDecl1845);
                    enclosedExpr125=enclosedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, enclosedExpr125.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:340:47: EXTERNAL
                    {
                    EXTERNAL126=(Token)input.LT(1);
                    match(input,EXTERNAL,FOLLOW_EXTERNAL_in_functionDecl1849); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXTERNAL126_tree = (CommonTree)adaptor.create(EXTERNAL126);
                    adaptor.addChild(root_0, EXTERNAL126_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionDecl

    public static class paramList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start paramList
    // etc/XQFT.g:341:2: paramList : param ( COMMASi param )* ;
    public final paramList_return paramList() throws RecognitionException {
        paramList_return retval = new paramList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMASi128=null;
        param_return param127 = null;

        param_return param129 = null;


        CommonTree COMMASi128_tree=null;

        try {
            // etc/XQFT.g:341:33: ( param ( COMMASi param )* )
            // etc/XQFT.g:341:35: param ( COMMASi param )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_param_in_paramList1879);
            param127=param();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, param127.getTree());
            // etc/XQFT.g:341:41: ( COMMASi param )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMASi) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // etc/XQFT.g:341:42: COMMASi param
            	    {
            	    COMMASi128=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_paramList1882); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMASi128_tree = (CommonTree)adaptor.create(COMMASi128);
            	    adaptor.addChild(root_0, COMMASi128_tree);
            	    }
            	    pushFollow(FOLLOW_param_in_paramList1884);
            	    param129=param();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, param129.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end paramList

    public static class param_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start param
    // etc/XQFT.g:342:3: param : DOLLARSi qName ( typeDeclaration )? ;
    public final param_return param() throws RecognitionException {
        param_return retval = new param_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOLLARSi130=null;
        qName_return qName131 = null;

        typeDeclaration_return typeDeclaration132 = null;


        CommonTree DOLLARSi130_tree=null;

        try {
            // etc/XQFT.g:342:34: ( DOLLARSi qName ( typeDeclaration )? )
            // etc/XQFT.g:342:36: DOLLARSi qName ( typeDeclaration )?
            {
            root_0 = (CommonTree)adaptor.nil();

            DOLLARSi130=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_param1920); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi130_tree = (CommonTree)adaptor.create(DOLLARSi130);
            adaptor.addChild(root_0, DOLLARSi130_tree);
            }
            pushFollow(FOLLOW_qName_in_param1922);
            qName131=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName131.getTree());
            // etc/XQFT.g:342:51: ( typeDeclaration )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // etc/XQFT.g:342:51: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_param1924);
                    typeDeclaration132=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration132.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end param

    public static class enclosedExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enclosedExpr
    // etc/XQFT.g:348:2: enclosedExpr : LBRACESi expr RBRACSi ;
    public final enclosedExpr_return enclosedExpr() throws RecognitionException {
        enclosedExpr_return retval = new enclosedExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACESi133=null;
        Token RBRACSi135=null;
        expr_return expr134 = null;


        CommonTree LBRACESi133_tree=null;
        CommonTree RBRACSi135_tree=null;

        try {
            // etc/XQFT.g:348:33: ( LBRACESi expr RBRACSi )
            // etc/XQFT.g:349:13: LBRACESi expr RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            LBRACESi133=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_enclosedExpr1969); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi133_tree = (CommonTree)adaptor.create(LBRACESi133);
            adaptor.addChild(root_0, LBRACESi133_tree);
            }
            pushFollow(FOLLOW_expr_in_enclosedExpr1984);
            expr134=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr134.getTree());
            RBRACSi135=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_enclosedExpr1999); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi135_tree = (CommonTree)adaptor.create(RBRACSi135);
            adaptor.addChild(root_0, RBRACSi135_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end enclosedExpr

    public static class optionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start optionDecl
    // etc/XQFT.g:357:1: optionDecl : DECLARE OPTION qName StringLiteral ;
    public final optionDecl_return optionDecl() throws RecognitionException {
        optionDecl_return retval = new optionDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE136=null;
        Token OPTION137=null;
        Token StringLiteral139=null;
        qName_return qName138 = null;


        CommonTree DECLARE136_tree=null;
        CommonTree OPTION137_tree=null;
        CommonTree StringLiteral139_tree=null;

        try {
            // etc/XQFT.g:357:32: ( DECLARE OPTION qName StringLiteral )
            // etc/XQFT.g:357:34: DECLARE OPTION qName StringLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE136=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_optionDecl2046); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE136_tree = (CommonTree)adaptor.create(DECLARE136);
            adaptor.addChild(root_0, DECLARE136_tree);
            }
            OPTION137=(Token)input.LT(1);
            match(input,OPTION,FOLLOW_OPTION_in_optionDecl2048); if (failed) return retval;
            if ( backtracking==0 ) {
            OPTION137_tree = (CommonTree)adaptor.create(OPTION137);
            adaptor.addChild(root_0, OPTION137_tree);
            }
            pushFollow(FOLLOW_qName_in_optionDecl2050);
            qName138=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName138.getTree());
            StringLiteral139=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_optionDecl2052); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral139_tree = (CommonTree)adaptor.create(StringLiteral139);
            adaptor.addChild(root_0, StringLiteral139_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end optionDecl

    public static class ftOptionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOptionDecl
    // etc/XQFT.g:359:1: ftOptionDecl : DECLARE FTOPTION ftMatchOptions ;
    public final ftOptionDecl_return ftOptionDecl() throws RecognitionException {
        ftOptionDecl_return retval = new ftOptionDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DECLARE140=null;
        Token FTOPTION141=null;
        ftMatchOptions_return ftMatchOptions142 = null;


        CommonTree DECLARE140_tree=null;
        CommonTree FTOPTION141_tree=null;

        try {
            // etc/XQFT.g:359:32: ( DECLARE FTOPTION ftMatchOptions )
            // etc/XQFT.g:359:34: DECLARE FTOPTION ftMatchOptions
            {
            root_0 = (CommonTree)adaptor.nil();

            DECLARE140=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_ftOptionDecl2078); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE140_tree = (CommonTree)adaptor.create(DECLARE140);
            adaptor.addChild(root_0, DECLARE140_tree);
            }
            FTOPTION141=(Token)input.LT(1);
            match(input,FTOPTION,FOLLOW_FTOPTION_in_ftOptionDecl2080); if (failed) return retval;
            if ( backtracking==0 ) {
            FTOPTION141_tree = (CommonTree)adaptor.create(FTOPTION141);
            adaptor.addChild(root_0, FTOPTION141_tree);
            }
            pushFollow(FOLLOW_ftMatchOptions_in_ftOptionDecl2082);
            ftMatchOptions142=ftMatchOptions();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOptions142.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOptionDecl

    public static class ftMatchOptions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMatchOptions
    // etc/XQFT.g:360:2: ftMatchOptions : ( ftMatchOption )+ ;
    public final ftMatchOptions_return ftMatchOptions() throws RecognitionException {
        ftMatchOptions_return retval = new ftMatchOptions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        ftMatchOption_return ftMatchOption143 = null;



        try {
            // etc/XQFT.g:360:33: ( ( ftMatchOption )+ )
            // etc/XQFT.g:360:35: ( ftMatchOption )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:360:35: ( ftMatchOption )+
            int cnt26=0;
            loop26:
            do {
                int alt26=2;
                switch ( input.LA(1) ) {
                case WITHOUT:
                    {
                    int LA26_2 = input.LA(2);

                    if ( ((LA26_2>=STEMMING && LA26_2<=STOP)||LA26_2==THESAURUS||LA26_2==WILDCARDS) ) {
                        alt26=1;
                    }


                    }
                    break;
                case CASE:
                    {
                    int LA26_3 = input.LA(2);

                    if ( (LA26_3==INSENSITIVE||LA26_3==SENSITIVE) ) {
                        alt26=1;
                    }


                    }
                    break;
                case DIACRITICS:
                case LANGUAGE:
                case LOWERCASE:
                case OPTION:
                case UPPERCASE:
                case WITH:
                    {
                    alt26=1;
                    }
                    break;

                }

                switch (alt26) {
            	case 1 :
            	    // etc/XQFT.g:360:35: ftMatchOption
            	    {
            	    pushFollow(FOLLOW_ftMatchOption_in_ftMatchOptions2106);
            	    ftMatchOption143=ftMatchOption();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOption143.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt26 >= 1 ) break loop26;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(26, input);
                        throw eee;
                }
                cnt26++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMatchOptions

    public static class sequenceType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sequenceType
    // etc/XQFT.g:366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );
    public final sequenceType_return sequenceType() throws RecognitionException {
        sequenceType_return retval = new sequenceType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EMPTY_SEQUENCE147=null;
        Token LPARSi148=null;
        Token RPARSi149=null;
        itemType_return itemType144 = null;

        occurrenceIndicator_return occurrenceIndicator145 = null;

        itemType_return itemType146 = null;


        CommonTree EMPTY_SEQUENCE147_tree=null;
        CommonTree LPARSi148_tree=null;
        CommonTree RPARSi149_tree=null;

        try {
            // etc/XQFT.g:366:32: ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi )
            int alt27=3;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                int LA27_1 = input.LA(2);

                if ( (LA27_1==LPARSi) ) {
                    switch ( input.LA(3) ) {
                    case ELEMENT:
                        {
                        int LA27_28 = input.LA(4);

                        if ( (LA27_28==LPARSi) ) {
                            switch ( input.LA(5) ) {
                            case NCName:
                                {
                                switch ( input.LA(6) ) {
                                case COLONSi:
                                    {
                                    int LA27_66 = input.LA(7);

                                    if ( (LA27_66==NCName) ) {
                                        int LA27_73 = input.LA(8);

                                        if ( (LA27_73==COMMASi) ) {
                                            int LA27_67 = input.LA(9);

                                            if ( (LA27_67==NCName) ) {
                                                switch ( input.LA(10) ) {
                                                case COLONSi:
                                                    {
                                                    int LA27_78 = input.LA(11);

                                                    if ( (LA27_78==NCName) ) {
                                                        int LA27_80 = input.LA(12);

                                                        if ( (LA27_80==QUESTIONSi) ) {
                                                            int LA27_79 = input.LA(13);

                                                            if ( (LA27_79==RPARSi) ) {
                                                                int LA27_58 = input.LA(14);

                                                                if ( (LA27_58==RPARSi) ) {
                                                                    int LA27_30 = input.LA(15);

                                                                    if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                        alt27=2;
                                                                    }
                                                                    else if ( (LA27_30==PLUSSi) ) {
                                                                        int LA27_25 = input.LA(16);

                                                                        if ( (synpred1()) ) {
                                                                            alt27=1;
                                                                        }
                                                                        else if ( (true) ) {
                                                                            alt27=2;
                                                                        }
                                                                        else {
                                                                            if (backtracking>0) {failed=true; return retval;}
                                                                            NoViableAltException nvae =
                                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                            throw nvae;
                                                                        }
                                                                    }
                                                                    else if ( (LA27_30==STARSi) ) {
                                                                        int LA27_26 = input.LA(16);

                                                                        if ( (synpred1()) ) {
                                                                            alt27=1;
                                                                        }
                                                                        else if ( (true) ) {
                                                                            alt27=2;
                                                                        }
                                                                        else {
                                                                            if (backtracking>0) {failed=true; return retval;}
                                                                            NoViableAltException nvae =
                                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                            throw nvae;
                                                                        }
                                                                    }
                                                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                        alt27=1;
                                                                    }
                                                                    else {
                                                                        if (backtracking>0) {failed=true; return retval;}
                                                                        NoViableAltException nvae =
                                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                        throw nvae;
                                                                    }
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_80==RPARSi) ) {
                                                            int LA27_58 = input.LA(13);

                                                            if ( (LA27_58==RPARSi) ) {
                                                                int LA27_30 = input.LA(14);

                                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                    alt27=2;
                                                                }
                                                                else if ( (LA27_30==PLUSSi) ) {
                                                                    int LA27_25 = input.LA(15);

                                                                    if ( (synpred1()) ) {
                                                                        alt27=1;
                                                                    }
                                                                    else if ( (true) ) {
                                                                        alt27=2;
                                                                    }
                                                                    else {
                                                                        if (backtracking>0) {failed=true; return retval;}
                                                                        NoViableAltException nvae =
                                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                        throw nvae;
                                                                    }
                                                                }
                                                                else if ( (LA27_30==STARSi) ) {
                                                                    int LA27_26 = input.LA(15);

                                                                    if ( (synpred1()) ) {
                                                                        alt27=1;
                                                                    }
                                                                    else if ( (true) ) {
                                                                        alt27=2;
                                                                    }
                                                                    else {
                                                                        if (backtracking>0) {failed=true; return retval;}
                                                                        NoViableAltException nvae =
                                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                        throw nvae;
                                                                    }
                                                                }
                                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                    alt27=1;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 80, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 78, input);

                                                        throw nvae;
                                                    }
                                                    }
                                                    break;
                                                case QUESTIONSi:
                                                    {
                                                    int LA27_79 = input.LA(11);

                                                    if ( (LA27_79==RPARSi) ) {
                                                        int LA27_58 = input.LA(12);

                                                        if ( (LA27_58==RPARSi) ) {
                                                            int LA27_30 = input.LA(13);

                                                            if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                alt27=2;
                                                            }
                                                            else if ( (LA27_30==PLUSSi) ) {
                                                                int LA27_25 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==STARSi) ) {
                                                                int LA27_26 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                alt27=1;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                        throw nvae;
                                                    }
                                                    }
                                                    break;
                                                case RPARSi:
                                                    {
                                                    int LA27_58 = input.LA(11);

                                                    if ( (LA27_58==RPARSi) ) {
                                                        int LA27_30 = input.LA(12);

                                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_30==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                        throw nvae;
                                                    }
                                                    }
                                                    break;
                                                default:
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 74, input);

                                                    throw nvae;
                                                }

                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 67, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_73==RPARSi) ) {
                                            int LA27_58 = input.LA(9);

                                            if ( (LA27_58==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 73, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 66, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMMASi:
                                    {
                                    int LA27_67 = input.LA(7);

                                    if ( (LA27_67==NCName) ) {
                                        switch ( input.LA(8) ) {
                                        case COLONSi:
                                            {
                                            int LA27_78 = input.LA(9);

                                            if ( (LA27_78==NCName) ) {
                                                int LA27_80 = input.LA(10);

                                                if ( (LA27_80==QUESTIONSi) ) {
                                                    int LA27_79 = input.LA(11);

                                                    if ( (LA27_79==RPARSi) ) {
                                                        int LA27_58 = input.LA(12);

                                                        if ( (LA27_58==RPARSi) ) {
                                                            int LA27_30 = input.LA(13);

                                                            if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                alt27=2;
                                                            }
                                                            else if ( (LA27_30==PLUSSi) ) {
                                                                int LA27_25 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==STARSi) ) {
                                                                int LA27_26 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                alt27=1;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_80==RPARSi) ) {
                                                    int LA27_58 = input.LA(11);

                                                    if ( (LA27_58==RPARSi) ) {
                                                        int LA27_30 = input.LA(12);

                                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_30==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 80, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 78, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case QUESTIONSi:
                                            {
                                            int LA27_79 = input.LA(9);

                                            if ( (LA27_79==RPARSi) ) {
                                                int LA27_58 = input.LA(10);

                                                if ( (LA27_58==RPARSi) ) {
                                                    int LA27_30 = input.LA(11);

                                                    if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_30==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case RPARSi:
                                            {
                                            int LA27_58 = input.LA(9);

                                            if ( (LA27_58==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 74, input);

                                            throw nvae;
                                        }

                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 67, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case RPARSi:
                                    {
                                    int LA27_58 = input.LA(7);

                                    if ( (LA27_58==RPARSi) ) {
                                        int LA27_30 = input.LA(8);

                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_30==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 56, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case STARSi:
                                {
                                int LA27_57 = input.LA(6);

                                if ( (LA27_57==COMMASi) ) {
                                    int LA27_67 = input.LA(7);

                                    if ( (LA27_67==NCName) ) {
                                        switch ( input.LA(8) ) {
                                        case COLONSi:
                                            {
                                            int LA27_78 = input.LA(9);

                                            if ( (LA27_78==NCName) ) {
                                                int LA27_80 = input.LA(10);

                                                if ( (LA27_80==QUESTIONSi) ) {
                                                    int LA27_79 = input.LA(11);

                                                    if ( (LA27_79==RPARSi) ) {
                                                        int LA27_58 = input.LA(12);

                                                        if ( (LA27_58==RPARSi) ) {
                                                            int LA27_30 = input.LA(13);

                                                            if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                alt27=2;
                                                            }
                                                            else if ( (LA27_30==PLUSSi) ) {
                                                                int LA27_25 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==STARSi) ) {
                                                                int LA27_26 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                alt27=1;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_80==RPARSi) ) {
                                                    int LA27_58 = input.LA(11);

                                                    if ( (LA27_58==RPARSi) ) {
                                                        int LA27_30 = input.LA(12);

                                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_30==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 80, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 78, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case QUESTIONSi:
                                            {
                                            int LA27_79 = input.LA(9);

                                            if ( (LA27_79==RPARSi) ) {
                                                int LA27_58 = input.LA(10);

                                                if ( (LA27_58==RPARSi) ) {
                                                    int LA27_30 = input.LA(11);

                                                    if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_30==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case RPARSi:
                                            {
                                            int LA27_58 = input.LA(9);

                                            if ( (LA27_58==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 74, input);

                                            throw nvae;
                                        }

                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 67, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_57==RPARSi) ) {
                                    int LA27_58 = input.LA(7);

                                    if ( (LA27_58==RPARSi) ) {
                                        int LA27_30 = input.LA(8);

                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_30==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 57, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case RPARSi:
                                {
                                int LA27_58 = input.LA(6);

                                if ( (LA27_58==RPARSi) ) {
                                    int LA27_30 = input.LA(7);

                                    if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_30==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_30==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 46, input);

                                throw nvae;
                            }

                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 28, input);

                            throw nvae;
                        }
                        }
                        break;
                    case SCHEMAELEMENT:
                        {
                        int LA27_29 = input.LA(4);

                        if ( (LA27_29==LPARSi) ) {
                            int LA27_47 = input.LA(5);

                            if ( (LA27_47==NCName) ) {
                                int LA27_59 = input.LA(6);

                                if ( (LA27_59==COLONSi) ) {
                                    int LA27_68 = input.LA(7);

                                    if ( (LA27_68==NCName) ) {
                                        int LA27_75 = input.LA(8);

                                        if ( (LA27_75==RPARSi) ) {
                                            int LA27_69 = input.LA(9);

                                            if ( (LA27_69==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 69, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 75, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 68, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_59==RPARSi) ) {
                                    int LA27_69 = input.LA(7);

                                    if ( (LA27_69==RPARSi) ) {
                                        int LA27_30 = input.LA(8);

                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_30==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 69, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 59, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 47, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 29, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RPARSi:
                        {
                        int LA27_30 = input.LA(4);

                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_30==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_30==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 13, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 1, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA27_2 = input.LA(2);

                if ( (LA27_2==LPARSi) ) {
                    switch ( input.LA(3) ) {
                    case NCName:
                        {
                        switch ( input.LA(4) ) {
                        case COLONSi:
                            {
                            int LA27_48 = input.LA(5);

                            if ( (LA27_48==NCName) ) {
                                int LA27_60 = input.LA(6);

                                if ( (LA27_60==COMMASi) ) {
                                    int LA27_49 = input.LA(7);

                                    if ( (LA27_49==NCName) ) {
                                        switch ( input.LA(8) ) {
                                        case COLONSi:
                                            {
                                            int LA27_70 = input.LA(9);

                                            if ( (LA27_70==NCName) ) {
                                                int LA27_76 = input.LA(10);

                                                if ( (LA27_76==QUESTIONSi) ) {
                                                    int LA27_71 = input.LA(11);

                                                    if ( (LA27_71==RPARSi) ) {
                                                        int LA27_33 = input.LA(12);

                                                        if ( (LA27_33==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_33==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_76==RPARSi) ) {
                                                    int LA27_33 = input.LA(11);

                                                    if ( (LA27_33==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_33==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 76, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 70, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case QUESTIONSi:
                                            {
                                            int LA27_71 = input.LA(9);

                                            if ( (LA27_71==RPARSi) ) {
                                                int LA27_33 = input.LA(10);

                                                if ( (LA27_33==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_33==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case RPARSi:
                                            {
                                            int LA27_33 = input.LA(9);

                                            if ( (LA27_33==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_33==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 61, input);

                                            throw nvae;
                                        }

                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 49, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_60==RPARSi) ) {
                                    int LA27_33 = input.LA(7);

                                    if ( (LA27_33==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_33==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 60, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 48, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMMASi:
                            {
                            int LA27_49 = input.LA(5);

                            if ( (LA27_49==NCName) ) {
                                switch ( input.LA(6) ) {
                                case COLONSi:
                                    {
                                    int LA27_70 = input.LA(7);

                                    if ( (LA27_70==NCName) ) {
                                        int LA27_76 = input.LA(8);

                                        if ( (LA27_76==QUESTIONSi) ) {
                                            int LA27_71 = input.LA(9);

                                            if ( (LA27_71==RPARSi) ) {
                                                int LA27_33 = input.LA(10);

                                                if ( (LA27_33==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_33==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_76==RPARSi) ) {
                                            int LA27_33 = input.LA(9);

                                            if ( (LA27_33==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_33==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 76, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 70, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case QUESTIONSi:
                                    {
                                    int LA27_71 = input.LA(7);

                                    if ( (LA27_71==RPARSi) ) {
                                        int LA27_33 = input.LA(8);

                                        if ( (LA27_33==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_33==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case RPARSi:
                                    {
                                    int LA27_33 = input.LA(7);

                                    if ( (LA27_33==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_33==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 61, input);

                                    throw nvae;
                                }

                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 49, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RPARSi:
                            {
                            int LA27_33 = input.LA(5);

                            if ( (LA27_33==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_33==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 31, input);

                            throw nvae;
                        }

                        }
                        break;
                    case STARSi:
                        {
                        int LA27_32 = input.LA(4);

                        if ( (LA27_32==COMMASi) ) {
                            int LA27_49 = input.LA(5);

                            if ( (LA27_49==NCName) ) {
                                switch ( input.LA(6) ) {
                                case COLONSi:
                                    {
                                    int LA27_70 = input.LA(7);

                                    if ( (LA27_70==NCName) ) {
                                        int LA27_76 = input.LA(8);

                                        if ( (LA27_76==QUESTIONSi) ) {
                                            int LA27_71 = input.LA(9);

                                            if ( (LA27_71==RPARSi) ) {
                                                int LA27_33 = input.LA(10);

                                                if ( (LA27_33==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_33==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_76==RPARSi) ) {
                                            int LA27_33 = input.LA(9);

                                            if ( (LA27_33==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_33==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 76, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 70, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case QUESTIONSi:
                                    {
                                    int LA27_71 = input.LA(7);

                                    if ( (LA27_71==RPARSi) ) {
                                        int LA27_33 = input.LA(8);

                                        if ( (LA27_33==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_33==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case RPARSi:
                                    {
                                    int LA27_33 = input.LA(7);

                                    if ( (LA27_33==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_33==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 61, input);

                                    throw nvae;
                                }

                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 49, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_32==RPARSi) ) {
                            int LA27_33 = input.LA(5);

                            if ( (LA27_33==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_33==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 32, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RPARSi:
                        {
                        int LA27_33 = input.LA(4);

                        if ( (LA27_33==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_33==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 14, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 2, input);

                    throw nvae;
                }
                }
                break;
            case ATTRIBUTE:
                {
                int LA27_3 = input.LA(2);

                if ( (LA27_3==LPARSi) ) {
                    switch ( input.LA(3) ) {
                    case NCName:
                        {
                        switch ( input.LA(4) ) {
                        case COLONSi:
                            {
                            int LA27_50 = input.LA(5);

                            if ( (LA27_50==NCName) ) {
                                int LA27_62 = input.LA(6);

                                if ( (LA27_62==COMMASi) ) {
                                    int LA27_51 = input.LA(7);

                                    if ( (LA27_51==NCName) ) {
                                        int LA27_63 = input.LA(8);

                                        if ( (LA27_63==COLONSi) ) {
                                            int LA27_72 = input.LA(9);

                                            if ( (LA27_72==NCName) ) {
                                                int LA27_77 = input.LA(10);

                                                if ( (LA27_77==RPARSi) ) {
                                                    int LA27_36 = input.LA(11);

                                                    if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_36==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_36==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 77, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 72, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_63==RPARSi) ) {
                                            int LA27_36 = input.LA(9);

                                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_36==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 63, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 51, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_62==RPARSi) ) {
                                    int LA27_36 = input.LA(7);

                                    if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_36==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 62, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 50, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMMASi:
                            {
                            int LA27_51 = input.LA(5);

                            if ( (LA27_51==NCName) ) {
                                int LA27_63 = input.LA(6);

                                if ( (LA27_63==COLONSi) ) {
                                    int LA27_72 = input.LA(7);

                                    if ( (LA27_72==NCName) ) {
                                        int LA27_77 = input.LA(8);

                                        if ( (LA27_77==RPARSi) ) {
                                            int LA27_36 = input.LA(9);

                                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_36==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 77, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 72, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_63==RPARSi) ) {
                                    int LA27_36 = input.LA(7);

                                    if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_36==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 63, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 51, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RPARSi:
                            {
                            int LA27_36 = input.LA(5);

                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_36==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 34, input);

                            throw nvae;
                        }

                        }
                        break;
                    case STARSi:
                        {
                        int LA27_35 = input.LA(4);

                        if ( (LA27_35==COMMASi) ) {
                            int LA27_51 = input.LA(5);

                            if ( (LA27_51==NCName) ) {
                                int LA27_63 = input.LA(6);

                                if ( (LA27_63==COLONSi) ) {
                                    int LA27_72 = input.LA(7);

                                    if ( (LA27_72==NCName) ) {
                                        int LA27_77 = input.LA(8);

                                        if ( (LA27_77==RPARSi) ) {
                                            int LA27_36 = input.LA(9);

                                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_36==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 77, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 72, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_63==RPARSi) ) {
                                    int LA27_36 = input.LA(7);

                                    if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_36==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 63, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 51, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_35==RPARSi) ) {
                            int LA27_36 = input.LA(5);

                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_36==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 35, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RPARSi:
                        {
                        int LA27_36 = input.LA(4);

                        if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_36==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_36==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 15, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 3, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMAELEMENT:
                {
                int LA27_4 = input.LA(2);

                if ( (LA27_4==LPARSi) ) {
                    int LA27_16 = input.LA(3);

                    if ( (LA27_16==NCName) ) {
                        int LA27_37 = input.LA(4);

                        if ( (LA27_37==COLONSi) ) {
                            int LA27_52 = input.LA(5);

                            if ( (LA27_52==NCName) ) {
                                int LA27_64 = input.LA(6);

                                if ( (LA27_64==RPARSi) ) {
                                    int LA27_53 = input.LA(7);

                                    if ( (LA27_53==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_53==EOF||(LA27_53>=ANCESTOR && LA27_53<=AND)||(LA27_53>=ASCENDING && LA27_53<=ATTRIBUTE)||LA27_53==CASE||(LA27_53>=CHILD && LA27_53<=COMMENT)||(LA27_53>=DEFAULT && LA27_53<=DESCENDING)||(LA27_53>=DIV && LA27_53<=ELSE)||LA27_53==EMPTY||(LA27_53>=EQ && LA27_53<=EVERY)||(LA27_53>=EXCEPT && LA27_53<=FOR)||LA27_53==FTCONTAINS||LA27_53==GE||(LA27_53>=GT && LA27_53<=IF)||LA27_53==IN||(LA27_53>=INSTANCE && LA27_53<=IS)||LA27_53==LE||(LA27_53>=LET && LA27_53<=LEVELS)||(LA27_53>=LT && LA27_53<=MOD)||(LA27_53>=NE && LA27_53<=NODE)||(LA27_53>=OR && LA27_53<=ORDERED)||(LA27_53>=PARAGRAPHS && LA27_53<=PARENT)||(LA27_53>=PRECEDING && LA27_53<=PRECEDING_SIBLING)||LA27_53==PROCESSING_INSTRUCTION||LA27_53==RETURN||LA27_53==SATISFIES||(LA27_53>=SCHEMAATTRIBUTE && LA27_53<=SELF)||LA27_53==SENTENCES||(LA27_53>=SOME && LA27_53<=STABLE)||LA27_53==TEXT||(LA27_53>=TIMES && LA27_53<=TO)||(LA27_53>=TYPESWITCH && LA27_53<=UNORDERED)||LA27_53==VALIDATE||LA27_53==WHERE||LA27_53==WITHOUT||LA27_53==WORDS||(LA27_53>=StringLiteral && LA27_53<=ASSIGNSi)||(LA27_53>=LPARSi && LA27_53<=RBRACSi)||(LA27_53>=MINUSSi && LA27_53<=LPRAGSi)||(LA27_53>=DBLSLASHSi && LA27_53<=SLASHSi)||(LA27_53>=DOTDOTSi && LA27_53<=ATSi)||(LA27_53>=RBRACKSi && LA27_53<=DOTSi)||LA27_53==LCOMMENTSi||LA27_53==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_53==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_53==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 53, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 64, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 52, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_37==RPARSi) ) {
                            int LA27_53 = input.LA(5);

                            if ( (LA27_53==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_53==EOF||(LA27_53>=ANCESTOR && LA27_53<=AND)||(LA27_53>=ASCENDING && LA27_53<=ATTRIBUTE)||LA27_53==CASE||(LA27_53>=CHILD && LA27_53<=COMMENT)||(LA27_53>=DEFAULT && LA27_53<=DESCENDING)||(LA27_53>=DIV && LA27_53<=ELSE)||LA27_53==EMPTY||(LA27_53>=EQ && LA27_53<=EVERY)||(LA27_53>=EXCEPT && LA27_53<=FOR)||LA27_53==FTCONTAINS||LA27_53==GE||(LA27_53>=GT && LA27_53<=IF)||LA27_53==IN||(LA27_53>=INSTANCE && LA27_53<=IS)||LA27_53==LE||(LA27_53>=LET && LA27_53<=LEVELS)||(LA27_53>=LT && LA27_53<=MOD)||(LA27_53>=NE && LA27_53<=NODE)||(LA27_53>=OR && LA27_53<=ORDERED)||(LA27_53>=PARAGRAPHS && LA27_53<=PARENT)||(LA27_53>=PRECEDING && LA27_53<=PRECEDING_SIBLING)||LA27_53==PROCESSING_INSTRUCTION||LA27_53==RETURN||LA27_53==SATISFIES||(LA27_53>=SCHEMAATTRIBUTE && LA27_53<=SELF)||LA27_53==SENTENCES||(LA27_53>=SOME && LA27_53<=STABLE)||LA27_53==TEXT||(LA27_53>=TIMES && LA27_53<=TO)||(LA27_53>=TYPESWITCH && LA27_53<=UNORDERED)||LA27_53==VALIDATE||LA27_53==WHERE||LA27_53==WITHOUT||LA27_53==WORDS||(LA27_53>=StringLiteral && LA27_53<=ASSIGNSi)||(LA27_53>=LPARSi && LA27_53<=RBRACSi)||(LA27_53>=MINUSSi && LA27_53<=LPRAGSi)||(LA27_53>=DBLSLASHSi && LA27_53<=SLASHSi)||(LA27_53>=DOTDOTSi && LA27_53<=ATSi)||(LA27_53>=RBRACKSi && LA27_53<=DOTSi)||LA27_53==LCOMMENTSi||LA27_53==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_53==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_53==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 53, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 37, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 16, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 4, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMAATTRIBUTE:
                {
                int LA27_5 = input.LA(2);

                if ( (LA27_5==LPARSi) ) {
                    int LA27_17 = input.LA(3);

                    if ( (LA27_17==NCName) ) {
                        int LA27_38 = input.LA(4);

                        if ( (LA27_38==COLONSi) ) {
                            int LA27_54 = input.LA(5);

                            if ( (LA27_54==NCName) ) {
                                int LA27_65 = input.LA(6);

                                if ( (LA27_65==RPARSi) ) {
                                    int LA27_55 = input.LA(7);

                                    if ( (LA27_55==EOF||(LA27_55>=ANCESTOR && LA27_55<=AND)||(LA27_55>=ASCENDING && LA27_55<=ATTRIBUTE)||LA27_55==CASE||(LA27_55>=CHILD && LA27_55<=COMMENT)||(LA27_55>=DEFAULT && LA27_55<=DESCENDING)||(LA27_55>=DIV && LA27_55<=ELSE)||LA27_55==EMPTY||(LA27_55>=EQ && LA27_55<=EVERY)||(LA27_55>=EXCEPT && LA27_55<=FOR)||LA27_55==FTCONTAINS||LA27_55==GE||(LA27_55>=GT && LA27_55<=IF)||LA27_55==IN||(LA27_55>=INSTANCE && LA27_55<=IS)||LA27_55==LE||(LA27_55>=LET && LA27_55<=LEVELS)||(LA27_55>=LT && LA27_55<=MOD)||(LA27_55>=NE && LA27_55<=NODE)||(LA27_55>=OR && LA27_55<=ORDERED)||(LA27_55>=PARAGRAPHS && LA27_55<=PARENT)||(LA27_55>=PRECEDING && LA27_55<=PRECEDING_SIBLING)||LA27_55==PROCESSING_INSTRUCTION||LA27_55==RETURN||LA27_55==SATISFIES||(LA27_55>=SCHEMAATTRIBUTE && LA27_55<=SELF)||LA27_55==SENTENCES||(LA27_55>=SOME && LA27_55<=STABLE)||LA27_55==TEXT||(LA27_55>=TIMES && LA27_55<=TO)||(LA27_55>=TYPESWITCH && LA27_55<=UNORDERED)||LA27_55==VALIDATE||LA27_55==WHERE||LA27_55==WITHOUT||LA27_55==WORDS||(LA27_55>=StringLiteral && LA27_55<=ASSIGNSi)||(LA27_55>=LPARSi && LA27_55<=RBRACSi)||(LA27_55>=MINUSSi && LA27_55<=LPRAGSi)||(LA27_55>=DBLSLASHSi && LA27_55<=SLASHSi)||(LA27_55>=DOTDOTSi && LA27_55<=ATSi)||(LA27_55>=RBRACKSi && LA27_55<=DOTSi)||LA27_55==LCOMMENTSi||LA27_55==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_55==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_55==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_55==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 55, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 65, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 54, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_38==RPARSi) ) {
                            int LA27_55 = input.LA(5);

                            if ( (LA27_55==EOF||(LA27_55>=ANCESTOR && LA27_55<=AND)||(LA27_55>=ASCENDING && LA27_55<=ATTRIBUTE)||LA27_55==CASE||(LA27_55>=CHILD && LA27_55<=COMMENT)||(LA27_55>=DEFAULT && LA27_55<=DESCENDING)||(LA27_55>=DIV && LA27_55<=ELSE)||LA27_55==EMPTY||(LA27_55>=EQ && LA27_55<=EVERY)||(LA27_55>=EXCEPT && LA27_55<=FOR)||LA27_55==FTCONTAINS||LA27_55==GE||(LA27_55>=GT && LA27_55<=IF)||LA27_55==IN||(LA27_55>=INSTANCE && LA27_55<=IS)||LA27_55==LE||(LA27_55>=LET && LA27_55<=LEVELS)||(LA27_55>=LT && LA27_55<=MOD)||(LA27_55>=NE && LA27_55<=NODE)||(LA27_55>=OR && LA27_55<=ORDERED)||(LA27_55>=PARAGRAPHS && LA27_55<=PARENT)||(LA27_55>=PRECEDING && LA27_55<=PRECEDING_SIBLING)||LA27_55==PROCESSING_INSTRUCTION||LA27_55==RETURN||LA27_55==SATISFIES||(LA27_55>=SCHEMAATTRIBUTE && LA27_55<=SELF)||LA27_55==SENTENCES||(LA27_55>=SOME && LA27_55<=STABLE)||LA27_55==TEXT||(LA27_55>=TIMES && LA27_55<=TO)||(LA27_55>=TYPESWITCH && LA27_55<=UNORDERED)||LA27_55==VALIDATE||LA27_55==WHERE||LA27_55==WITHOUT||LA27_55==WORDS||(LA27_55>=StringLiteral && LA27_55<=ASSIGNSi)||(LA27_55>=LPARSi && LA27_55<=RBRACSi)||(LA27_55>=MINUSSi && LA27_55<=LPRAGSi)||(LA27_55>=DBLSLASHSi && LA27_55<=SLASHSi)||(LA27_55>=DOTDOTSi && LA27_55<=ATSi)||(LA27_55>=RBRACKSi && LA27_55<=DOTSi)||LA27_55==LCOMMENTSi||LA27_55==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_55==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_55==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_55==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 55, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 38, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 17, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 5, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA27_6 = input.LA(2);

                if ( (LA27_6==LPARSi) ) {
                    int LA27_18 = input.LA(3);

                    if ( (LA27_18==StringLiteral||LA27_18==NCName) ) {
                        int LA27_39 = input.LA(4);

                        if ( (LA27_39==RPARSi) ) {
                            int LA27_40 = input.LA(5);

                            if ( (LA27_40==EOF||(LA27_40>=ANCESTOR && LA27_40<=AND)||(LA27_40>=ASCENDING && LA27_40<=ATTRIBUTE)||LA27_40==CASE||(LA27_40>=CHILD && LA27_40<=COMMENT)||(LA27_40>=DEFAULT && LA27_40<=DESCENDING)||(LA27_40>=DIV && LA27_40<=ELSE)||LA27_40==EMPTY||(LA27_40>=EQ && LA27_40<=EVERY)||(LA27_40>=EXCEPT && LA27_40<=FOR)||LA27_40==FTCONTAINS||LA27_40==GE||(LA27_40>=GT && LA27_40<=IF)||LA27_40==IN||(LA27_40>=INSTANCE && LA27_40<=IS)||LA27_40==LE||(LA27_40>=LET && LA27_40<=LEVELS)||(LA27_40>=LT && LA27_40<=MOD)||(LA27_40>=NE && LA27_40<=NODE)||(LA27_40>=OR && LA27_40<=ORDERED)||(LA27_40>=PARAGRAPHS && LA27_40<=PARENT)||(LA27_40>=PRECEDING && LA27_40<=PRECEDING_SIBLING)||LA27_40==PROCESSING_INSTRUCTION||LA27_40==RETURN||LA27_40==SATISFIES||(LA27_40>=SCHEMAATTRIBUTE && LA27_40<=SELF)||LA27_40==SENTENCES||(LA27_40>=SOME && LA27_40<=STABLE)||LA27_40==TEXT||(LA27_40>=TIMES && LA27_40<=TO)||(LA27_40>=TYPESWITCH && LA27_40<=UNORDERED)||LA27_40==VALIDATE||LA27_40==WHERE||LA27_40==WITHOUT||LA27_40==WORDS||(LA27_40>=StringLiteral && LA27_40<=ASSIGNSi)||(LA27_40>=LPARSi && LA27_40<=RBRACSi)||(LA27_40>=MINUSSi && LA27_40<=LPRAGSi)||(LA27_40>=DBLSLASHSi && LA27_40<=SLASHSi)||(LA27_40>=DOTDOTSi && LA27_40<=ATSi)||(LA27_40>=RBRACKSi && LA27_40<=DOTSi)||LA27_40==LCOMMENTSi||LA27_40==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_40==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_40==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_40==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 40, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 39, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA27_18==RPARSi) ) {
                        int LA27_40 = input.LA(4);

                        if ( (LA27_40==EOF||(LA27_40>=ANCESTOR && LA27_40<=AND)||(LA27_40>=ASCENDING && LA27_40<=ATTRIBUTE)||LA27_40==CASE||(LA27_40>=CHILD && LA27_40<=COMMENT)||(LA27_40>=DEFAULT && LA27_40<=DESCENDING)||(LA27_40>=DIV && LA27_40<=ELSE)||LA27_40==EMPTY||(LA27_40>=EQ && LA27_40<=EVERY)||(LA27_40>=EXCEPT && LA27_40<=FOR)||LA27_40==FTCONTAINS||LA27_40==GE||(LA27_40>=GT && LA27_40<=IF)||LA27_40==IN||(LA27_40>=INSTANCE && LA27_40<=IS)||LA27_40==LE||(LA27_40>=LET && LA27_40<=LEVELS)||(LA27_40>=LT && LA27_40<=MOD)||(LA27_40>=NE && LA27_40<=NODE)||(LA27_40>=OR && LA27_40<=ORDERED)||(LA27_40>=PARAGRAPHS && LA27_40<=PARENT)||(LA27_40>=PRECEDING && LA27_40<=PRECEDING_SIBLING)||LA27_40==PROCESSING_INSTRUCTION||LA27_40==RETURN||LA27_40==SATISFIES||(LA27_40>=SCHEMAATTRIBUTE && LA27_40<=SELF)||LA27_40==SENTENCES||(LA27_40>=SOME && LA27_40<=STABLE)||LA27_40==TEXT||(LA27_40>=TIMES && LA27_40<=TO)||(LA27_40>=TYPESWITCH && LA27_40<=UNORDERED)||LA27_40==VALIDATE||LA27_40==WHERE||LA27_40==WITHOUT||LA27_40==WORDS||(LA27_40>=StringLiteral && LA27_40<=ASSIGNSi)||(LA27_40>=LPARSi && LA27_40<=RBRACSi)||(LA27_40>=MINUSSi && LA27_40<=LPRAGSi)||(LA27_40>=DBLSLASHSi && LA27_40<=SLASHSi)||(LA27_40>=DOTDOTSi && LA27_40<=ATSi)||(LA27_40>=RBRACKSi && LA27_40<=DOTSi)||LA27_40==LCOMMENTSi||LA27_40==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_40==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_40==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_40==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 40, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 18, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 6, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA27_7 = input.LA(2);

                if ( (LA27_7==LPARSi) ) {
                    int LA27_19 = input.LA(3);

                    if ( (LA27_19==RPARSi) ) {
                        int LA27_41 = input.LA(4);

                        if ( (LA27_41==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_41==EOF||(LA27_41>=ANCESTOR && LA27_41<=AND)||(LA27_41>=ASCENDING && LA27_41<=ATTRIBUTE)||LA27_41==CASE||(LA27_41>=CHILD && LA27_41<=COMMENT)||(LA27_41>=DEFAULT && LA27_41<=DESCENDING)||(LA27_41>=DIV && LA27_41<=ELSE)||LA27_41==EMPTY||(LA27_41>=EQ && LA27_41<=EVERY)||(LA27_41>=EXCEPT && LA27_41<=FOR)||LA27_41==FTCONTAINS||LA27_41==GE||(LA27_41>=GT && LA27_41<=IF)||LA27_41==IN||(LA27_41>=INSTANCE && LA27_41<=IS)||LA27_41==LE||(LA27_41>=LET && LA27_41<=LEVELS)||(LA27_41>=LT && LA27_41<=MOD)||(LA27_41>=NE && LA27_41<=NODE)||(LA27_41>=OR && LA27_41<=ORDERED)||(LA27_41>=PARAGRAPHS && LA27_41<=PARENT)||(LA27_41>=PRECEDING && LA27_41<=PRECEDING_SIBLING)||LA27_41==PROCESSING_INSTRUCTION||LA27_41==RETURN||LA27_41==SATISFIES||(LA27_41>=SCHEMAATTRIBUTE && LA27_41<=SELF)||LA27_41==SENTENCES||(LA27_41>=SOME && LA27_41<=STABLE)||LA27_41==TEXT||(LA27_41>=TIMES && LA27_41<=TO)||(LA27_41>=TYPESWITCH && LA27_41<=UNORDERED)||LA27_41==VALIDATE||LA27_41==WHERE||LA27_41==WITHOUT||LA27_41==WORDS||(LA27_41>=StringLiteral && LA27_41<=ASSIGNSi)||(LA27_41>=LPARSi && LA27_41<=RBRACSi)||(LA27_41>=MINUSSi && LA27_41<=LPRAGSi)||(LA27_41>=DBLSLASHSi && LA27_41<=SLASHSi)||(LA27_41>=DOTDOTSi && LA27_41<=ATSi)||(LA27_41>=RBRACKSi && LA27_41<=DOTSi)||LA27_41==LCOMMENTSi||LA27_41==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_41==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_41==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 41, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 19, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 7, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA27_8 = input.LA(2);

                if ( (LA27_8==LPARSi) ) {
                    int LA27_20 = input.LA(3);

                    if ( (LA27_20==RPARSi) ) {
                        int LA27_42 = input.LA(4);

                        if ( (LA27_42==EOF||(LA27_42>=ANCESTOR && LA27_42<=AND)||(LA27_42>=ASCENDING && LA27_42<=ATTRIBUTE)||LA27_42==CASE||(LA27_42>=CHILD && LA27_42<=COMMENT)||(LA27_42>=DEFAULT && LA27_42<=DESCENDING)||(LA27_42>=DIV && LA27_42<=ELSE)||LA27_42==EMPTY||(LA27_42>=EQ && LA27_42<=EVERY)||(LA27_42>=EXCEPT && LA27_42<=FOR)||LA27_42==FTCONTAINS||LA27_42==GE||(LA27_42>=GT && LA27_42<=IF)||LA27_42==IN||(LA27_42>=INSTANCE && LA27_42<=IS)||LA27_42==LE||(LA27_42>=LET && LA27_42<=LEVELS)||(LA27_42>=LT && LA27_42<=MOD)||(LA27_42>=NE && LA27_42<=NODE)||(LA27_42>=OR && LA27_42<=ORDERED)||(LA27_42>=PARAGRAPHS && LA27_42<=PARENT)||(LA27_42>=PRECEDING && LA27_42<=PRECEDING_SIBLING)||LA27_42==PROCESSING_INSTRUCTION||LA27_42==RETURN||LA27_42==SATISFIES||(LA27_42>=SCHEMAATTRIBUTE && LA27_42<=SELF)||LA27_42==SENTENCES||(LA27_42>=SOME && LA27_42<=STABLE)||LA27_42==TEXT||(LA27_42>=TIMES && LA27_42<=TO)||(LA27_42>=TYPESWITCH && LA27_42<=UNORDERED)||LA27_42==VALIDATE||LA27_42==WHERE||LA27_42==WITHOUT||LA27_42==WORDS||(LA27_42>=StringLiteral && LA27_42<=ASSIGNSi)||(LA27_42>=LPARSi && LA27_42<=RBRACSi)||(LA27_42>=MINUSSi && LA27_42<=LPRAGSi)||(LA27_42>=DBLSLASHSi && LA27_42<=SLASHSi)||(LA27_42>=DOTDOTSi && LA27_42<=ATSi)||(LA27_42>=RBRACKSi && LA27_42<=DOTSi)||LA27_42==LCOMMENTSi||LA27_42==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_42==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_42==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_42==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 42, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 20, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 8, input);

                    throw nvae;
                }
                }
                break;
            case NODE:
                {
                int LA27_9 = input.LA(2);

                if ( (LA27_9==LPARSi) ) {
                    int LA27_21 = input.LA(3);

                    if ( (LA27_21==RPARSi) ) {
                        int LA27_43 = input.LA(4);

                        if ( (LA27_43==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_43==EOF||(LA27_43>=ANCESTOR && LA27_43<=AND)||(LA27_43>=ASCENDING && LA27_43<=ATTRIBUTE)||LA27_43==CASE||(LA27_43>=CHILD && LA27_43<=COMMENT)||(LA27_43>=DEFAULT && LA27_43<=DESCENDING)||(LA27_43>=DIV && LA27_43<=ELSE)||LA27_43==EMPTY||(LA27_43>=EQ && LA27_43<=EVERY)||(LA27_43>=EXCEPT && LA27_43<=FOR)||LA27_43==FTCONTAINS||LA27_43==GE||(LA27_43>=GT && LA27_43<=IF)||LA27_43==IN||(LA27_43>=INSTANCE && LA27_43<=IS)||LA27_43==LE||(LA27_43>=LET && LA27_43<=LEVELS)||(LA27_43>=LT && LA27_43<=MOD)||(LA27_43>=NE && LA27_43<=NODE)||(LA27_43>=OR && LA27_43<=ORDERED)||(LA27_43>=PARAGRAPHS && LA27_43<=PARENT)||(LA27_43>=PRECEDING && LA27_43<=PRECEDING_SIBLING)||LA27_43==PROCESSING_INSTRUCTION||LA27_43==RETURN||LA27_43==SATISFIES||(LA27_43>=SCHEMAATTRIBUTE && LA27_43<=SELF)||LA27_43==SENTENCES||(LA27_43>=SOME && LA27_43<=STABLE)||LA27_43==TEXT||(LA27_43>=TIMES && LA27_43<=TO)||(LA27_43>=TYPESWITCH && LA27_43<=UNORDERED)||LA27_43==VALIDATE||LA27_43==WHERE||LA27_43==WITHOUT||LA27_43==WORDS||(LA27_43>=StringLiteral && LA27_43<=ASSIGNSi)||(LA27_43>=LPARSi && LA27_43<=RBRACSi)||(LA27_43>=MINUSSi && LA27_43<=LPRAGSi)||(LA27_43>=DBLSLASHSi && LA27_43<=SLASHSi)||(LA27_43>=DOTDOTSi && LA27_43<=ATSi)||(LA27_43>=RBRACKSi && LA27_43<=DOTSi)||LA27_43==LCOMMENTSi||LA27_43==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_43==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_43==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 43, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 21, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 9, input);

                    throw nvae;
                }
                }
                break;
            case ITEM:
                {
                int LA27_10 = input.LA(2);

                if ( (LA27_10==LPARSi) ) {
                    int LA27_22 = input.LA(3);

                    if ( (LA27_22==RPARSi) ) {
                        int LA27_44 = input.LA(4);

                        if ( (LA27_44==EOF||(LA27_44>=ANCESTOR && LA27_44<=AND)||(LA27_44>=ASCENDING && LA27_44<=ATTRIBUTE)||LA27_44==CASE||(LA27_44>=CHILD && LA27_44<=COMMENT)||(LA27_44>=DEFAULT && LA27_44<=DESCENDING)||(LA27_44>=DIV && LA27_44<=ELSE)||LA27_44==EMPTY||(LA27_44>=EQ && LA27_44<=EVERY)||(LA27_44>=EXCEPT && LA27_44<=FOR)||LA27_44==FTCONTAINS||LA27_44==GE||(LA27_44>=GT && LA27_44<=IF)||LA27_44==IN||(LA27_44>=INSTANCE && LA27_44<=IS)||LA27_44==LE||(LA27_44>=LET && LA27_44<=LEVELS)||(LA27_44>=LT && LA27_44<=MOD)||(LA27_44>=NE && LA27_44<=NODE)||(LA27_44>=OR && LA27_44<=ORDERED)||(LA27_44>=PARAGRAPHS && LA27_44<=PARENT)||(LA27_44>=PRECEDING && LA27_44<=PRECEDING_SIBLING)||LA27_44==PROCESSING_INSTRUCTION||LA27_44==RETURN||LA27_44==SATISFIES||(LA27_44>=SCHEMAATTRIBUTE && LA27_44<=SELF)||LA27_44==SENTENCES||(LA27_44>=SOME && LA27_44<=STABLE)||LA27_44==TEXT||(LA27_44>=TIMES && LA27_44<=TO)||(LA27_44>=TYPESWITCH && LA27_44<=UNORDERED)||LA27_44==VALIDATE||LA27_44==WHERE||LA27_44==WITHOUT||LA27_44==WORDS||(LA27_44>=StringLiteral && LA27_44<=ASSIGNSi)||(LA27_44>=LPARSi && LA27_44<=RBRACSi)||(LA27_44>=MINUSSi && LA27_44<=LPRAGSi)||(LA27_44>=DBLSLASHSi && LA27_44<=SLASHSi)||(LA27_44>=DOTDOTSi && LA27_44<=ATSi)||(LA27_44>=RBRACKSi && LA27_44<=DOTSi)||LA27_44==LCOMMENTSi||LA27_44==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_44==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_44==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_44==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 44, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 22, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 10, input);

                    throw nvae;
                }
                }
                break;
            case NCName:
                {
                int LA27_11 = input.LA(2);

                if ( (LA27_11==COLONSi) ) {
                    int LA27_23 = input.LA(3);

                    if ( (LA27_23==NCName) ) {
                        int LA27_45 = input.LA(4);

                        if ( (LA27_45==EOF||(LA27_45>=ANCESTOR && LA27_45<=AND)||(LA27_45>=ASCENDING && LA27_45<=ATTRIBUTE)||LA27_45==CASE||(LA27_45>=CHILD && LA27_45<=COMMENT)||(LA27_45>=DEFAULT && LA27_45<=DESCENDING)||(LA27_45>=DIV && LA27_45<=ELSE)||LA27_45==EMPTY||(LA27_45>=EQ && LA27_45<=EVERY)||(LA27_45>=EXCEPT && LA27_45<=FOR)||LA27_45==FTCONTAINS||LA27_45==GE||(LA27_45>=GT && LA27_45<=IF)||LA27_45==IN||(LA27_45>=INSTANCE && LA27_45<=IS)||LA27_45==LE||(LA27_45>=LET && LA27_45<=LEVELS)||(LA27_45>=LT && LA27_45<=MOD)||(LA27_45>=NE && LA27_45<=NODE)||(LA27_45>=OR && LA27_45<=ORDERED)||(LA27_45>=PARAGRAPHS && LA27_45<=PARENT)||(LA27_45>=PRECEDING && LA27_45<=PRECEDING_SIBLING)||LA27_45==PROCESSING_INSTRUCTION||LA27_45==RETURN||LA27_45==SATISFIES||(LA27_45>=SCHEMAATTRIBUTE && LA27_45<=SELF)||LA27_45==SENTENCES||(LA27_45>=SOME && LA27_45<=STABLE)||LA27_45==TEXT||(LA27_45>=TIMES && LA27_45<=TO)||(LA27_45>=TYPESWITCH && LA27_45<=UNORDERED)||LA27_45==VALIDATE||LA27_45==WHERE||LA27_45==WITHOUT||LA27_45==WORDS||(LA27_45>=StringLiteral && LA27_45<=ASSIGNSi)||(LA27_45>=LPARSi && LA27_45<=RBRACSi)||(LA27_45>=MINUSSi && LA27_45<=LPRAGSi)||(LA27_45>=DBLSLASHSi && LA27_45<=SLASHSi)||(LA27_45>=DOTDOTSi && LA27_45<=ATSi)||(LA27_45>=RBRACKSi && LA27_45<=DOTSi)||LA27_45==LCOMMENTSi||LA27_45==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_45==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_45==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_45==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 45, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 23, input);

                        throw nvae;
                    }
                }
                else if ( (LA27_11==EOF||(LA27_11>=ANCESTOR && LA27_11<=AND)||(LA27_11>=ASCENDING && LA27_11<=ATTRIBUTE)||LA27_11==CASE||(LA27_11>=CHILD && LA27_11<=COMMENT)||(LA27_11>=DEFAULT && LA27_11<=DESCENDING)||(LA27_11>=DIV && LA27_11<=ELSE)||LA27_11==EMPTY||(LA27_11>=EQ && LA27_11<=EVERY)||(LA27_11>=EXCEPT && LA27_11<=FOR)||LA27_11==FTCONTAINS||LA27_11==GE||(LA27_11>=GT && LA27_11<=IF)||LA27_11==IN||(LA27_11>=INSTANCE && LA27_11<=IS)||LA27_11==LE||(LA27_11>=LET && LA27_11<=LEVELS)||(LA27_11>=LT && LA27_11<=MOD)||(LA27_11>=NE && LA27_11<=NODE)||(LA27_11>=OR && LA27_11<=ORDERED)||(LA27_11>=PARAGRAPHS && LA27_11<=PARENT)||(LA27_11>=PRECEDING && LA27_11<=PRECEDING_SIBLING)||LA27_11==PROCESSING_INSTRUCTION||LA27_11==RETURN||LA27_11==SATISFIES||(LA27_11>=SCHEMAATTRIBUTE && LA27_11<=SELF)||LA27_11==SENTENCES||(LA27_11>=SOME && LA27_11<=STABLE)||LA27_11==TEXT||(LA27_11>=TIMES && LA27_11<=TO)||(LA27_11>=TYPESWITCH && LA27_11<=UNORDERED)||LA27_11==VALIDATE||LA27_11==WHERE||LA27_11==WITHOUT||LA27_11==WORDS||(LA27_11>=StringLiteral && LA27_11<=ASSIGNSi)||(LA27_11>=LPARSi && LA27_11<=RBRACSi)||(LA27_11>=MINUSSi && LA27_11<=LPRAGSi)||(LA27_11>=DBLSLASHSi && LA27_11<=SLASHSi)||(LA27_11>=DOTDOTSi && LA27_11<=ATSi)||(LA27_11>=RBRACKSi && LA27_11<=DOTSi)||LA27_11==LCOMMENTSi||LA27_11==LPISi) ) {
                    alt27=2;
                }
                else if ( (LA27_11==PLUSSi) ) {
                    int LA27_25 = input.LA(3);

                    if ( (synpred1()) ) {
                        alt27=1;
                    }
                    else if ( (true) ) {
                        alt27=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                        throw nvae;
                    }
                }
                else if ( (LA27_11==STARSi) ) {
                    int LA27_26 = input.LA(3);

                    if ( (synpred1()) ) {
                        alt27=1;
                    }
                    else if ( (true) ) {
                        alt27=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                        throw nvae;
                    }
                }
                else if ( (LA27_11==QUESTIONSi) && (synpred1())) {
                    alt27=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 11, input);

                    throw nvae;
                }
                }
                break;
            case EMPTY_SEQUENCE:
                {
                alt27=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("366:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 0, input);

                throw nvae;
            }

            switch (alt27) {
                case 1 :
                    // etc/XQFT.g:366:34: ( itemType occurrenceIndicator )=> itemType occurrenceIndicator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_itemType_in_sequenceType2158);
                    itemType144=itemType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, itemType144.getTree());
                    pushFollow(FOLLOW_occurrenceIndicator_in_sequenceType2160);
                    occurrenceIndicator145=occurrenceIndicator();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, occurrenceIndicator145.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:367:13: itemType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_itemType_in_sequenceType2174);
                    itemType146=itemType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, itemType146.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:368:13: EMPTY_SEQUENCE LPARSi RPARSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EMPTY_SEQUENCE147=(Token)input.LT(1);
                    match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_sequenceType2188); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EMPTY_SEQUENCE147_tree = (CommonTree)adaptor.create(EMPTY_SEQUENCE147);
                    adaptor.addChild(root_0, EMPTY_SEQUENCE147_tree);
                    }
                    LPARSi148=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_sequenceType2190); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi148_tree = (CommonTree)adaptor.create(LPARSi148);
                    adaptor.addChild(root_0, LPARSi148_tree);
                    }
                    RPARSi149=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_sequenceType2192); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi149_tree = (CommonTree)adaptor.create(RPARSi149);
                    adaptor.addChild(root_0, RPARSi149_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end sequenceType

    public static class itemType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start itemType
    // etc/XQFT.g:370:2: itemType : ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType ) ;
    public final itemType_return itemType() throws RecognitionException {
        itemType_return retval = new itemType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ITEM151=null;
        Token LPARSi152=null;
        Token RPARSi153=null;
        kindTest_return kindTest150 = null;

        atomicType_return atomicType154 = null;


        CommonTree ITEM151_tree=null;
        CommonTree LPARSi152_tree=null;
        CommonTree RPARSi153_tree=null;

        try {
            // etc/XQFT.g:370:33: ( ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType ) )
            // etc/XQFT.g:370:35: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:370:35: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )
            int alt28=3;
            switch ( input.LA(1) ) {
            case ATTRIBUTE:
            case COMMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case NODE:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case TEXT:
                {
                alt28=1;
                }
                break;
            case ITEM:
                {
                alt28=2;
                }
                break;
            case NCName:
                {
                alt28=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("370:35: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 0, input);

                throw nvae;
            }

            switch (alt28) {
                case 1 :
                    // etc/XQFT.g:370:36: kindTest
                    {
                    pushFollow(FOLLOW_kindTest_in_itemType2234);
                    kindTest150=kindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, kindTest150.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:370:47: ( ITEM LPARSi RPARSi )
                    {
                    // etc/XQFT.g:370:47: ( ITEM LPARSi RPARSi )
                    // etc/XQFT.g:370:48: ITEM LPARSi RPARSi
                    {
                    ITEM151=(Token)input.LT(1);
                    match(input,ITEM,FOLLOW_ITEM_in_itemType2239); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ITEM151_tree = (CommonTree)adaptor.create(ITEM151);
                    adaptor.addChild(root_0, ITEM151_tree);
                    }
                    LPARSi152=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_itemType2241); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi152_tree = (CommonTree)adaptor.create(LPARSi152);
                    adaptor.addChild(root_0, LPARSi152_tree);
                    }
                    RPARSi153=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_itemType2243); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi153_tree = (CommonTree)adaptor.create(RPARSi153);
                    adaptor.addChild(root_0, RPARSi153_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:370:70: atomicType
                    {
                    pushFollow(FOLLOW_atomicType_in_itemType2248);
                    atomicType154=atomicType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, atomicType154.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end itemType

    public static class kindTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kindTest
    // etc/XQFT.g:371:3: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest );
    public final kindTest_return kindTest() throws RecognitionException {
        kindTest_return retval = new kindTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        documentTest_return documentTest155 = null;

        elementTest_return elementTest156 = null;

        attributeTest_return attributeTest157 = null;

        schemaElementTest_return schemaElementTest158 = null;

        schemaAttributeTest_return schemaAttributeTest159 = null;

        piTest_return piTest160 = null;

        commentTest_return commentTest161 = null;

        textTest_return textTest162 = null;

        anyKindTest_return anyKindTest163 = null;



        try {
            // etc/XQFT.g:371:34: ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest )
            int alt29=9;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                alt29=1;
                }
                break;
            case ELEMENT:
                {
                alt29=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt29=3;
                }
                break;
            case SCHEMAELEMENT:
                {
                alt29=4;
                }
                break;
            case SCHEMAATTRIBUTE:
                {
                alt29=5;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt29=6;
                }
                break;
            case COMMENT:
                {
                alt29=7;
                }
                break;
            case TEXT:
                {
                alt29=8;
                }
                break;
            case NODE:
                {
                alt29=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("371:3: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest );", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // etc/XQFT.g:371:36: documentTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_documentTest_in_kindTest2280);
                    documentTest155=documentTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, documentTest155.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:372:39: elementTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_elementTest_in_kindTest2320);
                    elementTest156=elementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementTest156.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:373:39: attributeTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attributeTest_in_kindTest2360);
                    attributeTest157=attributeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attributeTest157.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:374:39: schemaElementTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaElementTest_in_kindTest2400);
                    schemaElementTest158=schemaElementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaElementTest158.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:375:39: schemaAttributeTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaAttributeTest_in_kindTest2440);
                    schemaAttributeTest159=schemaAttributeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaAttributeTest159.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:376:39: piTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_piTest_in_kindTest2480);
                    piTest160=piTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, piTest160.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:377:39: commentTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_commentTest_in_kindTest2520);
                    commentTest161=commentTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, commentTest161.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:378:39: textTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_textTest_in_kindTest2560);
                    textTest162=textTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, textTest162.getTree());

                    }
                    break;
                case 9 :
                    // etc/XQFT.g:379:39: anyKindTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_anyKindTest_in_kindTest2600);
                    anyKindTest163=anyKindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, anyKindTest163.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end kindTest

    public static class documentTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start documentTest
    // etc/XQFT.g:380:4: documentTest : DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi ;
    public final documentTest_return documentTest() throws RecognitionException {
        documentTest_return retval = new documentTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOCUMENT_NODE164=null;
        Token LPARSi165=null;
        Token RPARSi168=null;
        elementTest_return elementTest166 = null;

        schemaElementTest_return schemaElementTest167 = null;


        CommonTree DOCUMENT_NODE164_tree=null;
        CommonTree LPARSi165_tree=null;
        CommonTree RPARSi168_tree=null;

        try {
            // etc/XQFT.g:380:35: ( DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi )
            // etc/XQFT.g:380:37: DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            DOCUMENT_NODE164=(Token)input.LT(1);
            match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_documentTest2628); if (failed) return retval;
            if ( backtracking==0 ) {
            DOCUMENT_NODE164_tree = (CommonTree)adaptor.create(DOCUMENT_NODE164);
            adaptor.addChild(root_0, DOCUMENT_NODE164_tree);
            }
            LPARSi165=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_documentTest2630); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi165_tree = (CommonTree)adaptor.create(LPARSi165);
            adaptor.addChild(root_0, LPARSi165_tree);
            }
            // etc/XQFT.g:380:58: ( elementTest | schemaElementTest )?
            int alt30=3;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ELEMENT) ) {
                alt30=1;
            }
            else if ( (LA30_0==SCHEMAELEMENT) ) {
                alt30=2;
            }
            switch (alt30) {
                case 1 :
                    // etc/XQFT.g:380:59: elementTest
                    {
                    pushFollow(FOLLOW_elementTest_in_documentTest2633);
                    elementTest166=elementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementTest166.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:380:73: schemaElementTest
                    {
                    pushFollow(FOLLOW_schemaElementTest_in_documentTest2637);
                    schemaElementTest167=schemaElementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaElementTest167.getTree());

                    }
                    break;

            }

            RPARSi168=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_documentTest2641); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi168_tree = (CommonTree)adaptor.create(RPARSi168);
            adaptor.addChild(root_0, RPARSi168_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end documentTest

    public static class elementTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementTest
    // etc/XQFT.g:381:5: elementTest : ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi ;
    public final elementTest_return elementTest() throws RecognitionException {
        elementTest_return retval = new elementTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELEMENT169=null;
        Token LPARSi170=null;
        Token COMMASi172=null;
        Token QUESTIONSi174=null;
        Token RPARSi175=null;
        elementNameOrWildcard_return elementNameOrWildcard171 = null;

        typeName_return typeName173 = null;


        CommonTree ELEMENT169_tree=null;
        CommonTree LPARSi170_tree=null;
        CommonTree COMMASi172_tree=null;
        CommonTree QUESTIONSi174_tree=null;
        CommonTree RPARSi175_tree=null;

        try {
            // etc/XQFT.g:381:34: ( ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi )
            // etc/XQFT.g:381:36: ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            ELEMENT169=(Token)input.LT(1);
            match(input,ELEMENT,FOLLOW_ELEMENT_in_elementTest2669); if (failed) return retval;
            if ( backtracking==0 ) {
            ELEMENT169_tree = (CommonTree)adaptor.create(ELEMENT169);
            adaptor.addChild(root_0, ELEMENT169_tree);
            }
            LPARSi170=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_elementTest2671); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi170_tree = (CommonTree)adaptor.create(LPARSi170);
            adaptor.addChild(root_0, LPARSi170_tree);
            }
            // etc/XQFT.g:381:51: ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==NCName||LA33_0==STARSi) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // etc/XQFT.g:381:52: elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )?
                    {
                    pushFollow(FOLLOW_elementNameOrWildcard_in_elementTest2674);
                    elementNameOrWildcard171=elementNameOrWildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementNameOrWildcard171.getTree());
                    // etc/XQFT.g:381:74: ( COMMASi typeName ( QUESTIONSi )? )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==COMMASi) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // etc/XQFT.g:381:75: COMMASi typeName ( QUESTIONSi )?
                            {
                            COMMASi172=(Token)input.LT(1);
                            match(input,COMMASi,FOLLOW_COMMASi_in_elementTest2677); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMASi172_tree = (CommonTree)adaptor.create(COMMASi172);
                            adaptor.addChild(root_0, COMMASi172_tree);
                            }
                            pushFollow(FOLLOW_typeName_in_elementTest2679);
                            typeName173=typeName();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, typeName173.getTree());
                            // etc/XQFT.g:381:92: ( QUESTIONSi )?
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==QUESTIONSi) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    // etc/XQFT.g:381:92: QUESTIONSi
                                    {
                                    QUESTIONSi174=(Token)input.LT(1);
                                    match(input,QUESTIONSi,FOLLOW_QUESTIONSi_in_elementTest2681); if (failed) return retval;
                                    if ( backtracking==0 ) {
                                    QUESTIONSi174_tree = (CommonTree)adaptor.create(QUESTIONSi174);
                                    adaptor.addChild(root_0, QUESTIONSi174_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            RPARSi175=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_elementTest2688); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi175_tree = (CommonTree)adaptor.create(RPARSi175);
            adaptor.addChild(root_0, RPARSi175_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementTest

    public static class elementNameOrWildcard_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementNameOrWildcard
    // etc/XQFT.g:382:6: elementNameOrWildcard : ( elementName | STARSi );
    public final elementNameOrWildcard_return elementNameOrWildcard() throws RecognitionException {
        elementNameOrWildcard_return retval = new elementNameOrWildcard_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STARSi177=null;
        elementName_return elementName176 = null;


        CommonTree STARSi177_tree=null;

        try {
            // etc/XQFT.g:382:37: ( elementName | STARSi )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==NCName) ) {
                alt34=1;
            }
            else if ( (LA34_0==STARSi) ) {
                alt34=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("382:6: elementNameOrWildcard : ( elementName | STARSi );", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // etc/XQFT.g:382:39: elementName
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_elementName_in_elementNameOrWildcard2745);
                    elementName176=elementName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementName176.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:382:53: STARSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STARSi177=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_elementNameOrWildcard2749); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi177_tree = (CommonTree)adaptor.create(STARSi177);
                    adaptor.addChild(root_0, STARSi177_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementNameOrWildcard

    public static class elementName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementName
    // etc/XQFT.g:383:7: elementName : qName ;
    public final elementName_return elementName() throws RecognitionException {
        elementName_return retval = new elementName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        qName_return qName178 = null;



        try {
            // etc/XQFT.g:383:38: ( qName )
            // etc/XQFT.g:383:40: qName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_elementName2781);
            qName178=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName178.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementName

    public static class typeName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeName
    // etc/XQFT.g:384:6: typeName : qName ;
    public final typeName_return typeName() throws RecognitionException {
        typeName_return retval = new typeName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        qName_return qName179 = null;



        try {
            // etc/XQFT.g:384:37: ( qName )
            // etc/XQFT.g:384:39: qName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_typeName2815);
            qName179=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName179.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeName

    public static class schemaElementTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaElementTest
    // etc/XQFT.g:385:5: schemaElementTest : SCHEMAELEMENT LPARSi elementDeclaration RPARSi ;
    public final schemaElementTest_return schemaElementTest() throws RecognitionException {
        schemaElementTest_return retval = new schemaElementTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SCHEMAELEMENT180=null;
        Token LPARSi181=null;
        Token RPARSi183=null;
        elementDeclaration_return elementDeclaration182 = null;


        CommonTree SCHEMAELEMENT180_tree=null;
        CommonTree LPARSi181_tree=null;
        CommonTree RPARSi183_tree=null;

        try {
            // etc/XQFT.g:385:37: ( SCHEMAELEMENT LPARSi elementDeclaration RPARSi )
            // etc/XQFT.g:385:39: SCHEMAELEMENT LPARSi elementDeclaration RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            SCHEMAELEMENT180=(Token)input.LT(1);
            match(input,SCHEMAELEMENT,FOLLOW_SCHEMAELEMENT_in_schemaElementTest2840); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMAELEMENT180_tree = (CommonTree)adaptor.create(SCHEMAELEMENT180);
            adaptor.addChild(root_0, SCHEMAELEMENT180_tree);
            }
            LPARSi181=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_schemaElementTest2842); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi181_tree = (CommonTree)adaptor.create(LPARSi181);
            adaptor.addChild(root_0, LPARSi181_tree);
            }
            pushFollow(FOLLOW_elementDeclaration_in_schemaElementTest2844);
            elementDeclaration182=elementDeclaration();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, elementDeclaration182.getTree());
            RPARSi183=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_schemaElementTest2846); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi183_tree = (CommonTree)adaptor.create(RPARSi183);
            adaptor.addChild(root_0, RPARSi183_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaElementTest

    public static class elementDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementDeclaration
    // etc/XQFT.g:386:6: elementDeclaration : elementName ;
    public final elementDeclaration_return elementDeclaration() throws RecognitionException {
        elementDeclaration_return retval = new elementDeclaration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        elementName_return elementName184 = null;



        try {
            // etc/XQFT.g:386:37: ( elementName )
            // etc/XQFT.g:386:39: elementName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementName_in_elementDeclaration2870);
            elementName184=elementName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, elementName184.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementDeclaration

    public static class attributeTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeTest
    // etc/XQFT.g:392:4: attributeTest : ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi ;
    public final attributeTest_return attributeTest() throws RecognitionException {
        attributeTest_return retval = new attributeTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ATTRIBUTE185=null;
        Token LPARSi186=null;
        Token COMMASi188=null;
        Token RPARSi190=null;
        attribNameOrWildcard_return attribNameOrWildcard187 = null;

        typeName_return typeName189 = null;


        CommonTree ATTRIBUTE185_tree=null;
        CommonTree LPARSi186_tree=null;
        CommonTree COMMASi188_tree=null;
        CommonTree RPARSi190_tree=null;

        try {
            // etc/XQFT.g:392:35: ( ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi )
            // etc/XQFT.g:392:37: ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            ATTRIBUTE185=(Token)input.LT(1);
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attributeTest2902); if (failed) return retval;
            if ( backtracking==0 ) {
            ATTRIBUTE185_tree = (CommonTree)adaptor.create(ATTRIBUTE185);
            adaptor.addChild(root_0, ATTRIBUTE185_tree);
            }
            LPARSi186=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_attributeTest2904); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi186_tree = (CommonTree)adaptor.create(LPARSi186);
            adaptor.addChild(root_0, LPARSi186_tree);
            }
            // etc/XQFT.g:392:54: ( attribNameOrWildcard ( COMMASi typeName )? )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==NCName||LA36_0==STARSi) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // etc/XQFT.g:392:55: attribNameOrWildcard ( COMMASi typeName )?
                    {
                    pushFollow(FOLLOW_attribNameOrWildcard_in_attributeTest2907);
                    attribNameOrWildcard187=attribNameOrWildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attribNameOrWildcard187.getTree());
                    // etc/XQFT.g:392:76: ( COMMASi typeName )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==COMMASi) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // etc/XQFT.g:392:77: COMMASi typeName
                            {
                            COMMASi188=(Token)input.LT(1);
                            match(input,COMMASi,FOLLOW_COMMASi_in_attributeTest2910); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMASi188_tree = (CommonTree)adaptor.create(COMMASi188);
                            adaptor.addChild(root_0, COMMASi188_tree);
                            }
                            pushFollow(FOLLOW_typeName_in_attributeTest2912);
                            typeName189=typeName();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, typeName189.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPARSi190=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_attributeTest2918); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi190_tree = (CommonTree)adaptor.create(RPARSi190);
            adaptor.addChild(root_0, RPARSi190_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeTest

    public static class attribNameOrWildcard_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attribNameOrWildcard
    // etc/XQFT.g:393:5: attribNameOrWildcard : ( attributeName | STARSi );
    public final attribNameOrWildcard_return attribNameOrWildcard() throws RecognitionException {
        attribNameOrWildcard_return retval = new attribNameOrWildcard_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STARSi192=null;
        attributeName_return attributeName191 = null;


        CommonTree STARSi192_tree=null;

        try {
            // etc/XQFT.g:393:36: ( attributeName | STARSi )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==NCName) ) {
                alt37=1;
            }
            else if ( (LA37_0==STARSi) ) {
                alt37=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("393:5: attribNameOrWildcard : ( attributeName | STARSi );", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // etc/XQFT.g:393:38: attributeName
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_attributeName_in_attribNameOrWildcard2939);
                    attributeName191=attributeName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attributeName191.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:393:54: STARSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STARSi192=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_attribNameOrWildcard2943); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi192_tree = (CommonTree)adaptor.create(STARSi192);
                    adaptor.addChild(root_0, STARSi192_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attribNameOrWildcard

    public static class attributeName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeName
    // etc/XQFT.g:394:6: attributeName : qName ;
    public final attributeName_return attributeName() throws RecognitionException {
        attributeName_return retval = new attributeName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        qName_return qName193 = null;



        try {
            // etc/XQFT.g:394:37: ( qName )
            // etc/XQFT.g:394:39: qName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_attributeName2972);
            qName193=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName193.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeName

    public static class schemaAttributeTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaAttributeTest
    // etc/XQFT.g:399:4: schemaAttributeTest : SCHEMAATTRIBUTE LPARSi attributeDeclaration RPARSi ;
    public final schemaAttributeTest_return schemaAttributeTest() throws RecognitionException {
        schemaAttributeTest_return retval = new schemaAttributeTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SCHEMAATTRIBUTE194=null;
        Token LPARSi195=null;
        Token RPARSi197=null;
        attributeDeclaration_return attributeDeclaration196 = null;


        CommonTree SCHEMAATTRIBUTE194_tree=null;
        CommonTree LPARSi195_tree=null;
        CommonTree RPARSi197_tree=null;

        try {
            // etc/XQFT.g:399:35: ( SCHEMAATTRIBUTE LPARSi attributeDeclaration RPARSi )
            // etc/XQFT.g:399:37: SCHEMAATTRIBUTE LPARSi attributeDeclaration RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            SCHEMAATTRIBUTE194=(Token)input.LT(1);
            match(input,SCHEMAATTRIBUTE,FOLLOW_SCHEMAATTRIBUTE_in_schemaAttributeTest2997); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMAATTRIBUTE194_tree = (CommonTree)adaptor.create(SCHEMAATTRIBUTE194);
            adaptor.addChild(root_0, SCHEMAATTRIBUTE194_tree);
            }
            LPARSi195=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_schemaAttributeTest2999); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi195_tree = (CommonTree)adaptor.create(LPARSi195);
            adaptor.addChild(root_0, LPARSi195_tree);
            }
            pushFollow(FOLLOW_attributeDeclaration_in_schemaAttributeTest3001);
            attributeDeclaration196=attributeDeclaration();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, attributeDeclaration196.getTree());
            RPARSi197=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_schemaAttributeTest3003); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi197_tree = (CommonTree)adaptor.create(RPARSi197);
            adaptor.addChild(root_0, RPARSi197_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaAttributeTest

    public static class attributeDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeDeclaration
    // etc/XQFT.g:400:5: attributeDeclaration : attributeName ;
    public final attributeDeclaration_return attributeDeclaration() throws RecognitionException {
        attributeDeclaration_return retval = new attributeDeclaration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        attributeName_return attributeName198 = null;



        try {
            // etc/XQFT.g:400:36: ( attributeName )
            // etc/XQFT.g:400:38: attributeName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_attributeName_in_attributeDeclaration3024);
            attributeName198=attributeName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, attributeName198.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeDeclaration

    public static class piTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start piTest
    // etc/XQFT.g:402:4: piTest : PROCESSING_INSTRUCTION LPARSi ( NCName | StringLiteral )? RPARSi ;
    public final piTest_return piTest() throws RecognitionException {
        piTest_return retval = new piTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PROCESSING_INSTRUCTION199=null;
        Token LPARSi200=null;
        Token set201=null;
        Token RPARSi202=null;

        CommonTree PROCESSING_INSTRUCTION199_tree=null;
        CommonTree LPARSi200_tree=null;
        CommonTree set201_tree=null;
        CommonTree RPARSi202_tree=null;

        try {
            // etc/XQFT.g:402:35: ( PROCESSING_INSTRUCTION LPARSi ( NCName | StringLiteral )? RPARSi )
            // etc/XQFT.g:402:37: PROCESSING_INSTRUCTION LPARSi ( NCName | StringLiteral )? RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            PROCESSING_INSTRUCTION199=(Token)input.LT(1);
            match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_piTest3059); if (failed) return retval;
            if ( backtracking==0 ) {
            PROCESSING_INSTRUCTION199_tree = (CommonTree)adaptor.create(PROCESSING_INSTRUCTION199);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION199_tree);
            }
            LPARSi200=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_piTest3061); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi200_tree = (CommonTree)adaptor.create(LPARSi200);
            adaptor.addChild(root_0, LPARSi200_tree);
            }
            // etc/XQFT.g:402:67: ( NCName | StringLiteral )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==StringLiteral||LA38_0==NCName) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // etc/XQFT.g:
                    {
                    set201=(Token)input.LT(1);
                    if ( input.LA(1)==StringLiteral||input.LA(1)==NCName ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set201));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_piTest3063);    throw mse;
                    }


                    }
                    break;

            }

            RPARSi202=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_piTest3072); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi202_tree = (CommonTree)adaptor.create(RPARSi202);
            adaptor.addChild(root_0, RPARSi202_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end piTest

    public static class commentTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start commentTest
    // etc/XQFT.g:403:4: commentTest : COMMENT LPARSi RPARSi ;
    public final commentTest_return commentTest() throws RecognitionException {
        commentTest_return retval = new commentTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMENT203=null;
        Token LPARSi204=null;
        Token RPARSi205=null;

        CommonTree COMMENT203_tree=null;
        CommonTree LPARSi204_tree=null;
        CommonTree RPARSi205_tree=null;

        try {
            // etc/XQFT.g:403:35: ( COMMENT LPARSi RPARSi )
            // etc/XQFT.g:403:37: COMMENT LPARSi RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            COMMENT203=(Token)input.LT(1);
            match(input,COMMENT,FOLLOW_COMMENT_in_commentTest3101); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMENT203_tree = (CommonTree)adaptor.create(COMMENT203);
            adaptor.addChild(root_0, COMMENT203_tree);
            }
            LPARSi204=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_commentTest3103); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi204_tree = (CommonTree)adaptor.create(LPARSi204);
            adaptor.addChild(root_0, LPARSi204_tree);
            }
            RPARSi205=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_commentTest3105); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi205_tree = (CommonTree)adaptor.create(RPARSi205);
            adaptor.addChild(root_0, RPARSi205_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end commentTest

    public static class textTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start textTest
    // etc/XQFT.g:404:4: textTest : TEXT LPARSi RPARSi ;
    public final textTest_return textTest() throws RecognitionException {
        textTest_return retval = new textTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TEXT206=null;
        Token LPARSi207=null;
        Token RPARSi208=null;

        CommonTree TEXT206_tree=null;
        CommonTree LPARSi207_tree=null;
        CommonTree RPARSi208_tree=null;

        try {
            // etc/XQFT.g:404:35: ( TEXT LPARSi RPARSi )
            // etc/XQFT.g:404:37: TEXT LPARSi RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            TEXT206=(Token)input.LT(1);
            match(input,TEXT,FOLLOW_TEXT_in_textTest3137); if (failed) return retval;
            if ( backtracking==0 ) {
            TEXT206_tree = (CommonTree)adaptor.create(TEXT206);
            adaptor.addChild(root_0, TEXT206_tree);
            }
            LPARSi207=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_textTest3139); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi207_tree = (CommonTree)adaptor.create(LPARSi207);
            adaptor.addChild(root_0, LPARSi207_tree);
            }
            RPARSi208=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_textTest3141); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi208_tree = (CommonTree)adaptor.create(RPARSi208);
            adaptor.addChild(root_0, RPARSi208_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end textTest

    public static class anyKindTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start anyKindTest
    // etc/XQFT.g:405:4: anyKindTest : NODE LPARSi RPARSi ;
    public final anyKindTest_return anyKindTest() throws RecognitionException {
        anyKindTest_return retval = new anyKindTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NODE209=null;
        Token LPARSi210=null;
        Token RPARSi211=null;

        CommonTree NODE209_tree=null;
        CommonTree LPARSi210_tree=null;
        CommonTree RPARSi211_tree=null;

        try {
            // etc/XQFT.g:405:35: ( NODE LPARSi RPARSi )
            // etc/XQFT.g:405:37: NODE LPARSi RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            NODE209=(Token)input.LT(1);
            match(input,NODE,FOLLOW_NODE_in_anyKindTest3170); if (failed) return retval;
            if ( backtracking==0 ) {
            NODE209_tree = (CommonTree)adaptor.create(NODE209);
            adaptor.addChild(root_0, NODE209_tree);
            }
            LPARSi210=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_anyKindTest3172); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi210_tree = (CommonTree)adaptor.create(LPARSi210);
            adaptor.addChild(root_0, LPARSi210_tree);
            }
            RPARSi211=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_anyKindTest3174); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi211_tree = (CommonTree)adaptor.create(RPARSi211);
            adaptor.addChild(root_0, RPARSi211_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end anyKindTest

    public static class occurrenceIndicator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start occurrenceIndicator
    // etc/XQFT.g:406:2: occurrenceIndicator : ( QUESTIONSi | STARSi | PLUSSi );
    public final occurrenceIndicator_return occurrenceIndicator() throws RecognitionException {
        occurrenceIndicator_return retval = new occurrenceIndicator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set212=null;

        CommonTree set212_tree=null;

        try {
            // etc/XQFT.g:406:33: ( QUESTIONSi | STARSi | PLUSSi )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set212=(Token)input.LT(1);
            if ( (input.LA(1)>=QUESTIONSi && input.LA(1)<=PLUSSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set212));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_occurrenceIndicator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end occurrenceIndicator

    public static class exprSingle_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exprSingle
    // etc/XQFT.g:410:1: exprSingle : ( fLWORExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr );
    public final exprSingle_return exprSingle() throws RecognitionException {
        exprSingle_return retval = new exprSingle_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        fLWORExpr_return fLWORExpr213 = null;

        quantifiedExpr_return quantifiedExpr214 = null;

        typeswitchExpr_return typeswitchExpr215 = null;

        ifExpr_return ifExpr216 = null;

        orExpr_return orExpr217 = null;



        try {
            // etc/XQFT.g:410:32: ( fLWORExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr )
            int alt39=5;
            switch ( input.LA(1) ) {
            case FOR:
            case LET:
                {
                alt39=1;
                }
                break;
            case EVERY:
            case SOME:
                {
                alt39=2;
                }
                break;
            case TYPESWITCH:
                {
                alt39=3;
                }
                break;
            case IF:
                {
                alt39=4;
                }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case ATTRIBUTE:
            case CHILD:
            case COMMENT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case NODE:
            case ORDERED:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case SELF:
            case TEXT:
            case UNORDERED:
            case VALIDATE:
            case StringLiteral:
            case NCName:
            case DOLLARSi:
            case LPARSi:
            case STARSi:
            case PLUSSi:
            case MINUSSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case LPRAGSi:
            case DBLSLASHSi:
            case SLASHSi:
            case DOTDOTSi:
            case ATSi:
            case DOTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt39=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("410:1: exprSingle : ( fLWORExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr );", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // etc/XQFT.g:410:34: fLWORExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fLWORExpr_in_exprSingle3234);
                    fLWORExpr213=fLWORExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, fLWORExpr213.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:411:37: quantifiedExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_quantifiedExpr_in_exprSingle3272);
                    quantifiedExpr214=quantifiedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, quantifiedExpr214.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:412:37: typeswitchExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeswitchExpr_in_exprSingle3310);
                    typeswitchExpr215=typeswitchExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeswitchExpr215.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:413:37: ifExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ifExpr_in_exprSingle3348);
                    ifExpr216=ifExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ifExpr216.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:414:37: orExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_orExpr_in_exprSingle3386);
                    orExpr217=orExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orExpr217.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end exprSingle

    public static class fLWORExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fLWORExpr
    // etc/XQFT.g:416:2: fLWORExpr : ( forClause | letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle ;
    public final fLWORExpr_return fLWORExpr() throws RecognitionException {
        fLWORExpr_return retval = new fLWORExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token RETURN222=null;
        forClause_return forClause218 = null;

        letClause_return letClause219 = null;

        whereClause_return whereClause220 = null;

        orderByClause_return orderByClause221 = null;

        exprSingle_return exprSingle223 = null;


        CommonTree RETURN222_tree=null;

        try {
            // etc/XQFT.g:416:33: ( ( forClause | letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle )
            // etc/XQFT.g:416:35: ( forClause | letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:416:35: ( forClause | letClause )+
            int cnt40=0;
            loop40:
            do {
                int alt40=3;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==FOR) ) {
                    alt40=1;
                }
                else if ( (LA40_0==LET) ) {
                    alt40=2;
                }


                switch (alt40) {
            	case 1 :
            	    // etc/XQFT.g:416:36: forClause
            	    {
            	    pushFollow(FOLLOW_forClause_in_fLWORExpr3451);
            	    forClause218=forClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, forClause218.getTree());

            	    }
            	    break;
            	case 2 :
            	    // etc/XQFT.g:416:48: letClause
            	    {
            	    pushFollow(FOLLOW_letClause_in_fLWORExpr3455);
            	    letClause219=letClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, letClause219.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);

            // etc/XQFT.g:416:60: ( whereClause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==WHERE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // etc/XQFT.g:416:60: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_fLWORExpr3459);
                    whereClause220=whereClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, whereClause220.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:416:73: ( orderByClause )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ORDER||LA42_0==STABLE) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // etc/XQFT.g:416:73: orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_fLWORExpr3462);
                    orderByClause221=orderByClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orderByClause221.getTree());

                    }
                    break;

            }

            RETURN222=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_fLWORExpr3465); if (failed) return retval;
            if ( backtracking==0 ) {
            RETURN222_tree = (CommonTree)adaptor.create(RETURN222);
            adaptor.addChild(root_0, RETURN222_tree);
            }
            pushFollow(FOLLOW_exprSingle_in_fLWORExpr3467);
            exprSingle223=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle223.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end fLWORExpr

    public static class forClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forClause
    // etc/XQFT.g:418:3: forClause : FOR forClauseTupletDef ( COMMASi forClauseTupletDef )* -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ ) ;
    public final forClause_return forClause() throws RecognitionException {
        forClause_return retval = new forClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FOR224=null;
        Token COMMASi226=null;
        forClauseTupletDef_return forClauseTupletDef225 = null;

        forClauseTupletDef_return forClauseTupletDef227 = null;


        CommonTree FOR224_tree=null;
        CommonTree COMMASi226_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_forClauseTupletDef=new RewriteRuleSubtreeStream(adaptor,"rule forClauseTupletDef");
        try {
            // etc/XQFT.g:418:34: ( FOR forClauseTupletDef ( COMMASi forClauseTupletDef )* -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ ) )
            // etc/XQFT.g:418:36: FOR forClauseTupletDef ( COMMASi forClauseTupletDef )*
            {
            FOR224=(Token)input.LT(1);
            match(input,FOR,FOLLOW_FOR_in_forClause3499); if (failed) return retval;
            if ( backtracking==0 ) stream_FOR.add(FOR224);

            pushFollow(FOLLOW_forClauseTupletDef_in_forClause3501);
            forClauseTupletDef225=forClauseTupletDef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_forClauseTupletDef.add(forClauseTupletDef225.getTree());
            // etc/XQFT.g:418:59: ( COMMASi forClauseTupletDef )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==COMMASi) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // etc/XQFT.g:418:60: COMMASi forClauseTupletDef
            	    {
            	    COMMASi226=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_forClause3504); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi226);

            	    pushFollow(FOLLOW_forClauseTupletDef_in_forClause3506);
            	    forClauseTupletDef227=forClauseTupletDef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_forClauseTupletDef.add(forClauseTupletDef227.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            // AST REWRITE
            // elements: forClauseTupletDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 419:53: -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ )
            {
                // etc/XQFT.g:419:56: ^( AST_FORCLAUSE ( forClauseTupletDef )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(AST_FORCLAUSE, "AST_FORCLAUSE"), root_1);

                if ( !(stream_forClauseTupletDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_forClauseTupletDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_forClauseTupletDef.next());

                }
                stream_forClauseTupletDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forClause

    public static class forClauseTupletDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forClauseTupletDef
    // etc/XQFT.g:420:13: forClauseTupletDef : DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle ;
    public final forClauseTupletDef_return forClauseTupletDef() throws RecognitionException {
        forClauseTupletDef_return retval = new forClauseTupletDef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOLLARSi228=null;
        Token IN233=null;
        varName_return varName229 = null;

        typeDeclaration_return typeDeclaration230 = null;

        positionalVar_return positionalVar231 = null;

        ftScoreVar_return ftScoreVar232 = null;

        exprSingle_return exprSingle234 = null;


        CommonTree DOLLARSi228_tree=null;
        CommonTree IN233_tree=null;

        try {
            // etc/XQFT.g:420:49: ( DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle )
            // etc/XQFT.g:420:51: DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle
            {
            root_0 = (CommonTree)adaptor.nil();

            DOLLARSi228=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_forClauseTupletDef3605); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi228_tree = (CommonTree)adaptor.create(DOLLARSi228);
            adaptor.addChild(root_0, DOLLARSi228_tree);
            }
            pushFollow(FOLLOW_varName_in_forClauseTupletDef3607);
            varName229=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName229.getTree());
            // etc/XQFT.g:420:68: ( typeDeclaration )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==AS) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // etc/XQFT.g:420:68: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_forClauseTupletDef3609);
                    typeDeclaration230=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration230.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:420:85: ( positionalVar )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==AT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // etc/XQFT.g:420:85: positionalVar
                    {
                    pushFollow(FOLLOW_positionalVar_in_forClauseTupletDef3612);
                    positionalVar231=positionalVar();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, positionalVar231.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:420:100: ( ftScoreVar )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SCORE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // etc/XQFT.g:420:100: ftScoreVar
                    {
                    pushFollow(FOLLOW_ftScoreVar_in_forClauseTupletDef3615);
                    ftScoreVar232=ftScoreVar();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftScoreVar232.getTree());

                    }
                    break;

            }

            IN233=(Token)input.LT(1);
            match(input,IN,FOLLOW_IN_in_forClauseTupletDef3618); if (failed) return retval;
            if ( backtracking==0 ) {
            IN233_tree = (CommonTree)adaptor.create(IN233);
            adaptor.addChild(root_0, IN233_tree);
            }
            pushFollow(FOLLOW_exprSingle_in_forClauseTupletDef3620);
            exprSingle234=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle234.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forClauseTupletDef

    public static class varName_return extends ParserRuleReturnScope {
        public String name;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varName
    // etc/XQFT.g:422:4: varName returns [String name] : qn= qName ;
    public final varName_return varName() throws RecognitionException {
        varName_return retval = new varName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        qName_return qn = null;



        try {
            // etc/XQFT.g:422:43: (qn= qName )
            // etc/XQFT.g:422:45: qn= qName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_varName3646);
            qn=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            if ( backtracking==0 ) {
              retval.name = qn.text;
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varName

    public static class positionalVar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start positionalVar
    // etc/XQFT.g:425:4: positionalVar : AT DOLLARSi varName ;
    public final positionalVar_return positionalVar() throws RecognitionException {
        positionalVar_return retval = new positionalVar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AT235=null;
        Token DOLLARSi236=null;
        varName_return varName237 = null;


        CommonTree AT235_tree=null;
        CommonTree DOLLARSi236_tree=null;

        try {
            // etc/XQFT.g:425:35: ( AT DOLLARSi varName )
            // etc/XQFT.g:425:37: AT DOLLARSi varName
            {
            root_0 = (CommonTree)adaptor.nil();

            AT235=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_positionalVar3677); if (failed) return retval;
            if ( backtracking==0 ) {
            AT235_tree = (CommonTree)adaptor.create(AT235);
            adaptor.addChild(root_0, AT235_tree);
            }
            DOLLARSi236=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_positionalVar3679); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi236_tree = (CommonTree)adaptor.create(DOLLARSi236);
            adaptor.addChild(root_0, DOLLARSi236_tree);
            }
            pushFollow(FOLLOW_varName_in_positionalVar3681);
            varName237=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName237.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end positionalVar

    public static class ftScoreVar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftScoreVar
    // etc/XQFT.g:427:4: ftScoreVar : SCORE DOLLARSi varName ;
    public final ftScoreVar_return ftScoreVar() throws RecognitionException {
        ftScoreVar_return retval = new ftScoreVar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SCORE238=null;
        Token DOLLARSi239=null;
        varName_return varName240 = null;


        CommonTree SCORE238_tree=null;
        CommonTree DOLLARSi239_tree=null;

        try {
            // etc/XQFT.g:427:35: ( SCORE DOLLARSi varName )
            // etc/XQFT.g:427:37: SCORE DOLLARSi varName
            {
            root_0 = (CommonTree)adaptor.nil();

            SCORE238=(Token)input.LT(1);
            match(input,SCORE,FOLLOW_SCORE_in_ftScoreVar3712); if (failed) return retval;
            if ( backtracking==0 ) {
            SCORE238_tree = (CommonTree)adaptor.create(SCORE238);
            adaptor.addChild(root_0, SCORE238_tree);
            }
            DOLLARSi239=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_ftScoreVar3714); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi239_tree = (CommonTree)adaptor.create(DOLLARSi239);
            adaptor.addChild(root_0, DOLLARSi239_tree);
            }
            pushFollow(FOLLOW_varName_in_ftScoreVar3716);
            varName240=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName240.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftScoreVar

    public static class letClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start letClause
    // etc/XQFT.g:431:3: letClause : LET varBinding ( COMMASi varBinding )* -> ^( AST_LETCLAUSE ( varBinding )+ ) ;
    public final letClause_return letClause() throws RecognitionException {
        letClause_return retval = new letClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LET241=null;
        Token COMMASi243=null;
        varBinding_return varBinding242 = null;

        varBinding_return varBinding244 = null;


        CommonTree LET241_tree=null;
        CommonTree COMMASi243_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_LET=new RewriteRuleTokenStream(adaptor,"token LET");
        RewriteRuleSubtreeStream stream_varBinding=new RewriteRuleSubtreeStream(adaptor,"rule varBinding");
        try {
            // etc/XQFT.g:431:39: ( LET varBinding ( COMMASi varBinding )* -> ^( AST_LETCLAUSE ( varBinding )+ ) )
            // etc/XQFT.g:431:41: LET varBinding ( COMMASi varBinding )*
            {
            LET241=(Token)input.LT(1);
            match(input,LET,FOLLOW_LET_in_letClause3766); if (failed) return retval;
            if ( backtracking==0 ) stream_LET.add(LET241);

            pushFollow(FOLLOW_varBinding_in_letClause3768);
            varBinding242=varBinding();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_varBinding.add(varBinding242.getTree());
            // etc/XQFT.g:431:56: ( COMMASi varBinding )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMASi) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // etc/XQFT.g:431:57: COMMASi varBinding
            	    {
            	    COMMASi243=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_letClause3771); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi243);

            	    pushFollow(FOLLOW_varBinding_in_letClause3773);
            	    varBinding244=varBinding();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_varBinding.add(varBinding244.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            // AST REWRITE
            // elements: varBinding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 432:53: -> ^( AST_LETCLAUSE ( varBinding )+ )
            {
                // etc/XQFT.g:432:56: ^( AST_LETCLAUSE ( varBinding )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(AST_LETCLAUSE, "AST_LETCLAUSE"), root_1);

                if ( !(stream_varBinding.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_varBinding.hasNext() ) {
                    adaptor.addChild(root_1, stream_varBinding.next());

                }
                stream_varBinding.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end letClause

    public static class varBinding_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varBinding
    // etc/XQFT.g:433:3: varBinding : ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle -> ( SCORE )? $v ( typeDeclaration )? exprSingle ;
    public final varBinding_return varBinding() throws RecognitionException {
        varBinding_return retval = new varBinding_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOLLARSi245=null;
        Token SCORE247=null;
        Token DOLLARSi248=null;
        Token ASSIGNSi249=null;
        varName_return v = null;

        typeDeclaration_return typeDeclaration246 = null;

        exprSingle_return exprSingle250 = null;


        CommonTree DOLLARSi245_tree=null;
        CommonTree SCORE247_tree=null;
        CommonTree DOLLARSi248_tree=null;
        CommonTree ASSIGNSi249_tree=null;
        RewriteRuleTokenStream stream_SCORE=new RewriteRuleTokenStream(adaptor,"token SCORE");
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_ASSIGNSi=new RewriteRuleTokenStream(adaptor,"token ASSIGNSi");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // etc/XQFT.g:433:14: ( ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle -> ( SCORE )? $v ( typeDeclaration )? exprSingle )
            // etc/XQFT.g:434:4: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle
            {
            // etc/XQFT.g:434:4: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==DOLLARSi) ) {
                alt49=1;
            }
            else if ( (LA49_0==SCORE) ) {
                alt49=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("434:4: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName )", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // etc/XQFT.g:434:5: DOLLARSi v= varName ( typeDeclaration )?
                    {
                    DOLLARSi245=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varBinding3849); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi245);

                    pushFollow(FOLLOW_varName_in_varBinding3853);
                    v=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(v.getTree());
                    // etc/XQFT.g:434:24: ( typeDeclaration )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==AS) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // etc/XQFT.g:434:24: typeDeclaration
                            {
                            pushFollow(FOLLOW_typeDeclaration_in_varBinding3855);
                            typeDeclaration246=typeDeclaration();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_typeDeclaration.add(typeDeclaration246.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:434:43: SCORE DOLLARSi v= varName
                    {
                    SCORE247=(Token)input.LT(1);
                    match(input,SCORE,FOLLOW_SCORE_in_varBinding3860); if (failed) return retval;
                    if ( backtracking==0 ) stream_SCORE.add(SCORE247);

                    DOLLARSi248=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varBinding3862); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi248);

                    pushFollow(FOLLOW_varName_in_varBinding3866);
                    v=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(v.getTree());

                    }
                    break;

            }

            ASSIGNSi249=(Token)input.LT(1);
            match(input,ASSIGNSi,FOLLOW_ASSIGNSi_in_varBinding3882); if (failed) return retval;
            if ( backtracking==0 ) stream_ASSIGNSi.add(ASSIGNSi249);

            pushFollow(FOLLOW_exprSingle_in_varBinding3884);
            exprSingle250=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle250.getTree());

            // AST REWRITE
            // elements: typeDeclaration, v, exprSingle, SCORE
            // token labels: 
            // rule labels: v, retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 436:13: -> ( SCORE )? $v ( typeDeclaration )? exprSingle
            {
                // etc/XQFT.g:436:16: ( SCORE )?
                if ( stream_SCORE.hasNext() ) {
                    adaptor.addChild(root_0, stream_SCORE.next());

                }
                stream_SCORE.reset();
                adaptor.addChild(root_0, stream_v.next());
                // etc/XQFT.g:436:26: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeDeclaration.next());

                }
                stream_typeDeclaration.reset();
                adaptor.addChild(root_0, stream_exprSingle.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varBinding

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whereClause
    // etc/XQFT.g:446:3: whereClause : WHERE exprSingle -> ^( AST_WHERECLAUSE exprSingle ) ;
    public final whereClause_return whereClause() throws RecognitionException {
        whereClause_return retval = new whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHERE251=null;
        exprSingle_return exprSingle252 = null;


        CommonTree WHERE251_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:446:33: ( WHERE exprSingle -> ^( AST_WHERECLAUSE exprSingle ) )
            // etc/XQFT.g:446:35: WHERE exprSingle
            {
            WHERE251=(Token)input.LT(1);
            match(input,WHERE,FOLLOW_WHERE_in_whereClause3947); if (failed) return retval;
            if ( backtracking==0 ) stream_WHERE.add(WHERE251);

            pushFollow(FOLLOW_exprSingle_in_whereClause3949);
            exprSingle252=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle252.getTree());

            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 447:49: -> ^( AST_WHERECLAUSE exprSingle )
            {
                // etc/XQFT.g:447:52: ^( AST_WHERECLAUSE exprSingle )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(AST_WHERECLAUSE, "AST_WHERECLAUSE"), root_1);

                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end whereClause

    public static class orderByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderByClause
    // etc/XQFT.g:450:3: orderByClause : ( ORDER BY | STABLE ORDER BY ) orderSpecList -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList ) ;
    public final orderByClause_return orderByClause() throws RecognitionException {
        orderByClause_return retval = new orderByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ORDER253=null;
        Token BY254=null;
        Token STABLE255=null;
        Token ORDER256=null;
        Token BY257=null;
        orderSpecList_return orderSpecList258 = null;


        CommonTree ORDER253_tree=null;
        CommonTree BY254_tree=null;
        CommonTree STABLE255_tree=null;
        CommonTree ORDER256_tree=null;
        CommonTree BY257_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_STABLE=new RewriteRuleTokenStream(adaptor,"token STABLE");
        RewriteRuleSubtreeStream stream_orderSpecList=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecList");
        try {
            // etc/XQFT.g:450:33: ( ( ORDER BY | STABLE ORDER BY ) orderSpecList -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList ) )
            // etc/XQFT.g:450:35: ( ORDER BY | STABLE ORDER BY ) orderSpecList
            {
            // etc/XQFT.g:450:35: ( ORDER BY | STABLE ORDER BY )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ORDER) ) {
                alt50=1;
            }
            else if ( (LA50_0==STABLE) ) {
                alt50=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("450:35: ( ORDER BY | STABLE ORDER BY )", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // etc/XQFT.g:450:36: ORDER BY
                    {
                    ORDER253=(Token)input.LT(1);
                    match(input,ORDER,FOLLOW_ORDER_in_orderByClause4036); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDER.add(ORDER253);

                    BY254=(Token)input.LT(1);
                    match(input,BY,FOLLOW_BY_in_orderByClause4038); if (failed) return retval;
                    if ( backtracking==0 ) stream_BY.add(BY254);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:450:47: STABLE ORDER BY
                    {
                    STABLE255=(Token)input.LT(1);
                    match(input,STABLE,FOLLOW_STABLE_in_orderByClause4042); if (failed) return retval;
                    if ( backtracking==0 ) stream_STABLE.add(STABLE255);

                    ORDER256=(Token)input.LT(1);
                    match(input,ORDER,FOLLOW_ORDER_in_orderByClause4044); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDER.add(ORDER256);

                    BY257=(Token)input.LT(1);
                    match(input,BY,FOLLOW_BY_in_orderByClause4046); if (failed) return retval;
                    if ( backtracking==0 ) stream_BY.add(BY257);


                    }
                    break;

            }

            pushFollow(FOLLOW_orderSpecList_in_orderByClause4049);
            orderSpecList258=orderSpecList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_orderSpecList.add(orderSpecList258.getTree());

            // AST REWRITE
            // elements: STABLE, orderSpecList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 451:53: -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList )
            {
                // etc/XQFT.g:451:56: ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(AST_ORDERBYCLAUSE, "AST_ORDERBYCLAUSE"), root_1);

                // etc/XQFT.g:451:76: ( STABLE )?
                if ( stream_STABLE.hasNext() ) {
                    adaptor.addChild(root_1, stream_STABLE.next());

                }
                stream_STABLE.reset();
                adaptor.addChild(root_1, stream_orderSpecList.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderByClause

    public static class orderSpecList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderSpecList
    // etc/XQFT.g:453:4: orderSpecList : orderSpec ( COMMASi orderSpec )* -> ( orderSpec )+ ;
    public final orderSpecList_return orderSpecList() throws RecognitionException {
        orderSpecList_return retval = new orderSpecList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMASi260=null;
        orderSpec_return orderSpec259 = null;

        orderSpec_return orderSpec261 = null;


        CommonTree COMMASi260_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_orderSpec=new RewriteRuleSubtreeStream(adaptor,"rule orderSpec");
        try {
            // etc/XQFT.g:453:34: ( orderSpec ( COMMASi orderSpec )* -> ( orderSpec )+ )
            // etc/XQFT.g:453:36: orderSpec ( COMMASi orderSpec )*
            {
            pushFollow(FOLLOW_orderSpec_in_orderSpecList4139);
            orderSpec259=orderSpec();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_orderSpec.add(orderSpec259.getTree());
            // etc/XQFT.g:453:46: ( COMMASi orderSpec )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==COMMASi) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // etc/XQFT.g:453:47: COMMASi orderSpec
            	    {
            	    COMMASi260=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_orderSpecList4142); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi260);

            	    pushFollow(FOLLOW_orderSpec_in_orderSpecList4144);
            	    orderSpec261=orderSpec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_orderSpec.add(orderSpec261.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            // AST REWRITE
            // elements: orderSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 454:53: -> ( orderSpec )+
            {
                if ( !(stream_orderSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderSpec.hasNext() ) {
                    adaptor.addChild(root_0, stream_orderSpec.next());

                }
                stream_orderSpec.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderSpecList

    public static class orderSpec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderSpec
    // etc/XQFT.g:456:5: orderSpec : exprSingle orderModifier ;
    public final orderSpec_return orderSpec() throws RecognitionException {
        orderSpec_return retval = new orderSpec_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        exprSingle_return exprSingle262 = null;

        orderModifier_return orderModifier263 = null;



        try {
            // etc/XQFT.g:456:35: ( exprSingle orderModifier )
            // etc/XQFT.g:456:37: exprSingle orderModifier
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_orderSpec4235);
            exprSingle262=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle262.getTree());
            pushFollow(FOLLOW_orderModifier_in_orderSpec4237);
            orderModifier263=orderModifier();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, orderModifier263.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderSpec

    public static class orderModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderModifier
    // etc/XQFT.g:458:6: orderModifier : ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? ;
    public final orderModifier_return orderModifier() throws RecognitionException {
        orderModifier_return retval = new orderModifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set264=null;
        Token EMPTY265=null;
        Token set266=null;
        Token COLLATION267=null;
        uriLiteral_return uriLiteral268 = null;


        CommonTree set264_tree=null;
        CommonTree EMPTY265_tree=null;
        CommonTree set266_tree=null;
        CommonTree COLLATION267_tree=null;

        try {
            // etc/XQFT.g:458:36: ( ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? )
            // etc/XQFT.g:458:38: ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:458:38: ( ASCENDING | DESCENDING )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASCENDING||LA52_0==DESCENDING) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // etc/XQFT.g:
                    {
                    set264=(Token)input.LT(1);
                    if ( input.LA(1)==ASCENDING||input.LA(1)==DESCENDING ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set264));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderModifier4266);    throw mse;
                    }


                    }
                    break;

            }

            // etc/XQFT.g:458:64: ( EMPTY ( GREATEST | LEAST ) )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==EMPTY) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // etc/XQFT.g:458:65: EMPTY ( GREATEST | LEAST )
                    {
                    EMPTY265=(Token)input.LT(1);
                    match(input,EMPTY,FOLLOW_EMPTY_in_orderModifier4276); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EMPTY265_tree = (CommonTree)adaptor.create(EMPTY265);
                    adaptor.addChild(root_0, EMPTY265_tree);
                    }
                    set266=(Token)input.LT(1);
                    if ( input.LA(1)==GREATEST||input.LA(1)==LEAST ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set266));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderModifier4278);    throw mse;
                    }


                    }
                    break;

            }

            // etc/XQFT.g:458:92: ( COLLATION uriLiteral )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==COLLATION) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // etc/XQFT.g:458:93: COLLATION uriLiteral
                    {
                    COLLATION267=(Token)input.LT(1);
                    match(input,COLLATION,FOLLOW_COLLATION_in_orderModifier4289); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLLATION267_tree = (CommonTree)adaptor.create(COLLATION267);
                    adaptor.addChild(root_0, COLLATION267_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_orderModifier4291);
                    uriLiteral268=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral268.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderModifier

    public static class quantifiedExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start quantifiedExpr
    // etc/XQFT.g:464:2: quantifiedExpr : quant= ( SOME | EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle ) ;
    public final quantifiedExpr_return quantifiedExpr() throws RecognitionException {
        quantifiedExpr_return retval = new quantifiedExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token quant=null;
        Token SOME269=null;
        Token EVERY270=null;
        Token COMMASi272=null;
        Token SATISFIES274=null;
        quantifiedExprTupleDef_return quantifiedExprTupleDef271 = null;

        quantifiedExprTupleDef_return quantifiedExprTupleDef273 = null;

        exprSingle_return exprSingle275 = null;


        CommonTree quant_tree=null;
        CommonTree SOME269_tree=null;
        CommonTree EVERY270_tree=null;
        CommonTree COMMASi272_tree=null;
        CommonTree SATISFIES274_tree=null;
        RewriteRuleTokenStream stream_EVERY=new RewriteRuleTokenStream(adaptor,"token EVERY");
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_SATISFIES=new RewriteRuleTokenStream(adaptor,"token SATISFIES");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleSubtreeStream stream_quantifiedExprTupleDef=new RewriteRuleSubtreeStream(adaptor,"rule quantifiedExprTupleDef");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:464:33: (quant= ( SOME | EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle ) )
            // etc/XQFT.g:464:35: quant= ( SOME | EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle
            {
            // etc/XQFT.g:464:41: ( SOME | EVERY )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==SOME) ) {
                alt55=1;
            }
            else if ( (LA55_0==EVERY) ) {
                alt55=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("464:41: ( SOME | EVERY )", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // etc/XQFT.g:464:42: SOME
                    {
                    SOME269=(Token)input.LT(1);
                    match(input,SOME,FOLLOW_SOME_in_quantifiedExpr4329); if (failed) return retval;
                    if ( backtracking==0 ) stream_SOME.add(SOME269);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:464:49: EVERY
                    {
                    EVERY270=(Token)input.LT(1);
                    match(input,EVERY,FOLLOW_EVERY_in_quantifiedExpr4333); if (failed) return retval;
                    if ( backtracking==0 ) stream_EVERY.add(EVERY270);


                    }
                    break;

            }

            pushFollow(FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4336);
            quantifiedExprTupleDef271=quantifiedExprTupleDef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_quantifiedExprTupleDef.add(quantifiedExprTupleDef271.getTree());
            // etc/XQFT.g:465:13: ( COMMASi quantifiedExprTupleDef )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMASi) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // etc/XQFT.g:465:14: COMMASi quantifiedExprTupleDef
            	    {
            	    COMMASi272=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_quantifiedExpr4351); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi272);

            	    pushFollow(FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4353);
            	    quantifiedExprTupleDef273=quantifiedExprTupleDef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_quantifiedExprTupleDef.add(quantifiedExprTupleDef273.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            SATISFIES274=(Token)input.LT(1);
            match(input,SATISFIES,FOLLOW_SATISFIES_in_quantifiedExpr4357); if (failed) return retval;
            if ( backtracking==0 ) stream_SATISFIES.add(SATISFIES274);

            pushFollow(FOLLOW_exprSingle_in_quantifiedExpr4359);
            exprSingle275=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle275.getTree());

            // AST REWRITE
            // elements: quantifiedExprTupleDef, exprSingle, quant
            // token labels: quant
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_quant=new RewriteRuleTokenStream(adaptor,"token quant",quant);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 466:49: -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle )
            {
                // etc/XQFT.g:466:52: ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(AST_QUANTIFIEDEXPR, "AST_QUANTIFIEDEXPR"), root_1);

                adaptor.addChild(root_1, stream_quant.next());
                if ( !(stream_quantifiedExprTupleDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_quantifiedExprTupleDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantifiedExprTupleDef.next());

                }
                stream_quantifiedExprTupleDef.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end quantifiedExpr

    public static class quantifiedExprTupleDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start quantifiedExprTupleDef
    // etc/XQFT.g:468:9: quantifiedExprTupleDef : DOLLARSi varName ( typeDeclaration )? exprSingle -> varName ( typeDeclaration )? exprSingle ;
    public final quantifiedExprTupleDef_return quantifiedExprTupleDef() throws RecognitionException {
        quantifiedExprTupleDef_return retval = new quantifiedExprTupleDef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOLLARSi276=null;
        varName_return varName277 = null;

        typeDeclaration_return typeDeclaration278 = null;

        exprSingle_return exprSingle279 = null;


        CommonTree DOLLARSi276_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // etc/XQFT.g:468:45: ( DOLLARSi varName ( typeDeclaration )? exprSingle -> varName ( typeDeclaration )? exprSingle )
            // etc/XQFT.g:468:47: DOLLARSi varName ( typeDeclaration )? exprSingle
            {
            DOLLARSi276=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_quantifiedExprTupleDef4450); if (failed) return retval;
            if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi276);

            pushFollow(FOLLOW_varName_in_quantifiedExprTupleDef4452);
            varName277=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_varName.add(varName277.getTree());
            // etc/XQFT.g:468:64: ( typeDeclaration )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==AS) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // etc/XQFT.g:468:64: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_quantifiedExprTupleDef4454);
                    typeDeclaration278=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeDeclaration.add(typeDeclaration278.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_exprSingle_in_quantifiedExprTupleDef4457);
            exprSingle279=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle279.getTree());

            // AST REWRITE
            // elements: typeDeclaration, exprSingle, varName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 469:49: -> varName ( typeDeclaration )? exprSingle
            {
                adaptor.addChild(root_0, stream_varName.next());
                // etc/XQFT.g:469:60: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeDeclaration.next());

                }
                stream_typeDeclaration.reset();
                adaptor.addChild(root_0, stream_exprSingle.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end quantifiedExprTupleDef

    public static class typeswitchExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeswitchExpr
    // etc/XQFT.g:473:2: typeswitchExpr : TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle ) ;
    public final typeswitchExpr_return typeswitchExpr() throws RecognitionException {
        typeswitchExpr_return retval = new typeswitchExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TYPESWITCH280=null;
        Token LPARSi281=null;
        Token RPARSi283=null;
        Token DEFAULT285=null;
        Token DOLLARSi286=null;
        Token RETURN288=null;
        expr_return expr282 = null;

        caseClause_return caseClause284 = null;

        varName_return varName287 = null;

        exprSingle_return exprSingle289 = null;


        CommonTree TYPESWITCH280_tree=null;
        CommonTree LPARSi281_tree=null;
        CommonTree RPARSi283_tree=null;
        CommonTree DEFAULT285_tree=null;
        CommonTree DOLLARSi286_tree=null;
        CommonTree RETURN288_tree=null;
        RewriteRuleTokenStream stream_TYPESWITCH=new RewriteRuleTokenStream(adaptor,"token TYPESWITCH");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_caseClause=new RewriteRuleSubtreeStream(adaptor,"rule caseClause");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:473:33: ( TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle ) )
            // etc/XQFT.g:473:35: TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle
            {
            TYPESWITCH280=(Token)input.LT(1);
            match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_typeswitchExpr4543); if (failed) return retval;
            if ( backtracking==0 ) stream_TYPESWITCH.add(TYPESWITCH280);

            LPARSi281=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_typeswitchExpr4545); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi281);

            pushFollow(FOLLOW_expr_in_typeswitchExpr4547);
            expr282=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr282.getTree());
            RPARSi283=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_typeswitchExpr4549); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi283);

            // etc/XQFT.g:473:65: ( caseClause )+
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==CASE) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // etc/XQFT.g:473:65: caseClause
            	    {
            	    pushFollow(FOLLOW_caseClause_in_typeswitchExpr4551);
            	    caseClause284=caseClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_caseClause.add(caseClause284.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);

            DEFAULT285=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_typeswitchExpr4567); if (failed) return retval;
            if ( backtracking==0 ) stream_DEFAULT.add(DEFAULT285);

            // etc/XQFT.g:474:21: ( DOLLARSi varName )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==DOLLARSi) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // etc/XQFT.g:474:22: DOLLARSi varName
                    {
                    DOLLARSi286=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_typeswitchExpr4570); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi286);

                    pushFollow(FOLLOW_varName_in_typeswitchExpr4572);
                    varName287=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(varName287.getTree());

                    }
                    break;

            }

            RETURN288=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_typeswitchExpr4576); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN288);

            pushFollow(FOLLOW_exprSingle_in_typeswitchExpr4578);
            exprSingle289=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle289.getTree());

            // AST REWRITE
            // elements: exprSingle, varName, caseClause, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 475:49: -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle )
            {
                // etc/XQFT.g:475:52: ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(AST_TYPESWITCHEXPR, "AST_TYPESWITCHEXPR"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                if ( !(stream_caseClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_caseClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_caseClause.next());

                }
                stream_caseClause.reset();
                // etc/XQFT.g:475:90: ( varName )?
                if ( stream_varName.hasNext() ) {
                    adaptor.addChild(root_1, stream_varName.next());

                }
                stream_varName.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeswitchExpr

    public static class caseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start caseClause
    // etc/XQFT.g:479:3: caseClause : CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle ) ;
    public final caseClause_return caseClause() throws RecognitionException {
        caseClause_return retval = new caseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE290=null;
        Token DOLLARSi291=null;
        Token AS293=null;
        Token RETURN295=null;
        varName_return varName292 = null;

        sequenceType_return sequenceType294 = null;

        exprSingle_return exprSingle296 = null;


        CommonTree CASE290_tree=null;
        CommonTree DOLLARSi291_tree=null;
        CommonTree AS293_tree=null;
        CommonTree RETURN295_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:479:34: ( CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle ) )
            // etc/XQFT.g:479:36: CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle
            {
            CASE290=(Token)input.LT(1);
            match(input,CASE,FOLLOW_CASE_in_caseClause4674); if (failed) return retval;
            if ( backtracking==0 ) stream_CASE.add(CASE290);

            // etc/XQFT.g:479:41: ( DOLLARSi varName AS )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==DOLLARSi) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // etc/XQFT.g:479:42: DOLLARSi varName AS
                    {
                    DOLLARSi291=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_caseClause4677); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi291);

                    pushFollow(FOLLOW_varName_in_caseClause4679);
                    varName292=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(varName292.getTree());
                    AS293=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_caseClause4681); if (failed) return retval;
                    if ( backtracking==0 ) stream_AS.add(AS293);


                    }
                    break;

            }

            pushFollow(FOLLOW_sequenceType_in_caseClause4685);
            sequenceType294=sequenceType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_sequenceType.add(sequenceType294.getTree());
            RETURN295=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_caseClause4687); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN295);

            pushFollow(FOLLOW_exprSingle_in_caseClause4689);
            exprSingle296=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle296.getTree());

            // AST REWRITE
            // elements: exprSingle, sequenceType, varName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 480:53: -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle )
            {
                // etc/XQFT.g:480:56: ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(AST_CASECLAUSE, "AST_CASECLAUSE"), root_1);

                // etc/XQFT.g:480:73: ( varName )?
                if ( stream_varName.hasNext() ) {
                    adaptor.addChild(root_1, stream_varName.next());

                }
                stream_varName.reset();
                adaptor.addChild(root_1, stream_sequenceType.next());
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end caseClause

    public static class ifExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifExpr
    // etc/XQFT.g:488:2: ifExpr : IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle -> ^( AST_IFEXPR expr exprSingle exprSingle ) ;
    public final ifExpr_return ifExpr() throws RecognitionException {
        ifExpr_return retval = new ifExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IF297=null;
        Token LPARSi298=null;
        Token RPARSi300=null;
        Token THEN301=null;
        Token ELSE303=null;
        expr_return expr299 = null;

        exprSingle_return exprSingle302 = null;

        exprSingle_return exprSingle304 = null;


        CommonTree IF297_tree=null;
        CommonTree LPARSi298_tree=null;
        CommonTree RPARSi300_tree=null;
        CommonTree THEN301_tree=null;
        CommonTree ELSE303_tree=null;
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:488:33: ( IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle -> ^( AST_IFEXPR expr exprSingle exprSingle ) )
            // etc/XQFT.g:488:35: IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle
            {
            IF297=(Token)input.LT(1);
            match(input,IF,FOLLOW_IF_in_ifExpr4795); if (failed) return retval;
            if ( backtracking==0 ) stream_IF.add(IF297);

            LPARSi298=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_ifExpr4797); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi298);

            pushFollow(FOLLOW_expr_in_ifExpr4799);
            expr299=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr299.getTree());
            RPARSi300=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_ifExpr4801); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi300);

            THEN301=(Token)input.LT(1);
            match(input,THEN,FOLLOW_THEN_in_ifExpr4803); if (failed) return retval;
            if ( backtracking==0 ) stream_THEN.add(THEN301);

            pushFollow(FOLLOW_exprSingle_in_ifExpr4805);
            exprSingle302=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle302.getTree());
            ELSE303=(Token)input.LT(1);
            match(input,ELSE,FOLLOW_ELSE_in_ifExpr4807); if (failed) return retval;
            if ( backtracking==0 ) stream_ELSE.add(ELSE303);

            pushFollow(FOLLOW_exprSingle_in_ifExpr4809);
            exprSingle304=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle304.getTree());

            // AST REWRITE
            // elements: exprSingle, exprSingle, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 489:49: -> ^( AST_IFEXPR expr exprSingle exprSingle )
            {
                // etc/XQFT.g:489:52: ^( AST_IFEXPR expr exprSingle exprSingle )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(AST_IFEXPR, "AST_IFEXPR"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                adaptor.addChild(root_1, stream_exprSingle.next());
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifExpr

    public static class orExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orExpr
    // etc/XQFT.g:496:2: orExpr : andExpr ( OR andExpr )* ;
    public final orExpr_return orExpr() throws RecognitionException {
        orExpr_return retval = new orExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OR306=null;
        andExpr_return andExpr305 = null;

        andExpr_return andExpr307 = null;


        CommonTree OR306_tree=null;

        try {
            // etc/XQFT.g:496:33: ( andExpr ( OR andExpr )* )
            // etc/XQFT.g:496:35: andExpr ( OR andExpr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_andExpr_in_orExpr4911);
            andExpr305=andExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, andExpr305.getTree());
            // etc/XQFT.g:496:43: ( OR andExpr )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==OR) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // etc/XQFT.g:496:45: OR andExpr
            	    {
            	    OR306=(Token)input.LT(1);
            	    match(input,OR,FOLLOW_OR_in_orExpr4915); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    OR306_tree = (CommonTree)adaptor.create(OR306);
            	    root_0 = (CommonTree)adaptor.becomeRoot(OR306_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_andExpr_in_orExpr4918);
            	    andExpr307=andExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, andExpr307.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orExpr

    public static class andExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start andExpr
    // etc/XQFT.g:497:3: andExpr : comparisonExpr ( AND comparisonExpr )* ;
    public final andExpr_return andExpr() throws RecognitionException {
        andExpr_return retval = new andExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND309=null;
        comparisonExpr_return comparisonExpr308 = null;

        comparisonExpr_return comparisonExpr310 = null;


        CommonTree AND309_tree=null;

        try {
            // etc/XQFT.g:497:34: ( comparisonExpr ( AND comparisonExpr )* )
            // etc/XQFT.g:497:36: comparisonExpr ( AND comparisonExpr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_comparisonExpr_in_andExpr4953);
            comparisonExpr308=comparisonExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, comparisonExpr308.getTree());
            // etc/XQFT.g:497:51: ( AND comparisonExpr )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==AND) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // etc/XQFT.g:497:53: AND comparisonExpr
            	    {
            	    AND309=(Token)input.LT(1);
            	    match(input,AND,FOLLOW_AND_in_andExpr4957); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    AND309_tree = (CommonTree)adaptor.create(AND309);
            	    root_0 = (CommonTree)adaptor.becomeRoot(AND309_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_comparisonExpr_in_andExpr4960);
            	    comparisonExpr310=comparisonExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, comparisonExpr310.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end andExpr

    public static class comparisonExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start comparisonExpr
    // etc/XQFT.g:503:1: comparisonExpr : ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )? ;
    public final comparisonExpr_return comparisonExpr() throws RecognitionException {
        comparisonExpr_return retval = new comparisonExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        ftContainsExpr_return ftContainsExpr311 = null;

        valueComp_return valueComp312 = null;

        generalComp_return generalComp313 = null;

        nodeComp_return nodeComp314 = null;

        ftContainsExpr_return ftContainsExpr315 = null;



        try {
            // etc/XQFT.g:503:32: ( ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )? )
            // etc/XQFT.g:503:34: ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr4994);
            ftContainsExpr311=ftContainsExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftContainsExpr311.getTree());
            // etc/XQFT.g:503:49: ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==EQ||LA64_0==GE||LA64_0==GT||LA64_0==IS||LA64_0==LE||LA64_0==LT||LA64_0==NE||LA64_0==EQSi||(LA64_0>=NEQSi && LA64_0<=NODEAFTERSi)) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // etc/XQFT.g:503:51: ( valueComp | generalComp | nodeComp ) ftContainsExpr
                    {
                    // etc/XQFT.g:503:51: ( valueComp | generalComp | nodeComp )
                    int alt63=3;
                    switch ( input.LA(1) ) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE:
                        {
                        alt63=1;
                        }
                        break;
                    case EQSi:
                    case NEQSi:
                    case LTSi:
                    case LTOREQSi:
                    case GTSi:
                    case GTOREQSi:
                        {
                        alt63=2;
                        }
                        break;
                    case IS:
                    case NODEBEFORESi:
                    case NODEAFTERSi:
                        {
                        alt63=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("503:51: ( valueComp | generalComp | nodeComp )", 63, 0, input);

                        throw nvae;
                    }

                    switch (alt63) {
                        case 1 :
                            // etc/XQFT.g:503:52: valueComp
                            {
                            pushFollow(FOLLOW_valueComp_in_comparisonExpr4999);
                            valueComp312=valueComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, valueComp312.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:503:64: generalComp
                            {
                            pushFollow(FOLLOW_generalComp_in_comparisonExpr5003);
                            generalComp313=generalComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, generalComp313.getTree());

                            }
                            break;
                        case 3 :
                            // etc/XQFT.g:503:78: nodeComp
                            {
                            pushFollow(FOLLOW_nodeComp_in_comparisonExpr5007);
                            nodeComp314=nodeComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, nodeComp314.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr5010);
                    ftContainsExpr315=ftContainsExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftContainsExpr315.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end comparisonExpr

    public static class ftContainsExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftContainsExpr
    // etc/XQFT.g:506:2: ftContainsExpr : rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )? ;
    public final ftContainsExpr_return ftContainsExpr() throws RecognitionException {
        ftContainsExpr_return retval = new ftContainsExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FTCONTAINS317=null;
        rangeExpr_return rangeExpr316 = null;

        ftSelection_return ftSelection318 = null;

        ftIgnoreOption_return ftIgnoreOption319 = null;


        CommonTree FTCONTAINS317_tree=null;

        try {
            // etc/XQFT.g:506:33: ( rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )? )
            // etc/XQFT.g:506:35: rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_rangeExpr_in_ftContainsExpr5039);
            rangeExpr316=rangeExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, rangeExpr316.getTree());
            // etc/XQFT.g:506:45: ( FTCONTAINS ftSelection ( ftIgnoreOption )? )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==FTCONTAINS) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // etc/XQFT.g:506:47: FTCONTAINS ftSelection ( ftIgnoreOption )?
                    {
                    FTCONTAINS317=(Token)input.LT(1);
                    match(input,FTCONTAINS,FOLLOW_FTCONTAINS_in_ftContainsExpr5043); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FTCONTAINS317_tree = (CommonTree)adaptor.create(FTCONTAINS317);
                    root_0 = (CommonTree)adaptor.becomeRoot(FTCONTAINS317_tree, root_0);
                    }
                    pushFollow(FOLLOW_ftSelection_in_ftContainsExpr5046);
                    ftSelection318=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection318.getTree());
                    // etc/XQFT.g:506:71: ( ftIgnoreOption )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==WITHOUT) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // etc/XQFT.g:506:71: ftIgnoreOption
                            {
                            pushFollow(FOLLOW_ftIgnoreOption_in_ftContainsExpr5048);
                            ftIgnoreOption319=ftIgnoreOption();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftIgnoreOption319.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftContainsExpr

    public static class rangeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rangeExpr
    // etc/XQFT.g:508:3: rangeExpr : additiveExpr ( TO additiveExpr )? ;
    public final rangeExpr_return rangeExpr() throws RecognitionException {
        rangeExpr_return retval = new rangeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TO321=null;
        additiveExpr_return additiveExpr320 = null;

        additiveExpr_return additiveExpr322 = null;


        CommonTree TO321_tree=null;

        try {
            // etc/XQFT.g:508:34: ( additiveExpr ( TO additiveExpr )? )
            // etc/XQFT.g:508:36: additiveExpr ( TO additiveExpr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpr_in_rangeExpr5084);
            additiveExpr320=additiveExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr320.getTree());
            // etc/XQFT.g:508:49: ( TO additiveExpr )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==TO) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // etc/XQFT.g:508:51: TO additiveExpr
                    {
                    TO321=(Token)input.LT(1);
                    match(input,TO,FOLLOW_TO_in_rangeExpr5088); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TO321_tree = (CommonTree)adaptor.create(TO321);
                    root_0 = (CommonTree)adaptor.becomeRoot(TO321_tree, root_0);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_rangeExpr5091);
                    additiveExpr322=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr322.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end rangeExpr

    public static class additiveExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start additiveExpr
    // etc/XQFT.g:509:4: additiveExpr : multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )* ;
    public final additiveExpr_return additiveExpr() throws RecognitionException {
        additiveExpr_return retval = new additiveExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set324=null;
        multiplicativeExpr_return multiplicativeExpr323 = null;

        multiplicativeExpr_return multiplicativeExpr325 = null;


        CommonTree set324_tree=null;

        try {
            // etc/XQFT.g:509:35: ( multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )* )
            // etc/XQFT.g:509:37: multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr5122);
            multiplicativeExpr323=multiplicativeExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpr323.getTree());
            // etc/XQFT.g:509:56: ( ( PLUSSi | MINUSSi ) multiplicativeExpr )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( ((LA68_0>=PLUSSi && LA68_0<=MINUSSi)) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // etc/XQFT.g:509:58: ( PLUSSi | MINUSSi ) multiplicativeExpr
            	    {
            	    set324=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUSSi && input.LA(1)<=MINUSSi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(adaptor.create(set324), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_additiveExpr5126);    throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr5135);
            	    multiplicativeExpr325=multiplicativeExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpr325.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end additiveExpr

    public static class multiplicativeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start multiplicativeExpr
    // etc/XQFT.g:510:5: multiplicativeExpr : unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )* ;
    public final multiplicativeExpr_return multiplicativeExpr() throws RecognitionException {
        multiplicativeExpr_return retval = new multiplicativeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set327=null;
        unionExpr_return unionExpr326 = null;

        unionExpr_return unionExpr328 = null;


        CommonTree set327_tree=null;

        try {
            // etc/XQFT.g:510:36: ( unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )* )
            // etc/XQFT.g:510:38: unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr5161);
            unionExpr326=unionExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr326.getTree());
            // etc/XQFT.g:510:48: ( ( STARSi | DIV | IDIV | MOD ) unionExpr )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==DIV||LA69_0==IDIV||LA69_0==MOD||LA69_0==STARSi) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // etc/XQFT.g:510:50: ( STARSi | DIV | IDIV | MOD ) unionExpr
            	    {
            	    set327=(Token)input.LT(1);
            	    if ( input.LA(1)==DIV||input.LA(1)==IDIV||input.LA(1)==MOD||input.LA(1)==STARSi ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(adaptor.create(set327), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_multiplicativeExpr5165);    throw mse;
            	    }

            	    pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr5182);
            	    unionExpr328=unionExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr328.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end multiplicativeExpr

    public static class unionExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unionExpr
    // etc/XQFT.g:511:6: unionExpr : intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )* ;
    public final unionExpr_return unionExpr() throws RecognitionException {
        unionExpr_return retval = new unionExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set330=null;
        intersectExceptExpr_return intersectExceptExpr329 = null;

        intersectExceptExpr_return intersectExceptExpr331 = null;


        CommonTree set330_tree=null;

        try {
            // etc/XQFT.g:511:37: ( intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )* )
            // etc/XQFT.g:511:39: intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr5218);
            intersectExceptExpr329=intersectExceptExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, intersectExceptExpr329.getTree());
            // etc/XQFT.g:511:59: ( ( UNION | PIPESi ) intersectExceptExpr )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==UNION||LA70_0==PIPESi) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // etc/XQFT.g:511:61: ( UNION | PIPESi ) intersectExceptExpr
            	    {
            	    set330=(Token)input.LT(1);
            	    if ( input.LA(1)==UNION||input.LA(1)==PIPESi ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(adaptor.create(set330), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_unionExpr5222);    throw mse;
            	    }

            	    pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr5231);
            	    intersectExceptExpr331=intersectExceptExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, intersectExceptExpr331.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unionExpr

    public static class intersectExceptExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start intersectExceptExpr
    // etc/XQFT.g:512:7: intersectExceptExpr : instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )* ;
    public final intersectExceptExpr_return intersectExceptExpr() throws RecognitionException {
        intersectExceptExpr_return retval = new intersectExceptExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set333=null;
        instanceofExpr_return instanceofExpr332 = null;

        instanceofExpr_return instanceofExpr334 = null;


        CommonTree set333_tree=null;

        try {
            // etc/XQFT.g:512:38: ( instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )* )
            // etc/XQFT.g:512:40: instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr5258);
            instanceofExpr332=instanceofExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, instanceofExpr332.getTree());
            // etc/XQFT.g:512:55: ( ( INTERSECT | EXCEPT ) instanceofExpr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==EXCEPT||LA71_0==INTERSECT) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // etc/XQFT.g:512:57: ( INTERSECT | EXCEPT ) instanceofExpr
            	    {
            	    set333=(Token)input.LT(1);
            	    if ( input.LA(1)==EXCEPT||input.LA(1)==INTERSECT ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(adaptor.create(set333), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_intersectExceptExpr5262);    throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr5271);
            	    instanceofExpr334=instanceofExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, instanceofExpr334.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end intersectExceptExpr

    public static class instanceofExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start instanceofExpr
    // etc/XQFT.g:513:8: instanceofExpr : treatExpr ( INSTANCE OF sequenceType )? ;
    public final instanceofExpr_return instanceofExpr() throws RecognitionException {
        instanceofExpr_return retval = new instanceofExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSTANCE336=null;
        Token OF337=null;
        treatExpr_return treatExpr335 = null;

        sequenceType_return sequenceType338 = null;


        CommonTree INSTANCE336_tree=null;
        CommonTree OF337_tree=null;

        try {
            // etc/XQFT.g:513:39: ( treatExpr ( INSTANCE OF sequenceType )? )
            // etc/XQFT.g:513:41: treatExpr ( INSTANCE OF sequenceType )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_treatExpr_in_instanceofExpr5304);
            treatExpr335=treatExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, treatExpr335.getTree());
            // etc/XQFT.g:513:51: ( INSTANCE OF sequenceType )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==INSTANCE) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // etc/XQFT.g:513:53: INSTANCE OF sequenceType
                    {
                    INSTANCE336=(Token)input.LT(1);
                    match(input,INSTANCE,FOLLOW_INSTANCE_in_instanceofExpr5308); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSTANCE336_tree = (CommonTree)adaptor.create(INSTANCE336);
                    adaptor.addChild(root_0, INSTANCE336_tree);
                    }
                    OF337=(Token)input.LT(1);
                    match(input,OF,FOLLOW_OF_in_instanceofExpr5310); if (failed) return retval;
                    if ( backtracking==0 ) {
                    OF337_tree = (CommonTree)adaptor.create(OF337);
                    adaptor.addChild(root_0, OF337_tree);
                    }
                    pushFollow(FOLLOW_sequenceType_in_instanceofExpr5312);
                    sequenceType338=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType338.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end instanceofExpr

    public static class treatExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start treatExpr
    // etc/XQFT.g:514:9: treatExpr : castableExpr ( TREAT AS sequenceType )? ;
    public final treatExpr_return treatExpr() throws RecognitionException {
        treatExpr_return retval = new treatExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TREAT340=null;
        Token AS341=null;
        castableExpr_return castableExpr339 = null;

        sequenceType_return sequenceType342 = null;


        CommonTree TREAT340_tree=null;
        CommonTree AS341_tree=null;

        try {
            // etc/XQFT.g:514:40: ( castableExpr ( TREAT AS sequenceType )? )
            // etc/XQFT.g:514:42: castableExpr ( TREAT AS sequenceType )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_castableExpr_in_treatExpr5351);
            castableExpr339=castableExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, castableExpr339.getTree());
            // etc/XQFT.g:514:55: ( TREAT AS sequenceType )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==TREAT) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // etc/XQFT.g:514:57: TREAT AS sequenceType
                    {
                    TREAT340=(Token)input.LT(1);
                    match(input,TREAT,FOLLOW_TREAT_in_treatExpr5355); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TREAT340_tree = (CommonTree)adaptor.create(TREAT340);
                    adaptor.addChild(root_0, TREAT340_tree);
                    }
                    AS341=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_treatExpr5357); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AS341_tree = (CommonTree)adaptor.create(AS341);
                    adaptor.addChild(root_0, AS341_tree);
                    }
                    pushFollow(FOLLOW_sequenceType_in_treatExpr5359);
                    sequenceType342=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType342.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end treatExpr

    public static class castableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castableExpr
    // etc/XQFT.g:515:10: castableExpr : castExpr ( CASTABLE AS singleType )? ;
    public final castableExpr_return castableExpr() throws RecognitionException {
        castableExpr_return retval = new castableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASTABLE344=null;
        Token AS345=null;
        castExpr_return castExpr343 = null;

        singleType_return singleType346 = null;


        CommonTree CASTABLE344_tree=null;
        CommonTree AS345_tree=null;

        try {
            // etc/XQFT.g:515:41: ( castExpr ( CASTABLE AS singleType )? )
            // etc/XQFT.g:515:43: castExpr ( CASTABLE AS singleType )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_castExpr_in_castableExpr5396);
            castExpr343=castExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, castExpr343.getTree());
            // etc/XQFT.g:515:52: ( CASTABLE AS singleType )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==CASTABLE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // etc/XQFT.g:515:54: CASTABLE AS singleType
                    {
                    CASTABLE344=(Token)input.LT(1);
                    match(input,CASTABLE,FOLLOW_CASTABLE_in_castableExpr5400); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASTABLE344_tree = (CommonTree)adaptor.create(CASTABLE344);
                    adaptor.addChild(root_0, CASTABLE344_tree);
                    }
                    AS345=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_castableExpr5402); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AS345_tree = (CommonTree)adaptor.create(AS345);
                    adaptor.addChild(root_0, AS345_tree);
                    }
                    pushFollow(FOLLOW_singleType_in_castableExpr5404);
                    singleType346=singleType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, singleType346.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end castableExpr

    public static class castExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castExpr
    // etc/XQFT.g:516:11: castExpr : unaryExpr ( CAST AS singleType )? ;
    public final castExpr_return castExpr() throws RecognitionException {
        castExpr_return retval = new castExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CAST348=null;
        Token AS349=null;
        unaryExpr_return unaryExpr347 = null;

        singleType_return singleType350 = null;


        CommonTree CAST348_tree=null;
        CommonTree AS349_tree=null;

        try {
            // etc/XQFT.g:516:42: ( unaryExpr ( CAST AS singleType )? )
            // etc/XQFT.g:516:44: unaryExpr ( CAST AS singleType )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpr_in_castExpr5446);
            unaryExpr347=unaryExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpr347.getTree());
            // etc/XQFT.g:516:54: ( CAST AS singleType )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==CAST) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // etc/XQFT.g:516:56: CAST AS singleType
                    {
                    CAST348=(Token)input.LT(1);
                    match(input,CAST,FOLLOW_CAST_in_castExpr5450); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CAST348_tree = (CommonTree)adaptor.create(CAST348);
                    adaptor.addChild(root_0, CAST348_tree);
                    }
                    AS349=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_castExpr5452); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AS349_tree = (CommonTree)adaptor.create(AS349);
                    adaptor.addChild(root_0, AS349_tree);
                    }
                    pushFollow(FOLLOW_singleType_in_castExpr5454);
                    singleType350=singleType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, singleType350.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end castExpr

    public static class unaryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unaryExpr
    // etc/XQFT.g:517:12: unaryExpr : ( MINUSSi | PLUSSi )* valueExpr ;
    public final unaryExpr_return unaryExpr() throws RecognitionException {
        unaryExpr_return retval = new unaryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set351=null;
        valueExpr_return valueExpr352 = null;


        CommonTree set351_tree=null;

        try {
            // etc/XQFT.g:517:43: ( ( MINUSSi | PLUSSi )* valueExpr )
            // etc/XQFT.g:517:45: ( MINUSSi | PLUSSi )* valueExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:517:45: ( MINUSSi | PLUSSi )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( ((LA76_0>=PLUSSi && LA76_0<=MINUSSi)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // etc/XQFT.g:
            	    {
            	    set351=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUSSi && input.LA(1)<=MINUSSi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set351));
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_unaryExpr5496);    throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            pushFollow(FOLLOW_valueExpr_in_unaryExpr5505);
            valueExpr352=valueExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, valueExpr352.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unaryExpr

    public static class singleType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start singleType
    // etc/XQFT.g:519:12: singleType : atomicType ( QUESTIONSi )? ;
    public final singleType_return singleType() throws RecognitionException {
        singleType_return retval = new singleType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token QUESTIONSi354=null;
        atomicType_return atomicType353 = null;


        CommonTree QUESTIONSi354_tree=null;

        try {
            // etc/XQFT.g:519:43: ( atomicType ( QUESTIONSi )? )
            // etc/XQFT.g:519:45: atomicType ( QUESTIONSi )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_atomicType_in_singleType5544);
            atomicType353=atomicType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, atomicType353.getTree());
            // etc/XQFT.g:519:56: ( QUESTIONSi )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==QUESTIONSi) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // etc/XQFT.g:519:56: QUESTIONSi
                    {
                    QUESTIONSi354=(Token)input.LT(1);
                    match(input,QUESTIONSi,FOLLOW_QUESTIONSi_in_singleType5546); if (failed) return retval;
                    if ( backtracking==0 ) {
                    QUESTIONSi354_tree = (CommonTree)adaptor.create(QUESTIONSi354);
                    adaptor.addChild(root_0, QUESTIONSi354_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end singleType

    public static class atomicType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start atomicType
    // etc/XQFT.g:520:13: atomicType : qName ;
    public final atomicType_return atomicType() throws RecognitionException {
        atomicType_return retval = new atomicType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        qName_return qName355 = null;



        try {
            // etc/XQFT.g:520:44: ( qName )
            // etc/XQFT.g:520:46: qName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_atomicType5586);
            qName355=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName355.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end atomicType

    public static class ftIgnoreOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftIgnoreOption
    // etc/XQFT.g:528:3: ftIgnoreOption : WITHOUT CONTENT unionExpr ;
    public final ftIgnoreOption_return ftIgnoreOption() throws RecognitionException {
        ftIgnoreOption_return retval = new ftIgnoreOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WITHOUT356=null;
        Token CONTENT357=null;
        unionExpr_return unionExpr358 = null;


        CommonTree WITHOUT356_tree=null;
        CommonTree CONTENT357_tree=null;

        try {
            // etc/XQFT.g:528:34: ( WITHOUT CONTENT unionExpr )
            // etc/XQFT.g:528:36: WITHOUT CONTENT unionExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            WITHOUT356=(Token)input.LT(1);
            match(input,WITHOUT,FOLLOW_WITHOUT_in_ftIgnoreOption5622); if (failed) return retval;
            if ( backtracking==0 ) {
            WITHOUT356_tree = (CommonTree)adaptor.create(WITHOUT356);
            adaptor.addChild(root_0, WITHOUT356_tree);
            }
            CONTENT357=(Token)input.LT(1);
            match(input,CONTENT,FOLLOW_CONTENT_in_ftIgnoreOption5624); if (failed) return retval;
            if ( backtracking==0 ) {
            CONTENT357_tree = (CommonTree)adaptor.create(CONTENT357);
            adaptor.addChild(root_0, CONTENT357_tree);
            }
            pushFollow(FOLLOW_unionExpr_in_ftIgnoreOption5626);
            unionExpr358=unionExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr358.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftIgnoreOption

    public static class valueComp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start valueComp
    // etc/XQFT.g:532:2: valueComp : ( EQ | NE | LT | LE | GT | GE );
    public final valueComp_return valueComp() throws RecognitionException {
        valueComp_return retval = new valueComp_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set359=null;

        CommonTree set359_tree=null;

        try {
            // etc/XQFT.g:532:33: ( EQ | NE | LT | LE | GT | GE )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set359=(Token)input.LT(1);
            if ( input.LA(1)==EQ||input.LA(1)==GE||input.LA(1)==GT||input.LA(1)==LE||input.LA(1)==LT||input.LA(1)==NE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set359));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_valueComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end valueComp

    public static class generalComp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start generalComp
    // etc/XQFT.g:535:2: generalComp : ( EQSi | NEQSi | LTSi | LTOREQSi | GTSi | GTOREQSi );
    public final generalComp_return generalComp() throws RecognitionException {
        generalComp_return retval = new generalComp_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set360=null;

        CommonTree set360_tree=null;

        try {
            // etc/XQFT.g:535:33: ( EQSi | NEQSi | LTSi | LTOREQSi | GTSi | GTOREQSi )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set360=(Token)input.LT(1);
            if ( input.LA(1)==EQSi||(input.LA(1)>=NEQSi && input.LA(1)<=GTOREQSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set360));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_generalComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end generalComp

    public static class nodeComp_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nodeComp
    // etc/XQFT.g:538:2: nodeComp : ( IS | NODEBEFORESi | NODEAFTERSi );
    public final nodeComp_return nodeComp() throws RecognitionException {
        nodeComp_return retval = new nodeComp_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set361=null;

        CommonTree set361_tree=null;

        try {
            // etc/XQFT.g:538:33: ( IS | NODEBEFORESi | NODEAFTERSi )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set361=(Token)input.LT(1);
            if ( input.LA(1)==IS||(input.LA(1)>=NODEBEFORESi && input.LA(1)<=NODEAFTERSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set361));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_nodeComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nodeComp

    public static class ftSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftSelection
    // etc/XQFT.g:542:1: ftSelection : ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )? ;
    public final ftSelection_return ftSelection() throws RecognitionException {
        ftSelection_return retval = new ftSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WEIGHT364=null;
        ftOr_return ftOr362 = null;

        ftPosFilter_return ftPosFilter363 = null;

        rangeExpr_return rangeExpr365 = null;


        CommonTree WEIGHT364_tree=null;

        try {
            // etc/XQFT.g:542:32: ( ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )? )
            // etc/XQFT.g:542:34: ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_ftOr_in_ftSelection5804);
            ftOr362=ftOr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftOr362.getTree());
            // etc/XQFT.g:542:39: ( ftPosFilter )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==AT||(LA78_0>=DIFFERENT && LA78_0<=DISTANCE)||LA78_0==ENTIRE||LA78_0==ORDERED||LA78_0==SAME||LA78_0==WINDOW) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // etc/XQFT.g:542:39: ftPosFilter
            	    {
            	    pushFollow(FOLLOW_ftPosFilter_in_ftSelection5806);
            	    ftPosFilter363=ftPosFilter();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftPosFilter363.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // etc/XQFT.g:542:52: ( WEIGHT rangeExpr )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==WEIGHT) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // etc/XQFT.g:542:53: WEIGHT rangeExpr
                    {
                    WEIGHT364=(Token)input.LT(1);
                    match(input,WEIGHT,FOLLOW_WEIGHT_in_ftSelection5810); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WEIGHT364_tree = (CommonTree)adaptor.create(WEIGHT364);
                    adaptor.addChild(root_0, WEIGHT364_tree);
                    }
                    pushFollow(FOLLOW_rangeExpr_in_ftSelection5812);
                    rangeExpr365=rangeExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, rangeExpr365.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftSelection

    public static class ftOr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOr
    // etc/XQFT.g:545:2: ftOr : ftAnd ( FTOR ftAnd )* ;
    public final ftOr_return ftOr() throws RecognitionException {
        ftOr_return retval = new ftOr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FTOR367=null;
        ftAnd_return ftAnd366 = null;

        ftAnd_return ftAnd368 = null;


        CommonTree FTOR367_tree=null;

        try {
            // etc/XQFT.g:545:33: ( ftAnd ( FTOR ftAnd )* )
            // etc/XQFT.g:545:35: ftAnd ( FTOR ftAnd )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_ftAnd_in_ftOr5850);
            ftAnd366=ftAnd();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftAnd366.getTree());
            // etc/XQFT.g:545:41: ( FTOR ftAnd )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==FTOR) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // etc/XQFT.g:545:43: FTOR ftAnd
            	    {
            	    FTOR367=(Token)input.LT(1);
            	    match(input,FTOR,FOLLOW_FTOR_in_ftOr5854); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    FTOR367_tree = (CommonTree)adaptor.create(FTOR367);
            	    adaptor.addChild(root_0, FTOR367_tree);
            	    }
            	    pushFollow(FOLLOW_ftAnd_in_ftOr5856);
            	    ftAnd368=ftAnd();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftAnd368.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOr

    public static class ftAnd_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftAnd
    // etc/XQFT.g:546:3: ftAnd : ftMildNot ( FTAND ftMildNot )* ;
    public final ftAnd_return ftAnd() throws RecognitionException {
        ftAnd_return retval = new ftAnd_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FTAND370=null;
        ftMildNot_return ftMildNot369 = null;

        ftMildNot_return ftMildNot371 = null;


        CommonTree FTAND370_tree=null;

        try {
            // etc/XQFT.g:546:34: ( ftMildNot ( FTAND ftMildNot )* )
            // etc/XQFT.g:546:36: ftMildNot ( FTAND ftMildNot )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_ftMildNot_in_ftAnd5893);
            ftMildNot369=ftMildNot();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftMildNot369.getTree());
            // etc/XQFT.g:546:46: ( FTAND ftMildNot )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==FTAND) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // etc/XQFT.g:546:48: FTAND ftMildNot
            	    {
            	    FTAND370=(Token)input.LT(1);
            	    match(input,FTAND,FOLLOW_FTAND_in_ftAnd5897); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    FTAND370_tree = (CommonTree)adaptor.create(FTAND370);
            	    adaptor.addChild(root_0, FTAND370_tree);
            	    }
            	    pushFollow(FOLLOW_ftMildNot_in_ftAnd5899);
            	    ftMildNot371=ftMildNot();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftMildNot371.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftAnd

    public static class ftMildNot_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMildNot
    // etc/XQFT.g:547:4: ftMildNot : ftUnaryNot ( NOT IN ftUnaryNot )* ;
    public final ftMildNot_return ftMildNot() throws RecognitionException {
        ftMildNot_return retval = new ftMildNot_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT373=null;
        Token IN374=null;
        ftUnaryNot_return ftUnaryNot372 = null;

        ftUnaryNot_return ftUnaryNot375 = null;


        CommonTree NOT373_tree=null;
        CommonTree IN374_tree=null;

        try {
            // etc/XQFT.g:547:35: ( ftUnaryNot ( NOT IN ftUnaryNot )* )
            // etc/XQFT.g:547:37: ftUnaryNot ( NOT IN ftUnaryNot )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot5933);
            ftUnaryNot372=ftUnaryNot();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot372.getTree());
            // etc/XQFT.g:547:48: ( NOT IN ftUnaryNot )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==NOT) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // etc/XQFT.g:547:50: NOT IN ftUnaryNot
            	    {
            	    NOT373=(Token)input.LT(1);
            	    match(input,NOT,FOLLOW_NOT_in_ftMildNot5937); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    NOT373_tree = (CommonTree)adaptor.create(NOT373);
            	    adaptor.addChild(root_0, NOT373_tree);
            	    }
            	    IN374=(Token)input.LT(1);
            	    match(input,IN,FOLLOW_IN_in_ftMildNot5939); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    IN374_tree = (CommonTree)adaptor.create(IN374);
            	    adaptor.addChild(root_0, IN374_tree);
            	    }
            	    pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot5941);
            	    ftUnaryNot375=ftUnaryNot();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot375.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMildNot

    public static class ftUnaryNot_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftUnaryNot
    // etc/XQFT.g:548:5: ftUnaryNot : ( FTNOT )? ftPrimaryWithOptions ;
    public final ftUnaryNot_return ftUnaryNot() throws RecognitionException {
        ftUnaryNot_return retval = new ftUnaryNot_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FTNOT376=null;
        ftPrimaryWithOptions_return ftPrimaryWithOptions377 = null;


        CommonTree FTNOT376_tree=null;

        try {
            // etc/XQFT.g:548:36: ( ( FTNOT )? ftPrimaryWithOptions )
            // etc/XQFT.g:548:38: ( FTNOT )? ftPrimaryWithOptions
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:548:38: ( FTNOT )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==FTNOT) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // etc/XQFT.g:548:39: FTNOT
                    {
                    FTNOT376=(Token)input.LT(1);
                    match(input,FTNOT,FOLLOW_FTNOT_in_ftUnaryNot5976); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FTNOT376_tree = (CommonTree)adaptor.create(FTNOT376);
                    adaptor.addChild(root_0, FTNOT376_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot5980);
            ftPrimaryWithOptions377=ftPrimaryWithOptions();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftPrimaryWithOptions377.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftUnaryNot

    public static class ftPrimaryWithOptions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPrimaryWithOptions
    // etc/XQFT.g:549:6: ftPrimaryWithOptions : ftPrimary ( ftMatchOptions )? ;
    public final ftPrimaryWithOptions_return ftPrimaryWithOptions() throws RecognitionException {
        ftPrimaryWithOptions_return retval = new ftPrimaryWithOptions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        ftPrimary_return ftPrimary378 = null;

        ftMatchOptions_return ftMatchOptions379 = null;



        try {
            // etc/XQFT.g:549:37: ( ftPrimary ( ftMatchOptions )? )
            // etc/XQFT.g:549:39: ftPrimary ( ftMatchOptions )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_ftPrimary_in_ftPrimaryWithOptions6002);
            ftPrimary378=ftPrimary();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftPrimary378.getTree());
            // etc/XQFT.g:549:49: ( ftMatchOptions )?
            int alt84=2;
            switch ( input.LA(1) ) {
                case DIACRITICS:
                case LANGUAGE:
                case LOWERCASE:
                case OPTION:
                case UPPERCASE:
                case WITH:
                    {
                    alt84=1;
                    }
                    break;
                case WITHOUT:
                    {
                    int LA84_2 = input.LA(2);

                    if ( ((LA84_2>=STEMMING && LA84_2<=STOP)||LA84_2==THESAURUS||LA84_2==WILDCARDS) ) {
                        alt84=1;
                    }
                    }
                    break;
                case CASE:
                    {
                    int LA84_3 = input.LA(2);

                    if ( (LA84_3==INSENSITIVE||LA84_3==SENSITIVE) ) {
                        alt84=1;
                    }
                    }
                    break;
            }

            switch (alt84) {
                case 1 :
                    // etc/XQFT.g:549:49: ftMatchOptions
                    {
                    pushFollow(FOLLOW_ftMatchOptions_in_ftPrimaryWithOptions6004);
                    ftMatchOptions379=ftMatchOptions();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOptions379.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPrimaryWithOptions

    public static class ftPrimary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPrimary
    // etc/XQFT.g:551:7: ftPrimary : ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection );
    public final ftPrimary_return ftPrimary() throws RecognitionException {
        ftPrimary_return retval = new ftPrimary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPARSi382=null;
        Token RPARSi384=null;
        ftWords_return ftWords380 = null;

        ftTimes_return ftTimes381 = null;

        ftSelection_return ftSelection383 = null;

        ftExtensionSelection_return ftExtensionSelection385 = null;


        CommonTree LPARSi382_tree=null;
        CommonTree RPARSi384_tree=null;

        try {
            // etc/XQFT.g:551:38: ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection )
            int alt86=3;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case LBRACESi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
                {
                alt86=1;
                }
                break;
            case LPARSi:
                {
                alt86=2;
                }
                break;
            case LPRAGSi:
                {
                alt86=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("551:7: ftPrimary : ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection );", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // etc/XQFT.g:551:40: ftWords ( ftTimes )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWords_in_ftPrimary6045);
                    ftWords380=ftWords();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWords380.getTree());
                    // etc/XQFT.g:551:48: ( ftTimes )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==OCCURS) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // etc/XQFT.g:551:48: ftTimes
                            {
                            pushFollow(FOLLOW_ftTimes_in_ftPrimary6047);
                            ftTimes381=ftTimes();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftTimes381.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:552:19: LPARSi ftSelection RPARSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPARSi382=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftPrimary6069); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi382_tree = (CommonTree)adaptor.create(LPARSi382);
                    adaptor.addChild(root_0, LPARSi382_tree);
                    }
                    pushFollow(FOLLOW_ftSelection_in_ftPrimary6071);
                    ftSelection383=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection383.getTree());
                    RPARSi384=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftPrimary6073); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi384_tree = (CommonTree)adaptor.create(RPARSi384);
                    adaptor.addChild(root_0, RPARSi384_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:553:19: ftExtensionSelection
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionSelection_in_ftPrimary6094);
                    ftExtensionSelection385=ftExtensionSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftExtensionSelection385.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPrimary

    public static class ftWords_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWords
    // etc/XQFT.g:555:8: ftWords : ftWordsValue ( ftAnyallOption )? ;
    public final ftWords_return ftWords() throws RecognitionException {
        ftWords_return retval = new ftWords_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        ftWordsValue_return ftWordsValue386 = null;

        ftAnyallOption_return ftAnyallOption387 = null;



        try {
            // etc/XQFT.g:555:39: ( ftWordsValue ( ftAnyallOption )? )
            // etc/XQFT.g:555:41: ftWordsValue ( ftAnyallOption )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_ftWordsValue_in_ftWords6148);
            ftWordsValue386=ftWordsValue();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftWordsValue386.getTree());
            // etc/XQFT.g:555:54: ( ftAnyallOption )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( ((LA87_0>=ALL && LA87_0<=ANY)||LA87_0==PHRASE) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // etc/XQFT.g:555:54: ftAnyallOption
                    {
                    pushFollow(FOLLOW_ftAnyallOption_in_ftWords6150);
                    ftAnyallOption387=ftAnyallOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftAnyallOption387.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWords

    public static class ftWordsValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWordsValue
    // etc/XQFT.g:556:9: ftWordsValue : ( literal | ( LBRACESi expr RBRACSi ) );
    public final ftWordsValue_return ftWordsValue() throws RecognitionException {
        ftWordsValue_return retval = new ftWordsValue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACESi389=null;
        Token RBRACSi391=null;
        literal_return literal388 = null;

        expr_return expr390 = null;


        CommonTree LBRACESi389_tree=null;
        CommonTree RBRACSi391_tree=null;

        try {
            // etc/XQFT.g:556:40: ( literal | ( LBRACESi expr RBRACSi ) )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==StringLiteral||(LA88_0>=IntegerLiteral && LA88_0<=DoubleLiteral)) ) {
                alt88=1;
            }
            else if ( (LA88_0==LBRACESi) ) {
                alt88=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("556:9: ftWordsValue : ( literal | ( LBRACESi expr RBRACSi ) );", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // etc/XQFT.g:556:42: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_ftWordsValue6184);
                    literal388=literal();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal388.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:556:52: ( LBRACESi expr RBRACSi )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:556:52: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:556:53: LBRACESi expr RBRACSi
                    {
                    LBRACESi389=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_ftWordsValue6189); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LBRACESi389_tree = (CommonTree)adaptor.create(LBRACESi389);
                    adaptor.addChild(root_0, LBRACESi389_tree);
                    }
                    pushFollow(FOLLOW_expr_in_ftWordsValue6191);
                    expr390=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr390.getTree());
                    RBRACSi391=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_ftWordsValue6193); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RBRACSi391_tree = (CommonTree)adaptor.create(RBRACSi391);
                    adaptor.addChild(root_0, RBRACSi391_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWordsValue

    public static class literal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start literal
    // etc/XQFT.g:557:10: literal : ( numericLiteral | StringLiteral );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token StringLiteral393=null;
        numericLiteral_return numericLiteral392 = null;


        CommonTree StringLiteral393_tree=null;

        try {
            // etc/XQFT.g:557:41: ( numericLiteral | StringLiteral )
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( ((LA89_0>=IntegerLiteral && LA89_0<=DoubleLiteral)) ) {
                alt89=1;
            }
            else if ( (LA89_0==StringLiteral) ) {
                alt89=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("557:10: literal : ( numericLiteral | StringLiteral );", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // etc/XQFT.g:557:43: numericLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_literal6233);
                    numericLiteral392=numericLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, numericLiteral392.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:557:60: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    StringLiteral393=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_literal6237); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral393_tree = (CommonTree)adaptor.create(StringLiteral393);
                    adaptor.addChild(root_0, StringLiteral393_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end literal

    public static class numericLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start numericLiteral
    // etc/XQFT.g:558:11: numericLiteral : ( IntegerLiteral | DecimalLiteral | DoubleLiteral );
    public final numericLiteral_return numericLiteral() throws RecognitionException {
        numericLiteral_return retval = new numericLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set394=null;

        CommonTree set394_tree=null;

        try {
            // etc/XQFT.g:558:42: ( IntegerLiteral | DecimalLiteral | DoubleLiteral )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set394=(Token)input.LT(1);
            if ( (input.LA(1)>=IntegerLiteral && input.LA(1)<=DoubleLiteral) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set394));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_numericLiteral0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end numericLiteral

    public static class ftAnyallOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftAnyallOption
    // etc/XQFT.g:559:9: ftAnyallOption : ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE );
    public final ftAnyallOption_return ftAnyallOption() throws RecognitionException {
        ftAnyallOption_return retval = new ftAnyallOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ANY395=null;
        Token WORD396=null;
        Token ALL397=null;
        Token WORDS398=null;
        Token PHRASE399=null;

        CommonTree ANY395_tree=null;
        CommonTree WORD396_tree=null;
        CommonTree ALL397_tree=null;
        CommonTree WORDS398_tree=null;
        CommonTree PHRASE399_tree=null;

        try {
            // etc/XQFT.g:559:40: ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE )
            int alt92=3;
            switch ( input.LA(1) ) {
            case ANY:
                {
                alt92=1;
                }
                break;
            case ALL:
                {
                alt92=2;
                }
                break;
            case PHRASE:
                {
                alt92=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("559:9: ftAnyallOption : ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE );", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // etc/XQFT.g:559:42: ( ANY ( WORD )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:559:42: ( ANY ( WORD )? )
                    // etc/XQFT.g:559:43: ANY ( WORD )?
                    {
                    ANY395=(Token)input.LT(1);
                    match(input,ANY,FOLLOW_ANY_in_ftAnyallOption6310); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ANY395_tree = (CommonTree)adaptor.create(ANY395);
                    adaptor.addChild(root_0, ANY395_tree);
                    }
                    // etc/XQFT.g:559:47: ( WORD )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==WORD) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // etc/XQFT.g:559:47: WORD
                            {
                            WORD396=(Token)input.LT(1);
                            match(input,WORD,FOLLOW_WORD_in_ftAnyallOption6312); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WORD396_tree = (CommonTree)adaptor.create(WORD396);
                            adaptor.addChild(root_0, WORD396_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:559:56: ( ALL ( WORDS )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:559:56: ( ALL ( WORDS )? )
                    // etc/XQFT.g:559:57: ALL ( WORDS )?
                    {
                    ALL397=(Token)input.LT(1);
                    match(input,ALL,FOLLOW_ALL_in_ftAnyallOption6319); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ALL397_tree = (CommonTree)adaptor.create(ALL397);
                    adaptor.addChild(root_0, ALL397_tree);
                    }
                    // etc/XQFT.g:559:61: ( WORDS )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==WORDS) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // etc/XQFT.g:559:61: WORDS
                            {
                            WORDS398=(Token)input.LT(1);
                            match(input,WORDS,FOLLOW_WORDS_in_ftAnyallOption6321); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WORDS398_tree = (CommonTree)adaptor.create(WORDS398);
                            adaptor.addChild(root_0, WORDS398_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:559:71: PHRASE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PHRASE399=(Token)input.LT(1);
                    match(input,PHRASE,FOLLOW_PHRASE_in_ftAnyallOption6327); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PHRASE399_tree = (CommonTree)adaptor.create(PHRASE399);
                    adaptor.addChild(root_0, PHRASE399_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftAnyallOption

    public static class ftTimes_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftTimes
    // etc/XQFT.g:560:8: ftTimes : OCCURS ftRange TIMES ;
    public final ftTimes_return ftTimes() throws RecognitionException {
        ftTimes_return retval = new ftTimes_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OCCURS400=null;
        Token TIMES402=null;
        ftRange_return ftRange401 = null;


        CommonTree OCCURS400_tree=null;
        CommonTree TIMES402_tree=null;

        try {
            // etc/XQFT.g:560:39: ( OCCURS ftRange TIMES )
            // etc/XQFT.g:560:41: OCCURS ftRange TIMES
            {
            root_0 = (CommonTree)adaptor.nil();

            OCCURS400=(Token)input.LT(1);
            match(input,OCCURS,FOLLOW_OCCURS_in_ftTimes6364); if (failed) return retval;
            if ( backtracking==0 ) {
            OCCURS400_tree = (CommonTree)adaptor.create(OCCURS400);
            adaptor.addChild(root_0, OCCURS400_tree);
            }
            pushFollow(FOLLOW_ftRange_in_ftTimes6366);
            ftRange401=ftRange();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRange401.getTree());
            TIMES402=(Token)input.LT(1);
            match(input,TIMES,FOLLOW_TIMES_in_ftTimes6368); if (failed) return retval;
            if ( backtracking==0 ) {
            TIMES402_tree = (CommonTree)adaptor.create(TIMES402);
            adaptor.addChild(root_0, TIMES402_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftTimes

    public static class ftRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftRange
    // etc/XQFT.g:561:9: ftRange : ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );
    public final ftRange_return ftRange() throws RecognitionException {
        ftRange_return retval = new ftRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXACTLY403=null;
        Token AT405=null;
        Token LEAST406=null;
        Token AT408=null;
        Token MOST409=null;
        Token FROM411=null;
        Token TO413=null;
        additiveExpr_return additiveExpr404 = null;

        additiveExpr_return additiveExpr407 = null;

        additiveExpr_return additiveExpr410 = null;

        additiveExpr_return additiveExpr412 = null;

        additiveExpr_return additiveExpr414 = null;


        CommonTree EXACTLY403_tree=null;
        CommonTree AT405_tree=null;
        CommonTree LEAST406_tree=null;
        CommonTree AT408_tree=null;
        CommonTree MOST409_tree=null;
        CommonTree FROM411_tree=null;
        CommonTree TO413_tree=null;

        try {
            // etc/XQFT.g:561:40: ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) )
            int alt93=4;
            switch ( input.LA(1) ) {
            case EXACTLY:
                {
                alt93=1;
                }
                break;
            case AT:
                {
                int LA93_2 = input.LA(2);

                if ( (LA93_2==LEAST) ) {
                    alt93=2;
                }
                else if ( (LA93_2==MOST) ) {
                    alt93=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("561:9: ftRange : ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );", 93, 2, input);

                    throw nvae;
                }
                }
                break;
            case FROM:
                {
                alt93=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("561:9: ftRange : ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // etc/XQFT.g:561:42: ( EXACTLY additiveExpr )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:561:42: ( EXACTLY additiveExpr )
                    // etc/XQFT.g:561:43: EXACTLY additiveExpr
                    {
                    EXACTLY403=(Token)input.LT(1);
                    match(input,EXACTLY,FOLLOW_EXACTLY_in_ftRange6407); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXACTLY403_tree = (CommonTree)adaptor.create(EXACTLY403);
                    adaptor.addChild(root_0, EXACTLY403_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6409);
                    additiveExpr404=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr404.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:562:39: ( AT LEAST additiveExpr )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:562:39: ( AT LEAST additiveExpr )
                    // etc/XQFT.g:562:40: AT LEAST additiveExpr
                    {
                    AT405=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRange6451); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT405_tree = (CommonTree)adaptor.create(AT405);
                    adaptor.addChild(root_0, AT405_tree);
                    }
                    LEAST406=(Token)input.LT(1);
                    match(input,LEAST,FOLLOW_LEAST_in_ftRange6453); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LEAST406_tree = (CommonTree)adaptor.create(LEAST406);
                    adaptor.addChild(root_0, LEAST406_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6455);
                    additiveExpr407=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr407.getTree());

                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:563:40: ( AT MOST additiveExpr )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:563:40: ( AT MOST additiveExpr )
                    // etc/XQFT.g:563:41: AT MOST additiveExpr
                    {
                    AT408=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRange6498); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT408_tree = (CommonTree)adaptor.create(AT408);
                    adaptor.addChild(root_0, AT408_tree);
                    }
                    MOST409=(Token)input.LT(1);
                    match(input,MOST,FOLLOW_MOST_in_ftRange6500); if (failed) return retval;
                    if ( backtracking==0 ) {
                    MOST409_tree = (CommonTree)adaptor.create(MOST409);
                    adaptor.addChild(root_0, MOST409_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6502);
                    additiveExpr410=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr410.getTree());

                    }


                    }
                    break;
                case 4 :
                    // etc/XQFT.g:564:45: ( FROM additiveExpr TO additiveExpr )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:564:45: ( FROM additiveExpr TO additiveExpr )
                    // etc/XQFT.g:564:46: FROM additiveExpr TO additiveExpr
                    {
                    FROM411=(Token)input.LT(1);
                    match(input,FROM,FOLLOW_FROM_in_ftRange6550); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FROM411_tree = (CommonTree)adaptor.create(FROM411);
                    adaptor.addChild(root_0, FROM411_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6552);
                    additiveExpr412=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr412.getTree());
                    TO413=(Token)input.LT(1);
                    match(input,TO,FOLLOW_TO_in_ftRange6554); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TO413_tree = (CommonTree)adaptor.create(TO413);
                    adaptor.addChild(root_0, TO413_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6556);
                    additiveExpr414=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr414.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftRange

    public static class ftExtensionSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftExtensionSelection
    // etc/XQFT.g:567:8: ftExtensionSelection : ( pragma )+ LBRACESi ( ftSelection )? RBRACSi ;
    public final ftExtensionSelection_return ftExtensionSelection() throws RecognitionException {
        ftExtensionSelection_return retval = new ftExtensionSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACESi416=null;
        Token RBRACSi418=null;
        pragma_return pragma415 = null;

        ftSelection_return ftSelection417 = null;


        CommonTree LBRACESi416_tree=null;
        CommonTree RBRACSi418_tree=null;

        try {
            // etc/XQFT.g:567:39: ( ( pragma )+ LBRACESi ( ftSelection )? RBRACSi )
            // etc/XQFT.g:567:41: ( pragma )+ LBRACESi ( ftSelection )? RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:567:41: ( pragma )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==LPRAGSi) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // etc/XQFT.g:567:41: pragma
            	    {
            	    pushFollow(FOLLOW_pragma_in_ftExtensionSelection6583);
            	    pragma415=pragma();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, pragma415.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);

            LBRACESi416=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_ftExtensionSelection6586); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi416_tree = (CommonTree)adaptor.create(LBRACESi416);
            adaptor.addChild(root_0, LBRACESi416_tree);
            }
            // etc/XQFT.g:567:58: ( ftSelection )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==FTNOT||LA95_0==StringLiteral||LA95_0==LPARSi||LA95_0==LBRACESi||(LA95_0>=IntegerLiteral && LA95_0<=LPRAGSi)) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // etc/XQFT.g:567:58: ftSelection
                    {
                    pushFollow(FOLLOW_ftSelection_in_ftExtensionSelection6588);
                    ftSelection417=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection417.getTree());

                    }
                    break;

            }

            RBRACSi418=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_ftExtensionSelection6591); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi418_tree = (CommonTree)adaptor.create(RBRACSi418);
            adaptor.addChild(root_0, RBRACSi418_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftExtensionSelection

    public static class pragma_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pragma
    // etc/XQFT.g:568:9: pragma : LPRAGSi qName ( PragmaContents )? RPRAGSi ;
    public final pragma_return pragma() throws RecognitionException {
        pragma_return retval = new pragma_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPRAGSi419=null;
        Token PragmaContents421=null;
        Token RPRAGSi422=null;
        qName_return qName420 = null;


        CommonTree LPRAGSi419_tree=null;
        CommonTree PragmaContents421_tree=null;
        CommonTree RPRAGSi422_tree=null;

        try {
            // etc/XQFT.g:568:40: ( LPRAGSi qName ( PragmaContents )? RPRAGSi )
            // etc/XQFT.g:568:42: LPRAGSi qName ( PragmaContents )? RPRAGSi
            {
            root_0 = (CommonTree)adaptor.nil();

            LPRAGSi419=(Token)input.LT(1);
            match(input,LPRAGSi,FOLLOW_LPRAGSi_in_pragma6630); if (failed) return retval;
            if ( backtracking==0 ) {
            LPRAGSi419_tree = (CommonTree)adaptor.create(LPRAGSi419);
            adaptor.addChild(root_0, LPRAGSi419_tree);
            }
            pushFollow(FOLLOW_qName_in_pragma6632);
            qName420=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName420.getTree());
            // etc/XQFT.g:568:56: ( PragmaContents )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==PragmaContents) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // etc/XQFT.g:568:56: PragmaContents
                    {
                    PragmaContents421=(Token)input.LT(1);
                    match(input,PragmaContents,FOLLOW_PragmaContents_in_pragma6634); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PragmaContents421_tree = (CommonTree)adaptor.create(PragmaContents421);
                    adaptor.addChild(root_0, PragmaContents421_tree);
                    }

                    }
                    break;

            }

            RPRAGSi422=(Token)input.LT(1);
            match(input,RPRAGSi,FOLLOW_RPRAGSi_in_pragma6637); if (failed) return retval;
            if ( backtracking==0 ) {
            RPRAGSi422_tree = (CommonTree)adaptor.create(RPRAGSi422);
            adaptor.addChild(root_0, RPRAGSi422_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end pragma

    public static class ftPosFilter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPosFilter
    // etc/XQFT.g:575:2: ftPosFilter : ( ftOrder | ftWindow | ftDistance | ftScope | ftContent );
    public final ftPosFilter_return ftPosFilter() throws RecognitionException {
        ftPosFilter_return retval = new ftPosFilter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        ftOrder_return ftOrder423 = null;

        ftWindow_return ftWindow424 = null;

        ftDistance_return ftDistance425 = null;

        ftScope_return ftScope426 = null;

        ftContent_return ftContent427 = null;



        try {
            // etc/XQFT.g:575:33: ( ftOrder | ftWindow | ftDistance | ftScope | ftContent )
            int alt97=5;
            switch ( input.LA(1) ) {
            case ORDERED:
                {
                alt97=1;
                }
                break;
            case WINDOW:
                {
                alt97=2;
                }
                break;
            case DISTANCE:
                {
                alt97=3;
                }
                break;
            case DIFFERENT:
            case SAME:
                {
                alt97=4;
                }
                break;
            case AT:
            case ENTIRE:
                {
                alt97=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("575:2: ftPosFilter : ( ftOrder | ftWindow | ftDistance | ftScope | ftContent );", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // etc/XQFT.g:575:35: ftOrder
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftOrder_in_ftPosFilter6692);
                    ftOrder423=ftOrder();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftOrder423.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:575:45: ftWindow
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWindow_in_ftPosFilter6696);
                    ftWindow424=ftWindow();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWindow424.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:575:56: ftDistance
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftDistance_in_ftPosFilter6700);
                    ftDistance425=ftDistance();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftDistance425.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:575:69: ftScope
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftScope_in_ftPosFilter6704);
                    ftScope426=ftScope();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftScope426.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:575:79: ftContent
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftContent_in_ftPosFilter6708);
                    ftContent427=ftContent();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftContent427.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPosFilter

    public static class ftOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOrder
    // etc/XQFT.g:576:3: ftOrder : ORDERED ;
    public final ftOrder_return ftOrder() throws RecognitionException {
        ftOrder_return retval = new ftOrder_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ORDERED428=null;

        CommonTree ORDERED428_tree=null;

        try {
            // etc/XQFT.g:576:34: ( ORDERED )
            // etc/XQFT.g:576:36: ORDERED
            {
            root_0 = (CommonTree)adaptor.nil();

            ORDERED428=(Token)input.LT(1);
            match(input,ORDERED,FOLLOW_ORDERED_in_ftOrder6740); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERED428_tree = (CommonTree)adaptor.create(ORDERED428);
            adaptor.addChild(root_0, ORDERED428_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOrder

    public static class ftWindow_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWindow
    // etc/XQFT.g:577:3: ftWindow : WINDOW additiveExpr ftUnit ;
    public final ftWindow_return ftWindow() throws RecognitionException {
        ftWindow_return retval = new ftWindow_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WINDOW429=null;
        additiveExpr_return additiveExpr430 = null;

        ftUnit_return ftUnit431 = null;


        CommonTree WINDOW429_tree=null;

        try {
            // etc/XQFT.g:577:34: ( WINDOW additiveExpr ftUnit )
            // etc/XQFT.g:577:36: WINDOW additiveExpr ftUnit
            {
            root_0 = (CommonTree)adaptor.nil();

            WINDOW429=(Token)input.LT(1);
            match(input,WINDOW,FOLLOW_WINDOW_in_ftWindow6771); if (failed) return retval;
            if ( backtracking==0 ) {
            WINDOW429_tree = (CommonTree)adaptor.create(WINDOW429);
            adaptor.addChild(root_0, WINDOW429_tree);
            }
            pushFollow(FOLLOW_additiveExpr_in_ftWindow6773);
            additiveExpr430=additiveExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr430.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftWindow6775);
            ftUnit431=ftUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnit431.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWindow

    public static class ftUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftUnit
    // etc/XQFT.g:579:4: ftUnit : ( WORDS | SENTENCES | PARAGRAPHS );
    public final ftUnit_return ftUnit() throws RecognitionException {
        ftUnit_return retval = new ftUnit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set432=null;

        CommonTree set432_tree=null;

        try {
            // etc/XQFT.g:579:35: ( WORDS | SENTENCES | PARAGRAPHS )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set432=(Token)input.LT(1);
            if ( input.LA(1)==PARAGRAPHS||input.LA(1)==SENTENCES||input.LA(1)==WORDS ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set432));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftUnit0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftUnit

    public static class ftDistance_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftDistance
    // etc/XQFT.g:580:3: ftDistance : DISTANCE ftRange ftUnit ;
    public final ftDistance_return ftDistance() throws RecognitionException {
        ftDistance_return retval = new ftDistance_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DISTANCE433=null;
        ftRange_return ftRange434 = null;

        ftUnit_return ftUnit435 = null;


        CommonTree DISTANCE433_tree=null;

        try {
            // etc/XQFT.g:580:34: ( DISTANCE ftRange ftUnit )
            // etc/XQFT.g:580:36: DISTANCE ftRange ftUnit
            {
            root_0 = (CommonTree)adaptor.nil();

            DISTANCE433=(Token)input.LT(1);
            match(input,DISTANCE,FOLLOW_DISTANCE_in_ftDistance6848); if (failed) return retval;
            if ( backtracking==0 ) {
            DISTANCE433_tree = (CommonTree)adaptor.create(DISTANCE433);
            adaptor.addChild(root_0, DISTANCE433_tree);
            }
            pushFollow(FOLLOW_ftRange_in_ftDistance6850);
            ftRange434=ftRange();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRange434.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftDistance6852);
            ftUnit435=ftUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnit435.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftDistance

    public static class ftScope_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftScope
    // etc/XQFT.g:587:3: ftScope : ( SAME | DIFFERENT ) ftBigUnit ;
    public final ftScope_return ftScope() throws RecognitionException {
        ftScope_return retval = new ftScope_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set436=null;
        ftBigUnit_return ftBigUnit437 = null;


        CommonTree set436_tree=null;

        try {
            // etc/XQFT.g:587:34: ( ( SAME | DIFFERENT ) ftBigUnit )
            // etc/XQFT.g:587:36: ( SAME | DIFFERENT ) ftBigUnit
            {
            root_0 = (CommonTree)adaptor.nil();

            set436=(Token)input.LT(1);
            if ( input.LA(1)==DIFFERENT||input.LA(1)==SAME ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set436));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftScope6890);    throw mse;
            }

            pushFollow(FOLLOW_ftBigUnit_in_ftScope6898);
            ftBigUnit437=ftBigUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftBigUnit437.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftScope

    public static class ftBigUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftBigUnit
    // etc/XQFT.g:588:4: ftBigUnit : ( SENTENCE | PARAGRAPH );
    public final ftBigUnit_return ftBigUnit() throws RecognitionException {
        ftBigUnit_return retval = new ftBigUnit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set438=null;

        CommonTree set438_tree=null;

        try {
            // etc/XQFT.g:588:35: ( SENTENCE | PARAGRAPH )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set438=(Token)input.LT(1);
            if ( input.LA(1)==PARAGRAPH||input.LA(1)==SENTENCE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set438));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftBigUnit0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftBigUnit

    public static class ftContent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftContent
    // etc/XQFT.g:589:3: ftContent : ( AT START | AT END | ENTIRE CONTENT );
    public final ftContent_return ftContent() throws RecognitionException {
        ftContent_return retval = new ftContent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AT439=null;
        Token START440=null;
        Token AT441=null;
        Token END442=null;
        Token ENTIRE443=null;
        Token CONTENT444=null;

        CommonTree AT439_tree=null;
        CommonTree START440_tree=null;
        CommonTree AT441_tree=null;
        CommonTree END442_tree=null;
        CommonTree ENTIRE443_tree=null;
        CommonTree CONTENT444_tree=null;

        try {
            // etc/XQFT.g:589:34: ( AT START | AT END | ENTIRE CONTENT )
            int alt98=3;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==AT) ) {
                int LA98_1 = input.LA(2);

                if ( (LA98_1==START) ) {
                    alt98=1;
                }
                else if ( (LA98_1==END) ) {
                    alt98=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("589:3: ftContent : ( AT START | AT END | ENTIRE CONTENT );", 98, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA98_0==ENTIRE) ) {
                alt98=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("589:3: ftContent : ( AT START | AT END | ENTIRE CONTENT );", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // etc/XQFT.g:589:36: AT START
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT439=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftContent6964); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT439_tree = (CommonTree)adaptor.create(AT439);
                    adaptor.addChild(root_0, AT439_tree);
                    }
                    START440=(Token)input.LT(1);
                    match(input,START,FOLLOW_START_in_ftContent6966); if (failed) return retval;
                    if ( backtracking==0 ) {
                    START440_tree = (CommonTree)adaptor.create(START440);
                    adaptor.addChild(root_0, START440_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:589:47: AT END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT441=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftContent6970); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT441_tree = (CommonTree)adaptor.create(AT441);
                    adaptor.addChild(root_0, AT441_tree);
                    }
                    END442=(Token)input.LT(1);
                    match(input,END,FOLLOW_END_in_ftContent6972); if (failed) return retval;
                    if ( backtracking==0 ) {
                    END442_tree = (CommonTree)adaptor.create(END442);
                    adaptor.addChild(root_0, END442_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:589:56: ENTIRE CONTENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ENTIRE443=(Token)input.LT(1);
                    match(input,ENTIRE,FOLLOW_ENTIRE_in_ftContent6976); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ENTIRE443_tree = (CommonTree)adaptor.create(ENTIRE443);
                    adaptor.addChild(root_0, ENTIRE443_tree);
                    }
                    CONTENT444=(Token)input.LT(1);
                    match(input,CONTENT,FOLLOW_CONTENT_in_ftContent6978); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CONTENT444_tree = (CommonTree)adaptor.create(CONTENT444);
                    adaptor.addChild(root_0, CONTENT444_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftContent

    public static class ftMatchOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMatchOption
    // etc/XQFT.g:598:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );
    public final ftMatchOption_return ftMatchOption() throws RecognitionException {
        ftMatchOption_return retval = new ftMatchOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        ftLanguageOption_return ftLanguageOption445 = null;

        ftWildCardOption_return ftWildCardOption446 = null;

        ftThesaurusOption_return ftThesaurusOption447 = null;

        ftStemOption_return ftStemOption448 = null;

        ftCaseOption_return ftCaseOption449 = null;

        ftDiacriticsOption_return ftDiacriticsOption450 = null;

        ftStopwordOption_return ftStopwordOption451 = null;

        ftExtensionOption_return ftExtensionOption452 = null;



        try {
            // etc/XQFT.g:598:32: ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption )
            int alt99=8;
            switch ( input.LA(1) ) {
            case LANGUAGE:
                {
                alt99=1;
                }
                break;
            case WITH:
                {
                switch ( input.LA(2) ) {
                case THESAURUS:
                    {
                    alt99=3;
                    }
                    break;
                case DEFAULT:
                case STOP:
                    {
                    alt99=7;
                    }
                    break;
                case WILDCARDS:
                    {
                    alt99=2;
                    }
                    break;
                case STEMMING:
                    {
                    alt99=4;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("598:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );", 99, 2, input);

                    throw nvae;
                }

                }
                break;
            case WITHOUT:
                {
                switch ( input.LA(2) ) {
                case STOP:
                    {
                    alt99=7;
                    }
                    break;
                case WILDCARDS:
                    {
                    alt99=2;
                    }
                    break;
                case STEMMING:
                    {
                    alt99=4;
                    }
                    break;
                case THESAURUS:
                    {
                    alt99=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("598:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );", 99, 3, input);

                    throw nvae;
                }

                }
                break;
            case CASE:
            case LOWERCASE:
            case UPPERCASE:
                {
                alt99=5;
                }
                break;
            case DIACRITICS:
                {
                alt99=6;
                }
                break;
            case OPTION:
                {
                alt99=8;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("598:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // etc/XQFT.g:598:34: ftLanguageOption
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftLanguageOption_in_ftMatchOption7016);
                    ftLanguageOption445=ftLanguageOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftLanguageOption445.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:599:37: ftWildCardOption
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWildCardOption_in_ftMatchOption7054);
                    ftWildCardOption446=ftWildCardOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWildCardOption446.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:600:37: ftThesaurusOption
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftThesaurusOption_in_ftMatchOption7092);
                    ftThesaurusOption447=ftThesaurusOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusOption447.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:601:37: ftStemOption
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftStemOption_in_ftMatchOption7130);
                    ftStemOption448=ftStemOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftStemOption448.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:602:37: ftCaseOption
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftCaseOption_in_ftMatchOption7168);
                    ftCaseOption449=ftCaseOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftCaseOption449.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:603:37: ftDiacriticsOption
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftDiacriticsOption_in_ftMatchOption7206);
                    ftDiacriticsOption450=ftDiacriticsOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftDiacriticsOption450.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:604:37: ftStopwordOption
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftStopwordOption_in_ftMatchOption7244);
                    ftStopwordOption451=ftStopwordOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftStopwordOption451.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:605:37: ftExtensionOption
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionOption_in_ftMatchOption7282);
                    ftExtensionOption452=ftExtensionOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftExtensionOption452.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMatchOption

    public static class ftLanguageOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftLanguageOption
    // etc/XQFT.g:608:2: ftLanguageOption : LANGUAGE StringLiteral ;
    public final ftLanguageOption_return ftLanguageOption() throws RecognitionException {
        ftLanguageOption_return retval = new ftLanguageOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LANGUAGE453=null;
        Token StringLiteral454=null;

        CommonTree LANGUAGE453_tree=null;
        CommonTree StringLiteral454_tree=null;

        try {
            // etc/XQFT.g:608:33: ( LANGUAGE StringLiteral )
            // etc/XQFT.g:608:35: LANGUAGE StringLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            LANGUAGE453=(Token)input.LT(1);
            match(input,LANGUAGE,FOLLOW_LANGUAGE_in_ftLanguageOption7407); if (failed) return retval;
            if ( backtracking==0 ) {
            LANGUAGE453_tree = (CommonTree)adaptor.create(LANGUAGE453);
            adaptor.addChild(root_0, LANGUAGE453_tree);
            }
            StringLiteral454=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_ftLanguageOption7409); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral454_tree = (CommonTree)adaptor.create(StringLiteral454);
            adaptor.addChild(root_0, StringLiteral454_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftLanguageOption

    public static class ftWildCardOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWildCardOption
    // etc/XQFT.g:611:2: ftWildCardOption : ( WITH WILDCARDS | WITHOUT WILDCARDS );
    public final ftWildCardOption_return ftWildCardOption() throws RecognitionException {
        ftWildCardOption_return retval = new ftWildCardOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WITH455=null;
        Token WILDCARDS456=null;
        Token WITHOUT457=null;
        Token WILDCARDS458=null;

        CommonTree WITH455_tree=null;
        CommonTree WILDCARDS456_tree=null;
        CommonTree WITHOUT457_tree=null;
        CommonTree WILDCARDS458_tree=null;

        try {
            // etc/XQFT.g:611:33: ( WITH WILDCARDS | WITHOUT WILDCARDS )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==WITH) ) {
                alt100=1;
            }
            else if ( (LA100_0==WITHOUT) ) {
                alt100=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("611:2: ftWildCardOption : ( WITH WILDCARDS | WITHOUT WILDCARDS );", 100, 0, input);

                throw nvae;
            }
            switch (alt100) {
                case 1 :
                    // etc/XQFT.g:611:35: WITH WILDCARDS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITH455=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftWildCardOption7435); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH455_tree = (CommonTree)adaptor.create(WITH455);
                    adaptor.addChild(root_0, WITH455_tree);
                    }
                    WILDCARDS456=(Token)input.LT(1);
                    match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftWildCardOption7437); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WILDCARDS456_tree = (CommonTree)adaptor.create(WILDCARDS456);
                    adaptor.addChild(root_0, WILDCARDS456_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:611:52: WITHOUT WILDCARDS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITHOUT457=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftWildCardOption7441); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT457_tree = (CommonTree)adaptor.create(WITHOUT457);
                    adaptor.addChild(root_0, WITHOUT457_tree);
                    }
                    WILDCARDS458=(Token)input.LT(1);
                    match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftWildCardOption7443); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WILDCARDS458_tree = (CommonTree)adaptor.create(WILDCARDS458);
                    adaptor.addChild(root_0, WILDCARDS458_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWildCardOption

    public static class ftThesaurusOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftThesaurusOption
    // etc/XQFT.g:614:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );
    public final ftThesaurusOption_return ftThesaurusOption() throws RecognitionException {
        ftThesaurusOption_return retval = new ftThesaurusOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WITH459=null;
        Token THESAURUS460=null;
        Token DEFAULT462=null;
        Token WITH463=null;
        Token THESAURUS464=null;
        Token LPARSi465=null;
        Token DEFAULT467=null;
        Token COMMASi468=null;
        Token RPARSi470=null;
        Token WITHOUT471=null;
        Token THESAURUS472=null;
        ftThesaurusID_return ftThesaurusID461 = null;

        ftThesaurusID_return ftThesaurusID466 = null;

        ftThesaurusID_return ftThesaurusID469 = null;


        CommonTree WITH459_tree=null;
        CommonTree THESAURUS460_tree=null;
        CommonTree DEFAULT462_tree=null;
        CommonTree WITH463_tree=null;
        CommonTree THESAURUS464_tree=null;
        CommonTree LPARSi465_tree=null;
        CommonTree DEFAULT467_tree=null;
        CommonTree COMMASi468_tree=null;
        CommonTree RPARSi470_tree=null;
        CommonTree WITHOUT471_tree=null;
        CommonTree THESAURUS472_tree=null;

        try {
            // etc/XQFT.g:614:31: ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS )
            int alt104=3;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==WITH) ) {
                int LA104_1 = input.LA(2);

                if ( (LA104_1==THESAURUS) ) {
                    int LA104_3 = input.LA(3);

                    if ( (LA104_3==LPARSi) ) {
                        alt104=2;
                    }
                    else if ( (LA104_3==AT||LA104_3==DEFAULT) ) {
                        alt104=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("614:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );", 104, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("614:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );", 104, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA104_0==WITHOUT) ) {
                alt104=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("614:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );", 104, 0, input);

                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    // etc/XQFT.g:614:33: WITH THESAURUS ( ftThesaurusID | DEFAULT )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITH459=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftThesaurusOption7466); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH459_tree = (CommonTree)adaptor.create(WITH459);
                    adaptor.addChild(root_0, WITH459_tree);
                    }
                    THESAURUS460=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption7468); if (failed) return retval;
                    if ( backtracking==0 ) {
                    THESAURUS460_tree = (CommonTree)adaptor.create(THESAURUS460);
                    adaptor.addChild(root_0, THESAURUS460_tree);
                    }
                    // etc/XQFT.g:614:48: ( ftThesaurusID | DEFAULT )
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==AT) ) {
                        alt101=1;
                    }
                    else if ( (LA101_0==DEFAULT) ) {
                        alt101=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("614:48: ( ftThesaurusID | DEFAULT )", 101, 0, input);

                        throw nvae;
                    }
                    switch (alt101) {
                        case 1 :
                            // etc/XQFT.g:614:49: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption7471);
                            ftThesaurusID461=ftThesaurusID();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID461.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:614:65: DEFAULT
                            {
                            DEFAULT462=(Token)input.LT(1);
                            match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption7475); if (failed) return retval;
                            if ( backtracking==0 ) {
                            DEFAULT462_tree = (CommonTree)adaptor.create(DEFAULT462);
                            adaptor.addChild(root_0, DEFAULT462_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:615:14: WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITH463=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftThesaurusOption7491); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH463_tree = (CommonTree)adaptor.create(WITH463);
                    adaptor.addChild(root_0, WITH463_tree);
                    }
                    THESAURUS464=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption7493); if (failed) return retval;
                    if ( backtracking==0 ) {
                    THESAURUS464_tree = (CommonTree)adaptor.create(THESAURUS464);
                    adaptor.addChild(root_0, THESAURUS464_tree);
                    }
                    LPARSi465=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftThesaurusOption7495); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi465_tree = (CommonTree)adaptor.create(LPARSi465);
                    adaptor.addChild(root_0, LPARSi465_tree);
                    }
                    // etc/XQFT.g:615:36: ( ftThesaurusID | DEFAULT )
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==AT) ) {
                        alt102=1;
                    }
                    else if ( (LA102_0==DEFAULT) ) {
                        alt102=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("615:36: ( ftThesaurusID | DEFAULT )", 102, 0, input);

                        throw nvae;
                    }
                    switch (alt102) {
                        case 1 :
                            // etc/XQFT.g:615:37: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption7498);
                            ftThesaurusID466=ftThesaurusID();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID466.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:615:53: DEFAULT
                            {
                            DEFAULT467=(Token)input.LT(1);
                            match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption7502); if (failed) return retval;
                            if ( backtracking==0 ) {
                            DEFAULT467_tree = (CommonTree)adaptor.create(DEFAULT467);
                            adaptor.addChild(root_0, DEFAULT467_tree);
                            }

                            }
                            break;

                    }

                    // etc/XQFT.g:615:62: ( COMMASi ftThesaurusID )*
                    loop103:
                    do {
                        int alt103=2;
                        int LA103_0 = input.LA(1);

                        if ( (LA103_0==COMMASi) ) {
                            alt103=1;
                        }


                        switch (alt103) {
                    	case 1 :
                    	    // etc/XQFT.g:615:63: COMMASi ftThesaurusID
                    	    {
                    	    COMMASi468=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_ftThesaurusOption7506); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi468_tree = (CommonTree)adaptor.create(COMMASi468);
                    	    adaptor.addChild(root_0, COMMASi468_tree);
                    	    }
                    	    pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption7508);
                    	    ftThesaurusID469=ftThesaurusID();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID469.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop103;
                        }
                    } while (true);

                    RPARSi470=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftThesaurusOption7512); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi470_tree = (CommonTree)adaptor.create(RPARSi470);
                    adaptor.addChild(root_0, RPARSi470_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:616:38: WITHOUT THESAURUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITHOUT471=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftThesaurusOption7551); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT471_tree = (CommonTree)adaptor.create(WITHOUT471);
                    adaptor.addChild(root_0, WITHOUT471_tree);
                    }
                    THESAURUS472=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption7553); if (failed) return retval;
                    if ( backtracking==0 ) {
                    THESAURUS472_tree = (CommonTree)adaptor.create(THESAURUS472);
                    adaptor.addChild(root_0, THESAURUS472_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftThesaurusOption

    public static class ftThesaurusID_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftThesaurusID
    // etc/XQFT.g:618:3: ftThesaurusID : AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )? ;
    public final ftThesaurusID_return ftThesaurusID() throws RecognitionException {
        ftThesaurusID_return retval = new ftThesaurusID_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AT473=null;
        Token RELATIONSHIP475=null;
        Token StringLiteral476=null;
        Token LEVELS478=null;
        uriLiteral_return uriLiteral474 = null;

        ftRange_return ftRange477 = null;


        CommonTree AT473_tree=null;
        CommonTree RELATIONSHIP475_tree=null;
        CommonTree StringLiteral476_tree=null;
        CommonTree LEVELS478_tree=null;

        try {
            // etc/XQFT.g:618:34: ( AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )? )
            // etc/XQFT.g:618:36: AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )?
            {
            root_0 = (CommonTree)adaptor.nil();

            AT473=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_ftThesaurusID7615); if (failed) return retval;
            if ( backtracking==0 ) {
            AT473_tree = (CommonTree)adaptor.create(AT473);
            adaptor.addChild(root_0, AT473_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_ftThesaurusID7617);
            uriLiteral474=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral474.getTree());
            // etc/XQFT.g:618:50: ( RELATIONSHIP StringLiteral )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==RELATIONSHIP) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // etc/XQFT.g:618:51: RELATIONSHIP StringLiteral
                    {
                    RELATIONSHIP475=(Token)input.LT(1);
                    match(input,RELATIONSHIP,FOLLOW_RELATIONSHIP_in_ftThesaurusID7620); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RELATIONSHIP475_tree = (CommonTree)adaptor.create(RELATIONSHIP475);
                    adaptor.addChild(root_0, RELATIONSHIP475_tree);
                    }
                    StringLiteral476=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftThesaurusID7622); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral476_tree = (CommonTree)adaptor.create(StringLiteral476);
                    adaptor.addChild(root_0, StringLiteral476_tree);
                    }

                    }
                    break;

            }

            // etc/XQFT.g:618:80: ( ftRange LEVELS )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==EXACTLY||LA106_0==FROM) ) {
                alt106=1;
            }
            else if ( (LA106_0==AT) ) {
                int LA106_2 = input.LA(2);

                if ( (LA106_2==LEAST||LA106_2==MOST) ) {
                    alt106=1;
                }
            }
            switch (alt106) {
                case 1 :
                    // etc/XQFT.g:618:81: ftRange LEVELS
                    {
                    pushFollow(FOLLOW_ftRange_in_ftThesaurusID7627);
                    ftRange477=ftRange();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftRange477.getTree());
                    LEVELS478=(Token)input.LT(1);
                    match(input,LEVELS,FOLLOW_LEVELS_in_ftThesaurusID7629); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LEVELS478_tree = (CommonTree)adaptor.create(LEVELS478);
                    adaptor.addChild(root_0, LEVELS478_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftThesaurusID

    public static class ftStemOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftStemOption
    // etc/XQFT.g:628:2: ftStemOption : ( WITH STEMMING | WITHOUT STEMMING );
    public final ftStemOption_return ftStemOption() throws RecognitionException {
        ftStemOption_return retval = new ftStemOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WITH479=null;
        Token STEMMING480=null;
        Token WITHOUT481=null;
        Token STEMMING482=null;

        CommonTree WITH479_tree=null;
        CommonTree STEMMING480_tree=null;
        CommonTree WITHOUT481_tree=null;
        CommonTree STEMMING482_tree=null;

        try {
            // etc/XQFT.g:628:33: ( WITH STEMMING | WITHOUT STEMMING )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==WITH) ) {
                alt107=1;
            }
            else if ( (LA107_0==WITHOUT) ) {
                alt107=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("628:2: ftStemOption : ( WITH STEMMING | WITHOUT STEMMING );", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // etc/XQFT.g:628:35: WITH STEMMING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITH479=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftStemOption7674); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH479_tree = (CommonTree)adaptor.create(WITH479);
                    adaptor.addChild(root_0, WITH479_tree);
                    }
                    STEMMING480=(Token)input.LT(1);
                    match(input,STEMMING,FOLLOW_STEMMING_in_ftStemOption7676); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STEMMING480_tree = (CommonTree)adaptor.create(STEMMING480);
                    adaptor.addChild(root_0, STEMMING480_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:628:51: WITHOUT STEMMING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITHOUT481=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftStemOption7680); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT481_tree = (CommonTree)adaptor.create(WITHOUT481);
                    adaptor.addChild(root_0, WITHOUT481_tree);
                    }
                    STEMMING482=(Token)input.LT(1);
                    match(input,STEMMING,FOLLOW_STEMMING_in_ftStemOption7682); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STEMMING482_tree = (CommonTree)adaptor.create(STEMMING482);
                    adaptor.addChild(root_0, STEMMING482_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftStemOption

    public static class ftCaseOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftCaseOption
    // etc/XQFT.g:631:2: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );
    public final ftCaseOption_return ftCaseOption() throws RecognitionException {
        ftCaseOption_return retval = new ftCaseOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE483=null;
        Token INSENSITIVE484=null;
        Token CASE485=null;
        Token SENSITIVE486=null;
        Token LOWERCASE487=null;
        Token UPPERCASE488=null;

        CommonTree CASE483_tree=null;
        CommonTree INSENSITIVE484_tree=null;
        CommonTree CASE485_tree=null;
        CommonTree SENSITIVE486_tree=null;
        CommonTree LOWERCASE487_tree=null;
        CommonTree UPPERCASE488_tree=null;

        try {
            // etc/XQFT.g:631:33: ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE )
            int alt108=4;
            switch ( input.LA(1) ) {
            case CASE:
                {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==SENSITIVE) ) {
                    alt108=2;
                }
                else if ( (LA108_1==INSENSITIVE) ) {
                    alt108=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("631:2: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );", 108, 1, input);

                    throw nvae;
                }
                }
                break;
            case LOWERCASE:
                {
                alt108=3;
                }
                break;
            case UPPERCASE:
                {
                alt108=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("631:2: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );", 108, 0, input);

                throw nvae;
            }

            switch (alt108) {
                case 1 :
                    // etc/XQFT.g:631:35: CASE INSENSITIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CASE483=(Token)input.LT(1);
                    match(input,CASE,FOLLOW_CASE_in_ftCaseOption7712); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASE483_tree = (CommonTree)adaptor.create(CASE483);
                    adaptor.addChild(root_0, CASE483_tree);
                    }
                    INSENSITIVE484=(Token)input.LT(1);
                    match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_ftCaseOption7714); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSENSITIVE484_tree = (CommonTree)adaptor.create(INSENSITIVE484);
                    adaptor.addChild(root_0, INSENSITIVE484_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:632:38: CASE SENSITIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CASE485=(Token)input.LT(1);
                    match(input,CASE,FOLLOW_CASE_in_ftCaseOption7753); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASE485_tree = (CommonTree)adaptor.create(CASE485);
                    adaptor.addChild(root_0, CASE485_tree);
                    }
                    SENSITIVE486=(Token)input.LT(1);
                    match(input,SENSITIVE,FOLLOW_SENSITIVE_in_ftCaseOption7755); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SENSITIVE486_tree = (CommonTree)adaptor.create(SENSITIVE486);
                    adaptor.addChild(root_0, SENSITIVE486_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:633:38: LOWERCASE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LOWERCASE487=(Token)input.LT(1);
                    match(input,LOWERCASE,FOLLOW_LOWERCASE_in_ftCaseOption7794); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LOWERCASE487_tree = (CommonTree)adaptor.create(LOWERCASE487);
                    adaptor.addChild(root_0, LOWERCASE487_tree);
                    }

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:634:38: UPPERCASE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UPPERCASE488=(Token)input.LT(1);
                    match(input,UPPERCASE,FOLLOW_UPPERCASE_in_ftCaseOption7833); if (failed) return retval;
                    if ( backtracking==0 ) {
                    UPPERCASE488_tree = (CommonTree)adaptor.create(UPPERCASE488);
                    adaptor.addChild(root_0, UPPERCASE488_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftCaseOption

    public static class ftDiacriticsOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftDiacriticsOption
    // etc/XQFT.g:638:2: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );
    public final ftDiacriticsOption_return ftDiacriticsOption() throws RecognitionException {
        ftDiacriticsOption_return retval = new ftDiacriticsOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DIACRITICS489=null;
        Token INSENSITIVE490=null;
        Token DIACRITICS491=null;
        Token SENSITIVE492=null;

        CommonTree DIACRITICS489_tree=null;
        CommonTree INSENSITIVE490_tree=null;
        CommonTree DIACRITICS491_tree=null;
        CommonTree SENSITIVE492_tree=null;

        try {
            // etc/XQFT.g:638:33: ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==DIACRITICS) ) {
                int LA109_1 = input.LA(2);

                if ( (LA109_1==SENSITIVE) ) {
                    alt109=2;
                }
                else if ( (LA109_1==INSENSITIVE) ) {
                    alt109=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("638:2: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );", 109, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("638:2: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // etc/XQFT.g:638:35: DIACRITICS INSENSITIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DIACRITICS489=(Token)input.LT(1);
                    match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ftDiacriticsOption7995); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DIACRITICS489_tree = (CommonTree)adaptor.create(DIACRITICS489);
                    adaptor.addChild(root_0, DIACRITICS489_tree);
                    }
                    INSENSITIVE490=(Token)input.LT(1);
                    match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_ftDiacriticsOption7997); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSENSITIVE490_tree = (CommonTree)adaptor.create(INSENSITIVE490);
                    adaptor.addChild(root_0, INSENSITIVE490_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:639:14: DIACRITICS SENSITIVE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DIACRITICS491=(Token)input.LT(1);
                    match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ftDiacriticsOption8012); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DIACRITICS491_tree = (CommonTree)adaptor.create(DIACRITICS491);
                    adaptor.addChild(root_0, DIACRITICS491_tree);
                    }
                    SENSITIVE492=(Token)input.LT(1);
                    match(input,SENSITIVE,FOLLOW_SENSITIVE_in_ftDiacriticsOption8014); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SENSITIVE492_tree = (CommonTree)adaptor.create(SENSITIVE492);
                    adaptor.addChild(root_0, SENSITIVE492_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftDiacriticsOption

    public static class ftStopwordOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftStopwordOption
    // etc/XQFT.g:642:2: ftStopwordOption : ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );
    public final ftStopwordOption_return ftStopwordOption() throws RecognitionException {
        ftStopwordOption_return retval = new ftStopwordOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WITH493=null;
        Token STOP494=null;
        Token WORDS495=null;
        Token WITHOUT498=null;
        Token STOP499=null;
        Token WORDS500=null;
        Token WITH501=null;
        Token DEFAULT502=null;
        Token STOP503=null;
        Token WORDS504=null;
        ftRefOrList_return ftRefOrList496 = null;

        ftInclExclStringLiteral_return ftInclExclStringLiteral497 = null;

        ftInclExclStringLiteral_return ftInclExclStringLiteral505 = null;


        CommonTree WITH493_tree=null;
        CommonTree STOP494_tree=null;
        CommonTree WORDS495_tree=null;
        CommonTree WITHOUT498_tree=null;
        CommonTree STOP499_tree=null;
        CommonTree WORDS500_tree=null;
        CommonTree WITH501_tree=null;
        CommonTree DEFAULT502_tree=null;
        CommonTree STOP503_tree=null;
        CommonTree WORDS504_tree=null;

        try {
            // etc/XQFT.g:642:33: ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* )
            int alt112=3;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==WITH) ) {
                int LA112_1 = input.LA(2);

                if ( (LA112_1==DEFAULT) ) {
                    alt112=3;
                }
                else if ( (LA112_1==STOP) ) {
                    alt112=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:2: ftStopwordOption : ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );", 112, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA112_0==WITHOUT) ) {
                alt112=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("642:2: ftStopwordOption : ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );", 112, 0, input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // etc/XQFT.g:642:35: WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITH493=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftStopwordOption8070); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH493_tree = (CommonTree)adaptor.create(WITH493);
                    adaptor.addChild(root_0, WITH493_tree);
                    }
                    STOP494=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption8072); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP494_tree = (CommonTree)adaptor.create(STOP494);
                    adaptor.addChild(root_0, STOP494_tree);
                    }
                    WORDS495=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption8074); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS495_tree = (CommonTree)adaptor.create(WORDS495);
                    adaptor.addChild(root_0, WORDS495_tree);
                    }
                    pushFollow(FOLLOW_ftRefOrList_in_ftStopwordOption8076);
                    ftRefOrList496=ftRefOrList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftRefOrList496.getTree());
                    // etc/XQFT.g:642:63: ( ftInclExclStringLiteral )*
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==EXCEPT||LA110_0==UNION) ) {
                            alt110=1;
                        }


                        switch (alt110) {
                    	case 1 :
                    	    // etc/XQFT.g:642:63: ftInclExclStringLiteral
                    	    {
                    	    pushFollow(FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8078);
                    	    ftInclExclStringLiteral497=ftInclExclStringLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftInclExclStringLiteral497.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop110;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:643:14: WITHOUT STOP WORDS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITHOUT498=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftStopwordOption8094); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT498_tree = (CommonTree)adaptor.create(WITHOUT498);
                    adaptor.addChild(root_0, WITHOUT498_tree);
                    }
                    STOP499=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption8096); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP499_tree = (CommonTree)adaptor.create(STOP499);
                    adaptor.addChild(root_0, STOP499_tree);
                    }
                    WORDS500=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption8098); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS500_tree = (CommonTree)adaptor.create(WORDS500);
                    adaptor.addChild(root_0, WORDS500_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:644:38: WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WITH501=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftStopwordOption8137); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH501_tree = (CommonTree)adaptor.create(WITH501);
                    adaptor.addChild(root_0, WITH501_tree);
                    }
                    DEFAULT502=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_ftStopwordOption8139); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEFAULT502_tree = (CommonTree)adaptor.create(DEFAULT502);
                    adaptor.addChild(root_0, DEFAULT502_tree);
                    }
                    STOP503=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption8141); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP503_tree = (CommonTree)adaptor.create(STOP503);
                    adaptor.addChild(root_0, STOP503_tree);
                    }
                    WORDS504=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption8143); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS504_tree = (CommonTree)adaptor.create(WORDS504);
                    adaptor.addChild(root_0, WORDS504_tree);
                    }
                    // etc/XQFT.g:644:62: ( ftInclExclStringLiteral )*
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);

                        if ( (LA111_0==EXCEPT||LA111_0==UNION) ) {
                            alt111=1;
                        }


                        switch (alt111) {
                    	case 1 :
                    	    // etc/XQFT.g:644:62: ftInclExclStringLiteral
                    	    {
                    	    pushFollow(FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8145);
                    	    ftInclExclStringLiteral505=ftInclExclStringLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftInclExclStringLiteral505.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop111;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftStopwordOption

    public static class ftRefOrList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftRefOrList
    // etc/XQFT.g:646:3: ftRefOrList : ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi );
    public final ftRefOrList_return ftRefOrList() throws RecognitionException {
        ftRefOrList_return retval = new ftRefOrList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AT506=null;
        Token LPARSi508=null;
        Token StringLiteral509=null;
        Token COMMASi510=null;
        Token StringLiteral511=null;
        Token RPARSi512=null;
        uriLiteral_return uriLiteral507 = null;


        CommonTree AT506_tree=null;
        CommonTree LPARSi508_tree=null;
        CommonTree StringLiteral509_tree=null;
        CommonTree COMMASi510_tree=null;
        CommonTree StringLiteral511_tree=null;
        CommonTree RPARSi512_tree=null;

        try {
            // etc/XQFT.g:646:34: ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==AT) ) {
                alt114=1;
            }
            else if ( (LA114_0==LPARSi) ) {
                alt114=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("646:3: ftRefOrList : ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi );", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // etc/XQFT.g:646:36: ( AT uriLiteral )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // etc/XQFT.g:646:36: ( AT uriLiteral )
                    // etc/XQFT.g:646:37: AT uriLiteral
                    {
                    AT506=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRefOrList8211); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT506_tree = (CommonTree)adaptor.create(AT506);
                    adaptor.addChild(root_0, AT506_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_ftRefOrList8213);
                    uriLiteral507=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral507.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:647:15: LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPARSi508=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftRefOrList8230); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LPARSi508_tree = (CommonTree)adaptor.create(LPARSi508);
                    adaptor.addChild(root_0, LPARSi508_tree);
                    }
                    StringLiteral509=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftRefOrList8232); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral509_tree = (CommonTree)adaptor.create(StringLiteral509);
                    adaptor.addChild(root_0, StringLiteral509_tree);
                    }
                    // etc/XQFT.g:647:36: ( COMMASi StringLiteral )*
                    loop113:
                    do {
                        int alt113=2;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==COMMASi) ) {
                            alt113=1;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // etc/XQFT.g:647:37: COMMASi StringLiteral
                    	    {
                    	    COMMASi510=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_ftRefOrList8235); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi510_tree = (CommonTree)adaptor.create(COMMASi510);
                    	    adaptor.addChild(root_0, COMMASi510_tree);
                    	    }
                    	    StringLiteral511=(Token)input.LT(1);
                    	    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftRefOrList8237); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    StringLiteral511_tree = (CommonTree)adaptor.create(StringLiteral511);
                    	    adaptor.addChild(root_0, StringLiteral511_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop113;
                        }
                    } while (true);

                    RPARSi512=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftRefOrList8241); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RPARSi512_tree = (CommonTree)adaptor.create(RPARSi512);
                    adaptor.addChild(root_0, RPARSi512_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftRefOrList

    public static class ftInclExclStringLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftInclExclStringLiteral
    // etc/XQFT.g:649:3: ftInclExclStringLiteral : ( UNION | EXCEPT ) ftRefOrList ;
    public final ftInclExclStringLiteral_return ftInclExclStringLiteral() throws RecognitionException {
        ftInclExclStringLiteral_return retval = new ftInclExclStringLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set513=null;
        ftRefOrList_return ftRefOrList514 = null;


        CommonTree set513_tree=null;

        try {
            // etc/XQFT.g:649:34: ( ( UNION | EXCEPT ) ftRefOrList )
            // etc/XQFT.g:649:36: ( UNION | EXCEPT ) ftRefOrList
            {
            root_0 = (CommonTree)adaptor.nil();

            set513=(Token)input.LT(1);
            if ( input.LA(1)==EXCEPT||input.LA(1)==UNION ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set513));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftInclExclStringLiteral8258);    throw mse;
            }

            pushFollow(FOLLOW_ftRefOrList_in_ftInclExclStringLiteral8266);
            ftRefOrList514=ftRefOrList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRefOrList514.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftInclExclStringLiteral

    public static class ftExtensionOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftExtensionOption
    // etc/XQFT.g:652:2: ftExtensionOption : OPTION qName StringLiteral ;
    public final ftExtensionOption_return ftExtensionOption() throws RecognitionException {
        ftExtensionOption_return retval = new ftExtensionOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPTION515=null;
        Token StringLiteral517=null;
        qName_return qName516 = null;


        CommonTree OPTION515_tree=null;
        CommonTree StringLiteral517_tree=null;

        try {
            // etc/XQFT.g:652:33: ( OPTION qName StringLiteral )
            // etc/XQFT.g:652:35: OPTION qName StringLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            OPTION515=(Token)input.LT(1);
            match(input,OPTION,FOLLOW_OPTION_in_ftExtensionOption8300); if (failed) return retval;
            if ( backtracking==0 ) {
            OPTION515_tree = (CommonTree)adaptor.create(OPTION515);
            adaptor.addChild(root_0, OPTION515_tree);
            }
            pushFollow(FOLLOW_qName_in_ftExtensionOption8302);
            qName516=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName516.getTree());
            StringLiteral517=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_ftExtensionOption8304); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral517_tree = (CommonTree)adaptor.create(StringLiteral517);
            adaptor.addChild(root_0, StringLiteral517_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftExtensionOption

    public static class valueExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start valueExpr
    // etc/XQFT.g:656:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );
    public final valueExpr_return valueExpr() throws RecognitionException {
        valueExpr_return retval = new valueExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        validateExpr_return validateExpr518 = null;

        pathExpr_return pathExpr519 = null;

        extensionExpr_return extensionExpr520 = null;



        try {
            // etc/XQFT.g:656:32: ( validateExpr | pathExpr | extensionExpr )
            int alt115=3;
            switch ( input.LA(1) ) {
            case VALIDATE:
                {
                alt115=1;
                }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case ATTRIBUTE:
            case CHILD:
            case COMMENT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case NODE:
            case ORDERED:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case SELF:
            case TEXT:
            case UNORDERED:
            case StringLiteral:
            case NCName:
            case DOLLARSi:
            case LPARSi:
            case STARSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case DBLSLASHSi:
            case SLASHSi:
            case DOTDOTSi:
            case ATSi:
            case DOTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt115=2;
                }
                break;
            case LPRAGSi:
                {
                alt115=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("656:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // etc/XQFT.g:656:34: validateExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_validateExpr_in_valueExpr8336);
                    validateExpr518=validateExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, validateExpr518.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:656:49: pathExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pathExpr_in_valueExpr8340);
                    pathExpr519=pathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, pathExpr519.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:656:60: extensionExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_extensionExpr_in_valueExpr8344);
                    extensionExpr520=extensionExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, extensionExpr520.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end valueExpr

    public static class validateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start validateExpr
    // etc/XQFT.g:659:2: validateExpr : VALIDATE ( validationMode )? LBRACESi expr RBRACSi ;
    public final validateExpr_return validateExpr() throws RecognitionException {
        validateExpr_return retval = new validateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token VALIDATE521=null;
        Token LBRACESi523=null;
        Token RBRACSi525=null;
        validationMode_return validationMode522 = null;

        expr_return expr524 = null;


        CommonTree VALIDATE521_tree=null;
        CommonTree LBRACESi523_tree=null;
        CommonTree RBRACSi525_tree=null;

        try {
            // etc/XQFT.g:659:33: ( VALIDATE ( validationMode )? LBRACESi expr RBRACSi )
            // etc/XQFT.g:659:35: VALIDATE ( validationMode )? LBRACESi expr RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            VALIDATE521=(Token)input.LT(1);
            match(input,VALIDATE,FOLLOW_VALIDATE_in_validateExpr8372); if (failed) return retval;
            if ( backtracking==0 ) {
            VALIDATE521_tree = (CommonTree)adaptor.create(VALIDATE521);
            adaptor.addChild(root_0, VALIDATE521_tree);
            }
            // etc/XQFT.g:659:44: ( validationMode )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==LAX||LA116_0==STRICT) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // etc/XQFT.g:659:44: validationMode
                    {
                    pushFollow(FOLLOW_validationMode_in_validateExpr8374);
                    validationMode522=validationMode();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, validationMode522.getTree());

                    }
                    break;

            }

            LBRACESi523=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_validateExpr8377); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi523_tree = (CommonTree)adaptor.create(LBRACESi523);
            adaptor.addChild(root_0, LBRACESi523_tree);
            }
            pushFollow(FOLLOW_expr_in_validateExpr8379);
            expr524=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr524.getTree());
            RBRACSi525=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_validateExpr8381); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi525_tree = (CommonTree)adaptor.create(RBRACSi525);
            adaptor.addChild(root_0, RBRACSi525_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end validateExpr

    public static class validationMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start validationMode
    // etc/XQFT.g:660:3: validationMode : ( LAX | STRICT );
    public final validationMode_return validationMode() throws RecognitionException {
        validationMode_return retval = new validationMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set526=null;

        CommonTree set526_tree=null;

        try {
            // etc/XQFT.g:660:34: ( LAX | STRICT )
            // etc/XQFT.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set526=(Token)input.LT(1);
            if ( input.LA(1)==LAX||input.LA(1)==STRICT ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set526));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_validationMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end validationMode

    public static class pathExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pathExpr
    // etc/XQFT.g:665:2: pathExpr : ( ( DBLSLASHSi relativePathExpr )=> DBLSLASHSi relativePathExpr | ( SLASHSi relativePathExpr )=> SLASHSi relativePathExpr | SLASHSi | relativePathExpr );
    public final pathExpr_return pathExpr() throws RecognitionException {
        pathExpr_return retval = new pathExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DBLSLASHSi527=null;
        Token SLASHSi529=null;
        Token SLASHSi531=null;
        relativePathExpr_return relativePathExpr528 = null;

        relativePathExpr_return relativePathExpr530 = null;

        relativePathExpr_return relativePathExpr532 = null;


        CommonTree DBLSLASHSi527_tree=null;
        CommonTree SLASHSi529_tree=null;
        CommonTree SLASHSi531_tree=null;

        try {
            // etc/XQFT.g:665:33: ( ( DBLSLASHSi relativePathExpr )=> DBLSLASHSi relativePathExpr | ( SLASHSi relativePathExpr )=> SLASHSi relativePathExpr | SLASHSi | relativePathExpr )
            int alt117=4;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // etc/XQFT.g:665:35: ( DBLSLASHSi relativePathExpr )=> DBLSLASHSi relativePathExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DBLSLASHSi527=(Token)input.LT(1);
                    match(input,DBLSLASHSi,FOLLOW_DBLSLASHSi_in_pathExpr8457); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DBLSLASHSi527_tree = (CommonTree)adaptor.create(DBLSLASHSi527);
                    adaptor.addChild(root_0, DBLSLASHSi527_tree);
                    }
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8459);
                    relativePathExpr528=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr528.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:666:14: ( SLASHSi relativePathExpr )=> SLASHSi relativePathExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SLASHSi529=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr8483); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SLASHSi529_tree = (CommonTree)adaptor.create(SLASHSi529);
                    adaptor.addChild(root_0, SLASHSi529_tree);
                    }
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8485);
                    relativePathExpr530=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr530.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:667:14: SLASHSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SLASHSi531=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr8500); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SLASHSi531_tree = (CommonTree)adaptor.create(SLASHSi531);
                    adaptor.addChild(root_0, SLASHSi531_tree);
                    }

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:668:14: relativePathExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8515);
                    relativePathExpr532=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr532.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end pathExpr

    public static class relativePathExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start relativePathExpr
    // etc/XQFT.g:669:3: relativePathExpr : stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )* ;
    public final relativePathExpr_return relativePathExpr() throws RecognitionException {
        relativePathExpr_return retval = new relativePathExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set534=null;
        stepExpr_return stepExpr533 = null;

        stepExpr_return stepExpr535 = null;


        CommonTree set534_tree=null;

        try {
            // etc/XQFT.g:669:34: ( stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )* )
            // etc/XQFT.g:669:36: stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_stepExpr_in_relativePathExpr8538);
            stepExpr533=stepExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, stepExpr533.getTree());
            // etc/XQFT.g:669:45: ( ( SLASHSi | DBLSLASHSi ) stepExpr )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( ((LA118_0>=DBLSLASHSi && LA118_0<=SLASHSi)) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // etc/XQFT.g:669:46: ( SLASHSi | DBLSLASHSi ) stepExpr
            	    {
            	    set534=(Token)input.LT(1);
            	    if ( (input.LA(1)>=DBLSLASHSi && input.LA(1)<=SLASHSi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set534));
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_relativePathExpr8541);    throw mse;
            	    }

            	    pushFollow(FOLLOW_stepExpr_in_relativePathExpr8549);
            	    stepExpr535=stepExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, stepExpr535.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end relativePathExpr

    public static class stepExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start stepExpr
    // etc/XQFT.g:670:4: stepExpr : ( axisStep | filterExpr );
    public final stepExpr_return stepExpr() throws RecognitionException {
        stepExpr_return retval = new stepExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        axisStep_return axisStep536 = null;

        filterExpr_return filterExpr537 = null;



        try {
            // etc/XQFT.g:670:35: ( axisStep | filterExpr )
            int alt119=2;
            switch ( input.LA(1) ) {
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case CHILD:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DOCUMENT_NODE:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case NODE:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case SELF:
            case STARSi:
            case DOTDOTSi:
            case ATSi:
                {
                alt119=1;
                }
                break;
            case ATTRIBUTE:
                {
                int LA119_2 = input.LA(2);

                if ( (LA119_2==LPARSi||LA119_2==DBLCOLONSi) ) {
                    alt119=1;
                }
                else if ( (LA119_2==NCName||LA119_2==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("670:4: stepExpr : ( axisStep | filterExpr );", 119, 2, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA119_3 = input.LA(2);

                if ( (LA119_3==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_3==NCName||LA119_3==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("670:4: stepExpr : ( axisStep | filterExpr );", 119, 3, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA119_4 = input.LA(2);

                if ( (LA119_4==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_4==NCName||LA119_4==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("670:4: stepExpr : ( axisStep | filterExpr );", 119, 4, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA119_5 = input.LA(2);

                if ( (LA119_5==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_5==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("670:4: stepExpr : ( axisStep | filterExpr );", 119, 5, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA119_6 = input.LA(2);

                if ( (LA119_6==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_6==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("670:4: stepExpr : ( axisStep | filterExpr );", 119, 6, input);

                    throw nvae;
                }
                }
                break;
            case NCName:
                {
                switch ( input.LA(2) ) {
                case COLONSi:
                    {
                    int LA119_9 = input.LA(3);

                    if ( (LA119_9==STARSi) ) {
                        alt119=1;
                    }
                    else if ( (LA119_9==NCName) ) {
                        int LA119_10 = input.LA(4);

                        if ( (LA119_10==LPARSi) ) {
                            alt119=2;
                        }
                        else if ( (LA119_10==EOF||LA119_10==AND||LA119_10==ASCENDING||(LA119_10>=CASE && LA119_10<=CASTABLE)||LA119_10==COLLATION||LA119_10==DEFAULT||LA119_10==DESCENDING||LA119_10==DIV||LA119_10==ELSE||LA119_10==EMPTY||LA119_10==EQ||LA119_10==EXCEPT||LA119_10==FOR||LA119_10==FTCONTAINS||LA119_10==GE||(LA119_10>=GT && LA119_10<=IDIV)||(LA119_10>=INSTANCE && LA119_10<=IS)||LA119_10==LE||(LA119_10>=LET && LA119_10<=LEVELS)||(LA119_10>=LT && LA119_10<=MOD)||LA119_10==NE||(LA119_10>=OR && LA119_10<=ORDER)||LA119_10==PARAGRAPHS||LA119_10==RETURN||LA119_10==SATISFIES||LA119_10==SENTENCES||LA119_10==STABLE||(LA119_10>=TIMES && LA119_10<=TREAT)||LA119_10==UNION||LA119_10==WHERE||LA119_10==WITHOUT||LA119_10==WORDS||LA119_10==SEMICOLONSi||(LA119_10>=EQSi && LA119_10<=COMMASi)||LA119_10==RPARSi||LA119_10==RBRACSi||(LA119_10>=STARSi && LA119_10<=NODEAFTERSi)||(LA119_10>=DBLSLASHSi && LA119_10<=SLASHSi)||(LA119_10>=LBRACKSi && LA119_10<=RBRACKSi)) ) {
                            alt119=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("670:4: stepExpr : ( axisStep | filterExpr );", 119, 10, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("670:4: stepExpr : ( axisStep | filterExpr );", 119, 9, input);

                        throw nvae;
                    }
                    }
                    break;
                case LPARSi:
                    {
                    alt119=2;
                    }
                    break;
                case EOF:
                case AND:
                case ASCENDING:
                case CASE:
                case CAST:
                case CASTABLE:
                case COLLATION:
                case DEFAULT:
                case DESCENDING:
                case DIV:
                case ELSE:
                case EMPTY:
                case EQ:
                case EXCEPT:
                case FOR:
                case FTCONTAINS:
                case GE:
                case GT:
                case IDIV:
                case INSTANCE:
                case INTERSECT:
                case IS:
                case LE:
                case LET:
                case LEVELS:
                case LT:
                case MOD:
                case NE:
                case OR:
                case ORDER:
                case PARAGRAPHS:
                case RETURN:
                case SATISFIES:
                case SENTENCES:
                case STABLE:
                case TIMES:
                case TO:
                case TREAT:
                case UNION:
                case WHERE:
                case WITHOUT:
                case WORDS:
                case SEMICOLONSi:
                case EQSi:
                case COMMASi:
                case RPARSi:
                case RBRACSi:
                case STARSi:
                case PLUSSi:
                case MINUSSi:
                case PIPESi:
                case NEQSi:
                case LTSi:
                case LTOREQSi:
                case GTSi:
                case GTOREQSi:
                case NODEBEFORESi:
                case NODEAFTERSi:
                case DBLSLASHSi:
                case SLASHSi:
                case LBRACKSi:
                case RBRACKSi:
                    {
                    alt119=1;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("670:4: stepExpr : ( axisStep | filterExpr );", 119, 7, input);

                    throw nvae;
                }

                }
                break;
            case DOCUMENT:
            case ORDERED:
            case UNORDERED:
            case StringLiteral:
            case DOLLARSi:
            case LPARSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case DOTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt119=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("670:4: stepExpr : ( axisStep | filterExpr );", 119, 0, input);

                throw nvae;
            }

            switch (alt119) {
                case 1 :
                    // etc/XQFT.g:670:37: axisStep
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_axisStep_in_stepExpr8585);
                    axisStep536=axisStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, axisStep536.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:671:16: filterExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_filterExpr_in_stepExpr8602);
                    filterExpr537=filterExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, filterExpr537.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end stepExpr

    public static class axisStep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start axisStep
    // etc/XQFT.g:674:4: axisStep : ( reverseStep | forwardStep ) predicateList ;
    public final axisStep_return axisStep() throws RecognitionException {
        axisStep_return retval = new axisStep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        reverseStep_return reverseStep538 = null;

        forwardStep_return forwardStep539 = null;

        predicateList_return predicateList540 = null;



        try {
            // etc/XQFT.g:674:35: ( ( reverseStep | forwardStep ) predicateList )
            // etc/XQFT.g:674:37: ( reverseStep | forwardStep ) predicateList
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:674:37: ( reverseStep | forwardStep )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( ((LA120_0>=ANCESTOR && LA120_0<=ANCESTOR_OR_SELF)||LA120_0==PARENT||(LA120_0>=PRECEDING && LA120_0<=PRECEDING_SIBLING)||LA120_0==DOTDOTSi) ) {
                alt120=1;
            }
            else if ( (LA120_0==ATTRIBUTE||LA120_0==CHILD||LA120_0==COMMENT||(LA120_0>=DESCENDANT && LA120_0<=DESCENDANT_OR_SELF)||(LA120_0>=DOCUMENT_NODE && LA120_0<=ELEMENT)||(LA120_0>=FOLLOWING && LA120_0<=FOLLOWING_SIBLING)||LA120_0==NODE||LA120_0==PROCESSING_INSTRUCTION||(LA120_0>=SCHEMAATTRIBUTE && LA120_0<=SCHEMAELEMENT)||LA120_0==SELF||LA120_0==TEXT||LA120_0==NCName||LA120_0==STARSi||LA120_0==ATSi) ) {
                alt120=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("674:37: ( reverseStep | forwardStep )", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // etc/XQFT.g:674:38: reverseStep
                    {
                    pushFollow(FOLLOW_reverseStep_in_axisStep8650);
                    reverseStep538=reverseStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, reverseStep538.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:674:52: forwardStep
                    {
                    pushFollow(FOLLOW_forwardStep_in_axisStep8654);
                    forwardStep539=forwardStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, forwardStep539.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_predicateList_in_axisStep8657);
            predicateList540=predicateList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, predicateList540.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end axisStep

    public static class reverseStep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start reverseStep
    // etc/XQFT.g:676:5: reverseStep : ( reverseAxis nodeTest | abbrevReverseStep );
    public final reverseStep_return reverseStep() throws RecognitionException {
        reverseStep_return retval = new reverseStep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        reverseAxis_return reverseAxis541 = null;

        nodeTest_return nodeTest542 = null;

        abbrevReverseStep_return abbrevReverseStep543 = null;



        try {
            // etc/XQFT.g:676:36: ( reverseAxis nodeTest | abbrevReverseStep )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( ((LA121_0>=ANCESTOR && LA121_0<=ANCESTOR_OR_SELF)||LA121_0==PARENT||(LA121_0>=PRECEDING && LA121_0<=PRECEDING_SIBLING)) ) {
                alt121=1;
            }
            else if ( (LA121_0==DOTDOTSi) ) {
                alt121=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("676:5: reverseStep : ( reverseAxis nodeTest | abbrevReverseStep );", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // etc/XQFT.g:676:38: reverseAxis nodeTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_reverseAxis_in_reverseStep8691);
                    reverseAxis541=reverseAxis();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, reverseAxis541.getTree());
                    pushFollow(FOLLOW_nodeTest_in_reverseStep8693);
                    nodeTest542=nodeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest542.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:676:61: abbrevReverseStep
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_abbrevReverseStep_in_reverseStep8697);
                    abbrevReverseStep543=abbrevReverseStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, abbrevReverseStep543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end reverseStep

    public static class reverseAxis_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start reverseAxis
    // etc/XQFT.g:677:6: reverseAxis : ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi ;
    public final reverseAxis_return reverseAxis() throws RecognitionException {
        reverseAxis_return retval = new reverseAxis_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set544=null;
        Token DBLCOLONSi545=null;

        CommonTree set544_tree=null;
        CommonTree DBLCOLONSi545_tree=null;

        try {
            // etc/XQFT.g:677:37: ( ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi )
            // etc/XQFT.g:677:39: ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi
            {
            root_0 = (CommonTree)adaptor.nil();

            set544=(Token)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=ANCESTOR_OR_SELF)||input.LA(1)==PARENT||(input.LA(1)>=PRECEDING && input.LA(1)<=PRECEDING_SIBLING) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set544));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_reverseAxis8728);    throw mse;
            }

            DBLCOLONSi545=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_reverseAxis8748); if (failed) return retval;
            if ( backtracking==0 ) {
            DBLCOLONSi545_tree = (CommonTree)adaptor.create(DBLCOLONSi545);
            adaptor.addChild(root_0, DBLCOLONSi545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end reverseAxis

    public static class nodeTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nodeTest
    // etc/XQFT.g:678:6: nodeTest : ( kindTest | nameTest );
    public final nodeTest_return nodeTest() throws RecognitionException {
        nodeTest_return retval = new nodeTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        kindTest_return kindTest546 = null;

        nameTest_return nameTest547 = null;



        try {
            // etc/XQFT.g:678:37: ( kindTest | nameTest )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==ATTRIBUTE||LA122_0==COMMENT||(LA122_0>=DOCUMENT_NODE && LA122_0<=ELEMENT)||LA122_0==NODE||LA122_0==PROCESSING_INSTRUCTION||(LA122_0>=SCHEMAATTRIBUTE && LA122_0<=SCHEMAELEMENT)||LA122_0==TEXT) ) {
                alt122=1;
            }
            else if ( (LA122_0==NCName||LA122_0==STARSi) ) {
                alt122=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("678:6: nodeTest : ( kindTest | nameTest );", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // etc/XQFT.g:678:39: kindTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_kindTest_in_nodeTest8782);
                    kindTest546=kindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, kindTest546.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:678:50: nameTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_nameTest_in_nodeTest8786);
                    nameTest547=nameTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nameTest547.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nodeTest

    public static class nameTest_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nameTest
    // etc/XQFT.g:680:7: nameTest : ( qName | wildcard );
    public final nameTest_return nameTest() throws RecognitionException {
        nameTest_return retval = new nameTest_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        qName_return qName548 = null;

        wildcard_return wildcard549 = null;



        try {
            // etc/XQFT.g:680:38: ( qName | wildcard )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==NCName) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==COLONSi) ) {
                    int LA123_3 = input.LA(3);

                    if ( (LA123_3==STARSi) ) {
                        alt123=2;
                    }
                    else if ( (LA123_3==NCName) ) {
                        alt123=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("680:7: nameTest : ( qName | wildcard );", 123, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA123_1==EOF||LA123_1==AND||LA123_1==ASCENDING||(LA123_1>=CASE && LA123_1<=CASTABLE)||LA123_1==COLLATION||LA123_1==DEFAULT||LA123_1==DESCENDING||LA123_1==DIV||LA123_1==ELSE||LA123_1==EMPTY||LA123_1==EQ||LA123_1==EXCEPT||LA123_1==FOR||LA123_1==FTCONTAINS||LA123_1==GE||(LA123_1>=GT && LA123_1<=IDIV)||(LA123_1>=INSTANCE && LA123_1<=IS)||LA123_1==LE||(LA123_1>=LET && LA123_1<=LEVELS)||(LA123_1>=LT && LA123_1<=MOD)||LA123_1==NE||(LA123_1>=OR && LA123_1<=ORDER)||LA123_1==PARAGRAPHS||LA123_1==RETURN||LA123_1==SATISFIES||LA123_1==SENTENCES||LA123_1==STABLE||(LA123_1>=TIMES && LA123_1<=TREAT)||LA123_1==UNION||LA123_1==WHERE||LA123_1==WITHOUT||LA123_1==WORDS||LA123_1==SEMICOLONSi||(LA123_1>=EQSi && LA123_1<=COMMASi)||LA123_1==RPARSi||LA123_1==RBRACSi||(LA123_1>=STARSi && LA123_1<=NODEAFTERSi)||(LA123_1>=DBLSLASHSi && LA123_1<=SLASHSi)||(LA123_1>=LBRACKSi && LA123_1<=RBRACKSi)) ) {
                    alt123=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("680:7: nameTest : ( qName | wildcard );", 123, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==STARSi) ) {
                alt123=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("680:7: nameTest : ( qName | wildcard );", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // etc/XQFT.g:680:40: qName
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qName_in_nameTest8822);
                    qName548=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName548.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:680:48: wildcard
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_wildcard_in_nameTest8826);
                    wildcard549=wildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, wildcard549.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nameTest

    public static class wildcard_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start wildcard
    // etc/XQFT.g:681:8: wildcard : ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi );
    public final wildcard_return wildcard() throws RecognitionException {
        wildcard_return retval = new wildcard_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STARSi550=null;
        Token COLONSi551=null;
        Token NCName552=null;
        Token STARSi553=null;
        Token NCName554=null;
        Token COLONSi555=null;
        Token STARSi556=null;

        CommonTree STARSi550_tree=null;
        CommonTree COLONSi551_tree=null;
        CommonTree NCName552_tree=null;
        CommonTree STARSi553_tree=null;
        CommonTree NCName554_tree=null;
        CommonTree COLONSi555_tree=null;
        CommonTree STARSi556_tree=null;

        try {
            // etc/XQFT.g:681:39: ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi )
            int alt124=3;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==STARSi) ) {
                int LA124_1 = input.LA(2);

                if ( (LA124_1==COLONSi) && (synpred4())) {
                    alt124=1;
                }
                else if ( (LA124_1==EOF||LA124_1==AND||LA124_1==ASCENDING||(LA124_1>=CASE && LA124_1<=CASTABLE)||LA124_1==COLLATION||LA124_1==DEFAULT||LA124_1==DESCENDING||LA124_1==DIV||LA124_1==ELSE||LA124_1==EMPTY||LA124_1==EQ||LA124_1==EXCEPT||LA124_1==FOR||LA124_1==FTCONTAINS||LA124_1==GE||(LA124_1>=GT && LA124_1<=IDIV)||(LA124_1>=INSTANCE && LA124_1<=IS)||LA124_1==LE||(LA124_1>=LET && LA124_1<=LEVELS)||(LA124_1>=LT && LA124_1<=MOD)||LA124_1==NE||(LA124_1>=OR && LA124_1<=ORDER)||LA124_1==PARAGRAPHS||LA124_1==RETURN||LA124_1==SATISFIES||LA124_1==SENTENCES||LA124_1==STABLE||(LA124_1>=TIMES && LA124_1<=TREAT)||LA124_1==UNION||LA124_1==WHERE||LA124_1==WITHOUT||LA124_1==WORDS||LA124_1==SEMICOLONSi||(LA124_1>=EQSi && LA124_1<=COMMASi)||LA124_1==RPARSi||LA124_1==RBRACSi||(LA124_1>=STARSi && LA124_1<=NODEAFTERSi)||(LA124_1>=DBLSLASHSi && LA124_1<=SLASHSi)||(LA124_1>=LBRACKSi && LA124_1<=RBRACKSi)) ) {
                    alt124=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("681:8: wildcard : ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi );", 124, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA124_0==NCName) ) {
                alt124=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("681:8: wildcard : ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi );", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // etc/XQFT.g:681:41: ( STARSi COLONSi NCName )=> STARSi COLONSi NCName
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STARSi550=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard8872); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi550_tree = (CommonTree)adaptor.create(STARSi550);
                    adaptor.addChild(root_0, STARSi550_tree);
                    }
                    COLONSi551=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard8874); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLONSi551_tree = (CommonTree)adaptor.create(COLONSi551);
                    adaptor.addChild(root_0, COLONSi551_tree);
                    }
                    NCName552=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_wildcard8876); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName552_tree = (CommonTree)adaptor.create(NCName552);
                    adaptor.addChild(root_0, NCName552_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:682:20: STARSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STARSi553=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard8901); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi553_tree = (CommonTree)adaptor.create(STARSi553);
                    adaptor.addChild(root_0, STARSi553_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:683:44: NCName COLONSi STARSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NCName554=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_wildcard8946); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName554_tree = (CommonTree)adaptor.create(NCName554);
                    adaptor.addChild(root_0, NCName554_tree);
                    }
                    COLONSi555=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard8948); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLONSi555_tree = (CommonTree)adaptor.create(COLONSi555);
                    adaptor.addChild(root_0, COLONSi555_tree);
                    }
                    STARSi556=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard8950); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi556_tree = (CommonTree)adaptor.create(STARSi556);
                    adaptor.addChild(root_0, STARSi556_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end wildcard

    public static class abbrevReverseStep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start abbrevReverseStep
    // etc/XQFT.g:684:21: abbrevReverseStep : DOTDOTSi ;
    public final abbrevReverseStep_return abbrevReverseStep() throws RecognitionException {
        abbrevReverseStep_return retval = new abbrevReverseStep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOTDOTSi557=null;

        CommonTree DOTDOTSi557_tree=null;

        try {
            // etc/XQFT.g:684:52: ( DOTDOTSi )
            // etc/XQFT.g:684:54: DOTDOTSi
            {
            root_0 = (CommonTree)adaptor.nil();

            DOTDOTSi557=(Token)input.LT(1);
            match(input,DOTDOTSi,FOLLOW_DOTDOTSi_in_abbrevReverseStep8991); if (failed) return retval;
            if ( backtracking==0 ) {
            DOTDOTSi557_tree = (CommonTree)adaptor.create(DOTDOTSi557);
            adaptor.addChild(root_0, DOTDOTSi557_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end abbrevReverseStep

    public static class forwardStep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forwardStep
    // etc/XQFT.g:686:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );
    public final forwardStep_return forwardStep() throws RecognitionException {
        forwardStep_return retval = new forwardStep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        forwardAxis_return forwardAxis558 = null;

        nodeTest_return nodeTest559 = null;

        abbrevForwardStep_return abbrevForwardStep560 = null;



        try {
            // etc/XQFT.g:686:48: ( forwardAxis nodeTest | abbrevForwardStep )
            int alt125=2;
            switch ( input.LA(1) ) {
            case ATTRIBUTE:
                {
                int LA125_1 = input.LA(2);

                if ( (LA125_1==LPARSi) ) {
                    alt125=2;
                }
                else if ( (LA125_1==DBLCOLONSi) ) {
                    alt125=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("686:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 1, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case NODE:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case TEXT:
            case NCName:
            case STARSi:
            case ATSi:
                {
                alt125=2;
                }
                break;
            case CHILD:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case SELF:
                {
                alt125=1;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("686:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // etc/XQFT.g:686:50: forwardAxis nodeTest
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_forwardAxis_in_forwardStep9054);
                    forwardAxis558=forwardAxis();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, forwardAxis558.getTree());
                    pushFollow(FOLLOW_nodeTest_in_forwardStep9056);
                    nodeTest559=nodeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest559.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:686:73: abbrevForwardStep
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_abbrevForwardStep_in_forwardStep9060);
                    abbrevForwardStep560=abbrevForwardStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, abbrevForwardStep560.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forwardStep

    public static class forwardAxis_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forwardAxis
    // etc/XQFT.g:687:18: forwardAxis : ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi ;
    public final forwardAxis_return forwardAxis() throws RecognitionException {
        forwardAxis_return retval = new forwardAxis_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set561=null;
        Token DBLCOLONSi562=null;

        CommonTree set561_tree=null;
        CommonTree DBLCOLONSi562_tree=null;

        try {
            // etc/XQFT.g:687:49: ( ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi )
            // etc/XQFT.g:687:51: ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi
            {
            root_0 = (CommonTree)adaptor.nil();

            set561=(Token)input.LT(1);
            if ( input.LA(1)==ATTRIBUTE||input.LA(1)==CHILD||(input.LA(1)>=DESCENDANT && input.LA(1)<=DESCENDANT_OR_SELF)||(input.LA(1)>=FOLLOWING && input.LA(1)<=FOLLOWING_SIBLING)||input.LA(1)==SELF ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set561));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_forwardAxis9107);    throw mse;
            }

            DBLCOLONSi562=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_forwardAxis9163); if (failed) return retval;
            if ( backtracking==0 ) {
            DBLCOLONSi562_tree = (CommonTree)adaptor.create(DBLCOLONSi562);
            adaptor.addChild(root_0, DBLCOLONSi562_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forwardAxis

    public static class abbrevForwardStep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start abbrevForwardStep
    // etc/XQFT.g:695:6: abbrevForwardStep : ( ATSi )? nodeTest ;
    public final abbrevForwardStep_return abbrevForwardStep() throws RecognitionException {
        abbrevForwardStep_return retval = new abbrevForwardStep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ATSi563=null;
        nodeTest_return nodeTest564 = null;


        CommonTree ATSi563_tree=null;

        try {
            // etc/XQFT.g:695:37: ( ( ATSi )? nodeTest )
            // etc/XQFT.g:695:39: ( ATSi )? nodeTest
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:695:39: ( ATSi )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ATSi) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // etc/XQFT.g:695:39: ATSi
                    {
                    ATSi563=(Token)input.LT(1);
                    match(input,ATSi,FOLLOW_ATSi_in_abbrevForwardStep9194); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ATSi563_tree = (CommonTree)adaptor.create(ATSi563);
                    adaptor.addChild(root_0, ATSi563_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_nodeTest_in_abbrevForwardStep9197);
            nodeTest564=nodeTest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest564.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end abbrevForwardStep

    public static class predicateList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start predicateList
    // etc/XQFT.g:697:17: predicateList : ( predicate )* ;
    public final predicateList_return predicateList() throws RecognitionException {
        predicateList_return retval = new predicateList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        predicate_return predicate565 = null;



        try {
            // etc/XQFT.g:697:48: ( ( predicate )* )
            // etc/XQFT.g:697:50: ( predicate )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:697:50: ( predicate )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==LBRACKSi) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // etc/XQFT.g:697:50: predicate
            	    {
            	    pushFollow(FOLLOW_predicate_in_predicateList9271);
            	    predicate565=predicate();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, predicate565.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end predicateList

    public static class predicate_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start predicate
    // etc/XQFT.g:698:18: predicate : LBRACKSi expr RBRACKSi ;
    public final predicate_return predicate() throws RecognitionException {
        predicate_return retval = new predicate_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACKSi566=null;
        Token RBRACKSi568=null;
        expr_return expr567 = null;


        CommonTree LBRACKSi566_tree=null;
        CommonTree RBRACKSi568_tree=null;

        try {
            // etc/XQFT.g:698:49: ( LBRACKSi expr RBRACKSi )
            // etc/XQFT.g:698:51: LBRACKSi expr RBRACKSi
            {
            root_0 = (CommonTree)adaptor.nil();

            LBRACKSi566=(Token)input.LT(1);
            match(input,LBRACKSi,FOLLOW_LBRACKSi_in_predicate9331); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACKSi566_tree = (CommonTree)adaptor.create(LBRACKSi566);
            adaptor.addChild(root_0, LBRACKSi566_tree);
            }
            pushFollow(FOLLOW_expr_in_predicate9333);
            expr567=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr567.getTree());
            RBRACKSi568=(Token)input.LT(1);
            match(input,RBRACKSi,FOLLOW_RBRACKSi_in_predicate9335); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACKSi568_tree = (CommonTree)adaptor.create(RBRACKSi568);
            adaptor.addChild(root_0, RBRACKSi568_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end predicate

    public static class extensionExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start extensionExpr
    // etc/XQFT.g:703:5: extensionExpr : ( pragma )+ LBRACESi ( expr )? RBRACSi ;
    public final extensionExpr_return extensionExpr() throws RecognitionException {
        extensionExpr_return retval = new extensionExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACESi570=null;
        Token RBRACSi572=null;
        pragma_return pragma569 = null;

        expr_return expr571 = null;


        CommonTree LBRACESi570_tree=null;
        CommonTree RBRACSi572_tree=null;

        try {
            // etc/XQFT.g:703:36: ( ( pragma )+ LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:703:38: ( pragma )+ LBRACESi ( expr )? RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:703:38: ( pragma )+
            int cnt128=0;
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==LPRAGSi) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // etc/XQFT.g:703:38: pragma
            	    {
            	    pushFollow(FOLLOW_pragma_in_extensionExpr9375);
            	    pragma569=pragma();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, pragma569.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);

            LBRACESi570=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_extensionExpr9378); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi570_tree = (CommonTree)adaptor.create(LBRACESi570);
            adaptor.addChild(root_0, LBRACESi570_tree);
            }
            // etc/XQFT.g:703:55: ( expr )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=ANCESTOR && LA129_0<=ANCESTOR_OR_SELF)||LA129_0==ATTRIBUTE||LA129_0==CHILD||LA129_0==COMMENT||(LA129_0>=DESCENDANT && LA129_0<=DESCENDANT_OR_SELF)||(LA129_0>=DOCUMENT && LA129_0<=ELEMENT)||LA129_0==EVERY||(LA129_0>=FOLLOWING && LA129_0<=FOR)||LA129_0==IF||LA129_0==LET||LA129_0==NODE||LA129_0==ORDERED||LA129_0==PARENT||(LA129_0>=PRECEDING && LA129_0<=PRECEDING_SIBLING)||LA129_0==PROCESSING_INSTRUCTION||(LA129_0>=SCHEMAATTRIBUTE && LA129_0<=SCHEMAELEMENT)||LA129_0==SELF||LA129_0==SOME||LA129_0==TEXT||LA129_0==TYPESWITCH||LA129_0==UNORDERED||LA129_0==VALIDATE||LA129_0==StringLiteral||LA129_0==NCName||LA129_0==DOLLARSi||LA129_0==LPARSi||(LA129_0>=STARSi && LA129_0<=MINUSSi)||LA129_0==LTSi||(LA129_0>=IntegerLiteral && LA129_0<=LPRAGSi)||(LA129_0>=DBLSLASHSi && LA129_0<=SLASHSi)||(LA129_0>=DOTDOTSi && LA129_0<=ATSi)||LA129_0==DOTSi||LA129_0==LCOMMENTSi||LA129_0==LPISi) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // etc/XQFT.g:703:55: expr
                    {
                    pushFollow(FOLLOW_expr_in_extensionExpr9380);
                    expr571=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr571.getTree());

                    }
                    break;

            }

            RBRACSi572=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_extensionExpr9383); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi572_tree = (CommonTree)adaptor.create(RBRACSi572);
            adaptor.addChild(root_0, RBRACSi572_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end extensionExpr

    public static class filterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start filterExpr
    // etc/XQFT.g:711:1: filterExpr : primaryExpr predicateList ;
    public final filterExpr_return filterExpr() throws RecognitionException {
        filterExpr_return retval = new filterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        primaryExpr_return primaryExpr573 = null;

        predicateList_return predicateList574 = null;



        try {
            // etc/XQFT.g:711:32: ( primaryExpr predicateList )
            // etc/XQFT.g:711:34: primaryExpr predicateList
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_primaryExpr_in_filterExpr9418);
            primaryExpr573=primaryExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, primaryExpr573.getTree());
            pushFollow(FOLLOW_predicateList_in_filterExpr9420);
            predicateList574=predicateList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, predicateList574.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end filterExpr

    public static class primaryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primaryExpr
    // etc/XQFT.g:714:2: primaryExpr : ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor );
    public final primaryExpr_return primaryExpr() throws RecognitionException {
        primaryExpr_return retval = new primaryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        literal_return literal575 = null;

        varRef_return varRef576 = null;

        parenthesizedExpr_return parenthesizedExpr577 = null;

        contextItemExpr_return contextItemExpr578 = null;

        functionCall_return functionCall579 = null;

        orderedExpr_return orderedExpr580 = null;

        unorderedExpr_return unorderedExpr581 = null;

        constructor_return constructor582 = null;



        try {
            // etc/XQFT.g:714:33: ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor )
            int alt130=8;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
                {
                alt130=1;
                }
                break;
            case DOLLARSi:
                {
                alt130=2;
                }
                break;
            case LPARSi:
                {
                alt130=3;
                }
                break;
            case DOTSi:
                {
                alt130=4;
                }
                break;
            case NCName:
                {
                alt130=5;
                }
                break;
            case ORDERED:
                {
                alt130=6;
                }
                break;
            case UNORDERED:
                {
                alt130=7;
                }
                break;
            case ATTRIBUTE:
            case COMMENT:
            case DOCUMENT:
            case ELEMENT:
            case PROCESSING_INSTRUCTION:
            case TEXT:
            case LTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt130=8;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("714:2: primaryExpr : ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // etc/XQFT.g:714:35: literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpr9449);
                    literal575=literal();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal575.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:715:14: varRef
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_varRef_in_primaryExpr9465);
                    varRef576=varRef();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, varRef576.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:716:14: parenthesizedExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpr_in_primaryExpr9481);
                    parenthesizedExpr577=parenthesizedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpr577.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:717:14: contextItemExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_contextItemExpr_in_primaryExpr9497);
                    contextItemExpr578=contextItemExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, contextItemExpr578.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:718:14: functionCall
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_functionCall_in_primaryExpr9513);
                    functionCall579=functionCall();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, functionCall579.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:719:14: orderedExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_orderedExpr_in_primaryExpr9529);
                    orderedExpr580=orderedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orderedExpr580.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:720:14: unorderedExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unorderedExpr_in_primaryExpr9545);
                    unorderedExpr581=unorderedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, unorderedExpr581.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:721:14: constructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constructor_in_primaryExpr9561);
                    constructor582=constructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, constructor582.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end primaryExpr

    public static class varRef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varRef
    // etc/XQFT.g:725:3: varRef : DOLLARSi varName ;
    public final varRef_return varRef() throws RecognitionException {
        varRef_return retval = new varRef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOLLARSi583=null;
        varName_return varName584 = null;


        CommonTree DOLLARSi583_tree=null;

        try {
            // etc/XQFT.g:725:34: ( DOLLARSi varName )
            // etc/XQFT.g:725:36: DOLLARSi varName
            {
            root_0 = (CommonTree)adaptor.nil();

            DOLLARSi583=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varRef9599); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi583_tree = (CommonTree)adaptor.create(DOLLARSi583);
            adaptor.addChild(root_0, DOLLARSi583_tree);
            }
            pushFollow(FOLLOW_varName_in_varRef9601);
            varName584=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName584.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varRef

    public static class parenthesizedExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start parenthesizedExpr
    // etc/XQFT.g:727:3: parenthesizedExpr : LPARSi ( expr )? RPARSi ;
    public final parenthesizedExpr_return parenthesizedExpr() throws RecognitionException {
        parenthesizedExpr_return retval = new parenthesizedExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPARSi585=null;
        Token RPARSi587=null;
        expr_return expr586 = null;


        CommonTree LPARSi585_tree=null;
        CommonTree RPARSi587_tree=null;

        try {
            // etc/XQFT.g:727:34: ( LPARSi ( expr )? RPARSi )
            // etc/XQFT.g:727:36: LPARSi ( expr )? RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            LPARSi585=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_parenthesizedExpr9624); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi585_tree = (CommonTree)adaptor.create(LPARSi585);
            adaptor.addChild(root_0, LPARSi585_tree);
            }
            // etc/XQFT.g:727:43: ( expr )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=ANCESTOR && LA131_0<=ANCESTOR_OR_SELF)||LA131_0==ATTRIBUTE||LA131_0==CHILD||LA131_0==COMMENT||(LA131_0>=DESCENDANT && LA131_0<=DESCENDANT_OR_SELF)||(LA131_0>=DOCUMENT && LA131_0<=ELEMENT)||LA131_0==EVERY||(LA131_0>=FOLLOWING && LA131_0<=FOR)||LA131_0==IF||LA131_0==LET||LA131_0==NODE||LA131_0==ORDERED||LA131_0==PARENT||(LA131_0>=PRECEDING && LA131_0<=PRECEDING_SIBLING)||LA131_0==PROCESSING_INSTRUCTION||(LA131_0>=SCHEMAATTRIBUTE && LA131_0<=SCHEMAELEMENT)||LA131_0==SELF||LA131_0==SOME||LA131_0==TEXT||LA131_0==TYPESWITCH||LA131_0==UNORDERED||LA131_0==VALIDATE||LA131_0==StringLiteral||LA131_0==NCName||LA131_0==DOLLARSi||LA131_0==LPARSi||(LA131_0>=STARSi && LA131_0<=MINUSSi)||LA131_0==LTSi||(LA131_0>=IntegerLiteral && LA131_0<=LPRAGSi)||(LA131_0>=DBLSLASHSi && LA131_0<=SLASHSi)||(LA131_0>=DOTDOTSi && LA131_0<=ATSi)||LA131_0==DOTSi||LA131_0==LCOMMENTSi||LA131_0==LPISi) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // etc/XQFT.g:727:43: expr
                    {
                    pushFollow(FOLLOW_expr_in_parenthesizedExpr9626);
                    expr586=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr586.getTree());

                    }
                    break;

            }

            RPARSi587=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_parenthesizedExpr9629); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi587_tree = (CommonTree)adaptor.create(RPARSi587);
            adaptor.addChild(root_0, RPARSi587_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end parenthesizedExpr

    public static class contextItemExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start contextItemExpr
    // etc/XQFT.g:730:3: contextItemExpr : DOTSi ;
    public final contextItemExpr_return contextItemExpr() throws RecognitionException {
        contextItemExpr_return retval = new contextItemExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOTSi588=null;

        CommonTree DOTSi588_tree=null;

        try {
            // etc/XQFT.g:730:34: ( DOTSi )
            // etc/XQFT.g:730:36: DOTSi
            {
            root_0 = (CommonTree)adaptor.nil();

            DOTSi588=(Token)input.LT(1);
            match(input,DOTSi,FOLLOW_DOTSi_in_contextItemExpr9655); if (failed) return retval;
            if ( backtracking==0 ) {
            DOTSi588_tree = (CommonTree)adaptor.create(DOTSi588);
            adaptor.addChild(root_0, DOTSi588_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end contextItemExpr

    public static class functionCall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionCall
    // etc/XQFT.g:731:3: functionCall : qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi ;
    public final functionCall_return functionCall() throws RecognitionException {
        functionCall_return retval = new functionCall_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPARSi590=null;
        Token COMMASi592=null;
        Token RPARSi594=null;
        qName_return qName589 = null;

        exprSingle_return exprSingle591 = null;

        exprSingle_return exprSingle593 = null;


        CommonTree LPARSi590_tree=null;
        CommonTree COMMASi592_tree=null;
        CommonTree RPARSi594_tree=null;

        try {
            // etc/XQFT.g:731:34: ( qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi )
            // etc/XQFT.g:731:36: qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_functionCall9682);
            qName589=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName589.getTree());
            LPARSi590=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_functionCall9684); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi590_tree = (CommonTree)adaptor.create(LPARSi590);
            adaptor.addChild(root_0, LPARSi590_tree);
            }
            // etc/XQFT.g:732:14: ( exprSingle ( COMMASi exprSingle )* )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( ((LA133_0>=ANCESTOR && LA133_0<=ANCESTOR_OR_SELF)||LA133_0==ATTRIBUTE||LA133_0==CHILD||LA133_0==COMMENT||(LA133_0>=DESCENDANT && LA133_0<=DESCENDANT_OR_SELF)||(LA133_0>=DOCUMENT && LA133_0<=ELEMENT)||LA133_0==EVERY||(LA133_0>=FOLLOWING && LA133_0<=FOR)||LA133_0==IF||LA133_0==LET||LA133_0==NODE||LA133_0==ORDERED||LA133_0==PARENT||(LA133_0>=PRECEDING && LA133_0<=PRECEDING_SIBLING)||LA133_0==PROCESSING_INSTRUCTION||(LA133_0>=SCHEMAATTRIBUTE && LA133_0<=SCHEMAELEMENT)||LA133_0==SELF||LA133_0==SOME||LA133_0==TEXT||LA133_0==TYPESWITCH||LA133_0==UNORDERED||LA133_0==VALIDATE||LA133_0==StringLiteral||LA133_0==NCName||LA133_0==DOLLARSi||LA133_0==LPARSi||(LA133_0>=STARSi && LA133_0<=MINUSSi)||LA133_0==LTSi||(LA133_0>=IntegerLiteral && LA133_0<=LPRAGSi)||(LA133_0>=DBLSLASHSi && LA133_0<=SLASHSi)||(LA133_0>=DOTDOTSi && LA133_0<=ATSi)||LA133_0==DOTSi||LA133_0==LCOMMENTSi||LA133_0==LPISi) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // etc/XQFT.g:732:15: exprSingle ( COMMASi exprSingle )*
                    {
                    pushFollow(FOLLOW_exprSingle_in_functionCall9702);
                    exprSingle591=exprSingle();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle591.getTree());
                    // etc/XQFT.g:732:26: ( COMMASi exprSingle )*
                    loop132:
                    do {
                        int alt132=2;
                        int LA132_0 = input.LA(1);

                        if ( (LA132_0==COMMASi) ) {
                            alt132=1;
                        }


                        switch (alt132) {
                    	case 1 :
                    	    // etc/XQFT.g:732:27: COMMASi exprSingle
                    	    {
                    	    COMMASi592=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_functionCall9705); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi592_tree = (CommonTree)adaptor.create(COMMASi592);
                    	    adaptor.addChild(root_0, COMMASi592_tree);
                    	    }
                    	    pushFollow(FOLLOW_exprSingle_in_functionCall9707);
                    	    exprSingle593=exprSingle();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle593.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);


                    }
                    break;

            }

            RPARSi594=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_functionCall9727); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi594_tree = (CommonTree)adaptor.create(RPARSi594);
            adaptor.addChild(root_0, RPARSi594_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionCall

    public static class orderedExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderedExpr
    // etc/XQFT.g:735:3: orderedExpr : ORDERED LBRACESi expr RBRACSi ;
    public final orderedExpr_return orderedExpr() throws RecognitionException {
        orderedExpr_return retval = new orderedExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ORDERED595=null;
        Token LBRACESi596=null;
        Token RBRACSi598=null;
        expr_return expr597 = null;


        CommonTree ORDERED595_tree=null;
        CommonTree LBRACESi596_tree=null;
        CommonTree RBRACSi598_tree=null;

        try {
            // etc/XQFT.g:735:34: ( ORDERED LBRACESi expr RBRACSi )
            // etc/XQFT.g:735:36: ORDERED LBRACESi expr RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            ORDERED595=(Token)input.LT(1);
            match(input,ORDERED,FOLLOW_ORDERED_in_orderedExpr9757); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERED595_tree = (CommonTree)adaptor.create(ORDERED595);
            adaptor.addChild(root_0, ORDERED595_tree);
            }
            LBRACESi596=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_orderedExpr9759); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi596_tree = (CommonTree)adaptor.create(LBRACESi596);
            adaptor.addChild(root_0, LBRACESi596_tree);
            }
            pushFollow(FOLLOW_expr_in_orderedExpr9761);
            expr597=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr597.getTree());
            RBRACSi598=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_orderedExpr9763); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi598_tree = (CommonTree)adaptor.create(RBRACSi598);
            adaptor.addChild(root_0, RBRACSi598_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderedExpr

    public static class unorderedExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unorderedExpr
    // etc/XQFT.g:738:3: unorderedExpr : UNORDERED LBRACESi expr RBRACSi ;
    public final unorderedExpr_return unorderedExpr() throws RecognitionException {
        unorderedExpr_return retval = new unorderedExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNORDERED599=null;
        Token LBRACESi600=null;
        Token RBRACSi602=null;
        expr_return expr601 = null;


        CommonTree UNORDERED599_tree=null;
        CommonTree LBRACESi600_tree=null;
        CommonTree RBRACSi602_tree=null;

        try {
            // etc/XQFT.g:738:34: ( UNORDERED LBRACESi expr RBRACSi )
            // etc/XQFT.g:738:36: UNORDERED LBRACESi expr RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            UNORDERED599=(Token)input.LT(1);
            match(input,UNORDERED,FOLLOW_UNORDERED_in_unorderedExpr9791); if (failed) return retval;
            if ( backtracking==0 ) {
            UNORDERED599_tree = (CommonTree)adaptor.create(UNORDERED599);
            adaptor.addChild(root_0, UNORDERED599_tree);
            }
            LBRACESi600=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_unorderedExpr9793); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi600_tree = (CommonTree)adaptor.create(LBRACESi600);
            adaptor.addChild(root_0, LBRACESi600_tree);
            }
            pushFollow(FOLLOW_expr_in_unorderedExpr9795);
            expr601=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr601.getTree());
            RBRACSi602=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_unorderedExpr9797); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi602_tree = (CommonTree)adaptor.create(RBRACSi602);
            adaptor.addChild(root_0, RBRACSi602_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unorderedExpr

    public static class constructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constructor
    // etc/XQFT.g:741:3: constructor : ( directConstructor | computedConstructor );
    public final constructor_return constructor() throws RecognitionException {
        constructor_return retval = new constructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        directConstructor_return directConstructor603 = null;

        computedConstructor_return computedConstructor604 = null;



        try {
            // etc/XQFT.g:741:34: ( directConstructor | computedConstructor )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==LTSi||LA134_0==LCOMMENTSi||LA134_0==LPISi) ) {
                alt134=1;
            }
            else if ( (LA134_0==ATTRIBUTE||LA134_0==COMMENT||LA134_0==DOCUMENT||LA134_0==ELEMENT||LA134_0==PROCESSING_INSTRUCTION||LA134_0==TEXT) ) {
                alt134=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("741:3: constructor : ( directConstructor | computedConstructor );", 134, 0, input);

                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    // etc/XQFT.g:741:36: directConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_directConstructor_in_constructor9828);
                    directConstructor603=directConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, directConstructor603.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:741:56: computedConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_computedConstructor_in_constructor9832);
                    computedConstructor604=computedConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, computedConstructor604.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end constructor

    public static class directConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start directConstructor
    // etc/XQFT.g:744:4: directConstructor : ( dirElemConstructor | dirCommentConstructor | dirPIConstructor );
    public final directConstructor_return directConstructor() throws RecognitionException {
        directConstructor_return retval = new directConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        dirElemConstructor_return dirElemConstructor605 = null;

        dirCommentConstructor_return dirCommentConstructor606 = null;

        dirPIConstructor_return dirPIConstructor607 = null;



        try {
            // etc/XQFT.g:744:35: ( dirElemConstructor | dirCommentConstructor | dirPIConstructor )
            int alt135=3;
            switch ( input.LA(1) ) {
            case LTSi:
                {
                alt135=1;
                }
                break;
            case LCOMMENTSi:
                {
                alt135=2;
                }
                break;
            case LPISi:
                {
                alt135=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("744:4: directConstructor : ( dirElemConstructor | dirCommentConstructor | dirPIConstructor );", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // etc/XQFT.g:744:37: dirElemConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dirElemConstructor_in_directConstructor9872);
                    dirElemConstructor605=dirElemConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirElemConstructor605.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:745:40: dirCommentConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dirCommentConstructor_in_directConstructor9913);
                    dirCommentConstructor606=dirCommentConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirCommentConstructor606.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:746:28: dirPIConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dirPIConstructor_in_directConstructor9942);
                    dirPIConstructor607=dirPIConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirPIConstructor607.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end directConstructor

    public static class dirElemConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirElemConstructor
    // etc/XQFT.g:748:14: dirElemConstructor : LTSi qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi ) ;
    public final dirElemConstructor_return dirElemConstructor() throws RecognitionException {
        dirElemConstructor_return retval = new dirElemConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LTSi608=null;
        Token RSELFTERMSi611=null;
        Token GTSi612=null;
        Token LENDTAGSi614=null;
        Token GTSi616=null;
        qName_return qName609 = null;

        dirAttributeList_return dirAttributeList610 = null;

        dirElemContent_return dirElemContent613 = null;

        qName_return qName615 = null;


        CommonTree LTSi608_tree=null;
        CommonTree RSELFTERMSi611_tree=null;
        CommonTree GTSi612_tree=null;
        CommonTree LENDTAGSi614_tree=null;
        CommonTree GTSi616_tree=null;

        try {
            // etc/XQFT.g:748:45: ( LTSi qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi ) )
            // etc/XQFT.g:748:47: LTSi qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )
            {
            root_0 = (CommonTree)adaptor.nil();

            LTSi608=(Token)input.LT(1);
            match(input,LTSi,FOLLOW_LTSi_in_dirElemConstructor10000); if (failed) return retval;
            if ( backtracking==0 ) {
            LTSi608_tree = (CommonTree)adaptor.create(LTSi608);
            adaptor.addChild(root_0, LTSi608_tree);
            }
            if ( backtracking==0 ) {
              lexer.stack.pushState(lexer.state); lexer.state=State.IN_TAG;
            }
            pushFollow(FOLLOW_qName_in_dirElemConstructor10029);
            qName609=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName609.getTree());
            pushFollow(FOLLOW_dirAttributeList_in_dirElemConstructor10031);
            dirAttributeList610=dirAttributeList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, dirAttributeList610.getTree());
            // etc/XQFT.g:750:24: ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==RSELFTERMSi) ) {
                alt137=1;
            }
            else if ( (LA137_0==GTSi) ) {
                alt137=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("750:24: ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // etc/XQFT.g:750:25: RSELFTERMSi
                    {
                    RSELFTERMSi611=(Token)input.LT(1);
                    match(input,RSELFTERMSi,FOLLOW_RSELFTERMSi_in_dirElemConstructor10061); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RSELFTERMSi611_tree = (CommonTree)adaptor.create(RSELFTERMSi611);
                    adaptor.addChild(root_0, RSELFTERMSi611_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=lexer.stack.pop();
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:751:26: GTSi ( dirElemContent )* LENDTAGSi qName GTSi
                    {
                    GTSi612=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor10090); if (failed) return retval;
                    if ( backtracking==0 ) {
                    GTSi612_tree = (CommonTree)adaptor.create(GTSi612);
                    adaptor.addChild(root_0, GTSi612_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_ELEMENT;
                    }
                    // etc/XQFT.g:752:26: ( dirElemContent )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==LBRACESi||LA136_0==LTSi||(LA136_0>=ElementContent && LA136_0<=LCDATASi)||LA136_0==LCOMMENTSi||LA136_0==LPISi) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // etc/XQFT.g:752:26: dirElemContent
                    	    {
                    	    pushFollow(FOLLOW_dirElemContent_in_dirElemConstructor10119);
                    	    dirElemContent613=dirElemContent();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, dirElemContent613.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);

                    LENDTAGSi614=(Token)input.LT(1);
                    match(input,LENDTAGSi,FOLLOW_LENDTAGSi_in_dirElemConstructor10148); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LENDTAGSi614_tree = (CommonTree)adaptor.create(LENDTAGSi614);
                    adaptor.addChild(root_0, LENDTAGSi614_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }
                    pushFollow(FOLLOW_qName_in_dirElemConstructor10178);
                    qName615=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName615.getTree());
                    GTSi616=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor10207); if (failed) return retval;
                    if ( backtracking==0 ) {
                    GTSi616_tree = (CommonTree)adaptor.create(GTSi616);
                    adaptor.addChild(root_0, GTSi616_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=lexer.stack.pop();
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirElemConstructor

    public static class dirAttributeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirAttributeList
    // etc/XQFT.g:757:15: dirAttributeList : ( qName EQSi dirAttributeValue )* ;
    public final dirAttributeList_return dirAttributeList() throws RecognitionException {
        dirAttributeList_return retval = new dirAttributeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQSi618=null;
        qName_return qName617 = null;

        dirAttributeValue_return dirAttributeValue619 = null;


        CommonTree EQSi618_tree=null;

        try {
            // etc/XQFT.g:757:46: ( ( qName EQSi dirAttributeValue )* )
            // etc/XQFT.g:757:48: ( qName EQSi dirAttributeValue )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // etc/XQFT.g:757:48: ( qName EQSi dirAttributeValue )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==NCName) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // etc/XQFT.g:757:49: qName EQSi dirAttributeValue
            	    {
            	    pushFollow(FOLLOW_qName_in_dirAttributeList10274);
            	    qName617=qName();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, qName617.getTree());
            	    EQSi618=(Token)input.LT(1);
            	    match(input,EQSi,FOLLOW_EQSi_in_dirAttributeList10276); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    EQSi618_tree = (CommonTree)adaptor.create(EQSi618);
            	    adaptor.addChild(root_0, EQSi618_tree);
            	    }
            	    pushFollow(FOLLOW_dirAttributeValue_in_dirAttributeList10278);
            	    dirAttributeValue619=dirAttributeValue();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, dirAttributeValue619.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirAttributeList

    public static class dirAttributeValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirAttributeValue
    // etc/XQFT.g:758:16: dirAttributeValue : ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi );
    public final dirAttributeValue_return dirAttributeValue() throws RecognitionException {
        dirAttributeValue_return retval = new dirAttributeValue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token QUOTSi620=null;
        Token QuotAttributeContent621=null;
        Token QUOTSi623=null;
        Token APOSSi624=null;
        Token AposAttributeContent625=null;
        Token APOSSi627=null;
        xmlEnclosedExpr_return xmlEnclosedExpr622 = null;

        xmlEnclosedExpr_return xmlEnclosedExpr626 = null;


        CommonTree QUOTSi620_tree=null;
        CommonTree QuotAttributeContent621_tree=null;
        CommonTree QUOTSi623_tree=null;
        CommonTree APOSSi624_tree=null;
        CommonTree AposAttributeContent625_tree=null;
        CommonTree APOSSi627_tree=null;

        try {
            // etc/XQFT.g:758:47: ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==QUOTSi) ) {
                alt141=1;
            }
            else if ( (LA141_0==APOSSi) ) {
                alt141=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("758:16: dirAttributeValue : ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi );", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // etc/XQFT.g:758:49: QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    QUOTSi620=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue10316); if (failed) return retval;
                    if ( backtracking==0 ) {
                    QUOTSi620_tree = (CommonTree)adaptor.create(QUOTSi620);
                    adaptor.addChild(root_0, QUOTSi620_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_QUOT_ATTRIBUTE;
                    }
                    // etc/XQFT.g:759:27: ( QuotAttributeContent | xmlEnclosedExpr )*
                    loop139:
                    do {
                        int alt139=3;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==QuotAttributeContent) ) {
                            alt139=1;
                        }
                        else if ( (LA139_0==LBRACESi) ) {
                            alt139=2;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // etc/XQFT.g:759:28: QuotAttributeContent
                    	    {
                    	    QuotAttributeContent621=(Token)input.LT(1);
                    	    match(input,QuotAttributeContent,FOLLOW_QuotAttributeContent_in_dirAttributeValue10347); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    QuotAttributeContent621_tree = (CommonTree)adaptor.create(QuotAttributeContent621);
                    	    adaptor.addChild(root_0, QuotAttributeContent621_tree);
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // etc/XQFT.g:759:51: xmlEnclosedExpr
                    	    {
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10351);
                    	    xmlEnclosedExpr622=xmlEnclosedExpr();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, xmlEnclosedExpr622.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    QUOTSi623=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue10383); if (failed) return retval;
                    if ( backtracking==0 ) {
                    QUOTSi623_tree = (CommonTree)adaptor.create(QUOTSi623);
                    adaptor.addChild(root_0, QUOTSi623_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:761:31: APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    APOSSi624=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue10417); if (failed) return retval;
                    if ( backtracking==0 ) {
                    APOSSi624_tree = (CommonTree)adaptor.create(APOSSi624);
                    adaptor.addChild(root_0, APOSSi624_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_APOS_ATTRIBUTE;
                    }
                    // etc/XQFT.g:762:30: ( AposAttributeContent | xmlEnclosedExpr )*
                    loop140:
                    do {
                        int alt140=3;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==AposAttributeContent) ) {
                            alt140=1;
                        }
                        else if ( (LA140_0==LBRACESi) ) {
                            alt140=2;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // etc/XQFT.g:762:31: AposAttributeContent
                    	    {
                    	    AposAttributeContent625=(Token)input.LT(1);
                    	    match(input,AposAttributeContent,FOLLOW_AposAttributeContent_in_dirAttributeValue10451); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    AposAttributeContent625_tree = (CommonTree)adaptor.create(AposAttributeContent625);
                    	    adaptor.addChild(root_0, AposAttributeContent625_tree);
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // etc/XQFT.g:762:54: xmlEnclosedExpr
                    	    {
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10455);
                    	    xmlEnclosedExpr626=xmlEnclosedExpr();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, xmlEnclosedExpr626.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);

                    APOSSi627=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue10490); if (failed) return retval;
                    if ( backtracking==0 ) {
                    APOSSi627_tree = (CommonTree)adaptor.create(APOSSi627);
                    adaptor.addChild(root_0, APOSSi627_tree);
                    }
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirAttributeValue

    public static class xmlEnclosedExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start xmlEnclosedExpr
    // etc/XQFT.g:764:14: xmlEnclosedExpr : LBRACESi expr RBRACSi ;
    public final xmlEnclosedExpr_return xmlEnclosedExpr() throws RecognitionException {
        xmlEnclosedExpr_return retval = new xmlEnclosedExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACESi628=null;
        Token RBRACSi630=null;
        expr_return expr629 = null;


        CommonTree LBRACESi628_tree=null;
        CommonTree RBRACSi630_tree=null;

        try {
            // etc/XQFT.g:764:48: ( LBRACESi expr RBRACSi )
            // etc/XQFT.g:764:50: LBRACESi expr RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            LBRACESi628=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_xmlEnclosedExpr10531); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi628_tree = (CommonTree)adaptor.create(LBRACESi628);
            adaptor.addChild(root_0, LBRACESi628_tree);
            }
            if ( backtracking==0 ) {
              lexer.stack.pushState(lexer.state); lexer.state=State.DEFAULT;
            }
            pushFollow(FOLLOW_expr_in_xmlEnclosedExpr10559);
            expr629=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr629.getTree());
            RBRACSi630=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_xmlEnclosedExpr10587); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi630_tree = (CommonTree)adaptor.create(RBRACSi630);
            adaptor.addChild(root_0, RBRACSi630_tree);
            }
            if ( backtracking==0 ) {
              lexer.state = lexer.stack.pop();
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end xmlEnclosedExpr

    public static class dirElemContent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirElemContent
    // etc/XQFT.g:770:6: dirElemContent : ( directConstructor | cDataSection | ElementContent | xmlEnclosedExpr );
    public final dirElemContent_return dirElemContent() throws RecognitionException {
        dirElemContent_return retval = new dirElemContent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ElementContent633=null;
        directConstructor_return directConstructor631 = null;

        cDataSection_return cDataSection632 = null;

        xmlEnclosedExpr_return xmlEnclosedExpr634 = null;


        CommonTree ElementContent633_tree=null;

        try {
            // etc/XQFT.g:770:37: ( directConstructor | cDataSection | ElementContent | xmlEnclosedExpr )
            int alt142=4;
            switch ( input.LA(1) ) {
            case LTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt142=1;
                }
                break;
            case LCDATASi:
                {
                alt142=2;
                }
                break;
            case ElementContent:
                {
                alt142=3;
                }
                break;
            case LBRACESi:
                {
                alt142=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("770:6: dirElemContent : ( directConstructor | cDataSection | ElementContent | xmlEnclosedExpr );", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // etc/XQFT.g:770:39: directConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_directConstructor_in_dirElemContent10620);
                    directConstructor631=directConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, directConstructor631.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:770:59: cDataSection
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_cDataSection_in_dirElemContent10624);
                    cDataSection632=cDataSection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, cDataSection632.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:770:74: ElementContent
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ElementContent633=(Token)input.LT(1);
                    match(input,ElementContent,FOLLOW_ElementContent_in_dirElemContent10628); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ElementContent633_tree = (CommonTree)adaptor.create(ElementContent633);
                    adaptor.addChild(root_0, ElementContent633_tree);
                    }

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:770:91: xmlEnclosedExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirElemContent10632);
                    xmlEnclosedExpr634=xmlEnclosedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, xmlEnclosedExpr634.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirElemContent

    public static class cDataSection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start cDataSection
    // etc/XQFT.g:772:7: cDataSection : LCDATASi CDataContents RCDATASi ;
    public final cDataSection_return cDataSection() throws RecognitionException {
        cDataSection_return retval = new cDataSection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCDATASi635=null;
        Token CDataContents636=null;
        Token RCDATASi637=null;

        CommonTree LCDATASi635_tree=null;
        CommonTree CDataContents636_tree=null;
        CommonTree RCDATASi637_tree=null;

        try {
            // etc/XQFT.g:772:26: ( LCDATASi CDataContents RCDATASi )
            // etc/XQFT.g:772:28: LCDATASi CDataContents RCDATASi
            {
            root_0 = (CommonTree)adaptor.nil();

            LCDATASi635=(Token)input.LT(1);
            match(input,LCDATASi,FOLLOW_LCDATASi_in_cDataSection10652); if (failed) return retval;
            if ( backtracking==0 ) {
            LCDATASi635_tree = (CommonTree)adaptor.create(LCDATASi635);
            adaptor.addChild(root_0, LCDATASi635_tree);
            }
            CDataContents636=(Token)input.LT(1);
            match(input,CDataContents,FOLLOW_CDataContents_in_cDataSection10654); if (failed) return retval;
            if ( backtracking==0 ) {
            CDataContents636_tree = (CommonTree)adaptor.create(CDataContents636);
            adaptor.addChild(root_0, CDataContents636_tree);
            }
            RCDATASi637=(Token)input.LT(1);
            match(input,RCDATASi,FOLLOW_RCDATASi_in_cDataSection10656); if (failed) return retval;
            if ( backtracking==0 ) {
            RCDATASi637_tree = (CommonTree)adaptor.create(RCDATASi637);
            adaptor.addChild(root_0, RCDATASi637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end cDataSection

    public static class dirCommentConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirCommentConstructor
    // etc/XQFT.g:777:5: dirCommentConstructor : LCOMMENTSi DirCommentContent RCOMMENTSi ;
    public final dirCommentConstructor_return dirCommentConstructor() throws RecognitionException {
        dirCommentConstructor_return retval = new dirCommentConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCOMMENTSi638=null;
        Token DirCommentContent639=null;
        Token RCOMMENTSi640=null;

        CommonTree LCOMMENTSi638_tree=null;
        CommonTree DirCommentContent639_tree=null;
        CommonTree RCOMMENTSi640_tree=null;

        try {
            // etc/XQFT.g:777:31: ( LCOMMENTSi DirCommentContent RCOMMENTSi )
            // etc/XQFT.g:777:33: LCOMMENTSi DirCommentContent RCOMMENTSi
            {
            root_0 = (CommonTree)adaptor.nil();

            LCOMMENTSi638=(Token)input.LT(1);
            match(input,LCOMMENTSi,FOLLOW_LCOMMENTSi_in_dirCommentConstructor10679); if (failed) return retval;
            if ( backtracking==0 ) {
            LCOMMENTSi638_tree = (CommonTree)adaptor.create(LCOMMENTSi638);
            adaptor.addChild(root_0, LCOMMENTSi638_tree);
            }
            DirCommentContent639=(Token)input.LT(1);
            match(input,DirCommentContent,FOLLOW_DirCommentContent_in_dirCommentConstructor10681); if (failed) return retval;
            if ( backtracking==0 ) {
            DirCommentContent639_tree = (CommonTree)adaptor.create(DirCommentContent639);
            adaptor.addChild(root_0, DirCommentContent639_tree);
            }
            RCOMMENTSi640=(Token)input.LT(1);
            match(input,RCOMMENTSi,FOLLOW_RCOMMENTSi_in_dirCommentConstructor10683); if (failed) return retval;
            if ( backtracking==0 ) {
            RCOMMENTSi640_tree = (CommonTree)adaptor.create(RCOMMENTSi640);
            adaptor.addChild(root_0, RCOMMENTSi640_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirCommentConstructor

    public static class dirPIConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirPIConstructor
    // etc/XQFT.g:779:5: dirPIConstructor : LPISi PiTarget ( DirPiContents )? RPISi ;
    public final dirPIConstructor_return dirPIConstructor() throws RecognitionException {
        dirPIConstructor_return retval = new dirPIConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPISi641=null;
        Token PiTarget642=null;
        Token DirPiContents643=null;
        Token RPISi644=null;

        CommonTree LPISi641_tree=null;
        CommonTree PiTarget642_tree=null;
        CommonTree DirPiContents643_tree=null;
        CommonTree RPISi644_tree=null;

        try {
            // etc/XQFT.g:779:27: ( LPISi PiTarget ( DirPiContents )? RPISi )
            // etc/XQFT.g:779:29: LPISi PiTarget ( DirPiContents )? RPISi
            {
            root_0 = (CommonTree)adaptor.nil();

            LPISi641=(Token)input.LT(1);
            match(input,LPISi,FOLLOW_LPISi_in_dirPIConstructor10704); if (failed) return retval;
            if ( backtracking==0 ) {
            LPISi641_tree = (CommonTree)adaptor.create(LPISi641);
            adaptor.addChild(root_0, LPISi641_tree);
            }
            PiTarget642=(Token)input.LT(1);
            match(input,PiTarget,FOLLOW_PiTarget_in_dirPIConstructor10706); if (failed) return retval;
            if ( backtracking==0 ) {
            PiTarget642_tree = (CommonTree)adaptor.create(PiTarget642);
            adaptor.addChild(root_0, PiTarget642_tree);
            }
            // etc/XQFT.g:779:44: ( DirPiContents )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==DirPiContents) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // etc/XQFT.g:779:44: DirPiContents
                    {
                    DirPiContents643=(Token)input.LT(1);
                    match(input,DirPiContents,FOLLOW_DirPiContents_in_dirPIConstructor10708); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DirPiContents643_tree = (CommonTree)adaptor.create(DirPiContents643);
                    adaptor.addChild(root_0, DirPiContents643_tree);
                    }

                    }
                    break;

            }

            RPISi644=(Token)input.LT(1);
            match(input,RPISi,FOLLOW_RPISi_in_dirPIConstructor10711); if (failed) return retval;
            if ( backtracking==0 ) {
            RPISi644_tree = (CommonTree)adaptor.create(RPISi644);
            adaptor.addChild(root_0, RPISi644_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirPIConstructor

    public static class computedConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start computedConstructor
    // etc/XQFT.g:781:4: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );
    public final computedConstructor_return computedConstructor() throws RecognitionException {
        computedConstructor_return retval = new computedConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        compDocConstructor_return compDocConstructor645 = null;

        compElemConstructor_return compElemConstructor646 = null;

        compAttrConstructor_return compAttrConstructor647 = null;

        compTextConstructor_return compTextConstructor648 = null;

        compCommentConstructor_return compCommentConstructor649 = null;

        compPIConstructor_return compPIConstructor650 = null;



        try {
            // etc/XQFT.g:781:35: ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor )
            int alt144=6;
            switch ( input.LA(1) ) {
            case DOCUMENT:
                {
                alt144=1;
                }
                break;
            case ELEMENT:
                {
                alt144=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt144=3;
                }
                break;
            case TEXT:
                {
                alt144=4;
                }
                break;
            case COMMENT:
                {
                alt144=5;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt144=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("781:4: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // etc/XQFT.g:781:37: compDocConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compDocConstructor_in_computedConstructor10737);
                    compDocConstructor645=compDocConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compDocConstructor645.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:782:40: compElemConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compElemConstructor_in_computedConstructor10778);
                    compElemConstructor646=compElemConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compElemConstructor646.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:783:40: compAttrConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compAttrConstructor_in_computedConstructor10819);
                    compAttrConstructor647=compAttrConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compAttrConstructor647.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:784:40: compTextConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compTextConstructor_in_computedConstructor10860);
                    compTextConstructor648=compTextConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compTextConstructor648.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:785:40: compCommentConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compCommentConstructor_in_computedConstructor10901);
                    compCommentConstructor649=compCommentConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compCommentConstructor649.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:786:40: compPIConstructor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_compPIConstructor_in_computedConstructor10942);
                    compPIConstructor650=compPIConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compPIConstructor650.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end computedConstructor

    public static class compDocConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compDocConstructor
    // etc/XQFT.g:788:5: compDocConstructor : DOCUMENT LBRACESi expr RBRACSi ;
    public final compDocConstructor_return compDocConstructor() throws RecognitionException {
        compDocConstructor_return retval = new compDocConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOCUMENT651=null;
        Token LBRACESi652=null;
        Token RBRACSi654=null;
        expr_return expr653 = null;


        CommonTree DOCUMENT651_tree=null;
        CommonTree LBRACESi652_tree=null;
        CommonTree RBRACSi654_tree=null;

        try {
            // etc/XQFT.g:788:36: ( DOCUMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:788:38: DOCUMENT LBRACESi expr RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            DOCUMENT651=(Token)input.LT(1);
            match(input,DOCUMENT,FOLLOW_DOCUMENT_in_compDocConstructor10970); if (failed) return retval;
            if ( backtracking==0 ) {
            DOCUMENT651_tree = (CommonTree)adaptor.create(DOCUMENT651);
            adaptor.addChild(root_0, DOCUMENT651_tree);
            }
            LBRACESi652=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compDocConstructor10972); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi652_tree = (CommonTree)adaptor.create(LBRACESi652);
            adaptor.addChild(root_0, LBRACESi652_tree);
            }
            pushFollow(FOLLOW_expr_in_compDocConstructor10974);
            expr653=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr653.getTree());
            RBRACSi654=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compDocConstructor10976); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi654_tree = (CommonTree)adaptor.create(RBRACSi654);
            adaptor.addChild(root_0, RBRACSi654_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compDocConstructor

    public static class compElemConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compElemConstructor
    // etc/XQFT.g:792:5: compElemConstructor : ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi ;
    public final compElemConstructor_return compElemConstructor() throws RecognitionException {
        compElemConstructor_return retval = new compElemConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELEMENT655=null;
        Token LBRACESi657=null;
        Token RBRACSi659=null;
        Token LBRACESi660=null;
        Token RBRACSi662=null;
        qName_return qName656 = null;

        expr_return expr658 = null;

        contentExpr_return contentExpr661 = null;


        CommonTree ELEMENT655_tree=null;
        CommonTree LBRACESi657_tree=null;
        CommonTree RBRACSi659_tree=null;
        CommonTree LBRACESi660_tree=null;
        CommonTree RBRACSi662_tree=null;

        try {
            // etc/XQFT.g:792:36: ( ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi )
            // etc/XQFT.g:792:38: ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            ELEMENT655=(Token)input.LT(1);
            match(input,ELEMENT,FOLLOW_ELEMENT_in_compElemConstructor11005); if (failed) return retval;
            if ( backtracking==0 ) {
            ELEMENT655_tree = (CommonTree)adaptor.create(ELEMENT655);
            adaptor.addChild(root_0, ELEMENT655_tree);
            }
            // etc/XQFT.g:792:46: ( qName | LBRACESi expr RBRACSi )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==NCName) ) {
                alt145=1;
            }
            else if ( (LA145_0==LBRACESi) ) {
                alt145=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("792:46: ( qName | LBRACESi expr RBRACSi )", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // etc/XQFT.g:792:47: qName
                    {
                    pushFollow(FOLLOW_qName_in_compElemConstructor11008);
                    qName656=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName656.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:792:55: LBRACESi expr RBRACSi
                    {
                    LBRACESi657=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor11012); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LBRACESi657_tree = (CommonTree)adaptor.create(LBRACESi657);
                    adaptor.addChild(root_0, LBRACESi657_tree);
                    }
                    pushFollow(FOLLOW_expr_in_compElemConstructor11014);
                    expr658=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr658.getTree());
                    RBRACSi659=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor11016); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RBRACSi659_tree = (CommonTree)adaptor.create(RBRACSi659);
                    adaptor.addChild(root_0, RBRACSi659_tree);
                    }

                    }
                    break;

            }

            LBRACESi660=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor11035); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi660_tree = (CommonTree)adaptor.create(LBRACESi660);
            adaptor.addChild(root_0, LBRACESi660_tree);
            }
            // etc/XQFT.g:793:25: ( contentExpr )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=ANCESTOR && LA146_0<=ANCESTOR_OR_SELF)||LA146_0==ATTRIBUTE||LA146_0==CHILD||LA146_0==COMMENT||(LA146_0>=DESCENDANT && LA146_0<=DESCENDANT_OR_SELF)||(LA146_0>=DOCUMENT && LA146_0<=ELEMENT)||LA146_0==EVERY||(LA146_0>=FOLLOWING && LA146_0<=FOR)||LA146_0==IF||LA146_0==LET||LA146_0==NODE||LA146_0==ORDERED||LA146_0==PARENT||(LA146_0>=PRECEDING && LA146_0<=PRECEDING_SIBLING)||LA146_0==PROCESSING_INSTRUCTION||(LA146_0>=SCHEMAATTRIBUTE && LA146_0<=SCHEMAELEMENT)||LA146_0==SELF||LA146_0==SOME||LA146_0==TEXT||LA146_0==TYPESWITCH||LA146_0==UNORDERED||LA146_0==VALIDATE||LA146_0==StringLiteral||LA146_0==NCName||LA146_0==DOLLARSi||LA146_0==LPARSi||(LA146_0>=STARSi && LA146_0<=MINUSSi)||LA146_0==LTSi||(LA146_0>=IntegerLiteral && LA146_0<=LPRAGSi)||(LA146_0>=DBLSLASHSi && LA146_0<=SLASHSi)||(LA146_0>=DOTDOTSi && LA146_0<=ATSi)||LA146_0==DOTSi||LA146_0==LCOMMENTSi||LA146_0==LPISi) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // etc/XQFT.g:793:25: contentExpr
                    {
                    pushFollow(FOLLOW_contentExpr_in_compElemConstructor11037);
                    contentExpr661=contentExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, contentExpr661.getTree());

                    }
                    break;

            }

            RBRACSi662=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor11040); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi662_tree = (CommonTree)adaptor.create(RBRACSi662);
            adaptor.addChild(root_0, RBRACSi662_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compElemConstructor

    public static class contentExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start contentExpr
    // etc/XQFT.g:796:6: contentExpr : expr ;
    public final contentExpr_return contentExpr() throws RecognitionException {
        contentExpr_return retval = new contentExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expr_return expr663 = null;



        try {
            // etc/XQFT.g:796:37: ( expr )
            // etc/XQFT.g:796:39: expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_contentExpr11073);
            expr663=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr663.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end contentExpr

    public static class compAttrConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compAttrConstructor
    // etc/XQFT.g:800:5: compAttrConstructor : ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
    public final compAttrConstructor_return compAttrConstructor() throws RecognitionException {
        compAttrConstructor_return retval = new compAttrConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ATTRIBUTE664=null;
        Token LBRACESi666=null;
        Token RBRACSi668=null;
        Token LBRACESi669=null;
        Token RBRACSi671=null;
        qName_return qName665 = null;

        expr_return expr667 = null;

        expr_return expr670 = null;


        CommonTree ATTRIBUTE664_tree=null;
        CommonTree LBRACESi666_tree=null;
        CommonTree RBRACSi668_tree=null;
        CommonTree LBRACESi669_tree=null;
        CommonTree RBRACSi671_tree=null;

        try {
            // etc/XQFT.g:800:36: ( ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:800:38: ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            ATTRIBUTE664=(Token)input.LT(1);
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_compAttrConstructor11118); if (failed) return retval;
            if ( backtracking==0 ) {
            ATTRIBUTE664_tree = (CommonTree)adaptor.create(ATTRIBUTE664);
            adaptor.addChild(root_0, ATTRIBUTE664_tree);
            }
            // etc/XQFT.g:800:48: ( qName | ( LBRACESi expr RBRACSi ) )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==NCName) ) {
                alt147=1;
            }
            else if ( (LA147_0==LBRACESi) ) {
                alt147=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("800:48: ( qName | ( LBRACESi expr RBRACSi ) )", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // etc/XQFT.g:800:49: qName
                    {
                    pushFollow(FOLLOW_qName_in_compAttrConstructor11121);
                    qName665=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName665.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:800:57: ( LBRACESi expr RBRACSi )
                    {
                    // etc/XQFT.g:800:57: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:800:58: LBRACESi expr RBRACSi
                    {
                    LBRACESi666=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor11126); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LBRACESi666_tree = (CommonTree)adaptor.create(LBRACESi666);
                    adaptor.addChild(root_0, LBRACESi666_tree);
                    }
                    pushFollow(FOLLOW_expr_in_compAttrConstructor11128);
                    expr667=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr667.getTree());
                    RBRACSi668=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor11130); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RBRACSi668_tree = (CommonTree)adaptor.create(RBRACSi668);
                    adaptor.addChild(root_0, RBRACSi668_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACESi669=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor11150); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi669_tree = (CommonTree)adaptor.create(LBRACESi669);
            adaptor.addChild(root_0, LBRACESi669_tree);
            }
            // etc/XQFT.g:801:25: ( expr )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=ANCESTOR && LA148_0<=ANCESTOR_OR_SELF)||LA148_0==ATTRIBUTE||LA148_0==CHILD||LA148_0==COMMENT||(LA148_0>=DESCENDANT && LA148_0<=DESCENDANT_OR_SELF)||(LA148_0>=DOCUMENT && LA148_0<=ELEMENT)||LA148_0==EVERY||(LA148_0>=FOLLOWING && LA148_0<=FOR)||LA148_0==IF||LA148_0==LET||LA148_0==NODE||LA148_0==ORDERED||LA148_0==PARENT||(LA148_0>=PRECEDING && LA148_0<=PRECEDING_SIBLING)||LA148_0==PROCESSING_INSTRUCTION||(LA148_0>=SCHEMAATTRIBUTE && LA148_0<=SCHEMAELEMENT)||LA148_0==SELF||LA148_0==SOME||LA148_0==TEXT||LA148_0==TYPESWITCH||LA148_0==UNORDERED||LA148_0==VALIDATE||LA148_0==StringLiteral||LA148_0==NCName||LA148_0==DOLLARSi||LA148_0==LPARSi||(LA148_0>=STARSi && LA148_0<=MINUSSi)||LA148_0==LTSi||(LA148_0>=IntegerLiteral && LA148_0<=LPRAGSi)||(LA148_0>=DBLSLASHSi && LA148_0<=SLASHSi)||(LA148_0>=DOTDOTSi && LA148_0<=ATSi)||LA148_0==DOTSi||LA148_0==LCOMMENTSi||LA148_0==LPISi) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // etc/XQFT.g:801:25: expr
                    {
                    pushFollow(FOLLOW_expr_in_compAttrConstructor11152);
                    expr670=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr670.getTree());

                    }
                    break;

            }

            RBRACSi671=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor11155); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi671_tree = (CommonTree)adaptor.create(RBRACSi671);
            adaptor.addChild(root_0, RBRACSi671_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compAttrConstructor

    public static class compTextConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compTextConstructor
    // etc/XQFT.g:803:5: compTextConstructor : TEXT LBRACESi expr RBRACSi ;
    public final compTextConstructor_return compTextConstructor() throws RecognitionException {
        compTextConstructor_return retval = new compTextConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TEXT672=null;
        Token LBRACESi673=null;
        Token RBRACSi675=null;
        expr_return expr674 = null;


        CommonTree TEXT672_tree=null;
        CommonTree LBRACESi673_tree=null;
        CommonTree RBRACSi675_tree=null;

        try {
            // etc/XQFT.g:803:36: ( TEXT LBRACESi expr RBRACSi )
            // etc/XQFT.g:803:38: TEXT LBRACESi expr RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            TEXT672=(Token)input.LT(1);
            match(input,TEXT,FOLLOW_TEXT_in_compTextConstructor11191); if (failed) return retval;
            if ( backtracking==0 ) {
            TEXT672_tree = (CommonTree)adaptor.create(TEXT672);
            adaptor.addChild(root_0, TEXT672_tree);
            }
            LBRACESi673=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compTextConstructor11193); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi673_tree = (CommonTree)adaptor.create(LBRACESi673);
            adaptor.addChild(root_0, LBRACESi673_tree);
            }
            pushFollow(FOLLOW_expr_in_compTextConstructor11195);
            expr674=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr674.getTree());
            RBRACSi675=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compTextConstructor11197); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi675_tree = (CommonTree)adaptor.create(RBRACSi675);
            adaptor.addChild(root_0, RBRACSi675_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compTextConstructor

    public static class compCommentConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compCommentConstructor
    // etc/XQFT.g:805:5: compCommentConstructor : COMMENT LBRACESi expr RBRACSi ;
    public final compCommentConstructor_return compCommentConstructor() throws RecognitionException {
        compCommentConstructor_return retval = new compCommentConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMENT676=null;
        Token LBRACESi677=null;
        Token RBRACSi679=null;
        expr_return expr678 = null;


        CommonTree COMMENT676_tree=null;
        CommonTree LBRACESi677_tree=null;
        CommonTree RBRACSi679_tree=null;

        try {
            // etc/XQFT.g:805:36: ( COMMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:805:38: COMMENT LBRACESi expr RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            COMMENT676=(Token)input.LT(1);
            match(input,COMMENT,FOLLOW_COMMENT_in_compCommentConstructor11221); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMENT676_tree = (CommonTree)adaptor.create(COMMENT676);
            adaptor.addChild(root_0, COMMENT676_tree);
            }
            LBRACESi677=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compCommentConstructor11223); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi677_tree = (CommonTree)adaptor.create(LBRACESi677);
            adaptor.addChild(root_0, LBRACESi677_tree);
            }
            pushFollow(FOLLOW_expr_in_compCommentConstructor11225);
            expr678=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr678.getTree());
            RBRACSi679=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compCommentConstructor11227); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi679_tree = (CommonTree)adaptor.create(RBRACSi679);
            adaptor.addChild(root_0, RBRACSi679_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compCommentConstructor

    public static class compPIConstructor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compPIConstructor
    // etc/XQFT.g:807:5: compPIConstructor : PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
    public final compPIConstructor_return compPIConstructor() throws RecognitionException {
        compPIConstructor_return retval = new compPIConstructor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PROCESSING_INSTRUCTION680=null;
        Token NCName681=null;
        Token LBRACESi682=null;
        Token RBRACSi684=null;
        Token LBRACESi685=null;
        Token RBRACSi687=null;
        expr_return expr683 = null;

        expr_return expr686 = null;


        CommonTree PROCESSING_INSTRUCTION680_tree=null;
        CommonTree NCName681_tree=null;
        CommonTree LBRACESi682_tree=null;
        CommonTree RBRACSi684_tree=null;
        CommonTree LBRACESi685_tree=null;
        CommonTree RBRACSi687_tree=null;

        try {
            // etc/XQFT.g:807:36: ( PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:807:38: PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
            {
            root_0 = (CommonTree)adaptor.nil();

            PROCESSING_INSTRUCTION680=(Token)input.LT(1);
            match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor11256); if (failed) return retval;
            if ( backtracking==0 ) {
            PROCESSING_INSTRUCTION680_tree = (CommonTree)adaptor.create(PROCESSING_INSTRUCTION680);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION680_tree);
            }
            // etc/XQFT.g:807:61: ( NCName | ( LBRACESi expr RBRACSi ) )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==NCName) ) {
                alt149=1;
            }
            else if ( (LA149_0==LBRACESi) ) {
                alt149=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("807:61: ( NCName | ( LBRACESi expr RBRACSi ) )", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // etc/XQFT.g:807:62: NCName
                    {
                    NCName681=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_compPIConstructor11259); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName681_tree = (CommonTree)adaptor.create(NCName681);
                    adaptor.addChild(root_0, NCName681_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:807:71: ( LBRACESi expr RBRACSi )
                    {
                    // etc/XQFT.g:807:71: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:807:72: LBRACESi expr RBRACSi
                    {
                    LBRACESi682=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor11264); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LBRACESi682_tree = (CommonTree)adaptor.create(LBRACESi682);
                    adaptor.addChild(root_0, LBRACESi682_tree);
                    }
                    pushFollow(FOLLOW_expr_in_compPIConstructor11266);
                    expr683=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr683.getTree());
                    RBRACSi684=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor11268); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RBRACSi684_tree = (CommonTree)adaptor.create(RBRACSi684);
                    adaptor.addChild(root_0, RBRACSi684_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACESi685=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor11288); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi685_tree = (CommonTree)adaptor.create(LBRACESi685);
            adaptor.addChild(root_0, LBRACESi685_tree);
            }
            // etc/XQFT.g:808:25: ( expr )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0>=ANCESTOR && LA150_0<=ANCESTOR_OR_SELF)||LA150_0==ATTRIBUTE||LA150_0==CHILD||LA150_0==COMMENT||(LA150_0>=DESCENDANT && LA150_0<=DESCENDANT_OR_SELF)||(LA150_0>=DOCUMENT && LA150_0<=ELEMENT)||LA150_0==EVERY||(LA150_0>=FOLLOWING && LA150_0<=FOR)||LA150_0==IF||LA150_0==LET||LA150_0==NODE||LA150_0==ORDERED||LA150_0==PARENT||(LA150_0>=PRECEDING && LA150_0<=PRECEDING_SIBLING)||LA150_0==PROCESSING_INSTRUCTION||(LA150_0>=SCHEMAATTRIBUTE && LA150_0<=SCHEMAELEMENT)||LA150_0==SELF||LA150_0==SOME||LA150_0==TEXT||LA150_0==TYPESWITCH||LA150_0==UNORDERED||LA150_0==VALIDATE||LA150_0==StringLiteral||LA150_0==NCName||LA150_0==DOLLARSi||LA150_0==LPARSi||(LA150_0>=STARSi && LA150_0<=MINUSSi)||LA150_0==LTSi||(LA150_0>=IntegerLiteral && LA150_0<=LPRAGSi)||(LA150_0>=DBLSLASHSi && LA150_0<=SLASHSi)||(LA150_0>=DOTDOTSi && LA150_0<=ATSi)||LA150_0==DOTSi||LA150_0==LCOMMENTSi||LA150_0==LPISi) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // etc/XQFT.g:808:25: expr
                    {
                    pushFollow(FOLLOW_expr_in_compPIConstructor11290);
                    expr686=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr686.getTree());

                    }
                    break;

            }

            RBRACSi687=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor11293); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi687_tree = (CommonTree)adaptor.create(RBRACSi687);
            adaptor.addChild(root_0, RBRACSi687_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compPIConstructor

    // $ANTLR start synpred1
    public final void synpred1_fragment() throws RecognitionException {   
        // etc/XQFT.g:366:34: ( itemType occurrenceIndicator )
        // etc/XQFT.g:366:35: itemType occurrenceIndicator
        {
        pushFollow(FOLLOW_itemType_in_synpred12151);
        itemType();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_occurrenceIndicator_in_synpred12153);
        occurrenceIndicator();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred2
    public final void synpred2_fragment() throws RecognitionException {   
        // etc/XQFT.g:665:35: ( DBLSLASHSi relativePathExpr )
        // etc/XQFT.g:665:36: DBLSLASHSi relativePathExpr
        {
        match(input,DBLSLASHSi,FOLLOW_DBLSLASHSi_in_synpred28451); if (failed) return ;
        pushFollow(FOLLOW_relativePathExpr_in_synpred28453);
        relativePathExpr();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred2

    // $ANTLR start synpred3
    public final void synpred3_fragment() throws RecognitionException {   
        // etc/XQFT.g:666:14: ( SLASHSi relativePathExpr )
        // etc/XQFT.g:666:15: SLASHSi relativePathExpr
        {
        match(input,SLASHSi,FOLLOW_SLASHSi_in_synpred38476); if (failed) return ;
        pushFollow(FOLLOW_relativePathExpr_in_synpred38478);
        relativePathExpr();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred3

    // $ANTLR start synpred4
    public final void synpred4_fragment() throws RecognitionException {   
        // etc/XQFT.g:681:41: ( STARSi COLONSi NCName )
        // etc/XQFT.g:681:42: STARSi COLONSi NCName
        {
        match(input,STARSi,FOLLOW_STARSi_in_synpred48863); if (failed) return ;
        match(input,COLONSi,FOLLOW_COLONSi_in_synpred48865); if (failed) return ;
        match(input,NCName,FOLLOW_NCName_in_synpred48867); if (failed) return ;

        }
    }
    // $ANTLR end synpred4

    public final boolean synpred1() {
        backtracking++;
        int start = input.mark();
        try {
            synpred1_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred2() {
        backtracking++;
        int start = input.mark();
        try {
            synpred2_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred3() {
        backtracking++;
        int start = input.mark();
        try {
            synpred3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred4() {
        backtracking++;
        int start = input.mark();
        try {
            synpred4_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


    protected DFA117 dfa117 = new DFA117(this);
    static final String DFA117_eotS =
        "\u01d0\uffff";
    static final String DFA117_eofS =
        "\2\uffff\1\4\2\uffff\1\65\34\uffff\2\4\47\uffff\1\4\126\uffff\1"+
        "\65\16\uffff\1\65\14\uffff\1\65\u0111\uffff";
    static final String DFA117_minS =
        "\1\6\1\uffff\1\6\2\uffff\2\6\31\uffff\5\6\46\uffff\1\10\1\110\1"+
        "\6\1\0\1\u00bb\1\0\1\u009d\1\14\1\u00a3\1\u009d\1\u00bb\2\u00a3"+
        "\1\u009d\3\u00a3\4\0\1\u009d\2\0\2\u00a5\1\u009d\1\u00cc\1\u00cf"+
        "\1\u00a5\1\u009d\1\6\1\u00bb\1\0\1\u009d\1\14\1\u00a3\1\u009d\1"+
        "\u00bb\2\u00a3\1\u009d\3\u00a3\4\0\1\u009d\2\0\2\u00a5\1\u009d\1"+
        "\u00cc\1\u00cf\1\u00a5\1\u00bb\1\0\1\u009d\1\14\1\u00a3\1\u009d"+
        "\1\u00bb\2\u00a3\1\u009d\3\u00a3\4\0\1\u009d\2\0\2\u00a5\1\6\1\u00cc"+
        "\1\u00cf\1\u00a5\1\6\1\uffff\2\6\16\uffff\1\6\7\uffff\1\6\4\uffff"+
        "\1\10\36\uffff\1\u009d\3\uffff\1\u00a5\u00d1\0\10\uffff\2\0\1\uffff"+
        "\2\0\17\uffff\1\0";
    static final String DFA117_maxS =
        "\1\u00ce\1\uffff\1\u00ce\2\uffff\2\u00ce\31\uffff\5\u00ce\46\uffff"+
        "\1\u00c1\1\u00a5\1\u00ce\1\0\1\u00bb\1\0\1\u00bb\1\u00a8\1\u00a3"+
        "\1\u00a5\1\u00bb\2\u00a3\3\u00a5\1\u00a3\4\0\1\u009d\2\0\2\u00a5"+
        "\1\u009d\1\u00cc\1\u00cf\1\u00a5\1\u009d\1\u00ce\1\u00bb\1\0\1\u00bb"+
        "\1\u00a8\1\u00a3\1\u00a5\1\u00bb\2\u00a3\3\u00a5\1\u00a3\4\0\1\u009d"+
        "\2\0\2\u00a5\1\u009d\1\u00cc\1\u00cf\1\u00a5\1\u00bb\1\0\1\u00bb"+
        "\1\u00a8\1\u00a3\1\u00a5\1\u00bb\2\u00a3\3\u00a5\1\u00a3\4\0\1\u009d"+
        "\2\0\2\u00a5\1\u00ce\1\u00cc\1\u00cf\1\u00a5\1\u00ce\1\uffff\2\u00ce"+
        "\16\uffff\1\u00ce\7\uffff\1\u00ce\4\uffff\1\u00c1\36\uffff\1\u00a8"+
        "\3\uffff\1\u00a5\u00d1\0\10\uffff\2\0\1\uffff\2\0\17\uffff\1\0";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\3\2\uffff\31\2\5\uffff\46\2\125\uffff"+
        "\1\2\2\uffff\16\2\1\uffff\7\2\1\uffff\4\2\1\uffff\36\2\1\uffff\3"+
        "\2\u00d2\uffff\10\2\2\uffff\1\2\2\uffff\17\2\1\uffff";
    static final String DFA117_specialS =
        "\1\15\1\uffff\1\24\2\uffff\1\12\35\uffff\1\30\1\33\46\uffff\1\3"+
        "\2\uffff\1\14\1\uffff\1\11\13\uffff\1\20\1\10\1\32\1\7\1\uffff\1"+
        "\31\1\23\11\uffff\1\22\13\uffff\1\36\1\26\1\0\1\17\1\uffff\1\13"+
        "\1\27\7\uffff\1\21\13\uffff\1\35\1\6\1\2\1\16\1\uffff\1\5\1\25\11"+
        "\uffff\1\34\16\uffff\1\4\14\uffff\1\1\u0111\uffff}>";
    static final String[] DFA117_transitionS = {
            "\2\3\4\uffff\1\3\6\uffff\1\3\1\uffff\1\3\5\uffff\2\3\5\uffff"+
            "\3\3\13\uffff\2\3\42\uffff\1\3\10\uffff\1\3\3\uffff\1\3\1\uffff"+
            "\2\3\1\uffff\1\3\5\uffff\2\3\1\uffff\1\3\12\uffff\1\3\7\uffff"+
            "\1\3\30\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\4\uffff"+
            "\1\3\4\uffff\1\3\5\uffff\3\3\3\uffff\1\1\1\2\1\uffff\2\3\2\uffff"+
            "\1\3\12\uffff\1\3\2\uffff\1\3",
            "",
            "\2\7\1\4\1\uffff\1\4\1\uffff\1\11\3\uffff\3\4\1\15\1\4\1\21"+
            "\4\uffff\1\4\2\15\1\4\3\uffff\1\4\1\36\1\13\1\14\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\2\15\1\4\2\uffff\1\4\4"+
            "\uffff\1\4\1\uffff\2\4\5\uffff\3\4\3\uffff\1\4\1\uffff\2\4\1"+
            "\uffff\2\4\3\uffff\1\4\1\23\6\uffff\2\4\1\32\2\uffff\1\4\1\7"+
            "\1\uffff\2\7\1\uffff\1\20\1\uffff\1\4\1\uffff\1\4\1\uffff\1"+
            "\17\1\16\1\uffff\1\15\1\uffff\1\4\2\uffff\1\4\5\uffff\1\22\2"+
            "\uffff\3\4\1\uffff\1\4\1\33\5\uffff\1\4\3\uffff\1\4\1\uffff"+
            "\1\4\14\uffff\1\26\1\4\1\24\2\4\1\27\2\uffff\1\30\1\4\1\uffff"+
            "\1\4\1\uffff\1\5\4\4\1\6\5\4\3\25\6\uffff\1\10\1\12\1\uffff"+
            "\1\4\1\31\12\uffff\1\34\2\uffff\1\35",
            "",
            "",
            "\2\4\1\62\1\uffff\1\100\1\uffff\1\4\3\uffff\1\105\1\46\1\47"+
            "\1\4\1\102\1\4\4\uffff\1\104\2\4\1\100\3\uffff\1\54\3\4\1\106"+
            "\3\uffff\1\101\1\uffff\1\57\2\uffff\1\52\1\uffff\2\4\1\76\2"+
            "\uffff\1\56\4\uffff\1\57\1\uffff\1\57\1\54\5\uffff\1\51\1\52"+
            "\1\61\3\uffff\1\57\1\uffff\1\77\1\112\1\uffff\1\57\1\54\3\uffff"+
            "\1\57\1\4\6\uffff\1\63\1\73\1\4\2\uffff\1\111\1\4\1\uffff\2"+
            "\4\1\uffff\1\4\1\uffff\1\75\1\uffff\1\103\1\uffff\2\4\1\uffff"+
            "\1\4\1\uffff\1\111\2\uffff\1\74\5\uffff\1\4\2\uffff\1\110\1"+
            "\55\1\50\1\uffff\1\53\1\4\1\uffff\1\4\3\uffff\1\72\3\uffff\1"+
            "\107\1\uffff\1\111\14\uffff\1\4\1\71\1\4\1\60\1\64\1\4\1\uffff"+
            "\1\37\1\4\1\67\1\uffff\1\66\1\uffff\1\43\2\40\1\53\1\60\1\44"+
            "\3\60\2\61\4\4\2\uffff\1\41\1\42\1\uffff\2\4\1\45\1\70\1\4\12"+
            "\uffff\1\4\2\uffff\1\4",
            "\2\4\4\uffff\1\4\6\uffff\1\4\1\uffff\1\4\5\uffff\2\4\5\uffff"+
            "\3\4\13\uffff\2\4\42\uffff\1\4\10\uffff\1\4\3\uffff\1\4\1\uffff"+
            "\2\4\1\uffff\1\4\5\uffff\2\4\1\uffff\1\4\12\uffff\1\4\7\uffff"+
            "\1\4\1\uffff\1\4\26\uffff\1\4\1\uffff\1\113\2\uffff\1\4\2\uffff"+
            "\1\4\4\uffff\3\4\2\uffff\1\4\5\uffff\4\4\2\uffff\2\4\1\uffff"+
            "\2\4\2\uffff\1\4\12\uffff\1\4\2\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\117\4\uffff\1\121\6\uffff\1\125\1\uffff\1\131\5\uffff\2\125"+
            "\5\uffff\1\150\1\123\1\124\13\uffff\2\125\42\uffff\1\133\10"+
            "\uffff\1\143\3\uffff\1\117\1\uffff\2\117\1\uffff\1\130\5\uffff"+
            "\1\127\1\126\1\uffff\1\125\12\uffff\1\132\7\uffff\1\144\1\uffff"+
            "\1\114\26\uffff\1\137\1\uffff\1\134\2\uffff\1\140\2\uffff\1"+
            "\141\4\uffff\1\135\2\152\2\uffff\1\145\5\uffff\3\136\1\151\2"+
            "\uffff\1\115\1\116\1\uffff\1\120\1\122\2\uffff\1\142\12\uffff"+
            "\1\146\2\uffff\1\147",
            "\2\153\4\uffff\1\155\6\uffff\1\161\1\uffff\1\165\5\uffff\2\161"+
            "\5\uffff\1\u0084\1\157\1\160\13\uffff\2\161\42\uffff\1\167\10"+
            "\uffff\1\177\3\uffff\1\153\1\uffff\2\153\1\uffff\1\164\5\uffff"+
            "\1\163\1\162\1\uffff\1\161\12\uffff\1\166\7\uffff\1\u0080\30"+
            "\uffff\1\173\1\uffff\1\170\2\uffff\1\174\2\uffff\1\175\4\uffff"+
            "\1\171\4\uffff\1\u0081\5\uffff\3\172\6\uffff\1\154\1\156\2\uffff"+
            "\1\176\12\uffff\1\u0082\2\uffff\1\u0083",
            "\2\u0085\1\4\1\uffff\1\4\1\uffff\1\u0087\3\uffff\3\4\1\u008b"+
            "\1\4\1\u008f\4\uffff\1\4\2\u008b\1\4\3\uffff\1\4\1\u009e\1\u0089"+
            "\1\u008a\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\2\u008b"+
            "\1\4\2\uffff\1\4\4\uffff\1\4\1\uffff\2\4\5\uffff\3\4\3\uffff"+
            "\1\4\1\uffff\2\4\1\uffff\2\4\3\uffff\1\4\1\u0091\6\uffff\2\4"+
            "\1\u0099\2\uffff\1\4\1\u0085\1\uffff\2\u0085\1\uffff\1\u008e"+
            "\1\uffff\1\4\1\uffff\1\4\1\uffff\1\u008d\1\u008c\1\uffff\1\u008b"+
            "\1\uffff\1\4\2\uffff\1\4\5\uffff\1\u0090\2\uffff\3\4\1\uffff"+
            "\1\4\1\u009a\5\uffff\1\4\3\uffff\1\4\1\uffff\1\4\14\uffff\1"+
            "\u0095\1\4\1\u0092\2\4\1\u0096\2\uffff\1\u0097\1\4\1\uffff\1"+
            "\4\1\uffff\1\u0093\4\4\1\u009b\5\4\3\u0094\6\uffff\1\u0086\1"+
            "\u0088\1\uffff\1\4\1\u0098\12\uffff\1\u009c\2\uffff\1\u009d",
            "\2\u00a3\1\4\1\uffff\1\4\1\uffff\1\u00a5\3\uffff\3\4\1\u00a9"+
            "\1\4\1\u00ad\4\uffff\1\4\2\u00a9\1\4\3\uffff\1\4\1\u00bc\1\u00a7"+
            "\1\u00a8\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\2\u00a9"+
            "\1\4\2\uffff\1\4\4\uffff\1\4\1\uffff\2\4\5\uffff\3\4\3\uffff"+
            "\1\4\1\uffff\2\4\1\uffff\2\4\3\uffff\1\4\1\u00af\6\uffff\2\4"+
            "\1\u00b7\2\uffff\1\4\1\u00a3\1\uffff\2\u00a3\1\uffff\1\u00ac"+
            "\1\uffff\1\4\1\uffff\1\4\1\uffff\1\u00ab\1\u00aa\1\uffff\1\u00a9"+
            "\1\uffff\1\4\2\uffff\1\4\5\uffff\1\u00ae\2\uffff\3\4\1\uffff"+
            "\1\4\1\u00b8\1\uffff\1\u00a0\3\uffff\1\4\3\uffff\1\4\1\uffff"+
            "\1\4\14\uffff\1\u00b3\1\4\1\u00b0\2\4\1\u00b4\1\uffff\1\4\1"+
            "\u00b5\1\4\1\uffff\1\4\1\uffff\1\u00b1\2\u009f\2\4\1\u00b9\5"+
            "\4\3\u00b2\1\u00bd\2\uffff\1\u00a1\1\u00a2\1\uffff\1\u00a4\1"+
            "\u00a6\2\4\1\u00b6\12\uffff\1\u00ba\2\uffff\1\u00bb",
            "\2\u00c3\4\uffff\1\u00c5\6\uffff\1\u00c9\1\uffff\1\u00cd\5\uffff"+
            "\2\u00c9\5\uffff\1\u00db\1\u00c7\1\u00c8\13\uffff\2\u00c9\42"+
            "\uffff\1\u00cf\10\uffff\1\u00d6\3\uffff\1\u00c3\1\uffff\2\u00c3"+
            "\1\uffff\1\u00cc\5\uffff\1\u00cb\1\u00ca\1\uffff\1\u00c9\12"+
            "\uffff\1\u00ce\7\uffff\1\u00d7\1\uffff\1\u00c0\26\uffff\1\u00d2"+
            "\1\uffff\1\u00be\2\uffff\1\u00d3\2\uffff\1\u00d4\4\uffff\1\u00d0"+
            "\2\u00bf\2\uffff\1\u00d8\5\uffff\3\u00d1\1\u00dc\2\uffff\1\u00c1"+
            "\1\u00c2\1\uffff\1\u00c4\1\u00c6\2\uffff\1\u00d5\12\uffff\1"+
            "\u00d9\2\uffff\1\u00da",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\1\uffff\1\4\5\uffff\3\4\1\uffff\1\4\5\uffff\1\4\2\uffff"+
            "\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\4\uffff\1\4\3\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\5\uffff\2\4\6\uffff\1\4\3\uffff"+
            "\1\4\13\uffff\2\4\13\uffff\1\4\1\uffff\1\4\11\uffff\1\4\11\uffff"+
            "\2\4\1\uffff\1\4\6\uffff\1\4\23\uffff\1\4\1\u00de\1\uffff\1"+
            "\4\2\uffff\1\u00dd\2\4\1\uffff\1\4\1\uffff\4\4\3\uffff\1\u00e0"+
            "\11\uffff\2\4\3\uffff\2\4\1\uffff\1\u00df",
            "\1\u00e1\57\uffff\1\u00e1\54\uffff\1\u00e2",
            "\2\u00e3\4\uffff\1\u00e5\6\uffff\1\u00e9\1\uffff\1\u00ed\5\uffff"+
            "\2\u00e9\5\uffff\1\u00fc\1\u00e7\1\u00e8\13\uffff\2\u00e9\42"+
            "\uffff\1\u00ef\10\uffff\1\u00f7\3\uffff\1\u00e3\1\uffff\2\u00e3"+
            "\1\uffff\1\u00ec\5\uffff\1\u00eb\1\u00ea\1\uffff\1\u00e9\12"+
            "\uffff\1\u00ee\7\uffff\1\u00f8\30\uffff\1\u00f3\1\uffff\1\u00f0"+
            "\2\uffff\1\u00f4\2\uffff\1\u00f5\4\uffff\1\u00f1\4\uffff\1\u00f9"+
            "\5\uffff\3\u00f2\6\uffff\1\u00e4\1\u00e6\2\uffff\1\u00f6\12"+
            "\uffff\1\u00fa\2\uffff\1\u00fb",
            "\1\uffff",
            "\1\u00fd",
            "\1\uffff",
            "\1\u0100\5\uffff\1\u00fe\1\uffff\1\u0101\25\uffff\1\u00ff",
            "\1\u0103\10\uffff\1\u0105\15\uffff\1\123\1\u0102\57\uffff\1"+
            "\133\21\uffff\1\u0104\5\uffff\1\127\1\126\14\uffff\1\u0106\42"+
            "\uffff\1\u0107\12\uffff\1\135",
            "\1\u0108",
            "\1\u010a\5\uffff\1\u0109\1\uffff\1\u010b",
            "\1\u00ff",
            "\1\u010c",
            "\1\u010d",
            "\1\u010f\5\uffff\1\u010e\1\uffff\1\u0110",
            "\1\u0112\1\uffff\1\u0111",
            "\1\u0114\1\uffff\1\u0113",
            "\1\u0115",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0116",
            "\1\uffff",
            "\1\uffff",
            "\1\u0117",
            "\1\u0118",
            "\1\u0119",
            "\1\u011a",
            "\1\u011b",
            "\1\u011c",
            "\1\u011d",
            "\2\117\4\uffff\1\121\6\uffff\1\125\1\uffff\1\131\5\uffff\2\125"+
            "\5\uffff\1\150\1\123\1\124\13\uffff\2\125\42\uffff\1\133\10"+
            "\uffff\1\143\3\uffff\1\117\1\uffff\2\117\1\uffff\1\130\5\uffff"+
            "\1\127\1\126\1\uffff\1\125\12\uffff\1\132\7\uffff\1\144\1\uffff"+
            "\1\114\26\uffff\1\137\1\uffff\1\134\2\uffff\1\140\2\uffff\1"+
            "\u011e\4\uffff\1\135\2\152\2\uffff\1\145\5\uffff\3\136\1\151"+
            "\2\uffff\1\115\1\116\1\uffff\1\120\1\122\2\uffff\1\142\12\uffff"+
            "\1\146\2\uffff\1\147",
            "\1\u011f",
            "\1\uffff",
            "\1\u0122\5\uffff\1\u0120\1\uffff\1\u0123\25\uffff\1\u0121",
            "\1\u0125\10\uffff\1\u0127\15\uffff\1\157\1\u0124\57\uffff\1"+
            "\167\21\uffff\1\u0126\5\uffff\1\163\1\162\14\uffff\1\u0128\42"+
            "\uffff\1\u0129\12\uffff\1\171",
            "\1\u012a",
            "\1\u012c\5\uffff\1\u012b\1\uffff\1\u012d",
            "\1\u0121",
            "\1\u012e",
            "\1\u012f",
            "\1\u0131\5\uffff\1\u0130\1\uffff\1\u0132",
            "\1\u0133\1\uffff\1\u0134",
            "\1\u0135\1\uffff\1\u0136",
            "\1\u0137",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0138",
            "\1\uffff",
            "\1\uffff",
            "\1\u0139",
            "\1\u013a",
            "\1\u013b",
            "\1\u013c",
            "\1\u013d",
            "\1\u013e",
            "\1\u013f",
            "\1\uffff",
            "\1\u0142\5\uffff\1\u0141\1\uffff\1\u0143\25\uffff\1\u0140",
            "\1\u0145\10\uffff\1\u0147\15\uffff\1\u0089\1\u0144\57\uffff"+
            "\1\u0091\21\uffff\1\u0146\5\uffff\1\u008d\1\u008c\14\uffff\1"+
            "\u0148\42\uffff\1\u0149\12\uffff\1\u014a",
            "\1\u014b",
            "\1\u014d\5\uffff\1\u014c\1\uffff\1\u014e",
            "\1\u0140",
            "\1\u014f",
            "\1\u0150",
            "\1\u0152\5\uffff\1\u0151\1\uffff\1\u0153",
            "\1\u0154\1\uffff\1\u0155",
            "\1\u0156\1\uffff\1\u0157",
            "\1\u0158",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0159",
            "\1\uffff",
            "\1\uffff",
            "\1\u015a",
            "\1\u015b",
            "\2\4\4\uffff\1\4\6\uffff\1\4\1\uffff\1\4\5\uffff\2\4\5\uffff"+
            "\3\4\13\uffff\2\4\42\uffff\1\4\10\uffff\1\4\3\uffff\1\4\1\uffff"+
            "\2\4\1\uffff\1\4\5\uffff\2\4\1\uffff\1\4\12\uffff\1\4\7\uffff"+
            "\1\4\1\uffff\1\4\26\uffff\1\4\1\uffff\1\u015c\2\uffff\1\4\2"+
            "\uffff\1\4\4\uffff\3\4\2\uffff\1\4\5\uffff\4\4\2\uffff\2\4\1"+
            "\uffff\2\4\2\uffff\1\4\12\uffff\1\4\2\uffff\1\4",
            "\1\u015d",
            "\1\u015e",
            "\1\u015f",
            "\2\u0163\4\uffff\1\u0165\6\uffff\1\u0169\1\uffff\1\u016d\5\uffff"+
            "\2\u0169\5\uffff\1\u017c\1\u0167\1\u0168\13\uffff\2\u0169\42"+
            "\uffff\1\u016f\10\uffff\1\u0177\3\uffff\1\u0163\1\uffff\2\u0163"+
            "\1\uffff\1\u016c\5\uffff\1\u016b\1\u016a\1\uffff\1\u0169\12"+
            "\uffff\1\u016e\7\uffff\1\u0178\1\uffff\1\u0160\26\uffff\1\u0173"+
            "\1\uffff\1\u0170\2\uffff\1\u0174\2\uffff\1\u0175\4\uffff\1\u0171"+
            "\2\u017e\2\uffff\1\u0179\5\uffff\3\u0172\1\u017d\2\uffff\1\u0161"+
            "\1\u0162\1\uffff\1\u0164\1\u0166\2\uffff\1\u0176\12\uffff\1"+
            "\u017a\2\uffff\1\u017b",
            "",
            "\2\u017f\4\uffff\1\u0181\6\uffff\1\u0185\1\uffff\1\u0189\5\uffff"+
            "\2\u0185\5\uffff\1\u0198\1\u0183\1\u0184\13\uffff\2\u0185\42"+
            "\uffff\1\u018b\10\uffff\1\u0193\3\uffff\1\u017f\1\uffff\2\u017f"+
            "\1\uffff\1\u0188\5\uffff\1\u0187\1\u0186\1\uffff\1\u0185\12"+
            "\uffff\1\u018a\7\uffff\1\u0194\30\uffff\1\u018f\1\uffff\1\u018c"+
            "\2\uffff\1\u0190\2\uffff\1\u0191\4\uffff\1\u018d\4\uffff\1\u0195"+
            "\5\uffff\3\u018e\6\uffff\1\u0180\1\u0182\2\uffff\1\u0192\12"+
            "\uffff\1\u0196\2\uffff\1\u0197",
            "\2\u0199\1\62\1\uffff\1\100\1\uffff\1\u019b\3\uffff\1\105\1"+
            "\u01b3\1\u01b4\1\u019f\1\102\1\u01a3\4\uffff\1\104\2\u019f\1"+
            "\100\3\uffff\1\54\1\u01b2\1\u019d\1\u019e\1\106\3\uffff\1\101"+
            "\1\uffff\1\57\2\uffff\1\u01b7\1\uffff\2\u019f\1\76\2\uffff\1"+
            "\56\4\uffff\1\57\1\uffff\1\57\1\54\5\uffff\1\u01b6\1\u01b7\1"+
            "\61\3\uffff\1\57\1\uffff\1\77\1\112\1\uffff\1\57\1\54\3\uffff"+
            "\1\57\1\u01a5\6\uffff\1\63\1\73\1\u01ad\2\uffff\1\111\1\u0199"+
            "\1\uffff\2\u0199\1\uffff\1\u01a2\1\uffff\1\75\1\uffff\1\103"+
            "\1\uffff\1\u01a1\1\u01a0\1\uffff\1\u019f\1\uffff\1\111\2\uffff"+
            "\1\74\5\uffff\1\u01a4\2\uffff\1\110\1\55\1\u01b5\1\uffff\1\u01b8"+
            "\1\u01ae\5\uffff\1\72\3\uffff\1\107\1\uffff\1\111\14\uffff\1"+
            "\u01a9\1\71\1\u01a6\1\60\1\64\1\u01aa\2\uffff\1\u01ab\1\67\1"+
            "\uffff\1\66\1\uffff\1\u01a7\2\u01b9\1\u01b8\1\60\1\u01af\3\60"+
            "\2\61\3\u01a8\6\uffff\1\u019a\1\u019c\1\uffff\1\70\1\u01ac\12"+
            "\uffff\1\u01b0\2\uffff\1\u01b1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\4\1\62\1\uffff\1\100\1\uffff\1\4\3\uffff\1\105\1\u01b3\1"+
            "\u01b4\1\4\1\102\1\4\4\uffff\1\104\2\4\1\100\3\uffff\1\54\3"+
            "\4\1\106\3\uffff\1\101\1\uffff\1\57\2\uffff\1\u01b7\1\uffff"+
            "\2\4\1\76\2\uffff\1\56\4\uffff\1\57\1\uffff\1\57\1\54\5\uffff"+
            "\1\u01b6\1\u01b7\1\61\3\uffff\1\57\1\uffff\1\77\1\112\1\uffff"+
            "\1\57\1\54\3\uffff\1\57\1\4\6\uffff\1\63\1\73\1\4\2\uffff\1"+
            "\111\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\1\75\1\uffff\1\103"+
            "\1\uffff\2\4\1\uffff\1\4\1\uffff\1\111\2\uffff\1\74\5\uffff"+
            "\1\4\2\uffff\1\110\1\55\1\u01b5\1\uffff\1\u01b8\1\4\1\uffff"+
            "\1\4\3\uffff\1\72\3\uffff\1\107\1\uffff\1\111\14\uffff\1\4\1"+
            "\71\1\4\1\60\1\64\1\4\1\uffff\1\u01ba\1\4\1\67\1\uffff\1\66"+
            "\1\uffff\1\43\2\40\1\u01b8\1\60\1\44\3\60\2\61\4\4\2\uffff\1"+
            "\u01bb\1\u01bc\1\uffff\2\4\1\u01bd\1\70\1\4\12\uffff\1\4\2\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\4\4\uffff\1\4\6\uffff\1\4\1\uffff\1\4\5\uffff\2\4\5\uffff"+
            "\3\4\13\uffff\2\4\42\uffff\1\4\10\uffff\1\4\3\uffff\1\4\1\uffff"+
            "\2\4\1\uffff\1\4\5\uffff\2\4\1\uffff\1\4\12\uffff\1\4\7\uffff"+
            "\1\4\1\uffff\1\4\26\uffff\1\4\1\uffff\1\u01be\2\uffff\1\4\2"+
            "\uffff\1\4\4\uffff\3\4\2\uffff\1\4\5\uffff\4\4\2\uffff\2\4\1"+
            "\uffff\2\4\2\uffff\1\4\12\uffff\1\4\2\uffff\1\4",
            "",
            "",
            "",
            "",
            "\1\62\1\uffff\1\100\5\uffff\1\105\1\u01c2\1\u01c3\1\uffff\1"+
            "\102\5\uffff\1\104\2\uffff\1\100\3\uffff\1\u01c8\3\uffff\1\106"+
            "\3\uffff\1\101\4\uffff\1\u01c6\3\uffff\1\76\2\uffff\1\u01cb"+
            "\7\uffff\1\u01c8\5\uffff\1\u01c5\1\u01c6\6\uffff\1\77\3\uffff"+
            "\1\u01c8\13\uffff\1\63\1\73\13\uffff\1\75\1\uffff\1\103\11\uffff"+
            "\1\74\11\uffff\1\u01ca\1\u01c4\1\uffff\1\u01c7\6\uffff\1\72"+
            "\23\uffff\1\71\1\4\1\uffff\1\64\2\uffff\1\u01bf\1\u01ce\1\u01cd"+
            "\1\uffff\1\u01cc\1\uffff\1\u01c8\2\u01c9\1\u01c7\3\uffff\1\4"+
            "\11\uffff\2\u01c1\3\uffff\1\u01c0\1\70\1\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u01cf\12\uffff\1\4",
            "",
            "",
            "",
            "\1\u00e2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "665:2: pathExpr : ( ( DBLSLASHSi relativePathExpr )=> DBLSLASHSi relativePathExpr | ( SLASHSi relativePathExpr )=> SLASHSi relativePathExpr | SLASHSi | relativePathExpr );";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_122 = input.LA(1);

                         
                        int index117_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_122);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA117_190 = input.LA(1);

                         
                        int index117_190 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA117_190==COLONSi) ) {s = 447;}

                        else if ( (LA117_190==LBRACKSi) && (synpred3())) {s = 448;}

                        else if ( ((LA117_190>=DBLSLASHSi && LA117_190<=SLASHSi)) && (synpred3())) {s = 449;}

                        else if ( (LA117_190==CAST) && (synpred3())) {s = 450;}

                        else if ( (LA117_190==CASTABLE) && (synpred3())) {s = 451;}

                        else if ( (LA117_190==TREAT) && (synpred3())) {s = 452;}

                        else if ( (LA117_190==INSTANCE) && (synpred3())) {s = 453;}

                        else if ( (LA117_190==EXCEPT||LA117_190==INTERSECT) && (synpred3())) {s = 454;}

                        else if ( (LA117_190==UNION||LA117_190==PIPESi) && (synpred3())) {s = 455;}

                        else if ( (LA117_190==DIV||LA117_190==IDIV||LA117_190==MOD||LA117_190==STARSi) && (synpred3())) {s = 456;}

                        else if ( ((LA117_190>=PLUSSi && LA117_190<=MINUSSi)) && (synpred3())) {s = 457;}

                        else if ( (LA117_190==TO) && (synpred3())) {s = 458;}

                        else if ( (LA117_190==FTCONTAINS) && (synpred3())) {s = 459;}

                        else if ( (LA117_190==AND) && (synpred3())) {s = 50;}

                        else if ( (LA117_190==OR) && (synpred3())) {s = 51;}

                        else if ( (LA117_190==COMMASi) && (synpred3())) {s = 52;}

                        else if ( (LA117_190==EOF) && (synpred3())) {s = 53;}

                        else if ( (LA117_190==RBRACSi) && (synpred3())) {s = 460;}

                        else if ( (LA117_190==RPARSi) && (synpred3())) {s = 461;}

                        else if ( (LA117_190==RBRACKSi) && (synpred3())) {s = 56;}

                        else if ( (LA117_190==SEMICOLONSi) && (synpred3())) {s = 57;}

                        else if ( (LA117_190==WHERE) && (synpred3())) {s = 58;}

                        else if ( (LA117_190==ORDER) && (synpred3())) {s = 59;}

                        else if ( (LA117_190==STABLE) && (synpred3())) {s = 60;}

                        else if ( (LA117_190==RETURN) && (synpred3())) {s = 61;}

                        else if ( (LA117_190==FOR) && (synpred3())) {s = 62;}

                        else if ( (LA117_190==LET) && (synpred3())) {s = 63;}

                        else if ( (LA117_190==ASCENDING||LA117_190==DESCENDING) && (synpred3())) {s = 64;}

                        else if ( (LA117_190==EMPTY) && (synpred3())) {s = 65;}

                        else if ( (LA117_190==COLLATION) && (synpred3())) {s = 66;}

                        else if ( (LA117_190==SATISFIES) && (synpred3())) {s = 67;}

                        else if ( (LA117_190==DEFAULT) && (synpred3())) {s = 68;}

                        else if ( (LA117_190==CASE) && (synpred3())) {s = 69;}

                        else if ( (LA117_190==ELSE) && (synpred3())) {s = 70;}

                        else if ( (LA117_190==NCName||LA117_190==GTSi||LA117_190==RSELFTERMSi) ) {s = 4;}

                        else if ( (LA117_190==LPARSi) && (synpred3())) {s = 462;}

                         
                        input.seek(index117_190);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA117_148 = input.LA(1);

                         
                        int index117_148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_148);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA117_75 = input.LA(1);

                         
                        int index117_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA117_75==COLONSi) ) {s = 221;}

                        else if ( (LA117_75==EOF||LA117_75==AND||LA117_75==ASCENDING||(LA117_75>=CASE && LA117_75<=CASTABLE)||LA117_75==COLLATION||LA117_75==DEFAULT||LA117_75==DESCENDING||LA117_75==DIV||LA117_75==ELSE||LA117_75==EMPTY||LA117_75==EXCEPT||LA117_75==FOR||LA117_75==FTCONTAINS||LA117_75==IDIV||(LA117_75>=INSTANCE && LA117_75<=INTERSECT)||LA117_75==LET||LA117_75==MOD||(LA117_75>=OR && LA117_75<=ORDER)||LA117_75==RETURN||LA117_75==SATISFIES||LA117_75==STABLE||(LA117_75>=TO && LA117_75<=TREAT)||LA117_75==UNION||LA117_75==WHERE||LA117_75==SEMICOLONSi||LA117_75==COMMASi||(LA117_75>=LPARSi && LA117_75<=RPARSi)||LA117_75==RBRACSi||(LA117_75>=STARSi && LA117_75<=PIPESi)||(LA117_75>=DBLSLASHSi && LA117_75<=SLASHSi)||(LA117_75>=LBRACKSi && LA117_75<=RBRACKSi)) ) {s = 4;}

                        else if ( (LA117_75==NCName) && (synpred3())) {s = 222;}

                        else if ( (LA117_75==RSELFTERMSi) && (synpred3())) {s = 223;}

                        else if ( (LA117_75==GTSi) && (synpred3())) {s = 224;}

                         
                        input.seek(index117_75);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA117_177 = input.LA(1);

                         
                        int index117_177 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA117_177==COLONSi) && (synpred3())) {s = 442;}

                        else if ( ((LA117_177>=PLUSSi && LA117_177<=MINUSSi)) ) {s = 32;}

                        else if ( ((LA117_177>=ANCESTOR && LA117_177<=ANCESTOR_OR_SELF)||LA117_177==ATTRIBUTE||LA117_177==CHILD||LA117_177==COMMENT||(LA117_177>=DESCENDANT && LA117_177<=DESCENDANT_OR_SELF)||(LA117_177>=DOCUMENT && LA117_177<=ELEMENT)||(LA117_177>=FOLLOWING && LA117_177<=FOLLOWING_SIBLING)||LA117_177==NODE||LA117_177==ORDERED||LA117_177==PARENT||(LA117_177>=PRECEDING && LA117_177<=PRECEDING_SIBLING)||LA117_177==PROCESSING_INSTRUCTION||(LA117_177>=SCHEMAATTRIBUTE && LA117_177<=SCHEMAELEMENT)||LA117_177==SELF||LA117_177==TEXT||LA117_177==UNORDERED||LA117_177==VALIDATE||LA117_177==StringLiteral||LA117_177==NCName||LA117_177==DOLLARSi||LA117_177==LPARSi||(LA117_177>=IntegerLiteral && LA117_177<=LPRAGSi)||(LA117_177>=DOTDOTSi && LA117_177<=ATSi)||LA117_177==DOTSi||LA117_177==LCOMMENTSi||LA117_177==LPISi) ) {s = 4;}

                        else if ( (LA117_177==DBLSLASHSi) ) {s = 443;}

                        else if ( (LA117_177==SLASHSi) ) {s = 444;}

                        else if ( (LA117_177==STARSi) ) {s = 35;}

                        else if ( (LA117_177==LTSi) ) {s = 36;}

                        else if ( (LA117_177==LBRACKSi) && (synpred3())) {s = 445;}

                        else if ( (LA117_177==CAST) && (synpred3())) {s = 435;}

                        else if ( (LA117_177==CASTABLE) && (synpred3())) {s = 436;}

                        else if ( (LA117_177==TREAT) && (synpred3())) {s = 437;}

                        else if ( (LA117_177==INSTANCE) && (synpred3())) {s = 438;}

                        else if ( (LA117_177==EXCEPT||LA117_177==INTERSECT) && (synpred3())) {s = 439;}

                        else if ( (LA117_177==UNION||LA117_177==PIPESi) && (synpred3())) {s = 440;}

                        else if ( (LA117_177==TO) && (synpred3())) {s = 45;}

                        else if ( (LA117_177==FTCONTAINS) && (synpred3())) {s = 46;}

                        else if ( (LA117_177==EQ||LA117_177==GE||LA117_177==GT||LA117_177==LE||LA117_177==LT||LA117_177==NE) && (synpred3())) {s = 47;}

                        else if ( (LA117_177==EQSi||LA117_177==NEQSi||(LA117_177>=LTOREQSi && LA117_177<=GTOREQSi)) && (synpred3())) {s = 48;}

                        else if ( (LA117_177==IS||(LA117_177>=NODEBEFORESi && LA117_177<=NODEAFTERSi)) && (synpred3())) {s = 49;}

                        else if ( (LA117_177==AND) && (synpred3())) {s = 50;}

                        else if ( (LA117_177==OR) && (synpred3())) {s = 51;}

                        else if ( (LA117_177==COMMASi) && (synpred3())) {s = 52;}

                        else if ( (LA117_177==EOF) && (synpred3())) {s = 53;}

                        else if ( (LA117_177==RBRACSi) && (synpred3())) {s = 54;}

                        else if ( (LA117_177==RPARSi) && (synpred3())) {s = 55;}

                        else if ( (LA117_177==RBRACKSi) && (synpred3())) {s = 56;}

                        else if ( (LA117_177==SEMICOLONSi) && (synpred3())) {s = 57;}

                        else if ( (LA117_177==WHERE) && (synpred3())) {s = 58;}

                        else if ( (LA117_177==ORDER) && (synpred3())) {s = 59;}

                        else if ( (LA117_177==STABLE) && (synpred3())) {s = 60;}

                        else if ( (LA117_177==RETURN) && (synpred3())) {s = 61;}

                        else if ( (LA117_177==FOR) && (synpred3())) {s = 62;}

                        else if ( (LA117_177==LET) && (synpred3())) {s = 63;}

                        else if ( (LA117_177==ASCENDING||LA117_177==DESCENDING) && (synpred3())) {s = 64;}

                        else if ( (LA117_177==EMPTY) && (synpred3())) {s = 65;}

                        else if ( (LA117_177==COLLATION) && (synpred3())) {s = 66;}

                        else if ( (LA117_177==SATISFIES) && (synpred3())) {s = 67;}

                        else if ( (LA117_177==DEFAULT) && (synpred3())) {s = 68;}

                        else if ( (LA117_177==CASE) && (synpred3())) {s = 69;}

                        else if ( (LA117_177==ELSE) && (synpred3())) {s = 70;}

                        else if ( (LA117_177==WITHOUT) && (synpred3())) {s = 71;}

                        else if ( (LA117_177==TIMES) && (synpred3())) {s = 72;}

                        else if ( (LA117_177==PARAGRAPHS||LA117_177==SENTENCES||LA117_177==WORDS) && (synpred3())) {s = 73;}

                        else if ( (LA117_177==LEVELS) && (synpred3())) {s = 74;}

                        else if ( (LA117_177==DIV||LA117_177==IDIV||LA117_177==MOD) && (synpred3())) {s = 44;}

                         
                        input.seek(index117_177);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA117_151 = input.LA(1);

                         
                        int index117_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_151);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA117_147 = input.LA(1);

                         
                        int index117_147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_147);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA117_95 = input.LA(1);

                         
                        int index117_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_95);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA117_93 = input.LA(1);

                         
                        int index117_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_93);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA117_80 = input.LA(1);

                         
                        int index117_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_80);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA117_5==COLONSi) && (synpred3())) {s = 31;}

                        else if ( ((LA117_5>=PLUSSi && LA117_5<=MINUSSi)) ) {s = 32;}

                        else if ( ((LA117_5>=ANCESTOR && LA117_5<=ANCESTOR_OR_SELF)||LA117_5==ATTRIBUTE||LA117_5==CHILD||LA117_5==COMMENT||(LA117_5>=DESCENDANT && LA117_5<=DESCENDANT_OR_SELF)||(LA117_5>=DOCUMENT && LA117_5<=ELEMENT)||(LA117_5>=FOLLOWING && LA117_5<=FOLLOWING_SIBLING)||LA117_5==NODE||LA117_5==ORDERED||LA117_5==PARENT||(LA117_5>=PRECEDING && LA117_5<=PRECEDING_SIBLING)||LA117_5==PROCESSING_INSTRUCTION||(LA117_5>=SCHEMAATTRIBUTE && LA117_5<=SCHEMAELEMENT)||LA117_5==SELF||LA117_5==TEXT||LA117_5==UNORDERED||LA117_5==VALIDATE||LA117_5==StringLiteral||LA117_5==NCName||LA117_5==DOLLARSi||LA117_5==LPARSi||(LA117_5>=IntegerLiteral && LA117_5<=LPRAGSi)||(LA117_5>=DOTDOTSi && LA117_5<=ATSi)||LA117_5==DOTSi||LA117_5==LCOMMENTSi||LA117_5==LPISi) ) {s = 4;}

                        else if ( (LA117_5==DBLSLASHSi) ) {s = 33;}

                        else if ( (LA117_5==SLASHSi) ) {s = 34;}

                        else if ( (LA117_5==STARSi) ) {s = 35;}

                        else if ( (LA117_5==LTSi) ) {s = 36;}

                        else if ( (LA117_5==LBRACKSi) && (synpred3())) {s = 37;}

                        else if ( (LA117_5==CAST) && (synpred3())) {s = 38;}

                        else if ( (LA117_5==CASTABLE) && (synpred3())) {s = 39;}

                        else if ( (LA117_5==TREAT) && (synpred3())) {s = 40;}

                        else if ( (LA117_5==INSTANCE) && (synpred3())) {s = 41;}

                        else if ( (LA117_5==EXCEPT||LA117_5==INTERSECT) && (synpred3())) {s = 42;}

                        else if ( (LA117_5==UNION||LA117_5==PIPESi) && (synpred3())) {s = 43;}

                        else if ( (LA117_5==DIV||LA117_5==IDIV||LA117_5==MOD) && (synpred3())) {s = 44;}

                        else if ( (LA117_5==TO) && (synpred3())) {s = 45;}

                        else if ( (LA117_5==FTCONTAINS) && (synpred3())) {s = 46;}

                        else if ( (LA117_5==EQ||LA117_5==GE||LA117_5==GT||LA117_5==LE||LA117_5==LT||LA117_5==NE) && (synpred3())) {s = 47;}

                        else if ( (LA117_5==EQSi||LA117_5==NEQSi||(LA117_5>=LTOREQSi && LA117_5<=GTOREQSi)) && (synpred3())) {s = 48;}

                        else if ( (LA117_5==IS||(LA117_5>=NODEBEFORESi && LA117_5<=NODEAFTERSi)) && (synpred3())) {s = 49;}

                        else if ( (LA117_5==AND) && (synpred3())) {s = 50;}

                        else if ( (LA117_5==OR) && (synpred3())) {s = 51;}

                        else if ( (LA117_5==COMMASi) && (synpred3())) {s = 52;}

                        else if ( (LA117_5==EOF) && (synpred3())) {s = 53;}

                        else if ( (LA117_5==RBRACSi) && (synpred3())) {s = 54;}

                        else if ( (LA117_5==RPARSi) && (synpred3())) {s = 55;}

                        else if ( (LA117_5==RBRACKSi) && (synpred3())) {s = 56;}

                        else if ( (LA117_5==SEMICOLONSi) && (synpred3())) {s = 57;}

                        else if ( (LA117_5==WHERE) && (synpred3())) {s = 58;}

                        else if ( (LA117_5==ORDER) && (synpred3())) {s = 59;}

                        else if ( (LA117_5==STABLE) && (synpred3())) {s = 60;}

                        else if ( (LA117_5==RETURN) && (synpred3())) {s = 61;}

                        else if ( (LA117_5==FOR) && (synpred3())) {s = 62;}

                        else if ( (LA117_5==LET) && (synpred3())) {s = 63;}

                        else if ( (LA117_5==ASCENDING||LA117_5==DESCENDING) && (synpred3())) {s = 64;}

                        else if ( (LA117_5==EMPTY) && (synpred3())) {s = 65;}

                        else if ( (LA117_5==COLLATION) && (synpred3())) {s = 66;}

                        else if ( (LA117_5==SATISFIES) && (synpred3())) {s = 67;}

                        else if ( (LA117_5==DEFAULT) && (synpred3())) {s = 68;}

                        else if ( (LA117_5==CASE) && (synpred3())) {s = 69;}

                        else if ( (LA117_5==ELSE) && (synpred3())) {s = 70;}

                        else if ( (LA117_5==WITHOUT) && (synpred3())) {s = 71;}

                        else if ( (LA117_5==TIMES) && (synpred3())) {s = 72;}

                        else if ( (LA117_5==PARAGRAPHS||LA117_5==SENTENCES||LA117_5==WORDS) && (synpred3())) {s = 73;}

                        else if ( (LA117_5==LEVELS) && (synpred3())) {s = 74;}

                         
                        input.seek(index117_5);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA117_125 = input.LA(1);

                         
                        int index117_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_125);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA117_78 = input.LA(1);

                         
                        int index117_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_78);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA117_0 = input.LA(1);

                         
                        int index117_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA117_0==DBLSLASHSi) && (synpred2())) {s = 1;}

                        else if ( (LA117_0==SLASHSi) ) {s = 2;}

                        else if ( ((LA117_0>=ANCESTOR && LA117_0<=ANCESTOR_OR_SELF)||LA117_0==ATTRIBUTE||LA117_0==CHILD||LA117_0==COMMENT||(LA117_0>=DESCENDANT && LA117_0<=DESCENDANT_OR_SELF)||(LA117_0>=DOCUMENT && LA117_0<=ELEMENT)||(LA117_0>=FOLLOWING && LA117_0<=FOLLOWING_SIBLING)||LA117_0==NODE||LA117_0==ORDERED||LA117_0==PARENT||(LA117_0>=PRECEDING && LA117_0<=PRECEDING_SIBLING)||LA117_0==PROCESSING_INSTRUCTION||(LA117_0>=SCHEMAATTRIBUTE && LA117_0<=SCHEMAELEMENT)||LA117_0==SELF||LA117_0==TEXT||LA117_0==UNORDERED||LA117_0==StringLiteral||LA117_0==NCName||LA117_0==DOLLARSi||LA117_0==LPARSi||LA117_0==STARSi||LA117_0==LTSi||(LA117_0>=IntegerLiteral && LA117_0<=DoubleLiteral)||(LA117_0>=DOTDOTSi && LA117_0<=ATSi)||LA117_0==DOTSi||LA117_0==LCOMMENTSi||LA117_0==LPISi) ) {s = 3;}

                         
                        input.seek(index117_0);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA117_149 = input.LA(1);

                         
                        int index117_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_149);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA117_123 = input.LA(1);

                         
                        int index117_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_123);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA117_92 = input.LA(1);

                         
                        int index117_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_92);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA117_134 = input.LA(1);

                         
                        int index117_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_134);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA117_108 = input.LA(1);

                         
                        int index117_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_108);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA117_98 = input.LA(1);

                         
                        int index117_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_98);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA117_2==EOF||LA117_2==AND||LA117_2==ASCENDING||(LA117_2>=CASE && LA117_2<=CASTABLE)||LA117_2==COLLATION||LA117_2==DEFAULT||LA117_2==DESCENDING||LA117_2==DIV||LA117_2==ELSE||LA117_2==EMPTY||LA117_2==EQ||LA117_2==EXCEPT||LA117_2==FOR||LA117_2==FTCONTAINS||LA117_2==GE||(LA117_2>=GT && LA117_2<=IDIV)||(LA117_2>=INSTANCE && LA117_2<=IS)||LA117_2==LE||(LA117_2>=LET && LA117_2<=LEVELS)||(LA117_2>=LT && LA117_2<=MOD)||LA117_2==NE||(LA117_2>=OR && LA117_2<=ORDER)||LA117_2==PARAGRAPHS||LA117_2==RETURN||LA117_2==SATISFIES||LA117_2==SENTENCES||LA117_2==STABLE||(LA117_2>=TIMES && LA117_2<=TREAT)||LA117_2==UNION||LA117_2==WHERE||LA117_2==WITHOUT||LA117_2==WORDS||LA117_2==SEMICOLONSi||(LA117_2>=EQSi && LA117_2<=COMMASi)||LA117_2==RPARSi||LA117_2==RBRACSi||(LA117_2>=PLUSSi && LA117_2<=NEQSi)||(LA117_2>=LTOREQSi && LA117_2<=NODEAFTERSi)||LA117_2==RBRACKSi) ) {s = 4;}

                        else if ( (LA117_2==STARSi) ) {s = 5;}

                        else if ( (LA117_2==LTSi) ) {s = 6;}

                        else if ( ((LA117_2>=ANCESTOR && LA117_2<=ANCESTOR_OR_SELF)||LA117_2==PARENT||(LA117_2>=PRECEDING && LA117_2<=PRECEDING_SIBLING)) && (synpred3())) {s = 7;}

                        else if ( (LA117_2==DOTDOTSi) && (synpred3())) {s = 8;}

                        else if ( (LA117_2==ATTRIBUTE) && (synpred3())) {s = 9;}

                        else if ( (LA117_2==ATSi) && (synpred3())) {s = 10;}

                        else if ( (LA117_2==DOCUMENT_NODE) && (synpred3())) {s = 11;}

                        else if ( (LA117_2==ELEMENT) && (synpred3())) {s = 12;}

                        else if ( (LA117_2==CHILD||(LA117_2>=DESCENDANT && LA117_2<=DESCENDANT_OR_SELF)||(LA117_2>=FOLLOWING && LA117_2<=FOLLOWING_SIBLING)||LA117_2==SELF) && (synpred3())) {s = 13;}

                        else if ( (LA117_2==SCHEMAELEMENT) && (synpred3())) {s = 14;}

                        else if ( (LA117_2==SCHEMAATTRIBUTE) && (synpred3())) {s = 15;}

                        else if ( (LA117_2==PROCESSING_INSTRUCTION) && (synpred3())) {s = 16;}

                        else if ( (LA117_2==COMMENT) && (synpred3())) {s = 17;}

                        else if ( (LA117_2==TEXT) && (synpred3())) {s = 18;}

                        else if ( (LA117_2==NODE) && (synpred3())) {s = 19;}

                        else if ( (LA117_2==NCName) && (synpred3())) {s = 20;}

                        else if ( ((LA117_2>=IntegerLiteral && LA117_2<=DoubleLiteral)) && (synpred3())) {s = 21;}

                        else if ( (LA117_2==StringLiteral) && (synpred3())) {s = 22;}

                        else if ( (LA117_2==DOLLARSi) && (synpred3())) {s = 23;}

                        else if ( (LA117_2==LPARSi) && (synpred3())) {s = 24;}

                        else if ( (LA117_2==DOTSi) && (synpred3())) {s = 25;}

                        else if ( (LA117_2==ORDERED) && (synpred3())) {s = 26;}

                        else if ( (LA117_2==UNORDERED) && (synpred3())) {s = 27;}

                        else if ( (LA117_2==LCOMMENTSi) && (synpred3())) {s = 28;}

                        else if ( (LA117_2==LPISi) && (synpred3())) {s = 29;}

                        else if ( (LA117_2==DOCUMENT) && (synpred3())) {s = 30;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA117_152 = input.LA(1);

                         
                        int index117_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_152);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA117_121 = input.LA(1);

                         
                        int index117_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_121);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA117_126 = input.LA(1);

                         
                        int index117_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_126);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA117_35 = input.LA(1);

                         
                        int index117_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA117_35==EOF||LA117_35==AND||LA117_35==ASCENDING||(LA117_35>=CASE && LA117_35<=CASTABLE)||LA117_35==COLLATION||LA117_35==DEFAULT||LA117_35==DESCENDING||LA117_35==DIV||LA117_35==ELSE||LA117_35==EMPTY||LA117_35==EQ||LA117_35==EXCEPT||LA117_35==FOR||LA117_35==FTCONTAINS||LA117_35==GE||(LA117_35>=GT && LA117_35<=IDIV)||(LA117_35>=INSTANCE && LA117_35<=IS)||LA117_35==LE||(LA117_35>=LET && LA117_35<=LEVELS)||(LA117_35>=LT && LA117_35<=MOD)||LA117_35==NE||(LA117_35>=OR && LA117_35<=ORDER)||LA117_35==PARAGRAPHS||LA117_35==RETURN||LA117_35==SATISFIES||LA117_35==SENTENCES||LA117_35==STABLE||(LA117_35>=TIMES && LA117_35<=TREAT)||LA117_35==UNION||LA117_35==WHERE||LA117_35==WITHOUT||LA117_35==WORDS||LA117_35==SEMICOLONSi||(LA117_35>=EQSi && LA117_35<=COMMASi)||LA117_35==COLONSi||LA117_35==RPARSi||LA117_35==RBRACSi||(LA117_35>=PIPESi && LA117_35<=NEQSi)||(LA117_35>=LTOREQSi && LA117_35<=NODEAFTERSi)||(LA117_35>=LBRACKSi && LA117_35<=RBRACKSi)) ) {s = 4;}

                        else if ( ((LA117_35>=PLUSSi && LA117_35<=MINUSSi)) ) {s = 159;}

                        else if ( (LA117_35==VALIDATE) && (synpred3())) {s = 160;}

                        else if ( (LA117_35==DBLSLASHSi) ) {s = 161;}

                        else if ( (LA117_35==SLASHSi) ) {s = 162;}

                        else if ( ((LA117_35>=ANCESTOR && LA117_35<=ANCESTOR_OR_SELF)||LA117_35==PARENT||(LA117_35>=PRECEDING && LA117_35<=PRECEDING_SIBLING)) && (synpred3())) {s = 163;}

                        else if ( (LA117_35==DOTDOTSi) && (synpred3())) {s = 164;}

                        else if ( (LA117_35==ATTRIBUTE) && (synpred3())) {s = 165;}

                        else if ( (LA117_35==ATSi) && (synpred3())) {s = 166;}

                        else if ( (LA117_35==DOCUMENT_NODE) && (synpred3())) {s = 167;}

                        else if ( (LA117_35==ELEMENT) && (synpred3())) {s = 168;}

                        else if ( (LA117_35==CHILD||(LA117_35>=DESCENDANT && LA117_35<=DESCENDANT_OR_SELF)||(LA117_35>=FOLLOWING && LA117_35<=FOLLOWING_SIBLING)||LA117_35==SELF) && (synpred3())) {s = 169;}

                        else if ( (LA117_35==SCHEMAELEMENT) && (synpred3())) {s = 170;}

                        else if ( (LA117_35==SCHEMAATTRIBUTE) && (synpred3())) {s = 171;}

                        else if ( (LA117_35==PROCESSING_INSTRUCTION) && (synpred3())) {s = 172;}

                        else if ( (LA117_35==COMMENT) && (synpred3())) {s = 173;}

                        else if ( (LA117_35==TEXT) && (synpred3())) {s = 174;}

                        else if ( (LA117_35==NODE) && (synpred3())) {s = 175;}

                        else if ( (LA117_35==NCName) && (synpred3())) {s = 176;}

                        else if ( (LA117_35==STARSi) ) {s = 177;}

                        else if ( ((LA117_35>=IntegerLiteral && LA117_35<=DoubleLiteral)) && (synpred3())) {s = 178;}

                        else if ( (LA117_35==StringLiteral) && (synpred3())) {s = 179;}

                        else if ( (LA117_35==DOLLARSi) && (synpred3())) {s = 180;}

                        else if ( (LA117_35==LPARSi) && (synpred3())) {s = 181;}

                        else if ( (LA117_35==DOTSi) && (synpred3())) {s = 182;}

                        else if ( (LA117_35==ORDERED) && (synpred3())) {s = 183;}

                        else if ( (LA117_35==UNORDERED) && (synpred3())) {s = 184;}

                        else if ( (LA117_35==LTSi) ) {s = 185;}

                        else if ( (LA117_35==LCOMMENTSi) && (synpred3())) {s = 186;}

                        else if ( (LA117_35==LPISi) && (synpred3())) {s = 187;}

                        else if ( (LA117_35==DOCUMENT) && (synpred3())) {s = 188;}

                        else if ( (LA117_35==LPRAGSi) && (synpred3())) {s = 189;}

                         
                        input.seek(index117_35);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA117_97 = input.LA(1);

                         
                        int index117_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_97);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA117_94 = input.LA(1);

                         
                        int index117_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_94);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA117_36 = input.LA(1);

                         
                        int index117_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA117_36==NCName) ) {s = 190;}

                        else if ( ((LA117_36>=PLUSSi && LA117_36<=MINUSSi)) && (synpred3())) {s = 191;}

                        else if ( (LA117_36==VALIDATE) && (synpred3())) {s = 192;}

                        else if ( (LA117_36==DBLSLASHSi) && (synpred3())) {s = 193;}

                        else if ( (LA117_36==SLASHSi) && (synpred3())) {s = 194;}

                        else if ( ((LA117_36>=ANCESTOR && LA117_36<=ANCESTOR_OR_SELF)||LA117_36==PARENT||(LA117_36>=PRECEDING && LA117_36<=PRECEDING_SIBLING)) && (synpred3())) {s = 195;}

                        else if ( (LA117_36==DOTDOTSi) && (synpred3())) {s = 196;}

                        else if ( (LA117_36==ATTRIBUTE) && (synpred3())) {s = 197;}

                        else if ( (LA117_36==ATSi) && (synpred3())) {s = 198;}

                        else if ( (LA117_36==DOCUMENT_NODE) && (synpred3())) {s = 199;}

                        else if ( (LA117_36==ELEMENT) && (synpred3())) {s = 200;}

                        else if ( (LA117_36==CHILD||(LA117_36>=DESCENDANT && LA117_36<=DESCENDANT_OR_SELF)||(LA117_36>=FOLLOWING && LA117_36<=FOLLOWING_SIBLING)||LA117_36==SELF) && (synpred3())) {s = 201;}

                        else if ( (LA117_36==SCHEMAELEMENT) && (synpred3())) {s = 202;}

                        else if ( (LA117_36==SCHEMAATTRIBUTE) && (synpred3())) {s = 203;}

                        else if ( (LA117_36==PROCESSING_INSTRUCTION) && (synpred3())) {s = 204;}

                        else if ( (LA117_36==COMMENT) && (synpred3())) {s = 205;}

                        else if ( (LA117_36==TEXT) && (synpred3())) {s = 206;}

                        else if ( (LA117_36==NODE) && (synpred3())) {s = 207;}

                        else if ( (LA117_36==STARSi) && (synpred3())) {s = 208;}

                        else if ( ((LA117_36>=IntegerLiteral && LA117_36<=DoubleLiteral)) && (synpred3())) {s = 209;}

                        else if ( (LA117_36==StringLiteral) && (synpred3())) {s = 210;}

                        else if ( (LA117_36==DOLLARSi) && (synpred3())) {s = 211;}

                        else if ( (LA117_36==LPARSi) && (synpred3())) {s = 212;}

                        else if ( (LA117_36==DOTSi) && (synpred3())) {s = 213;}

                        else if ( (LA117_36==ORDERED) && (synpred3())) {s = 214;}

                        else if ( (LA117_36==UNORDERED) && (synpred3())) {s = 215;}

                        else if ( (LA117_36==LTSi) && (synpred3())) {s = 216;}

                        else if ( (LA117_36==LCOMMENTSi) && (synpred3())) {s = 217;}

                        else if ( (LA117_36==LPISi) && (synpred3())) {s = 218;}

                        else if ( (LA117_36==DOCUMENT) && (synpred3())) {s = 219;}

                        else if ( (LA117_36==LPRAGSi) && (synpred3())) {s = 220;}

                         
                        input.seek(index117_36);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA117_162 = input.LA(1);

                         
                        int index117_162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA117_162>=ANCESTOR && LA117_162<=ANCESTOR_OR_SELF)||LA117_162==PARENT||(LA117_162>=PRECEDING && LA117_162<=PRECEDING_SIBLING)) ) {s = 409;}

                        else if ( (LA117_162==DOTDOTSi) ) {s = 410;}

                        else if ( (LA117_162==ATTRIBUTE) ) {s = 411;}

                        else if ( (LA117_162==ATSi) ) {s = 412;}

                        else if ( (LA117_162==DOCUMENT_NODE) ) {s = 413;}

                        else if ( (LA117_162==ELEMENT) ) {s = 414;}

                        else if ( (LA117_162==CHILD||(LA117_162>=DESCENDANT && LA117_162<=DESCENDANT_OR_SELF)||(LA117_162>=FOLLOWING && LA117_162<=FOLLOWING_SIBLING)||LA117_162==SELF) ) {s = 415;}

                        else if ( (LA117_162==SCHEMAELEMENT) ) {s = 416;}

                        else if ( (LA117_162==SCHEMAATTRIBUTE) ) {s = 417;}

                        else if ( (LA117_162==PROCESSING_INSTRUCTION) ) {s = 418;}

                        else if ( (LA117_162==COMMENT) ) {s = 419;}

                        else if ( (LA117_162==TEXT) ) {s = 420;}

                        else if ( (LA117_162==NODE) ) {s = 421;}

                        else if ( (LA117_162==NCName) ) {s = 422;}

                        else if ( (LA117_162==STARSi) ) {s = 423;}

                        else if ( ((LA117_162>=IntegerLiteral && LA117_162<=DoubleLiteral)) ) {s = 424;}

                        else if ( (LA117_162==StringLiteral) ) {s = 425;}

                        else if ( (LA117_162==DOLLARSi) ) {s = 426;}

                        else if ( (LA117_162==LPARSi) ) {s = 427;}

                        else if ( (LA117_162==DOTSi) ) {s = 428;}

                        else if ( (LA117_162==ORDERED) ) {s = 429;}

                        else if ( (LA117_162==UNORDERED) ) {s = 430;}

                        else if ( (LA117_162==LTSi) ) {s = 431;}

                        else if ( (LA117_162==LCOMMENTSi) ) {s = 432;}

                        else if ( (LA117_162==LPISi) ) {s = 433;}

                        else if ( (LA117_162==DOCUMENT) ) {s = 434;}

                        else if ( (LA117_162==CAST) && (synpred3())) {s = 435;}

                        else if ( (LA117_162==CASTABLE) && (synpred3())) {s = 436;}

                        else if ( (LA117_162==TREAT) && (synpred3())) {s = 437;}

                        else if ( (LA117_162==INSTANCE) && (synpred3())) {s = 438;}

                        else if ( (LA117_162==EXCEPT||LA117_162==INTERSECT) && (synpred3())) {s = 439;}

                        else if ( (LA117_162==UNION||LA117_162==PIPESi) && (synpred3())) {s = 440;}

                        else if ( ((LA117_162>=PLUSSi && LA117_162<=MINUSSi)) && (synpred3())) {s = 441;}

                        else if ( (LA117_162==TO) && (synpred3())) {s = 45;}

                        else if ( (LA117_162==FTCONTAINS) && (synpred3())) {s = 46;}

                        else if ( (LA117_162==EQ||LA117_162==GE||LA117_162==GT||LA117_162==LE||LA117_162==LT||LA117_162==NE) && (synpred3())) {s = 47;}

                        else if ( (LA117_162==EQSi||LA117_162==NEQSi||(LA117_162>=LTOREQSi && LA117_162<=GTOREQSi)) && (synpred3())) {s = 48;}

                        else if ( (LA117_162==IS||(LA117_162>=NODEBEFORESi && LA117_162<=NODEAFTERSi)) && (synpred3())) {s = 49;}

                        else if ( (LA117_162==AND) && (synpred3())) {s = 50;}

                        else if ( (LA117_162==OR) && (synpred3())) {s = 51;}

                        else if ( (LA117_162==COMMASi) && (synpred3())) {s = 52;}

                        else if ( (LA117_162==EOF) && (synpred3())) {s = 53;}

                        else if ( (LA117_162==RBRACSi) && (synpred3())) {s = 54;}

                        else if ( (LA117_162==RPARSi) && (synpred3())) {s = 55;}

                        else if ( (LA117_162==RBRACKSi) && (synpred3())) {s = 56;}

                        else if ( (LA117_162==SEMICOLONSi) && (synpred3())) {s = 57;}

                        else if ( (LA117_162==WHERE) && (synpred3())) {s = 58;}

                        else if ( (LA117_162==ORDER) && (synpred3())) {s = 59;}

                        else if ( (LA117_162==STABLE) && (synpred3())) {s = 60;}

                        else if ( (LA117_162==RETURN) && (synpred3())) {s = 61;}

                        else if ( (LA117_162==FOR) && (synpred3())) {s = 62;}

                        else if ( (LA117_162==LET) && (synpred3())) {s = 63;}

                        else if ( (LA117_162==ASCENDING||LA117_162==DESCENDING) && (synpred3())) {s = 64;}

                        else if ( (LA117_162==EMPTY) && (synpred3())) {s = 65;}

                        else if ( (LA117_162==COLLATION) && (synpred3())) {s = 66;}

                        else if ( (LA117_162==SATISFIES) && (synpred3())) {s = 67;}

                        else if ( (LA117_162==DEFAULT) && (synpred3())) {s = 68;}

                        else if ( (LA117_162==CASE) && (synpred3())) {s = 69;}

                        else if ( (LA117_162==ELSE) && (synpred3())) {s = 70;}

                        else if ( (LA117_162==WITHOUT) && (synpred3())) {s = 71;}

                        else if ( (LA117_162==TIMES) && (synpred3())) {s = 72;}

                        else if ( (LA117_162==PARAGRAPHS||LA117_162==SENTENCES||LA117_162==WORDS) && (synpred3())) {s = 73;}

                        else if ( (LA117_162==LEVELS) && (synpred3())) {s = 74;}

                        else if ( (LA117_162==DIV||LA117_162==IDIV||LA117_162==MOD) && (synpred3())) {s = 44;}

                         
                        input.seek(index117_162);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA117_146 = input.LA(1);

                         
                        int index117_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_146);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA117_120 = input.LA(1);

                         
                        int index117_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3()) ) {s = 224;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index117_120);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_versionDecl_in_module568 = new BitSet(new long[]{0xC007101C1A2810C0L,0x0408B05A20110800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_libraryModule_in_module572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mainModule_in_module576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_versionDecl605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_VERSION_in_versionDecl607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_StringLiteral_in_versionDecl609 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ENCODING_in_versionDecl612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_StringLiteral_in_versionDecl614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_separator_in_versionDecl618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLONSi_in_separator648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleDecl_in_libraryModule676 = new BitSet(new long[]{0x8000000002000002L});
    public static final BitSet FOLLOW_prolog_in_libraryModule678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_moduleDecl707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleDecl709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_moduleDecl711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_EQSi_in_moduleDecl713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleDecl715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_separator_in_moduleDecl717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_uriLiteral747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prolog_in_mainModule779 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_queryBody_in_mainModule781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_queryBody812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_expr848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_expr851 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_expr853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_defaultNamespaceDecl_in_prolog918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_setter_in_prolog922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_namespaceDecl_in_prolog926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_importStmt_in_prolog930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_separator_in_prolog945 = new BitSet(new long[]{0x8000000002000002L});
    public static final BitSet FOLLOW_varDecl_in_prolog987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_functionDecl_in_prolog991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_optionDecl_in_prolog995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ftOptionDecl_in_prolog999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_separator_in_prolog1013 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_DECLARE_in_defaultNamespaceDecl1046 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultNamespaceDecl1048 = new BitSet(new long[]{0x0200001000000000L});
    public static final BitSet FOLLOW_set_in_defaultNamespaceDecl1050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_defaultNamespaceDecl1058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_defaultNamespaceDecl1060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boundarySpaceDecl_in_setter1092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defaultCollationDecl_in_setter1107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseURIDecl_in_setter1122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructionDecl_in_setter1137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderingModeDecl_in_setter1152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emptyOrderDecl_in_setter1167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copyNamespacesDecl_in_setter1182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_boundarySpaceDecl1203 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_BOUNDARYSPACE_in_boundarySpaceDecl1205 = new BitSet(new long[]{0x0000000000000000L,0x0200002000000000L});
    public static final BitSet FOLLOW_set_in_boundarySpaceDecl1207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_defaultCollationDecl1231 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultCollationDecl1233 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLLATION_in_defaultCollationDecl1235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_defaultCollationDecl1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_baseURIDecl1264 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_BASE_URI_in_baseURIDecl1266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_baseURIDecl1268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_constructionDecl1290 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_constructionDecl1292 = new BitSet(new long[]{0x0000000000000000L,0x0200002000000000L});
    public static final BitSet FOLLOW_set_in_constructionDecl1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_orderingModeDecl1322 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ORDERING_in_orderingModeDecl1324 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_orderingModeDecl1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_emptyOrderDecl1356 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_emptyOrderDecl1358 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ORDER_in_emptyOrderDecl1360 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EMPTY_in_emptyOrderDecl1362 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_in_emptyOrderDecl1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_copyNamespacesDecl1390 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl1392 = new BitSet(new long[]{0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_preserveMode_in_copyNamespacesDecl1394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_copyNamespacesDecl1396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200002L});
    public static final BitSet FOLLOW_inheritMode_in_copyNamespacesDecl1398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_preserveMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_inheritMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_namespaceDecl1489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespaceDecl1491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_namespaceDecl1493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_EQSi_in_namespaceDecl1495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_namespaceDecl1497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaImport_in_importStmt1525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleImport_in_importStmt1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_schemaImport1555 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_schemaImport1557 = new BitSet(new long[]{0x0000000004000000L,0x0000000000040000L,0x0000000008000000L});
    public static final BitSet FOLLOW_schemaPrefix_in_schemaImport1559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1562 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AT_in_schemaImport1565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_schemaImport1570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix1604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_schemaPrefix1606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_EQSi_in_schemaPrefix1608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_schemaPrefix1614 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_schemaPrefix1616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_moduleImport1645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_MODULE_in_moduleImport1647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000008000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleImport1650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_moduleImport1652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_EQSi_in_moduleImport1654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1658 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AT_in_moduleImport1661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1663 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_moduleImport1666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1668 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_DECLARE_in_varDecl1704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VARIABLE_in_varDecl1706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varDecl1708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_varDecl1710 = new BitSet(new long[]{0x0000800000000200L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_varDecl1712 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGNSi_in_varDecl1717 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_varDecl1719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_varDecl1724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCName_in_qName1745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COLONSi_in_qName1750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_qName1754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_typeDeclaration1781 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000020000000L});
    public static final BitSet FOLLOW_sequenceType_in_typeDeclaration1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_functionDecl1812 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDecl1814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_functionDecl1816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_functionDecl1818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001100000000L});
    public static final BitSet FOLLOW_paramList_in_functionDecl1820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_functionDecl1823 = new BitSet(new long[]{0x0000800000000200L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_AS_in_functionDecl1838 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000020000000L});
    public static final BitSet FOLLOW_sequenceType_in_functionDecl1840 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_enclosedExpr_in_functionDecl1845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_functionDecl1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_paramList1879 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_paramList1882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_param_in_paramList1884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_param1920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_param1922 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_typeDeclaration_in_param1924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_enclosedExpr1969 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_enclosedExpr1984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_enclosedExpr1999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_optionDecl2046 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_OPTION_in_optionDecl2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_optionDecl2050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_StringLiteral_in_optionDecl2052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_ftOptionDecl2078 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_FTOPTION_in_ftOptionDecl2080 = new BitSet(new long[]{0x0000000040010000L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_ftMatchOptions_in_ftOptionDecl2082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftMatchOption_in_ftMatchOptions2106 = new BitSet(new long[]{0x0000000040010002L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_itemType_in_sequenceType2158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_sequenceType2160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_sequenceType2174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_sequenceType2188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_sequenceType2190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_sequenceType2192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_itemType2234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_itemType2239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_itemType2241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_itemType2243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_itemType2248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_documentTest_in_kindTest2280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementTest_in_kindTest2320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeTest_in_kindTest2360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaElementTest_in_kindTest2400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaAttributeTest_in_kindTest2440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_piTest_in_kindTest2480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commentTest_in_kindTest2520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_textTest_in_kindTest2560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anyKindTest_in_kindTest2600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_documentTest2628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_documentTest2630 = new BitSet(new long[]{0x0000001000000000L,0x0000200000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_elementTest_in_documentTest2633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_schemaElementTest_in_documentTest2637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_documentTest2641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_elementTest2669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_elementTest2671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000011020000000L});
    public static final BitSet FOLLOW_elementNameOrWildcard_in_elementTest2674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_COMMASi_in_elementTest2677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_typeName_in_elementTest2679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_QUESTIONSi_in_elementTest2681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_elementTest2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementNameOrWildcard2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_elementNameOrWildcard2749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_elementName2781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_typeName2815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMAELEMENT_in_schemaElementTest2840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_schemaElementTest2842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_elementDeclaration_in_schemaElementTest2844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_schemaElementTest2846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementDeclaration2870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_attributeTest2902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_attributeTest2904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000011020000000L});
    public static final BitSet FOLLOW_attribNameOrWildcard_in_attributeTest2907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_COMMASi_in_attributeTest2910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_typeName_in_attributeTest2912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_attributeTest2918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attribNameOrWildcard2939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_attribNameOrWildcard2943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_attributeName2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMAATTRIBUTE_in_schemaAttributeTest2997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_schemaAttributeTest2999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_attributeDeclaration_in_schemaAttributeTest3001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_schemaAttributeTest3003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attributeDeclaration3024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_piTest3059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_piTest3061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001028000000L});
    public static final BitSet FOLLOW_set_in_piTest3063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_piTest3072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_commentTest3101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_commentTest3103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_commentTest3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_textTest3137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_textTest3139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_textTest3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_anyKindTest3170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_anyKindTest3172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_anyKindTest3174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_occurrenceIndicator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fLWORExpr_in_exprSingle3234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantifiedExpr_in_exprSingle3272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeswitchExpr_in_exprSingle3310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifExpr_in_exprSingle3348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpr_in_exprSingle3386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forClause_in_fLWORExpr3451 = new BitSet(new long[]{0x0004000000000000L,0x0010010010000800L,0x0000000000000100L});
    public static final BitSet FOLLOW_letClause_in_fLWORExpr3455 = new BitSet(new long[]{0x0004000000000000L,0x0010010010000800L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_fLWORExpr3459 = new BitSet(new long[]{0x0000000000000000L,0x0010010010000000L});
    public static final BitSet FOLLOW_orderByClause_in_fLWORExpr3462 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RETURN_in_fLWORExpr3465 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_fLWORExpr3467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forClause3499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_forClauseTupletDef_in_forClause3501 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_forClause3504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_forClauseTupletDef_in_forClause3506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_forClauseTupletDef3605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_forClauseTupletDef3607 = new BitSet(new long[]{0x0000000000000A00L,0x0000400000000001L});
    public static final BitSet FOLLOW_typeDeclaration_in_forClauseTupletDef3609 = new BitSet(new long[]{0x0000000000000800L,0x0000400000000001L});
    public static final BitSet FOLLOW_positionalVar_in_forClauseTupletDef3612 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000001L});
    public static final BitSet FOLLOW_ftScoreVar_in_forClauseTupletDef3615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IN_in_forClauseTupletDef3618 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_forClauseTupletDef3620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_varName3646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_positionalVar3677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_positionalVar3679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_positionalVar3681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCORE_in_ftScoreVar3712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_ftScoreVar3714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_ftScoreVar3716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_letClause3766 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_varBinding_in_letClause3768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_letClause3771 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_varBinding_in_letClause3773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varBinding3849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_varBinding3853 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_varBinding3855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SCORE_in_varBinding3860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varBinding3862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_varBinding3866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_ASSIGNSi_in_varBinding3882 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_varBinding3884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_whereClause3947 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_whereClause3949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause4036 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_BY_in_orderByClause4038 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_STABLE_in_orderByClause4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause4044 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_BY_in_orderByClause4046 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_orderSpecList_in_orderByClause4049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList4139 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_orderSpecList4142 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList4144 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_exprSingle_in_orderSpec4235 = new BitSet(new long[]{0x0000020020100402L});
    public static final BitSet FOLLOW_orderModifier_in_orderSpec4237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_orderModifier4266 = new BitSet(new long[]{0x0000020000100002L});
    public static final BitSet FOLLOW_EMPTY_in_orderModifier4276 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_in_orderModifier4278 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_COLLATION_in_orderModifier4289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_orderModifier4291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_quantifiedExpr4329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EVERY_in_quantifiedExpr4333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4336 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COMMASi_in_quantifiedExpr4351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4353 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SATISFIES_in_quantifiedExpr4357 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExpr4359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_quantifiedExprTupleDef4450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_quantifiedExprTupleDef4452 = new BitSet(new long[]{0x4007101C182812C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_typeDeclaration_in_quantifiedExprTupleDef4454 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExprTupleDef4457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_typeswitchExpr4543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_typeswitchExpr4545 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_typeswitchExpr4547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_typeswitchExpr4549 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_caseClause_in_typeswitchExpr4551 = new BitSet(new long[]{0x0000000004010000L});
    public static final BitSet FOLLOW_DEFAULT_in_typeswitchExpr4567 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_typeswitchExpr4570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_typeswitchExpr4572 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RETURN_in_typeswitchExpr4576 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_typeswitchExpr4578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseClause4674 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000120000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_caseClause4677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_caseClause4679 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_caseClause4681 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000020000000L});
    public static final BitSet FOLLOW_sequenceType_in_caseClause4685 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RETURN_in_caseClause4687 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_caseClause4689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifExpr4795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_ifExpr4797 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_ifExpr4799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_ifExpr4801 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_THEN_in_ifExpr4803 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr4805 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_ELSE_in_ifExpr4807 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr4809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpr_in_orExpr4911 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_OR_in_orExpr4915 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_andExpr_in_orExpr4918 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr4953 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_AND_in_andExpr4957 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr4960 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr4994 = new BitSet(new long[]{0x1400080000000002L,0x0000000000084220L,0x0007F00040000000L});
    public static final BitSet FOLLOW_valueComp_in_comparisonExpr4999 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_generalComp_in_comparisonExpr5003 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_nodeComp_in_comparisonExpr5007 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr5010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeExpr_in_ftContainsExpr5039 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_FTCONTAINS_in_ftContainsExpr5043 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0078002808000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftContainsExpr5046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_ftIgnoreOption_in_ftContainsExpr5048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr5084 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_TO_in_rangeExpr5088 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr5091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr5122 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_set_in_additiveExpr5126 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr5135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr5161 = new BitSet(new long[]{0x2000000200000002L,0x0000000000008000L,0x0000010000000000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpr5165 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr5182 = new BitSet(new long[]{0x2000000200000002L,0x0000000000008000L,0x0000010000000000L});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr5218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000002L});
    public static final BitSet FOLLOW_set_in_unionExpr5222 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr5231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000002L});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr5258 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_set_in_intersectExceptExpr5262 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr5271 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_treatExpr_in_instanceofExpr5304 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_INSTANCE_in_instanceofExpr5308 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_OF_in_instanceofExpr5310 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000020000000L});
    public static final BitSet FOLLOW_sequenceType_in_instanceofExpr5312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castableExpr_in_treatExpr5351 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_TREAT_in_treatExpr5355 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_treatExpr5357 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000020000000L});
    public static final BitSet FOLLOW_sequenceType_in_treatExpr5359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpr_in_castableExpr5396 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_CASTABLE_in_castableExpr5400 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_castableExpr5402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_singleType_in_castableExpr5404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpr_in_castExpr5446 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_CAST_in_castExpr5450 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_castExpr5452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_singleType_in_castExpr5454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryExpr5496 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_valueExpr_in_unaryExpr5505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_singleType5544 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUESTIONSi_in_singleType5546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_atomicType5586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftIgnoreOption5622 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CONTENT_in_ftIgnoreOption5624 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_unionExpr_in_ftIgnoreOption5626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_valueComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_generalComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_nodeComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOr_in_ftSelection5804 = new BitSet(new long[]{0x0000010180000802L,0x0000020020000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_ftPosFilter_in_ftSelection5806 = new BitSet(new long[]{0x0000010180000802L,0x0000020020000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_WEIGHT_in_ftSelection5810 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_rangeExpr_in_ftSelection5812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr5850 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_FTOR_in_ftOr5854 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0078002808000000L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr5856 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd5893 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_FTAND_in_ftAnd5897 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0078002808000000L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd5899 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot5933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_NOT_in_ftMildNot5937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IN_in_ftMildNot5939 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0078002808000000L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot5941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_FTNOT_in_ftUnaryNot5976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0078002808000000L});
    public static final BitSet FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot5980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftPrimary_in_ftPrimaryWithOptions6002 = new BitSet(new long[]{0x0000000040010002L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_ftMatchOptions_in_ftPrimaryWithOptions6004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWords_in_ftPrimary6045 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftTimes_in_ftPrimary6047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_ftPrimary6069 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0078002808000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftPrimary6071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_ftPrimary6073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionSelection_in_ftPrimary6094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWordsValue_in_ftWords6148 = new BitSet(new long[]{0x0000000000000032L,0x0000000400000000L});
    public static final BitSet FOLLOW_ftAnyallOption_in_ftWords6150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_ftWordsValue6184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_ftWordsValue6189 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_ftWordsValue6191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_ftWordsValue6193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_literal6233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal6237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_numericLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANY_in_ftAnyallOption6310 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WORD_in_ftAnyallOption6312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_ftAnyallOption6319 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftAnyallOption6321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PHRASE_in_ftAnyallOption6327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCCURS_in_ftTimes6364 = new BitSet(new long[]{0x0008200000000800L});
    public static final BitSet FOLLOW_ftRange_in_ftTimes6366 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_TIMES_in_ftTimes6368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXACTLY_in_ftRange6407 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRange6451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEAST_in_ftRange6453 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRange6498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_MOST_in_ftRange6500 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_ftRange6550 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6552 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TO_in_ftRange6554 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_in_ftExtensionSelection6583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_ftExtensionSelection6586 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0078006808000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftExtensionSelection6588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_ftExtensionSelection6591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPRAGSi_in_pragma6630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_pragma6632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0180000000000000L});
    public static final BitSet FOLLOW_PragmaContents_in_pragma6634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_RPRAGSi_in_pragma6637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOrder_in_ftPosFilter6692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWindow_in_ftPosFilter6696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDistance_in_ftPosFilter6700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftScope_in_ftPosFilter6704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftContent_in_ftPosFilter6708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_ftOrder6740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_ftWindow6771 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3678270928000014L,0x0000000000004801L});
    public static final BitSet FOLLOW_additiveExpr_in_ftWindow6773 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_ftUnit_in_ftWindow6775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTANCE_in_ftDistance6848 = new BitSet(new long[]{0x0008200000000800L});
    public static final BitSet FOLLOW_ftRange_in_ftDistance6850 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_ftUnit_in_ftDistance6852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftScope6890 = new BitSet(new long[]{0x0000000000000000L,0x0004000080000000L});
    public static final BitSet FOLLOW_ftBigUnit_in_ftScope6898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftBigUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftContent6964 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_START_in_ftContent6966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftContent6970 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_END_in_ftContent6972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENTIRE_in_ftContent6976 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CONTENT_in_ftContent6978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftLanguageOption_in_ftMatchOption7016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWildCardOption_in_ftMatchOption7054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftThesaurusOption_in_ftMatchOption7092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftStemOption_in_ftMatchOption7130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftCaseOption_in_ftMatchOption7168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDiacriticsOption_in_ftMatchOption7206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftStopwordOption_in_ftMatchOption7244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionOption_in_ftMatchOption7282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGUAGE_in_ftLanguageOption7407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftLanguageOption7409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftWildCardOption7435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftWildCardOption7437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftWildCardOption7441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftWildCardOption7443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftThesaurusOption7466 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption7468 = new BitSet(new long[]{0x0000000004000800L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption7471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption7475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftThesaurusOption7491 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption7493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_ftThesaurusOption7495 = new BitSet(new long[]{0x0000000004000800L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption7498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption7502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_COMMASi_in_ftThesaurusOption7506 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption7508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_RPARSi_in_ftThesaurusOption7512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftThesaurusOption7551 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption7553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftThesaurusID7615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_ftThesaurusID7617 = new BitSet(new long[]{0x0008200000000802L,0x0000008000000000L});
    public static final BitSet FOLLOW_RELATIONSHIP_in_ftThesaurusID7620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftThesaurusID7622 = new BitSet(new long[]{0x0008200000000802L});
    public static final BitSet FOLLOW_ftRange_in_ftThesaurusID7627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEVELS_in_ftThesaurusID7629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftStemOption7674 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_STEMMING_in_ftStemOption7676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftStemOption7680 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_STEMMING_in_ftStemOption7682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ftCaseOption7712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_INSENSITIVE_in_ftCaseOption7714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ftCaseOption7753 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_ftCaseOption7755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOWERCASE_in_ftCaseOption7794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPPERCASE_in_ftCaseOption7833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ftDiacriticsOption7995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_INSENSITIVE_in_ftDiacriticsOption7997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ftDiacriticsOption8012 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_ftDiacriticsOption8014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftStopwordOption8070 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption8072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption8074 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_ftRefOrList_in_ftStopwordOption8076 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8078 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftStopwordOption8094 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption8096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption8098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftStopwordOption8137 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_ftStopwordOption8139 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption8141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption8143 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8145 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRefOrList8211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_uriLiteral_in_ftRefOrList8213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_ftRefOrList8230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftRefOrList8232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_COMMASi_in_ftRefOrList8235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftRefOrList8237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_RPARSi_in_ftRefOrList8241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftInclExclStringLiteral8258 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_ftRefOrList_in_ftInclExclStringLiteral8266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTION_in_ftExtensionOption8300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_ftExtensionOption8302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftExtensionOption8304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_validateExpr_in_valueExpr8336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathExpr_in_valueExpr8340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extensionExpr_in_valueExpr8344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_validateExpr8372 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000100L,0x0000002000000000L});
    public static final BitSet FOLLOW_validationMode_in_validateExpr8374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_validateExpr8377 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_validateExpr8379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_validateExpr8381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_validationMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DBLSLASHSi_in_pathExpr8457 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3038210928000004L,0x0000000000004801L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr8483 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3038210928000004L,0x0000000000004801L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr8500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr8538 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_set_in_relativePathExpr8541 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3038210928000004L,0x0000000000004801L});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr8549 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_axisStep_in_stepExpr8585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filterExpr_in_stepExpr8602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseStep_in_axisStep8650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_forwardStep_in_axisStep8654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_predicateList_in_axisStep8657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseAxis_in_reverseStep8691 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000010020000000L});
    public static final BitSet FOLLOW_nodeTest_in_reverseStep8693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevReverseStep_in_reverseStep8697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_reverseAxis8728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_reverseAxis8748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_nodeTest8782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameTest_in_nodeTest8786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_nameTest8822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wildcard_in_nameTest8826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard8872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard8874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_wildcard8876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard8901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCName_in_wildcard8946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard8948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_STARSi_in_wildcard8950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTDOTSi_in_abbrevReverseStep8991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forwardAxis_in_forwardStep9054 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000010020000000L});
    public static final BitSet FOLLOW_nodeTest_in_forwardStep9056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevForwardStep_in_forwardStep9060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_forwardAxis9107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_forwardAxis9163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATSi_in_abbrevForwardStep9194 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000010020000000L});
    public static final BitSet FOLLOW_nodeTest_in_abbrevForwardStep9197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predicate_in_predicateList9271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LBRACKSi_in_predicate9331 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_predicate9333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RBRACKSi_in_predicate9335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_in_extensionExpr9375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_extensionExpr9378 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678274928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_extensionExpr9380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_extensionExpr9383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpr_in_filterExpr9418 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_predicateList_in_filterExpr9420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpr9449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varRef_in_primaryExpr9465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpr_in_primaryExpr9481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextItemExpr_in_primaryExpr9497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_primaryExpr9513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderedExpr_in_primaryExpr9529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unorderedExpr_in_primaryExpr9545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_in_primaryExpr9561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_varRef9599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_varName_in_varRef9601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_parenthesizedExpr9624 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678271928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_parenthesizedExpr9626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RPARSi_in_parenthesizedExpr9629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTSi_in_contextItemExpr9655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_functionCall9682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPARSi_in_functionCall9684 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678271928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_functionCall9702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_COMMASi_in_functionCall9705 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_exprSingle_in_functionCall9707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001080000000L});
    public static final BitSet FOLLOW_RPARSi_in_functionCall9727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_orderedExpr9757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_orderedExpr9759 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_orderedExpr9761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_orderedExpr9763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_unorderedExpr9791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_unorderedExpr9793 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_unorderedExpr9795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_unorderedExpr9797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_constructor9828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_computedConstructor_in_constructor9832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirElemConstructor_in_directConstructor9872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirCommentConstructor_in_directConstructor9913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirPIConstructor_in_directConstructor9942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTSi_in_dirElemConstructor10000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor10029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800020000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dirAttributeList_in_dirElemConstructor10031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_RSELFTERMSi_in_dirElemConstructor10061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor10090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000004984L});
    public static final BitSet FOLLOW_dirElemContent_in_dirElemConstructor10119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000004984L});
    public static final BitSet FOLLOW_LENDTAGSi_in_dirElemConstructor10148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor10178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor10207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_dirAttributeList10274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_EQSi_in_dirAttributeList10276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000028L});
    public static final BitSet FOLLOW_dirAttributeValue_in_dirAttributeList10278 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue10316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_QuotAttributeContent_in_dirAttributeValue10347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue10383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue10417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_AposAttributeContent_in_dirAttributeValue10451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue10455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue10490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_xmlEnclosedExpr10531 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_xmlEnclosedExpr10559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_xmlEnclosedExpr10587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_dirElemContent10620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cDataSection_in_dirElemContent10624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ElementContent_in_dirElemContent10628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirElemContent10632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCDATASi_in_cDataSection10652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CDataContents_in_cDataSection10654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RCDATASi_in_cDataSection10656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCOMMENTSi_in_dirCommentConstructor10679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DirCommentContent_in_dirCommentConstructor10681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RCOMMENTSi_in_dirCommentConstructor10683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPISi_in_dirPIConstructor10704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_PiTarget_in_dirPIConstructor10706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_DirPiContents_in_dirPIConstructor10708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_RPISi_in_dirPIConstructor10711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compDocConstructor_in_computedConstructor10737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compElemConstructor_in_computedConstructor10778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compAttrConstructor_in_computedConstructor10819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compTextConstructor_in_computedConstructor10860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compCommentConstructor_in_computedConstructor10901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compPIConstructor_in_computedConstructor10942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_compDocConstructor10970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compDocConstructor10972 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compDocConstructor10974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compDocConstructor10976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_compElemConstructor11005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_qName_in_compElemConstructor11008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor11012 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compElemConstructor11014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor11016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor11035 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678274928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_contentExpr_in_compElemConstructor11037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor11040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_contentExpr11073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_compAttrConstructor11118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_qName_in_compAttrConstructor11121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor11126 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor11128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor11130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor11150 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678274928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor11152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor11155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_compTextConstructor11191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compTextConstructor11193 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compTextConstructor11195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compTextConstructor11197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_compCommentConstructor11221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compCommentConstructor11223 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compCommentConstructor11225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compCommentConstructor11227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor11256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002020000000L});
    public static final BitSet FOLLOW_NCName_in_compPIConstructor11259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor11264 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678270928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compPIConstructor11266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor11268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor11288 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x3678274928000015L,0x0000000000004801L});
    public static final BitSet FOLLOW_expr_in_compPIConstructor11290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor11293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_synpred12151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_synpred12153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DBLSLASHSi_in_synpred28451 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3038210928000004L,0x0000000000004801L});
    public static final BitSet FOLLOW_relativePathExpr_in_synpred28453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_synpred38476 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x3038210928000004L,0x0000000000004801L});
    public static final BitSet FOLLOW_relativePathExpr_in_synpred38478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_synpred48863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COLONSi_in_synpred48865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_NCName_in_synpred48867 = new BitSet(new long[]{0x0000000000000002L});

}