
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 07 21:46:37 CEST 2007
//----------------------------------------------------

package no.ntnu.xqft.parse;

import java_cup.runtime.*;
import java.util.*;
import no.ntnu.xqft.lex.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 07 21:46:37 CEST 2007
  */
public class XQFTParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public XQFTParser() {super();}

  /** Constructor which sets the default scanner. */
  public XQFTParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XQFTParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\005\003\000\002\002\004\000\002\005" +
    "\003\000\002\012\004\000\002\012\003\000\002\010\004" +
    "\000\002\010\004\000\002\010\003\000\002\010\003\000" +
    "\002\011\005\000\002\007\003\000\002\007\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\003\003\000\002\004\003\000\002\002\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\022\002\uffef\004\015\005\004\006\014\007" +
    "\007\010\022\011\012\012\005\001\002\000\012\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\001\002\000\022\002\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\001\002\000\022\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\001\002\000\022\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\001\002\000\022\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\001\002\000\022\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\001\002\000\022\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\001\002\000\012" +
    "\007\007\010\022\011\012\012\005\001\002\000\012\007" +
    "\007\010\022\011\012\012\005\001\002\000\012\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\001\002\000\004\002\001\001" +
    "\002\000\012\007\007\010\022\011\012\012\005\001\002" +
    "\000\022\002\uffff\004\015\005\004\006\014\007\007\010" +
    "\022\011\012\012\005\001\002\000\004\002\023\001\002" +
    "\000\022\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\001\002\000\004\002\000\001\002" +
    "\000\022\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\001\002\000\022\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\001" +
    "\002\000\014\006\030\007\007\010\022\011\012\012\005" +
    "\001\002\000\014\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\001\002\000\022\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\001\002\000\014\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\001\002\000\022" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\022\002\015\003\016\004\012\005\020\006" +
    "\005\010\010\011\007\012\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\031\001\001\000\006\006\026\007\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\024\001\001" +
    "\000\014\003\016\004\012\006\005\010\023\011\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XQFTParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XQFTParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XQFTParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$XQFTParser$actions {
  private final XQFTParser parser;

  /** Constructor */
  CUP$XQFTParser$actions(XQFTParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$XQFTParser$do_action(
    int                        CUP$XQFTParser$act_num,
    java_cup.runtime.lr_parser CUP$XQFTParser$parser,
    java.util.Stack            CUP$XQFTParser$stack,
    int                        CUP$XQFTParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XQFTParser$result;

      /* select the action based on the action number */
      switch (CUP$XQFTParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // empty ::= 
            {
              Object RESULT =null;

              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("empty",0, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // minus ::= MINUS 
            {
              Object RESULT =null;

              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("minus",2, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // plus ::= PLUS 
            {
              Object RESULT =null;

              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("plus",1, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // word ::= CHARACTER 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 RESULT = new Node(c, cright); 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("word",4, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // word ::= DECIMAL 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 RESULT = new Node(d, dright); 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("word",4, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // word ::= NUMBER 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 RESULT = new Node(n, nright); 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("word",4, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // word ::= WORD 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 RESULT = new Node(w, wright); 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("word",4, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // word_list ::= word_list word 
            {
              Node RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).right;
		Node wl = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 wl.getChildren().add(w); RESULT = wl; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("word_list",5, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // word_list ::= word 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 RESULT = w; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("word_list",5, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // phrase ::= DQUOTE word_list DQUOTE 
            {
              Node RESULT =null;
		int wlleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).right;
		Node wl = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).value;
		 RESULT = wl; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("phrase",7, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-2)), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= phrase 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		Node p = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 p.setPhraseBranch(true); RESULT = p; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term ::= word 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 RESULT = w; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // term ::= minus word 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 w.setExcluded(true); RESULT = w; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // term ::= plus word 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 w.setRequired(true); RESULT = w; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // term_list ::= term 
            {
              Node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 RESULT = new Node(t); 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("term_list",8, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // term_list ::= term_list term 
            {
              Node RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).right;
		Node tl = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 tl.getChildren().add(t); RESULT = tl; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("term_list",8, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // query ::= term_list 
            {
              Node RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()).right;
		Node tl = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.peek()).value;
		 RESULT = tl; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("query",3, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= query EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)).value;
		RESULT = start_val;
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.elementAt(CUP$XQFTParser$top-1)), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$XQFTParser$parser.done_parsing();
          return CUP$XQFTParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // query ::= empty 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$XQFTParser$result = parser.getSymbolFactory().newSymbol("query",3, ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XQFTParser$stack.peek()), RESULT);
            }
          return CUP$XQFTParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

