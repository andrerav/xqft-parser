// $ANTLR 3.0.1 etc/XQFT.g 2008-04-14 20:58:35

    package no.ntnu.xqft.parse;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class XQFTParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AST_MODULE", "AST_FLWOR", "AST_FORCLAUSE", "AST_LETCLAUSE", "AST_ORDERBYCLAUSE", "AST_WHERECLAUSE", "AST_RETURNCLAUSE", "AST_QUANTIFIEDEXPR", "AST_TYPESWITCHEXPR", "AST_CASECLAUSE", "AST_IFEXPR", "AST_PATHEXPR_DBL", "AST_PATHEXPR_SGL", "AST_PATHEXPR_REL", "AST_STEPEXPR", "AST_RELATIVEPATHEXPR", "AST_FTSELECTION", "AST_FTPOSFILTER", "AST_FUNCTIONCALL", "AST_FUNCTIONDECL", "AST_PREDICATE", "AST_DIRELEMCONSTRUCTOR", "AST_DIRELEMCONTENT", "XQUERY", "VERSION", "StringLiteral", "ENCODING", "SEMICOLONSi", "MODULE", "NAMESPACE", "EQSi", "COMMASi", "DECLARE", "DEFAULT", "ELEMENT", "FUNCTION", "COLLATION", "ORDER", "EMPTY", "GREATEST", "LEAST", "BOUNDARYSPACE", "PRESERVE", "STRIP", "BASE_URI", "CONSTRUCTION", "ORDERING", "ORDERED", "UNORDERED", "COPY_NAMESPACES", "NOPRESERVE", "INHERIT", "NOINHERIT", "IMPORT", "SCHEMA", "AT", "VARIABLE", "DOLLARSi", "ASSIGNSi", "EXTERNAL", "QName", "AS", "LPARSi", "RPARSi", "LBRACESi", "RBRACSi", "OPTION", "FTOPTION", "EMPTY_SEQUENCE", "ITEM", "DOCUMENT_NODE", "QUESTIONSi", "STARSi", "SCHEMA_ELEMENT", "ATTRIBUTE", "SCHEMA_ATTRIBUTE", "PROCESSING_INSTRUCTION", "COMMENT", "TEXT", "NODE", "PLUSSi", "RETURN", "FOR", "IN", "SCORE", "LET", "WHERE", "BY", "STABLE", "ASCENDING", "DESCENDING", "SOME", "EVERY", "SATISFIES", "TYPESWITCH", "CASE", "IF", "THEN", "ELSE", "OR", "AND", "FTCONTAINS", "TO", "MINUSSi", "DIV", "IDIV", "MOD", "UNION", "PIPESi", "INTERSECT", "EXCEPT", "INSTANCE", "OF", "TREAT", "CASTABLE", "CAST", "WITHOUT", "CONTENT", "EQ", "NE", "LT", "LE", "GT", "GE", "NEQSi", "LTSi", "LTOREQSi", "GTSi", "GTOREQSi", "IS", "NODEBEFORESi", "NODEAFTERSi", "WEIGHT", "FTOR", "FTAND", "NOT", "FTNOT", "IntegerLiteral", "DecimalLiteral", "DoubleLiteral", "ANY", "WORD", "ALL", "WORDS", "PHRASE", "OCCURS", "TIMES", "EXACTLY", "MOST", "FROM", "LPRAGSi", "PragmaContents", "RPRAGSi", "WINDOW", "SENTENCES", "PARAGRAPHS", "DISTANCE", "SAME", "DIFFERENT", "SENTENCE", "PARAGRAPH", "START", "END", "ENTIRE", "WITH", "WILDCARDS", "STEMMING", "THESAURUS", "STOP", "LANGUAGE", "INSENSITIVE", "SENSITIVE", "LOWERCASE", "UPPERCASE", "DIACRITICS", "RELATIONSHIP", "LEVELS", "VALIDATE", "LAX", "STRICT", "SLASHSi", "DBLSLASHSi", "DOTSi", "PARENT", "ANCESTOR", "PRECEDING_SIBLING", "PRECEDING", "ANCESTOR_OR_SELF", "DBLCOLONSi", "COLONSi", "DOTDOTSi", "CHILD", "DESCENDANT", "SELF", "DESCENDANT_OR_SELF", "FOLLOWING_SIBLING", "FOLLOWING", "ATSi", "LBRACKSi", "RBRACKSi", "RSELFTERMSi", "LENDTAGSi", "QUOTSi", "QuotAttributeContent", "APOSSi", "AposAttributeContent", "ElementContent", "LCDATASi", "CDataContents", "RCDATASi", "LCOMMENTSi", "DirCommentContent", "RCOMMENTSi", "LPISi", "PiTarget", "DirPiContents", "RPISi", "DOCUMENT", "NCName", "CDataSectionLEX", "DirPIConstructor", "DirCommentConstLEX", "PragmaLEX", "Comment", "NumberLEX", "LexSigns", "S", "LexLiterals", "TOKENSWITCH", "PredefinedEntityRef", "CharRef", "NotChar", "AMPERSi", "QuotAttrContentChar", "AposAttrContentChar", "ElementContentChar", "CREFDECSi", "CREFHEXSi", "Name", "Letter", "UNDERSCORESi", "NameChar", "Digit", "CombiningChar", "Extender", "SHARPSi", "LXQCOMMENTSi", "RXQCOMMENTSi", "Digits", "NCNameStartChar", "NCNameChar", "EXCLSi", "BACKSLASHSi", "ExtraChar", "BaseChar", "Ideographic", "CleanChar", "Char"
    };
    public static final int NotChar=235;
    public static final int LENDTAGSi=205;
    public static final int QUOTSi=206;
    public static final int END=166;
    public static final int NOINHERIT=56;
    public static final int LBRACESi=68;
    public static final int INSTANCE=115;
    public static final int CONTENT=121;
    public static final int STOP=172;
    public static final int LAX=182;
    public static final int IMPORT=57;
    public static final int PIPESi=112;
    public static final int APOSSi=208;
    public static final int AposAttrContentChar=238;
    public static final int DBLCOLONSi=192;
    public static final int Letter=243;
    public static final int ORDER=41;
    public static final int CASTABLE=118;
    public static final int DIACRITICS=178;
    public static final int RCOMMENTSi=216;
    public static final int TYPESWITCH=98;
    public static final int MODULE=32;
    public static final int VERSION=28;
    public static final int AST_PATHEXPR_SGL=16;
    public static final int Ideographic=259;
    public static final int AST_STEPEXPR=18;
    public static final int DBLSLASHSi=185;
    public static final int EXACTLY=151;
    public static final int FTNOT=140;
    public static final int DECLARE=36;
    public static final int GTSi=131;
    public static final int TOKENSWITCH=232;
    public static final int ElementContentChar=239;
    public static final int OCCURS=149;
    public static final int UNION=111;
    public static final int STRIP=47;
    public static final int NameChar=245;
    public static final int PLUSSi=84;
    public static final int AST_WHERECLAUSE=9;
    public static final int QuotAttrContentChar=237;
    public static final int SAME=161;
    public static final int QUESTIONSi=75;
    public static final int AST_IFEXPR=14;
    public static final int FTCONTAINS=105;
    public static final int DESCENDING=94;
    public static final int FTOPTION=71;
    public static final int AST_ORDERBYCLAUSE=8;
    public static final int DOCUMENT_NODE=74;
    public static final int ANCESTOR_OR_SELF=191;
    public static final int LCDATASi=211;
    public static final int ANY=144;
    public static final int RELATIONSHIP=179;
    public static final int GE=127;
    public static final int CREFHEXSi=241;
    public static final int AST_MODULE=4;
    public static final int GTOREQSi=132;
    public static final int ELSE=102;
    public static final int WORD=145;
    public static final int SENSITIVE=175;
    public static final int SELF=197;
    public static final int DISTANCE=160;
    public static final int ExtraChar=257;
    public static final int LPISi=217;
    public static final int CREFDECSi=240;
    public static final int NODEBEFORESi=134;
    public static final int TEXT=82;
    public static final int CombiningChar=247;
    public static final int PARENT=187;
    public static final int NCName=222;
    public static final int SCORE=88;
    public static final int FTOR=137;
    public static final int PragmaLEX=226;
    public static final int Digit=246;
    public static final int EMPTY_SEQUENCE=72;
    public static final int EXTERNAL=63;
    public static final int UNDERSCORESi=244;
    public static final int RCDATASi=213;
    public static final int DOLLARSi=61;
    public static final int CAST=119;
    public static final int AST_FUNCTIONCALL=22;
    public static final int MOD=110;
    public static final int EXCEPT=114;
    public static final int NOPRESERVE=54;
    public static final int OR=103;
    public static final int S=230;
    public static final int RPARSi=67;
    public static final int BY=91;
    public static final int COLONSi=193;
    public static final int SCHEMA_ELEMENT=77;
    public static final int SLASHSi=184;
    public static final int WEIGHT=136;
    public static final int AST_RETURNCLAUSE=10;
    public static final int PRECEDING_SIBLING=189;
    public static final int UPPERCASE=177;
    public static final int AST_LETCLAUSE=7;
    public static final int SEMICOLONSi=31;
    public static final int FROM=153;
    public static final int STEMMING=170;
    public static final int TIMES=150;
    public static final int EMPTY=42;
    public static final int ASCENDING=93;
    public static final int CleanChar=260;
    public static final int IntegerLiteral=141;
    public static final int SENTENCES=158;
    public static final int NE=123;
    public static final int AposAttributeContent=209;
    public static final int COMMENT=81;
    public static final int MINUSSi=107;
    public static final int NCNameChar=254;
    public static final int ENTIRE=167;
    public static final int WITH=168;
    public static final int IN=87;
    public static final int AST_DIRELEMCONTENT=26;
    public static final int SOME=95;
    public static final int MOST=152;
    public static final int RETURN=85;
    public static final int AST_FTSELECTION=20;
    public static final int LET=89;
    public static final int IF=100;
    public static final int QName=64;
    public static final int AST_PATHEXPR_DBL=15;
    public static final int Extender=248;
    public static final int NODE=83;
    public static final int FOR=86;
    public static final int PRESERVE=46;
    public static final int DEFAULT=37;
    public static final int AST_FTPOSFILTER=21;
    public static final int DirCommentContent=215;
    public static final int LEVELS=180;
    public static final int LPRAGSi=154;
    public static final int COMMASi=35;
    public static final int ATTRIBUTE=78;
    public static final int CHILD=195;
    public static final int Digits=252;
    public static final int NOT=139;
    public static final int OPTION=70;
    public static final int ELEMENT=38;
    public static final int Comment=227;
    public static final int INSENSITIVE=174;
    public static final int DOCUMENT=221;
    public static final int AS=65;
    public static final int ENCODING=30;
    public static final int BOUNDARYSPACE=45;
    public static final int TREAT=117;
    public static final int NAMESPACE=33;
    public static final int LXQCOMMENTSi=250;
    public static final int LEAST=44;
    public static final int THEN=101;
    public static final int WORDS=147;
    public static final int AST_PATHEXPR_REL=17;
    public static final int PiTarget=218;
    public static final int AST_RELATIVEPATHEXPR=19;
    public static final int CDataContents=212;
    public static final int PARAGRAPHS=159;
    public static final int NCNameStartChar=253;
    public static final int QuotAttributeContent=207;
    public static final int BASE_URI=48;
    public static final int AND=104;
    public static final int TO=106;
    public static final int AST_QUANTIFIEDEXPR=11;
    public static final int FUNCTION=39;
    public static final int LexSigns=229;
    public static final int NEQSi=128;
    public static final int LANGUAGE=173;
    public static final int LE=125;
    public static final int LOWERCASE=176;
    public static final int BACKSLASHSi=256;
    public static final int SCHEMA=58;
    public static final int CONSTRUCTION=49;
    public static final int STARSi=76;
    public static final int RPRAGSi=156;
    public static final int WILDCARDS=169;
    public static final int DOTDOTSi=194;
    public static final int DIFFERENT=162;
    public static final int LTOREQSi=130;
    public static final int AST_TYPESWITCHEXPR=12;
    public static final int AT=59;
    public static final int INTERSECT=113;
    public static final int AST_FORCLAUSE=6;
    public static final int GREATEST=43;
    public static final int DOTSi=186;
    public static final int BaseChar=258;
    public static final int Char=261;
    public static final int EQ=122;
    public static final int AST_FLWOR=5;
    public static final int LT=124;
    public static final int OF=116;
    public static final int AST_FUNCTIONDECL=23;
    public static final int WINDOW=157;
    public static final int Name=242;
    public static final int FOLLOWING=200;
    public static final int CASE=99;
    public static final int RXQCOMMENTSi=251;
    public static final int DESCENDANT_OR_SELF=198;
    public static final int CDataSectionLEX=223;
    public static final int THESAURUS=171;
    public static final int RSELFTERMSi=204;
    public static final int FTAND=138;
    public static final int DecimalLiteral=142;
    public static final int PragmaContents=155;
    public static final int EQSi=34;
    public static final int DIV=108;
    public static final int PARAGRAPH=164;
    public static final int ALL=146;
    public static final int EXCLSi=255;
    public static final int DirPIConstructor=224;
    public static final int WHERE=90;
    public static final int WITHOUT=120;
    public static final int SCHEMA_ATTRIBUTE=79;
    public static final int EVERY=96;
    public static final int XQUERY=27;
    public static final int IDIV=109;
    public static final int SATISFIES=97;
    public static final int ATSi=201;
    public static final int DESCENDANT=196;
    public static final int STRICT=183;
    public static final int RBRACKSi=203;
    public static final int FOLLOWING_SIBLING=199;
    public static final int STABLE=92;
    public static final int DoubleLiteral=143;
    public static final int START=165;
    public static final int AMPERSi=236;
    public static final int VALIDATE=181;
    public static final int PRECEDING=190;
    public static final int COPY_NAMESPACES=53;
    public static final int ORDERING=50;
    public static final int ASSIGNSi=62;
    public static final int UNORDERED=52;
    public static final int NumberLEX=228;
    public static final int PredefinedEntityRef=233;
    public static final int LTSi=129;
    public static final int AST_DIRELEMCONSTRUCTOR=25;
    public static final int SENTENCE=163;
    public static final int INHERIT=55;
    public static final int AST_CASECLAUSE=13;
    public static final int LexLiterals=231;
    public static final int SHARPSi=249;
    public static final int IS=133;
    public static final int GT=126;
    public static final int PHRASE=148;
    public static final int StringLiteral=29;
    public static final int RPISi=220;
    public static final int DirPiContents=219;
    public static final int ITEM=73;
    public static final int ORDERED=51;
    public static final int DirCommentConstLEX=225;
    public static final int PROCESSING_INSTRUCTION=80;
    public static final int NODEAFTERSi=135;
    public static final int CharRef=234;
    public static final int COLLATION=40;
    public static final int LPARSi=66;
    public static final int ANCESTOR=188;
    public static final int AST_PREDICATE=24;
    public static final int VARIABLE=60;
    public static final int EOF=-1;
    public static final int RBRACSi=69;
    public static final int ElementContent=210;
    public static final int LCOMMENTSi=214;
    public static final int LBRACKSi=202;

        public XQFTParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[183+1];
         }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "etc/XQFT.g"; }


        
        /* Root scope */
        //Scope currentScope = new Scope();       // @init-ting her ogsaa
        XQFTLexer lexer;
    /*
        public void setTokenStream(TokenStream input) {
                    String inputz =  "some $x in (1, 2) satisfies $x + $x = 3";
                                CharStream cs = new ANTLRStringStream(inputz);
            lexer = (XQFTLexer)input.getTokenSource();
            lexer.setCharStream(cs);
            UnbufferedCommonTokenStream tokenz = new UnbufferedCommonTokenStream();
            tokenz.setTokenSource(lexer);
            super.setTokenStream(tokenz);
            setTreeAdaptor(new XQFTTreeAdaptor());
         
        }*/

        public void setLexer(XQFTLexer lex)
        {
            this.lexer=lex;
        }
        
        public XQFTLexer getLexer()
        {
            return this.lexer;
        }

        protected void mismatch(IntStream input, int ttype, BitSet follow)
            throws RecognitionException
        {
            throw new MismatchedTokenException(ttype, input);
        }

        public void recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
            throws RecognitionException
        {
            throw e;
        }



    public static class module_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start module
    // etc/XQFT.g:306:1: module : ( versionDecl )? ( libraryModule | mainModule ) -> ^( AST_MODULE ( versionDecl )? ( libraryModule )? ( mainModule )? ) ;
    public final module_return module() throws RecognitionException {
        module_return retval = new module_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        versionDecl_return versionDecl1 = null;

        libraryModule_return libraryModule2 = null;

        mainModule_return mainModule3 = null;


        RewriteRuleSubtreeStream stream_libraryModule=new RewriteRuleSubtreeStream(adaptor,"rule libraryModule");
        RewriteRuleSubtreeStream stream_versionDecl=new RewriteRuleSubtreeStream(adaptor,"rule versionDecl");
        RewriteRuleSubtreeStream stream_mainModule=new RewriteRuleSubtreeStream(adaptor,"rule mainModule");
        try {
            // etc/XQFT.g:306:8: ( ( versionDecl )? ( libraryModule | mainModule ) -> ^( AST_MODULE ( versionDecl )? ( libraryModule )? ( mainModule )? ) )
            // etc/XQFT.g:306:9: ( versionDecl )? ( libraryModule | mainModule )
            {
            if ( backtracking==0 ) {
              lexer.state = State.DEFAULT;
            }
            // etc/XQFT.g:307:5: ( versionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==VERSION) ) {
                    alt1=1;
                }
            }
            switch (alt1) {
                case 1 :
                    // etc/XQFT.g:307:6: versionDecl
                    {
                    pushFollow(FOLLOW_versionDecl_in_module181);
                    versionDecl1=versionDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_versionDecl.add(versionDecl1.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:308:5: ( libraryModule | mainModule )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==NAMESPACE) ) {
                    alt2=1;
                }
                else if ( (LA2_1==EOF||(LA2_1>=EQSi && LA2_1<=COMMASi)||LA2_1==LPARSi||LA2_1==STARSi||LA2_1==PLUSSi||(LA2_1>=OR && LA2_1<=INSTANCE)||(LA2_1>=TREAT && LA2_1<=CAST)||(LA2_1>=EQ && LA2_1<=NODEAFTERSi)||(LA2_1>=SLASHSi && LA2_1<=DBLSLASHSi)||LA2_1==COLONSi||LA2_1==LBRACKSi) ) {
                    alt2=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("308:5: ( libraryModule | mainModule )", 2, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA2_0>=XQUERY && LA2_0<=ENCODING)||LA2_0==NAMESPACE||(LA2_0>=DECLARE && LA2_0<=DOLLARSi)||(LA2_0>=EXTERNAL && LA2_0<=LPARSi)||(LA2_0>=OPTION && LA2_0<=DOCUMENT_NODE)||(LA2_0>=STARSi && LA2_0<=UNION)||(LA2_0>=INTERSECT && LA2_0<=GE)||LA2_0==LTSi||LA2_0==IS||(LA2_0>=WEIGHT && LA2_0<=LPRAGSi)||(LA2_0>=WINDOW && LA2_0<=ANCESTOR_OR_SELF)||(LA2_0>=DOTDOTSi && LA2_0<=ATSi)||LA2_0==LCOMMENTSi||LA2_0==LPISi||(LA2_0>=DOCUMENT && LA2_0<=NCName)) ) {
                alt2=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("308:5: ( libraryModule | mainModule )", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // etc/XQFT.g:308:6: libraryModule
                    {
                    pushFollow(FOLLOW_libraryModule_in_module191);
                    libraryModule2=libraryModule();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_libraryModule.add(libraryModule2.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:308:22: mainModule
                    {
                    pushFollow(FOLLOW_mainModule_in_module195);
                    mainModule3=mainModule();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_mainModule.add(mainModule3.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: mainModule, libraryModule, versionDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 309:5: -> ^( AST_MODULE ( versionDecl )? ( libraryModule )? ( mainModule )? )
            {
                // etc/XQFT.g:309:8: ^( AST_MODULE ( versionDecl )? ( libraryModule )? ( mainModule )? )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_MODULE, "AST_MODULE"), root_1);

                // etc/XQFT.g:309:21: ( versionDecl )?
                if ( stream_versionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_versionDecl.next());

                }
                stream_versionDecl.reset();
                // etc/XQFT.g:309:34: ( libraryModule )?
                if ( stream_libraryModule.hasNext() ) {
                    adaptor.addChild(root_1, stream_libraryModule.next());

                }
                stream_libraryModule.reset();
                // etc/XQFT.g:309:49: ( mainModule )?
                if ( stream_mainModule.hasNext() ) {
                    adaptor.addChild(root_1, stream_mainModule.next());

                }
                stream_mainModule.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end module

    public static class versionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start versionDecl
    // etc/XQFT.g:312:5: versionDecl : XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? SEMICOLONSi ;
    public final versionDecl_return versionDecl() throws RecognitionException {
        versionDecl_return retval = new versionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token XQUERY4=null;
        Token VERSION5=null;
        Token StringLiteral6=null;
        Token ENCODING7=null;
        Token StringLiteral8=null;
        Token SEMICOLONSi9=null;

        XQFTTree XQUERY4_tree=null;
        XQFTTree VERSION5_tree=null;
        XQFTTree StringLiteral6_tree=null;
        XQFTTree ENCODING7_tree=null;
        XQFTTree StringLiteral8_tree=null;
        XQFTTree SEMICOLONSi9_tree=null;

        try {
            // etc/XQFT.g:312:17: ( XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? SEMICOLONSi )
            // etc/XQFT.g:312:19: XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? SEMICOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            XQUERY4=(Token)input.LT(1);
            match(input,XQUERY,FOLLOW_XQUERY_in_versionDecl228); if (failed) return retval;
            if ( backtracking==0 ) {
            XQUERY4_tree = (XQFTTree)adaptor.create(XQUERY4);
            adaptor.addChild(root_0, XQUERY4_tree);
            }
            VERSION5=(Token)input.LT(1);
            match(input,VERSION,FOLLOW_VERSION_in_versionDecl230); if (failed) return retval;
            if ( backtracking==0 ) {
            VERSION5_tree = (XQFTTree)adaptor.create(VERSION5);
            adaptor.addChild(root_0, VERSION5_tree);
            }
            StringLiteral6=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_versionDecl232); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral6_tree = (XQFTTree)adaptor.create(StringLiteral6);
            adaptor.addChild(root_0, StringLiteral6_tree);
            }
            // etc/XQFT.g:312:48: ( ENCODING StringLiteral )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==ENCODING) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // etc/XQFT.g:312:49: ENCODING StringLiteral
                    {
                    ENCODING7=(Token)input.LT(1);
                    match(input,ENCODING,FOLLOW_ENCODING_in_versionDecl235); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ENCODING7_tree = (XQFTTree)adaptor.create(ENCODING7);
                    adaptor.addChild(root_0, ENCODING7_tree);
                    }
                    StringLiteral8=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_versionDecl237); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral8_tree = (XQFTTree)adaptor.create(StringLiteral8);
                    adaptor.addChild(root_0, StringLiteral8_tree);
                    }

                    }
                    break;

            }

            SEMICOLONSi9=(Token)input.LT(1);
            match(input,SEMICOLONSi,FOLLOW_SEMICOLONSi_in_versionDecl241); if (failed) return retval;
            if ( backtracking==0 ) {
            SEMICOLONSi9_tree = (XQFTTree)adaptor.create(SEMICOLONSi9);
            adaptor.addChild(root_0, SEMICOLONSi9_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end versionDecl

    public static class libraryModule_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start libraryModule
    // etc/XQFT.g:313:5: libraryModule : moduleDecl prolog ;
    public final libraryModule_return libraryModule() throws RecognitionException {
        libraryModule_return retval = new libraryModule_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        moduleDecl_return moduleDecl10 = null;

        prolog_return prolog11 = null;



        try {
            // etc/XQFT.g:313:19: ( moduleDecl prolog )
            // etc/XQFT.g:313:21: moduleDecl prolog
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_moduleDecl_in_libraryModule252);
            moduleDecl10=moduleDecl();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, moduleDecl10.getTree());
            pushFollow(FOLLOW_prolog_in_libraryModule254);
            prolog11=prolog();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, prolog11.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end libraryModule

    public static class moduleDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start moduleDecl
    // etc/XQFT.g:314:9: moduleDecl : MODULE NAMESPACE ncNameorKeyword EQSi uriLiteral SEMICOLONSi ;
    public final moduleDecl_return moduleDecl() throws RecognitionException {
        moduleDecl_return retval = new moduleDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token MODULE12=null;
        Token NAMESPACE13=null;
        Token EQSi15=null;
        Token SEMICOLONSi17=null;
        ncNameorKeyword_return ncNameorKeyword14 = null;

        uriLiteral_return uriLiteral16 = null;


        XQFTTree MODULE12_tree=null;
        XQFTTree NAMESPACE13_tree=null;
        XQFTTree EQSi15_tree=null;
        XQFTTree SEMICOLONSi17_tree=null;

        try {
            // etc/XQFT.g:314:20: ( MODULE NAMESPACE ncNameorKeyword EQSi uriLiteral SEMICOLONSi )
            // etc/XQFT.g:314:22: MODULE NAMESPACE ncNameorKeyword EQSi uriLiteral SEMICOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            MODULE12=(Token)input.LT(1);
            match(input,MODULE,FOLLOW_MODULE_in_moduleDecl269); if (failed) return retval;
            if ( backtracking==0 ) {
            MODULE12_tree = (XQFTTree)adaptor.create(MODULE12);
            adaptor.addChild(root_0, MODULE12_tree);
            }
            NAMESPACE13=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleDecl271); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE13_tree = (XQFTTree)adaptor.create(NAMESPACE13);
            adaptor.addChild(root_0, NAMESPACE13_tree);
            }
            pushFollow(FOLLOW_ncNameorKeyword_in_moduleDecl273);
            ncNameorKeyword14=ncNameorKeyword();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ncNameorKeyword14.getTree());
            EQSi15=(Token)input.LT(1);
            match(input,EQSi,FOLLOW_EQSi_in_moduleDecl275); if (failed) return retval;
            if ( backtracking==0 ) {
            EQSi15_tree = (XQFTTree)adaptor.create(EQSi15);
            adaptor.addChild(root_0, EQSi15_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_moduleDecl277);
            uriLiteral16=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral16.getTree());
            SEMICOLONSi17=(Token)input.LT(1);
            match(input,SEMICOLONSi,FOLLOW_SEMICOLONSi_in_moduleDecl279); if (failed) return retval;
            if ( backtracking==0 ) {
            SEMICOLONSi17_tree = (XQFTTree)adaptor.create(SEMICOLONSi17);
            adaptor.addChild(root_0, SEMICOLONSi17_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end moduleDecl

    public static class uriLiteral_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uriLiteral
    // etc/XQFT.g:315:13: uriLiteral : StringLiteral ;
    public final uriLiteral_return uriLiteral() throws RecognitionException {
        uriLiteral_return retval = new uriLiteral_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token StringLiteral18=null;

        XQFTTree StringLiteral18_tree=null;

        try {
            // etc/XQFT.g:315:24: ( StringLiteral )
            // etc/XQFT.g:315:26: StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            StringLiteral18=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_uriLiteral298); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral18_tree = (XQFTTree)adaptor.create(StringLiteral18);
            adaptor.addChild(root_0, StringLiteral18_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end uriLiteral

    public static class mainModule_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start mainModule
    // etc/XQFT.g:317:5: mainModule : prolog queryBody ;
    public final mainModule_return mainModule() throws RecognitionException {
        mainModule_return retval = new mainModule_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        prolog_return prolog19 = null;

        queryBody_return queryBody20 = null;



        try {
            // etc/XQFT.g:317:16: ( prolog queryBody )
            // etc/XQFT.g:317:18: prolog queryBody
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_prolog_in_mainModule310);
            prolog19=prolog();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, prolog19.getTree());
            pushFollow(FOLLOW_queryBody_in_mainModule312);
            queryBody20=queryBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, queryBody20.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end mainModule

    public static class queryBody_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryBody
    // etc/XQFT.g:318:9: queryBody : expr ;
    public final queryBody_return queryBody() throws RecognitionException {
        queryBody_return retval = new queryBody_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        expr_return expr21 = null;



        try {
            // etc/XQFT.g:318:19: ( expr )
            // etc/XQFT.g:318:21: expr
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_queryBody327);
            expr21=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr21.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryBody

    public static class expr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expr
    // etc/XQFT.g:319:13: expr : exprSingle ( COMMASi exprSingle )* -> ( exprSingle )+ ;
    public final expr_return expr() throws RecognitionException {
        expr_return retval = new expr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMASi23=null;
        exprSingle_return exprSingle22 = null;

        exprSingle_return exprSingle24 = null;


        XQFTTree COMMASi23_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:319:18: ( exprSingle ( COMMASi exprSingle )* -> ( exprSingle )+ )
            // etc/XQFT.g:319:20: exprSingle ( COMMASi exprSingle )*
            {
            pushFollow(FOLLOW_exprSingle_in_expr346);
            exprSingle22=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle22.getTree());
            // etc/XQFT.g:319:31: ( COMMASi exprSingle )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==COMMASi) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // etc/XQFT.g:319:32: COMMASi exprSingle
            	    {
            	    COMMASi23=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_expr349); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi23);

            	    pushFollow(FOLLOW_exprSingle_in_expr351);
            	    exprSingle24=exprSingle();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_exprSingle.add(exprSingle24.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 320:5: -> ( exprSingle )+
            {
                if ( !(stream_exprSingle.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_exprSingle.hasNext() ) {
                    adaptor.addChild(root_0, stream_exprSingle.next());

                }
                stream_exprSingle.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr

    public static class prolog_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start prolog
    // etc/XQFT.g:324:1: prolog : ( ( ( IMPORT ( SCHEMA | MODULE ) )=> importStmt {...}? | DECLARE ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl ) ) SEMICOLONSi )* ;
    public final prolog_return prolog() throws RecognitionException {
        prolog_return retval = new prolog_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE26=null;
        Token SEMICOLONSi32=null;
        importStmt_return importStmt25 = null;

        setter_return setter27 = null;

        varDecl_return varDecl28 = null;

        functionDecl_return functionDecl29 = null;

        optionDecl_return optionDecl30 = null;

        ftOptionDecl_return ftOptionDecl31 = null;


        XQFTTree DECLARE26_tree=null;
        XQFTTree SEMICOLONSi32_tree=null;

        boolean start = true;
        try {
            // etc/XQFT.g:325:30: ( ( ( ( IMPORT ( SCHEMA | MODULE ) )=> importStmt {...}? | DECLARE ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl ) ) SEMICOLONSi )* )
            // etc/XQFT.g:326:5: ( ( ( IMPORT ( SCHEMA | MODULE ) )=> importStmt {...}? | DECLARE ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl ) ) SEMICOLONSi )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:326:5: ( ( ( IMPORT ( SCHEMA | MODULE ) )=> importStmt {...}? | DECLARE ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl ) ) SEMICOLONSi )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==DECLARE) ) {
                    int LA7_46 = input.LA(2);

                    if ( (LA7_46==NAMESPACE||LA7_46==DEFAULT||LA7_46==FUNCTION||LA7_46==BOUNDARYSPACE||(LA7_46>=BASE_URI && LA7_46<=ORDERING)||LA7_46==COPY_NAMESPACES||LA7_46==VARIABLE||(LA7_46>=OPTION && LA7_46<=FTOPTION)) ) {
                        alt7=1;
                    }


                }
                else if ( (LA7_0==IMPORT) ) {
                    int LA7_79 = input.LA(2);

                    if ( (LA7_79==MODULE||LA7_79==SCHEMA) ) {
                        alt7=1;
                    }


                }


                switch (alt7) {
            	case 1 :
            	    // etc/XQFT.g:327:7: ( ( IMPORT ( SCHEMA | MODULE ) )=> importStmt {...}? | DECLARE ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl ) ) SEMICOLONSi
            	    {
            	    // etc/XQFT.g:327:7: ( ( IMPORT ( SCHEMA | MODULE ) )=> importStmt {...}? | DECLARE ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl ) )
            	    int alt6=2;
            	    int LA6_0 = input.LA(1);

            	    if ( (LA6_0==IMPORT) && (synpred1())) {
            	        alt6=1;
            	    }
            	    else if ( (LA6_0==DECLARE) ) {
            	        alt6=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("327:7: ( ( IMPORT ( SCHEMA | MODULE ) )=> importStmt {...}? | DECLARE ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl ) )", 6, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt6) {
            	        case 1 :
            	            // etc/XQFT.g:328:7: ( IMPORT ( SCHEMA | MODULE ) )=> importStmt {...}?
            	            {
            	            pushFollow(FOLLOW_importStmt_in_prolog450);
            	            importStmt25=importStmt();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, importStmt25.getTree());
            	            if ( !(start) ) {
            	                if (backtracking>0) {failed=true; return retval;}
            	                throw new FailedPredicateException(input, "prolog", "start");
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // etc/XQFT.g:329:8: DECLARE ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl )
            	            {
            	            DECLARE26=(Token)input.LT(1);
            	            match(input,DECLARE,FOLLOW_DECLARE_in_prolog461); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            DECLARE26_tree = (XQFTTree)adaptor.create(DECLARE26);
            	            adaptor.addChild(root_0, DECLARE26_tree);
            	            }
            	            // etc/XQFT.g:329:16: ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl )
            	            int alt5=5;
            	            switch ( input.LA(1) ) {
            	            case NAMESPACE:
            	            case DEFAULT:
            	            case BOUNDARYSPACE:
            	            case BASE_URI:
            	            case CONSTRUCTION:
            	            case ORDERING:
            	            case COPY_NAMESPACES:
            	                {
            	                alt5=1;
            	                }
            	                break;
            	            case VARIABLE:
            	                {
            	                alt5=2;
            	                }
            	                break;
            	            case FUNCTION:
            	                {
            	                alt5=3;
            	                }
            	                break;
            	            case OPTION:
            	                {
            	                alt5=4;
            	                }
            	                break;
            	            case FTOPTION:
            	                {
            	                alt5=5;
            	                }
            	                break;
            	            default:
            	                if (backtracking>0) {failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("329:16: ( setter {...}? | varDecl | functionDecl | optionDecl | ftOptionDecl )", 5, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt5) {
            	                case 1 :
            	                    // etc/XQFT.g:330:9: setter {...}?
            	                    {
            	                    pushFollow(FOLLOW_setter_in_prolog473);
            	                    setter27=setter();
            	                    _fsp--;
            	                    if (failed) return retval;
            	                    if ( backtracking==0 ) adaptor.addChild(root_0, setter27.getTree());
            	                    if ( !(start) ) {
            	                        if (backtracking>0) {failed=true; return retval;}
            	                        throw new FailedPredicateException(input, "prolog", "start");
            	                    }

            	                    }
            	                    break;
            	                case 2 :
            	                    // etc/XQFT.g:331:10: varDecl
            	                    {
            	                    pushFollow(FOLLOW_varDecl_in_prolog486);
            	                    varDecl28=varDecl();
            	                    _fsp--;
            	                    if (failed) return retval;
            	                    if ( backtracking==0 ) adaptor.addChild(root_0, varDecl28.getTree());
            	                    if ( backtracking==0 ) {
            	                      start=false;
            	                    }

            	                    }
            	                    break;
            	                case 3 :
            	                    // etc/XQFT.g:332:10: functionDecl
            	                    {
            	                    pushFollow(FOLLOW_functionDecl_in_prolog499);
            	                    functionDecl29=functionDecl();
            	                    _fsp--;
            	                    if (failed) return retval;
            	                    if ( backtracking==0 ) adaptor.addChild(root_0, functionDecl29.getTree());
            	                    if ( backtracking==0 ) {
            	                      start=false;
            	                    }

            	                    }
            	                    break;
            	                case 4 :
            	                    // etc/XQFT.g:333:10: optionDecl
            	                    {
            	                    pushFollow(FOLLOW_optionDecl_in_prolog512);
            	                    optionDecl30=optionDecl();
            	                    _fsp--;
            	                    if (failed) return retval;
            	                    if ( backtracking==0 ) adaptor.addChild(root_0, optionDecl30.getTree());
            	                    if ( backtracking==0 ) {
            	                      start=false;
            	                    }

            	                    }
            	                    break;
            	                case 5 :
            	                    // etc/XQFT.g:334:10: ftOptionDecl
            	                    {
            	                    pushFollow(FOLLOW_ftOptionDecl_in_prolog525);
            	                    ftOptionDecl31=ftOptionDecl();
            	                    _fsp--;
            	                    if (failed) return retval;
            	                    if ( backtracking==0 ) adaptor.addChild(root_0, ftOptionDecl31.getTree());
            	                    if ( backtracking==0 ) {
            	                      start=false;
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }

            	    SEMICOLONSi32=(Token)input.LT(1);
            	    match(input,SEMICOLONSi,FOLLOW_SEMICOLONSi_in_prolog547); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    SEMICOLONSi32_tree = (XQFTTree)adaptor.create(SEMICOLONSi32);
            	    adaptor.addChild(root_0, SEMICOLONSi32_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end prolog

    public static class setter_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start setter
    // etc/XQFT.g:340:1: setter : ( DEFAULT ( | defaultNamespaceDecl | defaultCollationDecl | emptyOrderDecl ) | namespaceDecl | boundarySpaceDecl | baseURIDecl | constructionDecl | orderingModeDecl | copyNamespacesDecl );
    public final setter_return setter() throws RecognitionException {
        setter_return retval = new setter_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DEFAULT33=null;
        defaultNamespaceDecl_return defaultNamespaceDecl34 = null;

        defaultCollationDecl_return defaultCollationDecl35 = null;

        emptyOrderDecl_return emptyOrderDecl36 = null;

        namespaceDecl_return namespaceDecl37 = null;

        boundarySpaceDecl_return boundarySpaceDecl38 = null;

        baseURIDecl_return baseURIDecl39 = null;

        constructionDecl_return constructionDecl40 = null;

        orderingModeDecl_return orderingModeDecl41 = null;

        copyNamespacesDecl_return copyNamespacesDecl42 = null;


        XQFTTree DEFAULT33_tree=null;

        try {
            // etc/XQFT.g:340:7: ( DEFAULT ( | defaultNamespaceDecl | defaultCollationDecl | emptyOrderDecl ) | namespaceDecl | boundarySpaceDecl | baseURIDecl | constructionDecl | orderingModeDecl | copyNamespacesDecl )
            int alt9=7;
            switch ( input.LA(1) ) {
            case DEFAULT:
                {
                alt9=1;
                }
                break;
            case NAMESPACE:
                {
                alt9=2;
                }
                break;
            case BOUNDARYSPACE:
                {
                alt9=3;
                }
                break;
            case BASE_URI:
                {
                alt9=4;
                }
                break;
            case CONSTRUCTION:
                {
                alt9=5;
                }
                break;
            case ORDERING:
                {
                alt9=6;
                }
                break;
            case COPY_NAMESPACES:
                {
                alt9=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("340:1: setter : ( DEFAULT ( | defaultNamespaceDecl | defaultCollationDecl | emptyOrderDecl ) | namespaceDecl | boundarySpaceDecl | baseURIDecl | constructionDecl | orderingModeDecl | copyNamespacesDecl );", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // etc/XQFT.g:341:5: DEFAULT ( | defaultNamespaceDecl | defaultCollationDecl | emptyOrderDecl )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    DEFAULT33=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_setter569); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEFAULT33_tree = (XQFTTree)adaptor.create(DEFAULT33);
                    adaptor.addChild(root_0, DEFAULT33_tree);
                    }
                    // etc/XQFT.g:341:13: ( | defaultNamespaceDecl | defaultCollationDecl | emptyOrderDecl )
                    int alt8=4;
                    switch ( input.LA(1) ) {
                    case SEMICOLONSi:
                        {
                        alt8=1;
                        }
                        break;
                    case ELEMENT:
                    case FUNCTION:
                        {
                        alt8=2;
                        }
                        break;
                    case COLLATION:
                        {
                        alt8=3;
                        }
                        break;
                    case ORDER:
                        {
                        alt8=4;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("341:13: ( | defaultNamespaceDecl | defaultCollationDecl | emptyOrderDecl )", 8, 0, input);

                        throw nvae;
                    }

                    switch (alt8) {
                        case 1 :
                            // etc/XQFT.g:342:13: 
                            {
                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:342:15: defaultNamespaceDecl
                            {
                            pushFollow(FOLLOW_defaultNamespaceDecl_in_setter587);
                            defaultNamespaceDecl34=defaultNamespaceDecl();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, defaultNamespaceDecl34.getTree());

                            }
                            break;
                        case 3 :
                            // etc/XQFT.g:343:15: defaultCollationDecl
                            {
                            pushFollow(FOLLOW_defaultCollationDecl_in_setter603);
                            defaultCollationDecl35=defaultCollationDecl();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, defaultCollationDecl35.getTree());

                            }
                            break;
                        case 4 :
                            // etc/XQFT.g:344:15: emptyOrderDecl
                            {
                            pushFollow(FOLLOW_emptyOrderDecl_in_setter619);
                            emptyOrderDecl36=emptyOrderDecl();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, emptyOrderDecl36.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:346:11: namespaceDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_namespaceDecl_in_setter645);
                    namespaceDecl37=namespaceDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, namespaceDecl37.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:347:11: boundarySpaceDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_boundarySpaceDecl_in_setter657);
                    boundarySpaceDecl38=boundarySpaceDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, boundarySpaceDecl38.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:348:11: baseURIDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_baseURIDecl_in_setter669);
                    baseURIDecl39=baseURIDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, baseURIDecl39.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:349:11: constructionDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_constructionDecl_in_setter682);
                    constructionDecl40=constructionDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, constructionDecl40.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:350:11: orderingModeDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_orderingModeDecl_in_setter695);
                    orderingModeDecl41=orderingModeDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orderingModeDecl41.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:351:11: copyNamespacesDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_copyNamespacesDecl_in_setter708);
                    copyNamespacesDecl42=copyNamespacesDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, copyNamespacesDecl42.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end setter

    public static class defaultNamespaceDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defaultNamespaceDecl
    // etc/XQFT.g:354:1: defaultNamespaceDecl : ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral ;
    public final defaultNamespaceDecl_return defaultNamespaceDecl() throws RecognitionException {
        defaultNamespaceDecl_return retval = new defaultNamespaceDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set43=null;
        Token NAMESPACE44=null;
        uriLiteral_return uriLiteral45 = null;


        XQFTTree set43_tree=null;
        XQFTTree NAMESPACE44_tree=null;

        try {
            // etc/XQFT.g:354:22: ( ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral )
            // etc/XQFT.g:354:24: ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            set43=(Token)input.LT(1);
            if ( (input.LA(1)>=ELEMENT && input.LA(1)<=FUNCTION) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set43));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_defaultNamespaceDecl717);    throw mse;
            }

            NAMESPACE44=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_defaultNamespaceDecl725); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE44_tree = (XQFTTree)adaptor.create(NAMESPACE44);
            adaptor.addChild(root_0, NAMESPACE44_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_defaultNamespaceDecl727);
            uriLiteral45=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral45.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end defaultNamespaceDecl

    public static class defaultCollationDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defaultCollationDecl
    // etc/XQFT.g:355:1: defaultCollationDecl : COLLATION uriLiteral ;
    public final defaultCollationDecl_return defaultCollationDecl() throws RecognitionException {
        defaultCollationDecl_return retval = new defaultCollationDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COLLATION46=null;
        uriLiteral_return uriLiteral47 = null;


        XQFTTree COLLATION46_tree=null;

        try {
            // etc/XQFT.g:355:22: ( COLLATION uriLiteral )
            // etc/XQFT.g:355:24: COLLATION uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            COLLATION46=(Token)input.LT(1);
            match(input,COLLATION,FOLLOW_COLLATION_in_defaultCollationDecl734); if (failed) return retval;
            if ( backtracking==0 ) {
            COLLATION46_tree = (XQFTTree)adaptor.create(COLLATION46);
            adaptor.addChild(root_0, COLLATION46_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_defaultCollationDecl736);
            uriLiteral47=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral47.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end defaultCollationDecl

    public static class emptyOrderDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start emptyOrderDecl
    // etc/XQFT.g:356:1: emptyOrderDecl : ORDER EMPTY ( GREATEST | LEAST ) ;
    public final emptyOrderDecl_return emptyOrderDecl() throws RecognitionException {
        emptyOrderDecl_return retval = new emptyOrderDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDER48=null;
        Token EMPTY49=null;
        Token set50=null;

        XQFTTree ORDER48_tree=null;
        XQFTTree EMPTY49_tree=null;
        XQFTTree set50_tree=null;

        try {
            // etc/XQFT.g:356:22: ( ORDER EMPTY ( GREATEST | LEAST ) )
            // etc/XQFT.g:356:24: ORDER EMPTY ( GREATEST | LEAST )
            {
            root_0 = (XQFTTree)adaptor.nil();

            ORDER48=(Token)input.LT(1);
            match(input,ORDER,FOLLOW_ORDER_in_emptyOrderDecl749); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDER48_tree = (XQFTTree)adaptor.create(ORDER48);
            adaptor.addChild(root_0, ORDER48_tree);
            }
            EMPTY49=(Token)input.LT(1);
            match(input,EMPTY,FOLLOW_EMPTY_in_emptyOrderDecl751); if (failed) return retval;
            if ( backtracking==0 ) {
            EMPTY49_tree = (XQFTTree)adaptor.create(EMPTY49);
            adaptor.addChild(root_0, EMPTY49_tree);
            }
            set50=(Token)input.LT(1);
            if ( (input.LA(1)>=GREATEST && input.LA(1)<=LEAST) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set50));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_emptyOrderDecl753);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end emptyOrderDecl

    public static class namespaceDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start namespaceDecl
    // etc/XQFT.g:359:1: namespaceDecl : NAMESPACE ncNameorKeyword EQSi uriLiteral ;
    public final namespaceDecl_return namespaceDecl() throws RecognitionException {
        namespaceDecl_return retval = new namespaceDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NAMESPACE51=null;
        Token EQSi53=null;
        ncNameorKeyword_return ncNameorKeyword52 = null;

        uriLiteral_return uriLiteral54 = null;


        XQFTTree NAMESPACE51_tree=null;
        XQFTTree EQSi53_tree=null;

        try {
            // etc/XQFT.g:359:21: ( NAMESPACE ncNameorKeyword EQSi uriLiteral )
            // etc/XQFT.g:359:23: NAMESPACE ncNameorKeyword EQSi uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            NAMESPACE51=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespaceDecl774); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE51_tree = (XQFTTree)adaptor.create(NAMESPACE51);
            adaptor.addChild(root_0, NAMESPACE51_tree);
            }
            pushFollow(FOLLOW_ncNameorKeyword_in_namespaceDecl776);
            ncNameorKeyword52=ncNameorKeyword();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ncNameorKeyword52.getTree());
            EQSi53=(Token)input.LT(1);
            match(input,EQSi,FOLLOW_EQSi_in_namespaceDecl778); if (failed) return retval;
            if ( backtracking==0 ) {
            EQSi53_tree = (XQFTTree)adaptor.create(EQSi53);
            adaptor.addChild(root_0, EQSi53_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_namespaceDecl780);
            uriLiteral54=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral54.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end namespaceDecl

    public static class boundarySpaceDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start boundarySpaceDecl
    // etc/XQFT.g:360:1: boundarySpaceDecl : BOUNDARYSPACE ( PRESERVE | STRIP ) ;
    public final boundarySpaceDecl_return boundarySpaceDecl() throws RecognitionException {
        boundarySpaceDecl_return retval = new boundarySpaceDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token BOUNDARYSPACE55=null;
        Token set56=null;

        XQFTTree BOUNDARYSPACE55_tree=null;
        XQFTTree set56_tree=null;

        try {
            // etc/XQFT.g:360:21: ( BOUNDARYSPACE ( PRESERVE | STRIP ) )
            // etc/XQFT.g:360:23: BOUNDARYSPACE ( PRESERVE | STRIP )
            {
            root_0 = (XQFTTree)adaptor.nil();

            BOUNDARYSPACE55=(Token)input.LT(1);
            match(input,BOUNDARYSPACE,FOLLOW_BOUNDARYSPACE_in_boundarySpaceDecl789); if (failed) return retval;
            if ( backtracking==0 ) {
            BOUNDARYSPACE55_tree = (XQFTTree)adaptor.create(BOUNDARYSPACE55);
            adaptor.addChild(root_0, BOUNDARYSPACE55_tree);
            }
            set56=(Token)input.LT(1);
            if ( (input.LA(1)>=PRESERVE && input.LA(1)<=STRIP) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set56));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_boundarySpaceDecl791);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end boundarySpaceDecl

    public static class baseURIDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start baseURIDecl
    // etc/XQFT.g:361:1: baseURIDecl : BASE_URI uriLiteral ;
    public final baseURIDecl_return baseURIDecl() throws RecognitionException {
        baseURIDecl_return retval = new baseURIDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token BASE_URI57=null;
        uriLiteral_return uriLiteral58 = null;


        XQFTTree BASE_URI57_tree=null;

        try {
            // etc/XQFT.g:361:21: ( BASE_URI uriLiteral )
            // etc/XQFT.g:361:23: BASE_URI uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            BASE_URI57=(Token)input.LT(1);
            match(input,BASE_URI,FOLLOW_BASE_URI_in_baseURIDecl812); if (failed) return retval;
            if ( backtracking==0 ) {
            BASE_URI57_tree = (XQFTTree)adaptor.create(BASE_URI57);
            adaptor.addChild(root_0, BASE_URI57_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_baseURIDecl814);
            uriLiteral58=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral58.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end baseURIDecl

    public static class constructionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constructionDecl
    // etc/XQFT.g:362:1: constructionDecl : CONSTRUCTION ( STRIP | PRESERVE ) ;
    public final constructionDecl_return constructionDecl() throws RecognitionException {
        constructionDecl_return retval = new constructionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CONSTRUCTION59=null;
        Token set60=null;

        XQFTTree CONSTRUCTION59_tree=null;
        XQFTTree set60_tree=null;

        try {
            // etc/XQFT.g:362:21: ( CONSTRUCTION ( STRIP | PRESERVE ) )
            // etc/XQFT.g:362:23: CONSTRUCTION ( STRIP | PRESERVE )
            {
            root_0 = (XQFTTree)adaptor.nil();

            CONSTRUCTION59=(Token)input.LT(1);
            match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_constructionDecl824); if (failed) return retval;
            if ( backtracking==0 ) {
            CONSTRUCTION59_tree = (XQFTTree)adaptor.create(CONSTRUCTION59);
            adaptor.addChild(root_0, CONSTRUCTION59_tree);
            }
            set60=(Token)input.LT(1);
            if ( (input.LA(1)>=PRESERVE && input.LA(1)<=STRIP) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set60));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_constructionDecl826);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end constructionDecl

    public static class orderingModeDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderingModeDecl
    // etc/XQFT.g:363:1: orderingModeDecl : ORDERING ( ORDERED | UNORDERED ) ;
    public final orderingModeDecl_return orderingModeDecl() throws RecognitionException {
        orderingModeDecl_return retval = new orderingModeDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDERING61=null;
        Token set62=null;

        XQFTTree ORDERING61_tree=null;
        XQFTTree set62_tree=null;

        try {
            // etc/XQFT.g:363:21: ( ORDERING ( ORDERED | UNORDERED ) )
            // etc/XQFT.g:363:23: ORDERING ( ORDERED | UNORDERED )
            {
            root_0 = (XQFTTree)adaptor.nil();

            ORDERING61=(Token)input.LT(1);
            match(input,ORDERING,FOLLOW_ORDERING_in_orderingModeDecl842); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERING61_tree = (XQFTTree)adaptor.create(ORDERING61);
            adaptor.addChild(root_0, ORDERING61_tree);
            }
            set62=(Token)input.LT(1);
            if ( (input.LA(1)>=ORDERED && input.LA(1)<=UNORDERED) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set62));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderingModeDecl844);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderingModeDecl

    public static class copyNamespacesDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start copyNamespacesDecl
    // etc/XQFT.g:364:1: copyNamespacesDecl : COPY_NAMESPACES preserveMode COMMASi inheritMode ;
    public final copyNamespacesDecl_return copyNamespacesDecl() throws RecognitionException {
        copyNamespacesDecl_return retval = new copyNamespacesDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COPY_NAMESPACES63=null;
        Token COMMASi65=null;
        preserveMode_return preserveMode64 = null;

        inheritMode_return inheritMode66 = null;


        XQFTTree COPY_NAMESPACES63_tree=null;
        XQFTTree COMMASi65_tree=null;

        try {
            // etc/XQFT.g:364:21: ( COPY_NAMESPACES preserveMode COMMASi inheritMode )
            // etc/XQFT.g:364:23: COPY_NAMESPACES preserveMode COMMASi inheritMode
            {
            root_0 = (XQFTTree)adaptor.nil();

            COPY_NAMESPACES63=(Token)input.LT(1);
            match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl858); if (failed) return retval;
            if ( backtracking==0 ) {
            COPY_NAMESPACES63_tree = (XQFTTree)adaptor.create(COPY_NAMESPACES63);
            adaptor.addChild(root_0, COPY_NAMESPACES63_tree);
            }
            pushFollow(FOLLOW_preserveMode_in_copyNamespacesDecl860);
            preserveMode64=preserveMode();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, preserveMode64.getTree());
            COMMASi65=(Token)input.LT(1);
            match(input,COMMASi,FOLLOW_COMMASi_in_copyNamespacesDecl862); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMASi65_tree = (XQFTTree)adaptor.create(COMMASi65);
            adaptor.addChild(root_0, COMMASi65_tree);
            }
            pushFollow(FOLLOW_inheritMode_in_copyNamespacesDecl864);
            inheritMode66=inheritMode();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, inheritMode66.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end copyNamespacesDecl

    public static class preserveMode_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start preserveMode
    // etc/XQFT.g:365:5: preserveMode : ( PRESERVE | NOPRESERVE );
    public final preserveMode_return preserveMode() throws RecognitionException {
        preserveMode_return retval = new preserveMode_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set67=null;

        XQFTTree set67_tree=null;

        try {
            // etc/XQFT.g:365:21: ( PRESERVE | NOPRESERVE )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set67=(Token)input.LT(1);
            if ( input.LA(1)==PRESERVE||input.LA(1)==NOPRESERVE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set67));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_preserveMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end preserveMode

    public static class inheritMode_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start inheritMode
    // etc/XQFT.g:366:5: inheritMode : ( INHERIT | NOINHERIT );
    public final inheritMode_return inheritMode() throws RecognitionException {
        inheritMode_return retval = new inheritMode_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set68=null;

        XQFTTree set68_tree=null;

        try {
            // etc/XQFT.g:366:21: ( INHERIT | NOINHERIT )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set68=(Token)input.LT(1);
            if ( (input.LA(1)>=INHERIT && input.LA(1)<=NOINHERIT) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set68));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_inheritMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end inheritMode

    public static class importStmt_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start importStmt
    // etc/XQFT.g:368:1: importStmt : IMPORT ( schemaImport | moduleImport ) ;
    public final importStmt_return importStmt() throws RecognitionException {
        importStmt_return retval = new importStmt_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token IMPORT69=null;
        schemaImport_return schemaImport70 = null;

        moduleImport_return moduleImport71 = null;


        XQFTTree IMPORT69_tree=null;

        try {
            // etc/XQFT.g:368:25: ( IMPORT ( schemaImport | moduleImport ) )
            // etc/XQFT.g:368:27: IMPORT ( schemaImport | moduleImport )
            {
            root_0 = (XQFTTree)adaptor.nil();

            IMPORT69=(Token)input.LT(1);
            match(input,IMPORT,FOLLOW_IMPORT_in_importStmt926); if (failed) return retval;
            if ( backtracking==0 ) {
            IMPORT69_tree = (XQFTTree)adaptor.create(IMPORT69);
            adaptor.addChild(root_0, IMPORT69_tree);
            }
            // etc/XQFT.g:368:34: ( schemaImport | moduleImport )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==SCHEMA) ) {
                alt10=1;
            }
            else if ( (LA10_0==MODULE) ) {
                alt10=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("368:34: ( schemaImport | moduleImport )", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // etc/XQFT.g:368:35: schemaImport
                    {
                    pushFollow(FOLLOW_schemaImport_in_importStmt929);
                    schemaImport70=schemaImport();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaImport70.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:368:50: moduleImport
                    {
                    pushFollow(FOLLOW_moduleImport_in_importStmt933);
                    moduleImport71=moduleImport();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, moduleImport71.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end importStmt

    public static class schemaImport_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaImport
    // etc/XQFT.g:369:5: schemaImport : SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? ;
    public final schemaImport_return schemaImport() throws RecognitionException {
        schemaImport_return retval = new schemaImport_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCHEMA72=null;
        Token AT75=null;
        Token COMMASi77=null;
        schemaPrefix_return schemaPrefix73 = null;

        uriLiteral_return uriLiteral74 = null;

        uriLiteral_return uriLiteral76 = null;

        uriLiteral_return uriLiteral78 = null;


        XQFTTree SCHEMA72_tree=null;
        XQFTTree AT75_tree=null;
        XQFTTree COMMASi77_tree=null;

        try {
            // etc/XQFT.g:369:25: ( SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? )
            // etc/XQFT.g:369:27: SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCHEMA72=(Token)input.LT(1);
            match(input,SCHEMA,FOLLOW_SCHEMA_in_schemaImport952); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMA72_tree = (XQFTTree)adaptor.create(SCHEMA72);
            adaptor.addChild(root_0, SCHEMA72_tree);
            }
            // etc/XQFT.g:369:34: ( schemaPrefix )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==NAMESPACE||LA11_0==DEFAULT) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // etc/XQFT.g:369:34: schemaPrefix
                    {
                    pushFollow(FOLLOW_schemaPrefix_in_schemaImport954);
                    schemaPrefix73=schemaPrefix();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaPrefix73.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_schemaImport957);
            uriLiteral74=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral74.getTree());
            // etc/XQFT.g:369:59: ( AT uriLiteral ( COMMASi uriLiteral )* )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==AT) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // etc/XQFT.g:369:60: AT uriLiteral ( COMMASi uriLiteral )*
                    {
                    AT75=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_schemaImport960); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT75_tree = (XQFTTree)adaptor.create(AT75);
                    adaptor.addChild(root_0, AT75_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_schemaImport962);
                    uriLiteral76=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral76.getTree());
                    // etc/XQFT.g:369:74: ( COMMASi uriLiteral )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==COMMASi) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // etc/XQFT.g:369:75: COMMASi uriLiteral
                    	    {
                    	    COMMASi77=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_schemaImport965); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi77_tree = (XQFTTree)adaptor.create(COMMASi77);
                    	    adaptor.addChild(root_0, COMMASi77_tree);
                    	    }
                    	    pushFollow(FOLLOW_uriLiteral_in_schemaImport967);
                    	    uriLiteral78=uriLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral78.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaImport

    public static class schemaPrefix_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaPrefix
    // etc/XQFT.g:370:9: schemaPrefix : ( ( NAMESPACE ncNameorKeyword EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) );
    public final schemaPrefix_return schemaPrefix() throws RecognitionException {
        schemaPrefix_return retval = new schemaPrefix_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NAMESPACE79=null;
        Token EQSi81=null;
        Token DEFAULT82=null;
        Token ELEMENT83=null;
        Token NAMESPACE84=null;
        ncNameorKeyword_return ncNameorKeyword80 = null;


        XQFTTree NAMESPACE79_tree=null;
        XQFTTree EQSi81_tree=null;
        XQFTTree DEFAULT82_tree=null;
        XQFTTree ELEMENT83_tree=null;
        XQFTTree NAMESPACE84_tree=null;

        try {
            // etc/XQFT.g:370:25: ( ( NAMESPACE ncNameorKeyword EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==NAMESPACE) ) {
                alt14=1;
            }
            else if ( (LA14_0==DEFAULT) ) {
                alt14=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("370:9: schemaPrefix : ( ( NAMESPACE ncNameorKeyword EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) );", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // etc/XQFT.g:370:27: ( NAMESPACE ncNameorKeyword EQSi )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:370:27: ( NAMESPACE ncNameorKeyword EQSi )
                    // etc/XQFT.g:370:28: NAMESPACE ncNameorKeyword EQSi
                    {
                    NAMESPACE79=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix990); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE79_tree = (XQFTTree)adaptor.create(NAMESPACE79);
                    adaptor.addChild(root_0, NAMESPACE79_tree);
                    }
                    pushFollow(FOLLOW_ncNameorKeyword_in_schemaPrefix992);
                    ncNameorKeyword80=ncNameorKeyword();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ncNameorKeyword80.getTree());
                    EQSi81=(Token)input.LT(1);
                    match(input,EQSi,FOLLOW_EQSi_in_schemaPrefix994); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQSi81_tree = (XQFTTree)adaptor.create(EQSi81);
                    adaptor.addChild(root_0, EQSi81_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:370:62: ( DEFAULT ELEMENT NAMESPACE )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:370:62: ( DEFAULT ELEMENT NAMESPACE )
                    // etc/XQFT.g:370:63: DEFAULT ELEMENT NAMESPACE
                    {
                    DEFAULT82=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_schemaPrefix1000); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEFAULT82_tree = (XQFTTree)adaptor.create(DEFAULT82);
                    adaptor.addChild(root_0, DEFAULT82_tree);
                    }
                    ELEMENT83=(Token)input.LT(1);
                    match(input,ELEMENT,FOLLOW_ELEMENT_in_schemaPrefix1002); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ELEMENT83_tree = (XQFTTree)adaptor.create(ELEMENT83);
                    adaptor.addChild(root_0, ELEMENT83_tree);
                    }
                    NAMESPACE84=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix1004); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE84_tree = (XQFTTree)adaptor.create(NAMESPACE84);
                    adaptor.addChild(root_0, NAMESPACE84_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaPrefix

    public static class moduleImport_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start moduleImport
    // etc/XQFT.g:371:5: moduleImport : MODULE ( NAMESPACE ncNameorKeyword EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? ;
    public final moduleImport_return moduleImport() throws RecognitionException {
        moduleImport_return retval = new moduleImport_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token MODULE85=null;
        Token NAMESPACE86=null;
        Token EQSi88=null;
        Token AT90=null;
        Token COMMASi92=null;
        ncNameorKeyword_return ncNameorKeyword87 = null;

        uriLiteral_return uriLiteral89 = null;

        uriLiteral_return uriLiteral91 = null;

        uriLiteral_return uriLiteral93 = null;


        XQFTTree MODULE85_tree=null;
        XQFTTree NAMESPACE86_tree=null;
        XQFTTree EQSi88_tree=null;
        XQFTTree AT90_tree=null;
        XQFTTree COMMASi92_tree=null;

        try {
            // etc/XQFT.g:371:25: ( MODULE ( NAMESPACE ncNameorKeyword EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? )
            // etc/XQFT.g:371:27: MODULE ( NAMESPACE ncNameorKeyword EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            MODULE85=(Token)input.LT(1);
            match(input,MODULE,FOLLOW_MODULE_in_moduleImport1023); if (failed) return retval;
            if ( backtracking==0 ) {
            MODULE85_tree = (XQFTTree)adaptor.create(MODULE85);
            adaptor.addChild(root_0, MODULE85_tree);
            }
            // etc/XQFT.g:371:34: ( NAMESPACE ncNameorKeyword EQSi )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==NAMESPACE) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // etc/XQFT.g:371:35: NAMESPACE ncNameorKeyword EQSi
                    {
                    NAMESPACE86=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleImport1026); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE86_tree = (XQFTTree)adaptor.create(NAMESPACE86);
                    adaptor.addChild(root_0, NAMESPACE86_tree);
                    }
                    pushFollow(FOLLOW_ncNameorKeyword_in_moduleImport1028);
                    ncNameorKeyword87=ncNameorKeyword();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ncNameorKeyword87.getTree());
                    EQSi88=(Token)input.LT(1);
                    match(input,EQSi,FOLLOW_EQSi_in_moduleImport1030); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQSi88_tree = (XQFTTree)adaptor.create(EQSi88);
                    adaptor.addChild(root_0, EQSi88_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_moduleImport1034);
            uriLiteral89=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral89.getTree());
            // etc/XQFT.g:371:79: ( AT uriLiteral ( COMMASi uriLiteral )* )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==AT) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // etc/XQFT.g:371:80: AT uriLiteral ( COMMASi uriLiteral )*
                    {
                    AT90=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_moduleImport1037); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT90_tree = (XQFTTree)adaptor.create(AT90);
                    adaptor.addChild(root_0, AT90_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_moduleImport1039);
                    uriLiteral91=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral91.getTree());
                    // etc/XQFT.g:371:94: ( COMMASi uriLiteral )*
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==COMMASi) ) {
                            alt16=1;
                        }


                        switch (alt16) {
                    	case 1 :
                    	    // etc/XQFT.g:371:95: COMMASi uriLiteral
                    	    {
                    	    COMMASi92=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_moduleImport1042); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi92_tree = (XQFTTree)adaptor.create(COMMASi92);
                    	    adaptor.addChild(root_0, COMMASi92_tree);
                    	    }
                    	    pushFollow(FOLLOW_uriLiteral_in_moduleImport1044);
                    	    uriLiteral93=uriLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral93.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop16;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end moduleImport

    public static class varDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varDecl
    // etc/XQFT.g:373:1: varDecl : VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL ) ;
    public final varDecl_return varDecl() throws RecognitionException {
        varDecl_return retval = new varDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token VARIABLE94=null;
        Token DOLLARSi95=null;
        Token ASSIGNSi98=null;
        Token EXTERNAL100=null;
        qName_return qName96 = null;

        typeDeclaration_return typeDeclaration97 = null;

        exprSingle_return exprSingle99 = null;


        XQFTTree VARIABLE94_tree=null;
        XQFTTree DOLLARSi95_tree=null;
        XQFTTree ASSIGNSi98_tree=null;
        XQFTTree EXTERNAL100_tree=null;

        try {
            // etc/XQFT.g:373:9: ( VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL ) )
            // etc/XQFT.g:373:11: VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL )
            {
            root_0 = (XQFTTree)adaptor.nil();

            VARIABLE94=(Token)input.LT(1);
            match(input,VARIABLE,FOLLOW_VARIABLE_in_varDecl1060); if (failed) return retval;
            if ( backtracking==0 ) {
            VARIABLE94_tree = (XQFTTree)adaptor.create(VARIABLE94);
            adaptor.addChild(root_0, VARIABLE94_tree);
            }
            DOLLARSi95=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varDecl1062); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi95_tree = (XQFTTree)adaptor.create(DOLLARSi95);
            adaptor.addChild(root_0, DOLLARSi95_tree);
            }
            pushFollow(FOLLOW_qName_in_varDecl1064);
            qName96=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName96.getTree());
            // etc/XQFT.g:373:35: ( typeDeclaration )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==AS) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // etc/XQFT.g:373:35: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_varDecl1066);
                    typeDeclaration97=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration97.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:373:52: ( ( ASSIGNSi exprSingle ) | EXTERNAL )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==ASSIGNSi) ) {
                alt19=1;
            }
            else if ( (LA19_0==EXTERNAL) ) {
                alt19=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("373:52: ( ( ASSIGNSi exprSingle ) | EXTERNAL )", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // etc/XQFT.g:373:53: ( ASSIGNSi exprSingle )
                    {
                    // etc/XQFT.g:373:53: ( ASSIGNSi exprSingle )
                    // etc/XQFT.g:373:54: ASSIGNSi exprSingle
                    {
                    ASSIGNSi98=(Token)input.LT(1);
                    match(input,ASSIGNSi,FOLLOW_ASSIGNSi_in_varDecl1071); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ASSIGNSi98_tree = (XQFTTree)adaptor.create(ASSIGNSi98);
                    adaptor.addChild(root_0, ASSIGNSi98_tree);
                    }
                    pushFollow(FOLLOW_exprSingle_in_varDecl1073);
                    exprSingle99=exprSingle();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle99.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:373:77: EXTERNAL
                    {
                    EXTERNAL100=(Token)input.LT(1);
                    match(input,EXTERNAL,FOLLOW_EXTERNAL_in_varDecl1078); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXTERNAL100_tree = (XQFTTree)adaptor.create(EXTERNAL100);
                    adaptor.addChild(root_0, EXTERNAL100_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varDecl

    public static class qName_return extends ParserRuleReturnScope {
        public String text;
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qName
    // etc/XQFT.g:374:5: qName returns [String text] : ( QName | ncNameorKeyword );
    public final qName_return qName() throws RecognitionException {
        qName_return retval = new qName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token QName101=null;
        ncNameorKeyword_return ncNameorKeyword102 = null;


        XQFTTree QName101_tree=null;

        try {
            // etc/XQFT.g:374:33: ( QName | ncNameorKeyword )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==QName) ) {
                alt20=1;
            }
            else if ( ((LA20_0>=XQUERY && LA20_0<=VERSION)||LA20_0==ENCODING||(LA20_0>=MODULE && LA20_0<=NAMESPACE)||(LA20_0>=DECLARE && LA20_0<=VARIABLE)||LA20_0==EXTERNAL||LA20_0==AS||(LA20_0>=OPTION && LA20_0<=DOCUMENT_NODE)||(LA20_0>=SCHEMA_ELEMENT && LA20_0<=NODE)||(LA20_0>=RETURN && LA20_0<=TO)||(LA20_0>=DIV && LA20_0<=UNION)||(LA20_0>=INTERSECT && LA20_0<=GE)||LA20_0==IS||(LA20_0>=WEIGHT && LA20_0<=FTNOT)||(LA20_0>=ANY && LA20_0<=FROM)||(LA20_0>=WINDOW && LA20_0<=STRICT)||(LA20_0>=PARENT && LA20_0<=ANCESTOR_OR_SELF)||(LA20_0>=CHILD && LA20_0<=FOLLOWING)||(LA20_0>=DOCUMENT && LA20_0<=NCName)) ) {
                alt20=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("374:5: qName returns [String text] : ( QName | ncNameorKeyword );", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // etc/XQFT.g:375:9: QName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    QName101=(Token)input.LT(1);
                    match(input,QName,FOLLOW_QName_in_qName1103); if (failed) return retval;
                    if ( backtracking==0 ) {
                    QName101_tree = (XQFTTree)adaptor.create(QName101);
                    adaptor.addChild(root_0, QName101_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:376:11: ncNameorKeyword
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ncNameorKeyword_in_qName1118);
                    ncNameorKeyword102=ncNameorKeyword();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ncNameorKeyword102.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end qName

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeDeclaration
    // etc/XQFT.g:379:1: typeDeclaration : AS sequenceType ;
    public final typeDeclaration_return typeDeclaration() throws RecognitionException {
        typeDeclaration_return retval = new typeDeclaration_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AS103=null;
        sequenceType_return sequenceType104 = null;


        XQFTTree AS103_tree=null;

        try {
            // etc/XQFT.g:379:17: ( AS sequenceType )
            // etc/XQFT.g:379:19: AS sequenceType
            {
            root_0 = (XQFTTree)adaptor.nil();

            AS103=(Token)input.LT(1);
            match(input,AS,FOLLOW_AS_in_typeDeclaration1134); if (failed) return retval;
            if ( backtracking==0 ) {
            AS103_tree = (XQFTTree)adaptor.create(AS103);
            adaptor.addChild(root_0, AS103_tree);
            }
            pushFollow(FOLLOW_sequenceType_in_typeDeclaration1136);
            sequenceType104=sequenceType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType104.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeDeclaration

    public static class functionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionDecl
    // etc/XQFT.g:381:1: functionDecl : FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL ) -> ^( AST_FUNCTIONDECL qName ( paramList )? ( sequenceType )? ( enclosedExpr )? ( EXTERNAL )? ) ;
    public final functionDecl_return functionDecl() throws RecognitionException {
        functionDecl_return retval = new functionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FUNCTION105=null;
        Token LPARSi107=null;
        Token RPARSi109=null;
        Token AS110=null;
        Token EXTERNAL113=null;
        qName_return qName106 = null;

        paramList_return paramList108 = null;

        sequenceType_return sequenceType111 = null;

        enclosedExpr_return enclosedExpr112 = null;


        XQFTTree FUNCTION105_tree=null;
        XQFTTree LPARSi107_tree=null;
        XQFTTree RPARSi109_tree=null;
        XQFTTree AS110_tree=null;
        XQFTTree EXTERNAL113_tree=null;
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_paramList=new RewriteRuleSubtreeStream(adaptor,"rule paramList");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        RewriteRuleSubtreeStream stream_enclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule enclosedExpr");
        try {
            // etc/XQFT.g:381:14: ( FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL ) -> ^( AST_FUNCTIONDECL qName ( paramList )? ( sequenceType )? ( enclosedExpr )? ( EXTERNAL )? ) )
            // etc/XQFT.g:382:5: FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL )
            {
            FUNCTION105=(Token)input.LT(1);
            match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDecl1153); if (failed) return retval;
            if ( backtracking==0 ) stream_FUNCTION.add(FUNCTION105);

            pushFollow(FOLLOW_qName_in_functionDecl1155);
            qName106=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qName.add(qName106.getTree());
            LPARSi107=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_functionDecl1157); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi107);

            // etc/XQFT.g:382:27: ( paramList )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==DOLLARSi) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // etc/XQFT.g:382:27: paramList
                    {
                    pushFollow(FOLLOW_paramList_in_functionDecl1159);
                    paramList108=paramList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_paramList.add(paramList108.getTree());

                    }
                    break;

            }

            RPARSi109=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_functionDecl1162); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi109);

            // etc/XQFT.g:383:9: ( AS sequenceType )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==AS) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // etc/XQFT.g:383:10: AS sequenceType
                    {
                    AS110=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_functionDecl1174); if (failed) return retval;
                    if ( backtracking==0 ) stream_AS.add(AS110);

                    pushFollow(FOLLOW_sequenceType_in_functionDecl1176);
                    sequenceType111=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_sequenceType.add(sequenceType111.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:383:28: ( enclosedExpr | EXTERNAL )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LBRACESi) ) {
                alt23=1;
            }
            else if ( (LA23_0==EXTERNAL) ) {
                alt23=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("383:28: ( enclosedExpr | EXTERNAL )", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // etc/XQFT.g:383:29: enclosedExpr
                    {
                    pushFollow(FOLLOW_enclosedExpr_in_functionDecl1181);
                    enclosedExpr112=enclosedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_enclosedExpr.add(enclosedExpr112.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:383:44: EXTERNAL
                    {
                    EXTERNAL113=(Token)input.LT(1);
                    match(input,EXTERNAL,FOLLOW_EXTERNAL_in_functionDecl1185); if (failed) return retval;
                    if ( backtracking==0 ) stream_EXTERNAL.add(EXTERNAL113);


                    }
                    break;

            }


            // AST REWRITE
            // elements: EXTERNAL, paramList, sequenceType, qName, enclosedExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 384:5: -> ^( AST_FUNCTIONDECL qName ( paramList )? ( sequenceType )? ( enclosedExpr )? ( EXTERNAL )? )
            {
                // etc/XQFT.g:384:8: ^( AST_FUNCTIONDECL qName ( paramList )? ( sequenceType )? ( enclosedExpr )? ( EXTERNAL )? )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FUNCTIONDECL, "AST_FUNCTIONDECL"), root_1);

                adaptor.addChild(root_1, stream_qName.next());
                // etc/XQFT.g:384:33: ( paramList )?
                if ( stream_paramList.hasNext() ) {
                    adaptor.addChild(root_1, stream_paramList.next());

                }
                stream_paramList.reset();
                // etc/XQFT.g:384:44: ( sequenceType )?
                if ( stream_sequenceType.hasNext() ) {
                    adaptor.addChild(root_1, stream_sequenceType.next());

                }
                stream_sequenceType.reset();
                // etc/XQFT.g:384:58: ( enclosedExpr )?
                if ( stream_enclosedExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_enclosedExpr.next());

                }
                stream_enclosedExpr.reset();
                // etc/XQFT.g:384:72: ( EXTERNAL )?
                if ( stream_EXTERNAL.hasNext() ) {
                    adaptor.addChild(root_1, stream_EXTERNAL.next());

                }
                stream_EXTERNAL.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionDecl

    public static class paramList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start paramList
    // etc/XQFT.g:387:5: paramList : param ( COMMASi param )* ;
    public final paramList_return paramList() throws RecognitionException {
        paramList_return retval = new paramList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMASi115=null;
        param_return param114 = null;

        param_return param116 = null;


        XQFTTree COMMASi115_tree=null;

        try {
            // etc/XQFT.g:387:18: ( param ( COMMASi param )* )
            // etc/XQFT.g:387:20: param ( COMMASi param )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_param_in_paramList1226);
            param114=param();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, param114.getTree());
            // etc/XQFT.g:387:26: ( COMMASi param )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMASi) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // etc/XQFT.g:387:27: COMMASi param
            	    {
            	    COMMASi115=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_paramList1229); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMASi115_tree = (XQFTTree)adaptor.create(COMMASi115);
            	    adaptor.addChild(root_0, COMMASi115_tree);
            	    }
            	    pushFollow(FOLLOW_param_in_paramList1231);
            	    param116=param();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, param116.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end paramList

    public static class param_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start param
    // etc/XQFT.g:388:9: param : DOLLARSi qName ( typeDeclaration )? ;
    public final param_return param() throws RecognitionException {
        param_return retval = new param_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi117=null;
        qName_return qName118 = null;

        typeDeclaration_return typeDeclaration119 = null;


        XQFTTree DOLLARSi117_tree=null;

        try {
            // etc/XQFT.g:388:18: ( DOLLARSi qName ( typeDeclaration )? )
            // etc/XQFT.g:388:20: DOLLARSi qName ( typeDeclaration )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOLLARSi117=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_param1251); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi117_tree = (XQFTTree)adaptor.create(DOLLARSi117);
            adaptor.addChild(root_0, DOLLARSi117_tree);
            }
            pushFollow(FOLLOW_qName_in_param1253);
            qName118=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName118.getTree());
            // etc/XQFT.g:388:35: ( typeDeclaration )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // etc/XQFT.g:388:35: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_param1255);
                    typeDeclaration119=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration119.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end param

    public static class enclosedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enclosedExpr
    // etc/XQFT.g:389:5: enclosedExpr : LBRACESi expr RBRACSi ;
    public final enclosedExpr_return enclosedExpr() throws RecognitionException {
        enclosedExpr_return retval = new enclosedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi120=null;
        Token RBRACSi122=null;
        expr_return expr121 = null;


        XQFTTree LBRACESi120_tree=null;
        XQFTTree RBRACSi122_tree=null;

        try {
            // etc/XQFT.g:389:18: ( LBRACESi expr RBRACSi )
            // etc/XQFT.g:390:9: LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LBRACESi120=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_enclosedExpr1276); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_enclosedExpr1288);
            expr121=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr121.getTree());
            RBRACSi122=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_enclosedExpr1299); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end enclosedExpr

    public static class optionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start optionDecl
    // etc/XQFT.g:395:1: optionDecl : OPTION qName StringLiteral ;
    public final optionDecl_return optionDecl() throws RecognitionException {
        optionDecl_return retval = new optionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OPTION123=null;
        Token StringLiteral125=null;
        qName_return qName124 = null;


        XQFTTree OPTION123_tree=null;
        XQFTTree StringLiteral125_tree=null;

        try {
            // etc/XQFT.g:395:12: ( OPTION qName StringLiteral )
            // etc/XQFT.g:395:14: OPTION qName StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            OPTION123=(Token)input.LT(1);
            match(input,OPTION,FOLLOW_OPTION_in_optionDecl1313); if (failed) return retval;
            if ( backtracking==0 ) {
            OPTION123_tree = (XQFTTree)adaptor.create(OPTION123);
            adaptor.addChild(root_0, OPTION123_tree);
            }
            pushFollow(FOLLOW_qName_in_optionDecl1315);
            qName124=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName124.getTree());
            StringLiteral125=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_optionDecl1317); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral125_tree = (XQFTTree)adaptor.create(StringLiteral125);
            adaptor.addChild(root_0, StringLiteral125_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end optionDecl

    public static class ftOptionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOptionDecl
    // etc/XQFT.g:397:1: ftOptionDecl : FTOPTION ftMatchOptions ;
    public final ftOptionDecl_return ftOptionDecl() throws RecognitionException {
        ftOptionDecl_return retval = new ftOptionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTOPTION126=null;
        ftMatchOptions_return ftMatchOptions127 = null;


        XQFTTree FTOPTION126_tree=null;

        try {
            // etc/XQFT.g:397:14: ( FTOPTION ftMatchOptions )
            // etc/XQFT.g:397:16: FTOPTION ftMatchOptions
            {
            root_0 = (XQFTTree)adaptor.nil();

            FTOPTION126=(Token)input.LT(1);
            match(input,FTOPTION,FOLLOW_FTOPTION_in_ftOptionDecl1325); if (failed) return retval;
            if ( backtracking==0 ) {
            FTOPTION126_tree = (XQFTTree)adaptor.create(FTOPTION126);
            adaptor.addChild(root_0, FTOPTION126_tree);
            }
            pushFollow(FOLLOW_ftMatchOptions_in_ftOptionDecl1327);
            ftMatchOptions127=ftMatchOptions();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOptions127.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOptionDecl

    public static class ftMatchOptions_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMatchOptions
    // etc/XQFT.g:398:5: ftMatchOptions : ( ftMatchOption )+ ;
    public final ftMatchOptions_return ftMatchOptions() throws RecognitionException {
        ftMatchOptions_return retval = new ftMatchOptions_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftMatchOption_return ftMatchOption128 = null;



        try {
            // etc/XQFT.g:398:20: ( ( ftMatchOption )+ )
            // etc/XQFT.g:398:22: ( ftMatchOption )+
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:398:22: ( ftMatchOption )+
            int cnt26=0;
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==OPTION||LA26_0==CASE||LA26_0==WITHOUT||LA26_0==WITH||LA26_0==LANGUAGE||(LA26_0>=LOWERCASE && LA26_0<=DIACRITICS)) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // etc/XQFT.g:398:22: ftMatchOption
            	    {
            	    pushFollow(FOLLOW_ftMatchOption_in_ftMatchOptions1338);
            	    ftMatchOption128=ftMatchOption();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOption128.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt26 >= 1 ) break loop26;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(26, input);
                        throw eee;
                }
                cnt26++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMatchOptions

    public static class sequenceType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sequenceType
    // etc/XQFT.g:402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );
    public final sequenceType_return sequenceType() throws RecognitionException {
        sequenceType_return retval = new sequenceType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token EMPTY_SEQUENCE129=null;
        Token LPARSi130=null;
        Token RPARSi131=null;
        itemType_return itemType132 = null;

        occurrenceIndicator_return occurrenceIndicator133 = null;

        itemType_return itemType134 = null;


        XQFTTree EMPTY_SEQUENCE129_tree=null;
        XQFTTree LPARSi130_tree=null;
        XQFTTree RPARSi131_tree=null;

        try {
            // etc/XQFT.g:402:28: ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType )
            int alt27=3;
            switch ( input.LA(1) ) {
            case EMPTY_SEQUENCE:
                {
                int LA27_1 = input.LA(2);

                if ( (synpred2()) ) {
                    alt27=1;
                }
                else if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOCUMENT_NODE:
                {
                int LA27_2 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 2, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA27_3 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 3, input);

                    throw nvae;
                }
                }
                break;
            case ATTRIBUTE:
                {
                int LA27_4 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 4, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA_ELEMENT:
                {
                int LA27_5 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 5, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                int LA27_6 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 6, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA27_7 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 7, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA27_8 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 8, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA27_9 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 9, input);

                    throw nvae;
                }
                }
                break;
            case NODE:
                {
                int LA27_10 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 10, input);

                    throw nvae;
                }
                }
                break;
            case ITEM:
                {
                int LA27_11 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 11, input);

                    throw nvae;
                }
                }
                break;
            case QName:
                {
                int LA27_12 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 12, input);

                    throw nvae;
                }
                }
                break;
            case NCName:
                {
                int LA27_13 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 13, input);

                    throw nvae;
                }
                }
                break;
            case ALL:
                {
                int LA27_14 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 14, input);

                    throw nvae;
                }
                }
                break;
            case ANY:
                {
                int LA27_15 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 15, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR:
                {
                int LA27_16 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 16, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                int LA27_17 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 17, input);

                    throw nvae;
                }
                }
                break;
            case AND:
                {
                int LA27_18 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 18, input);

                    throw nvae;
                }
                }
                break;
            case AS:
                {
                int LA27_19 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 19, input);

                    throw nvae;
                }
                }
                break;
            case ASCENDING:
                {
                int LA27_20 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 20, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA27_21 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 21, input);

                    throw nvae;
                }
                }
                break;
            case BASE_URI:
                {
                int LA27_22 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 22, input);

                    throw nvae;
                }
                }
                break;
            case BY:
                {
                int LA27_23 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 23, input);

                    throw nvae;
                }
                }
                break;
            case BOUNDARYSPACE:
                {
                int LA27_24 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 24, input);

                    throw nvae;
                }
                }
                break;
            case CASE:
                {
                int LA27_25 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 25, input);

                    throw nvae;
                }
                }
                break;
            case CAST:
                {
                int LA27_26 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 26, input);

                    throw nvae;
                }
                }
                break;
            case CASTABLE:
                {
                int LA27_27 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 27, input);

                    throw nvae;
                }
                }
                break;
            case CHILD:
                {
                int LA27_28 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 28, input);

                    throw nvae;
                }
                }
                break;
            case COLLATION:
                {
                int LA27_29 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 29, input);

                    throw nvae;
                }
                }
                break;
            case CONSTRUCTION:
                {
                int LA27_30 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 30, input);

                    throw nvae;
                }
                }
                break;
            case CONTENT:
                {
                int LA27_31 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 31, input);

                    throw nvae;
                }
                }
                break;
            case COPY_NAMESPACES:
                {
                int LA27_32 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 32, input);

                    throw nvae;
                }
                }
                break;
            case DECLARE:
                {
                int LA27_33 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 33, input);

                    throw nvae;
                }
                }
                break;
            case DEFAULT:
                {
                int LA27_34 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 34, input);

                    throw nvae;
                }
                }
                break;
            case DESCENDANT:
                {
                int LA27_35 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 35, input);

                    throw nvae;
                }
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                int LA27_36 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 36, input);

                    throw nvae;
                }
                }
                break;
            case DESCENDING:
                {
                int LA27_37 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 37, input);

                    throw nvae;
                }
                }
                break;
            case DIACRITICS:
                {
                int LA27_38 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 38, input);

                    throw nvae;
                }
                }
                break;
            case DIFFERENT:
                {
                int LA27_39 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 39, input);

                    throw nvae;
                }
                }
                break;
            case DISTANCE:
                {
                int LA27_40 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 40, input);

                    throw nvae;
                }
                }
                break;
            case DIV:
                {
                int LA27_41 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 41, input);

                    throw nvae;
                }
                }
                break;
            case DOCUMENT:
                {
                int LA27_42 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 42, input);

                    throw nvae;
                }
                }
                break;
            case ELSE:
                {
                int LA27_43 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 43, input);

                    throw nvae;
                }
                }
                break;
            case ENCODING:
                {
                int LA27_44 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 44, input);

                    throw nvae;
                }
                }
                break;
            case END:
                {
                int LA27_45 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 45, input);

                    throw nvae;
                }
                }
                break;
            case ENTIRE:
                {
                int LA27_46 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 46, input);

                    throw nvae;
                }
                }
                break;
            case EMPTY:
                {
                int LA27_47 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 47, input);

                    throw nvae;
                }
                }
                break;
            case EQ:
                {
                int LA27_48 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 48, input);

                    throw nvae;
                }
                }
                break;
            case EVERY:
                {
                int LA27_49 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 49, input);

                    throw nvae;
                }
                }
                break;
            case EXACTLY:
                {
                int LA27_50 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 50, input);

                    throw nvae;
                }
                }
                break;
            case EXCEPT:
                {
                int LA27_51 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 51, input);

                    throw nvae;
                }
                }
                break;
            case EXTERNAL:
                {
                int LA27_52 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 52, input);

                    throw nvae;
                }
                }
                break;
            case FOLLOWING:
                {
                int LA27_53 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 53, input);

                    throw nvae;
                }
                }
                break;
            case FOLLOWING_SIBLING:
                {
                int LA27_54 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 54, input);

                    throw nvae;
                }
                }
                break;
            case FOR:
                {
                int LA27_55 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 55, input);

                    throw nvae;
                }
                }
                break;
            case FROM:
                {
                int LA27_56 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 56, input);

                    throw nvae;
                }
                }
                break;
            case FTAND:
                {
                int LA27_57 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 57, input);

                    throw nvae;
                }
                }
                break;
            case FTCONTAINS:
                {
                int LA27_58 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 58, input);

                    throw nvae;
                }
                }
                break;
            case FTNOT:
                {
                int LA27_59 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 59, input);

                    throw nvae;
                }
                }
                break;
            case FTOPTION:
                {
                int LA27_60 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 60, input);

                    throw nvae;
                }
                }
                break;
            case FTOR:
                {
                int LA27_61 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 61, input);

                    throw nvae;
                }
                }
                break;
            case FUNCTION:
                {
                int LA27_62 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 62, input);

                    throw nvae;
                }
                }
                break;
            case GE:
                {
                int LA27_63 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 63, input);

                    throw nvae;
                }
                }
                break;
            case GREATEST:
                {
                int LA27_64 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 64, input);

                    throw nvae;
                }
                }
                break;
            case GT:
                {
                int LA27_65 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 65, input);

                    throw nvae;
                }
                }
                break;
            case IDIV:
                {
                int LA27_66 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 66, input);

                    throw nvae;
                }
                }
                break;
            case IF:
                {
                int LA27_67 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 67, input);

                    throw nvae;
                }
                }
                break;
            case IMPORT:
                {
                int LA27_68 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 68, input);

                    throw nvae;
                }
                }
                break;
            case IN:
                {
                int LA27_69 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 69, input);

                    throw nvae;
                }
                }
                break;
            case INHERIT:
                {
                int LA27_70 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 70, input);

                    throw nvae;
                }
                }
                break;
            case INSENSITIVE:
                {
                int LA27_71 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 71, input);

                    throw nvae;
                }
                }
                break;
            case INSTANCE:
                {
                int LA27_72 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 72, input);

                    throw nvae;
                }
                }
                break;
            case INTERSECT:
                {
                int LA27_73 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 73, input);

                    throw nvae;
                }
                }
                break;
            case IS:
                {
                int LA27_74 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 74, input);

                    throw nvae;
                }
                }
                break;
            case LANGUAGE:
                {
                int LA27_75 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 75, input);

                    throw nvae;
                }
                }
                break;
            case LAX:
                {
                int LA27_76 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 76, input);

                    throw nvae;
                }
                }
                break;
            case LE:
                {
                int LA27_77 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 77, input);

                    throw nvae;
                }
                }
                break;
            case LEAST:
                {
                int LA27_78 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 78, input);

                    throw nvae;
                }
                }
                break;
            case LET:
                {
                int LA27_79 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 79, input);

                    throw nvae;
                }
                }
                break;
            case LEVELS:
                {
                int LA27_80 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 80, input);

                    throw nvae;
                }
                }
                break;
            case LOWERCASE:
                {
                int LA27_81 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 81, input);

                    throw nvae;
                }
                }
                break;
            case LT:
                {
                int LA27_82 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 82, input);

                    throw nvae;
                }
                }
                break;
            case MOD:
                {
                int LA27_83 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 83, input);

                    throw nvae;
                }
                }
                break;
            case MODULE:
                {
                int LA27_84 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 84, input);

                    throw nvae;
                }
                }
                break;
            case MOST:
                {
                int LA27_85 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 85, input);

                    throw nvae;
                }
                }
                break;
            case NAMESPACE:
                {
                int LA27_86 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 86, input);

                    throw nvae;
                }
                }
                break;
            case NE:
                {
                int LA27_87 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 87, input);

                    throw nvae;
                }
                }
                break;
            case NOINHERIT:
                {
                int LA27_88 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 88, input);

                    throw nvae;
                }
                }
                break;
            case NOPRESERVE:
                {
                int LA27_89 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 89, input);

                    throw nvae;
                }
                }
                break;
            case NOT:
                {
                int LA27_90 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 90, input);

                    throw nvae;
                }
                }
                break;
            case OCCURS:
                {
                int LA27_91 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 91, input);

                    throw nvae;
                }
                }
                break;
            case OF:
                {
                int LA27_92 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 92, input);

                    throw nvae;
                }
                }
                break;
            case OPTION:
                {
                int LA27_93 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 93, input);

                    throw nvae;
                }
                }
                break;
            case OR:
                {
                int LA27_94 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 94, input);

                    throw nvae;
                }
                }
                break;
            case ORDER:
                {
                int LA27_95 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 95, input);

                    throw nvae;
                }
                }
                break;
            case ORDERED:
                {
                int LA27_96 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 96, input);

                    throw nvae;
                }
                }
                break;
            case ORDERING:
                {
                int LA27_97 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 97, input);

                    throw nvae;
                }
                }
                break;
            case PARAGRAPH:
                {
                int LA27_98 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 98, input);

                    throw nvae;
                }
                }
                break;
            case PARAGRAPHS:
                {
                int LA27_99 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 99, input);

                    throw nvae;
                }
                }
                break;
            case PARENT:
                {
                int LA27_100 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 100, input);

                    throw nvae;
                }
                }
                break;
            case PHRASE:
                {
                int LA27_101 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 101, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING:
                {
                int LA27_102 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 102, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING_SIBLING:
                {
                int LA27_103 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 103, input);

                    throw nvae;
                }
                }
                break;
            case PRESERVE:
                {
                int LA27_104 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 104, input);

                    throw nvae;
                }
                }
                break;
            case RELATIONSHIP:
                {
                int LA27_105 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 105, input);

                    throw nvae;
                }
                }
                break;
            case RETURN:
                {
                int LA27_106 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 106, input);

                    throw nvae;
                }
                }
                break;
            case SAME:
                {
                int LA27_107 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 107, input);

                    throw nvae;
                }
                }
                break;
            case SATISFIES:
                {
                int LA27_108 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 108, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA:
                {
                int LA27_109 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 109, input);

                    throw nvae;
                }
                }
                break;
            case SCORE:
                {
                int LA27_110 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 110, input);

                    throw nvae;
                }
                }
                break;
            case SELF:
                {
                int LA27_111 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 111, input);

                    throw nvae;
                }
                }
                break;
            case SENSITIVE:
                {
                int LA27_112 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 112, input);

                    throw nvae;
                }
                }
                break;
            case SENTENCES:
                {
                int LA27_113 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 113, input);

                    throw nvae;
                }
                }
                break;
            case SENTENCE:
                {
                int LA27_114 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 114, input);

                    throw nvae;
                }
                }
                break;
            case SOME:
                {
                int LA27_115 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 115, input);

                    throw nvae;
                }
                }
                break;
            case STABLE:
                {
                int LA27_116 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 116, input);

                    throw nvae;
                }
                }
                break;
            case START:
                {
                int LA27_117 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 117, input);

                    throw nvae;
                }
                }
                break;
            case STEMMING:
                {
                int LA27_118 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 118, input);

                    throw nvae;
                }
                }
                break;
            case STOP:
                {
                int LA27_119 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 119, input);

                    throw nvae;
                }
                }
                break;
            case STRICT:
                {
                int LA27_120 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 120, input);

                    throw nvae;
                }
                }
                break;
            case STRIP:
                {
                int LA27_121 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 121, input);

                    throw nvae;
                }
                }
                break;
            case THESAURUS:
                {
                int LA27_122 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 122, input);

                    throw nvae;
                }
                }
                break;
            case THEN:
                {
                int LA27_123 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 123, input);

                    throw nvae;
                }
                }
                break;
            case TIMES:
                {
                int LA27_124 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 124, input);

                    throw nvae;
                }
                }
                break;
            case TO:
                {
                int LA27_125 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 125, input);

                    throw nvae;
                }
                }
                break;
            case TREAT:
                {
                int LA27_126 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 126, input);

                    throw nvae;
                }
                }
                break;
            case TYPESWITCH:
                {
                int LA27_127 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 127, input);

                    throw nvae;
                }
                }
                break;
            case UNION:
                {
                int LA27_128 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 128, input);

                    throw nvae;
                }
                }
                break;
            case UNORDERED:
                {
                int LA27_129 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 129, input);

                    throw nvae;
                }
                }
                break;
            case UPPERCASE:
                {
                int LA27_130 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 130, input);

                    throw nvae;
                }
                }
                break;
            case VALIDATE:
                {
                int LA27_131 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 131, input);

                    throw nvae;
                }
                }
                break;
            case VARIABLE:
                {
                int LA27_132 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 132, input);

                    throw nvae;
                }
                }
                break;
            case VERSION:
                {
                int LA27_133 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 133, input);

                    throw nvae;
                }
                }
                break;
            case WEIGHT:
                {
                int LA27_134 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 134, input);

                    throw nvae;
                }
                }
                break;
            case WHERE:
                {
                int LA27_135 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 135, input);

                    throw nvae;
                }
                }
                break;
            case WILDCARDS:
                {
                int LA27_136 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 136, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
                {
                int LA27_137 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 137, input);

                    throw nvae;
                }
                }
                break;
            case WITH:
                {
                int LA27_138 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 138, input);

                    throw nvae;
                }
                }
                break;
            case WITHOUT:
                {
                int LA27_139 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 139, input);

                    throw nvae;
                }
                }
                break;
            case WORD:
                {
                int LA27_140 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 140, input);

                    throw nvae;
                }
                }
                break;
            case WORDS:
                {
                int LA27_141 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 141, input);

                    throw nvae;
                }
                }
                break;
            case XQUERY:
                {
                int LA27_142 = input.LA(2);

                if ( (synpred3()) ) {
                    alt27=2;
                }
                else if ( (true) ) {
                    alt27=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 142, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("402:1: sequenceType options {k=1; } : ( ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi | ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType );", 27, 0, input);

                throw nvae;
            }

            switch (alt27) {
                case 1 :
                    // etc/XQFT.g:403:6: ( EMPTY_SEQUENCE LPARSi )=> EMPTY_SEQUENCE LPARSi RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    EMPTY_SEQUENCE129=(Token)input.LT(1);
                    match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_sequenceType1369); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EMPTY_SEQUENCE129_tree = (XQFTTree)adaptor.create(EMPTY_SEQUENCE129);
                    adaptor.addChild(root_0, EMPTY_SEQUENCE129_tree);
                    }
                    LPARSi130=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_sequenceType1371); if (failed) return retval;
                    RPARSi131=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_sequenceType1374); if (failed) return retval;

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:404:6: ( itemType occurrenceIndicator )=> itemType occurrenceIndicator
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_itemType_in_sequenceType1390);
                    itemType132=itemType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, itemType132.getTree());
                    pushFollow(FOLLOW_occurrenceIndicator_in_sequenceType1392);
                    occurrenceIndicator133=occurrenceIndicator();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, occurrenceIndicator133.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:405:7: itemType
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_itemType_in_sequenceType1400);
                    itemType134=itemType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, itemType134.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end sequenceType

    public static class itemType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start itemType
    // etc/XQFT.g:407:5: itemType : ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType ) ;
    public final itemType_return itemType() throws RecognitionException {
        itemType_return retval = new itemType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ITEM136=null;
        Token LPARSi137=null;
        Token RPARSi138=null;
        kindTest_return kindTest135 = null;

        atomicType_return atomicType139 = null;


        XQFTTree ITEM136_tree=null;
        XQFTTree LPARSi137_tree=null;
        XQFTTree RPARSi138_tree=null;

        try {
            // etc/XQFT.g:407:14: ( ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType ) )
            // etc/XQFT.g:407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )
            int alt28=3;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                int LA28_1 = input.LA(2);

                if ( (LA28_1==LPARSi) ) {
                    alt28=1;
                }
                else if ( (LA28_1==EOF||LA28_1==SEMICOLONSi||(LA28_1>=EQSi && LA28_1<=COMMASi)||LA28_1==DEFAULT||(LA28_1>=COLLATION && LA28_1<=EMPTY)||LA28_1==AT||(LA28_1>=ASSIGNSi && LA28_1<=EXTERNAL)||(LA28_1>=RPARSi && LA28_1<=RBRACSi)||(LA28_1>=QUESTIONSi && LA28_1<=STARSi)||(LA28_1>=PLUSSi && LA28_1<=WHERE)||(LA28_1>=STABLE && LA28_1<=DESCENDING)||LA28_1==SATISFIES||LA28_1==CASE||(LA28_1>=ELSE && LA28_1<=INSTANCE)||LA28_1==WITHOUT||(LA28_1>=EQ && LA28_1<=NODEAFTERSi)||LA28_1==WORDS||LA28_1==TIMES||(LA28_1>=SENTENCES && LA28_1<=PARAGRAPHS)||LA28_1==LEVELS||LA28_1==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 1, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA28_2 = input.LA(2);

                if ( (LA28_2==LPARSi) ) {
                    alt28=1;
                }
                else if ( (LA28_2==EOF||LA28_2==SEMICOLONSi||(LA28_2>=EQSi && LA28_2<=COMMASi)||LA28_2==DEFAULT||(LA28_2>=COLLATION && LA28_2<=EMPTY)||LA28_2==AT||(LA28_2>=ASSIGNSi && LA28_2<=EXTERNAL)||(LA28_2>=RPARSi && LA28_2<=RBRACSi)||(LA28_2>=QUESTIONSi && LA28_2<=STARSi)||(LA28_2>=PLUSSi && LA28_2<=WHERE)||(LA28_2>=STABLE && LA28_2<=DESCENDING)||LA28_2==SATISFIES||LA28_2==CASE||(LA28_2>=ELSE && LA28_2<=INSTANCE)||LA28_2==WITHOUT||(LA28_2>=EQ && LA28_2<=NODEAFTERSi)||LA28_2==WORDS||LA28_2==TIMES||(LA28_2>=SENTENCES && LA28_2<=PARAGRAPHS)||LA28_2==LEVELS||LA28_2==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 2, input);

                    throw nvae;
                }
                }
                break;
            case ATTRIBUTE:
                {
                int LA28_3 = input.LA(2);

                if ( (LA28_3==LPARSi) ) {
                    alt28=1;
                }
                else if ( (LA28_3==EOF||LA28_3==SEMICOLONSi||(LA28_3>=EQSi && LA28_3<=COMMASi)||LA28_3==DEFAULT||(LA28_3>=COLLATION && LA28_3<=EMPTY)||LA28_3==AT||(LA28_3>=ASSIGNSi && LA28_3<=EXTERNAL)||(LA28_3>=RPARSi && LA28_3<=RBRACSi)||(LA28_3>=QUESTIONSi && LA28_3<=STARSi)||(LA28_3>=PLUSSi && LA28_3<=WHERE)||(LA28_3>=STABLE && LA28_3<=DESCENDING)||LA28_3==SATISFIES||LA28_3==CASE||(LA28_3>=ELSE && LA28_3<=INSTANCE)||LA28_3==WITHOUT||(LA28_3>=EQ && LA28_3<=NODEAFTERSi)||LA28_3==WORDS||LA28_3==TIMES||(LA28_3>=SENTENCES && LA28_3<=PARAGRAPHS)||LA28_3==LEVELS||LA28_3==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 3, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA_ELEMENT:
                {
                int LA28_4 = input.LA(2);

                if ( (LA28_4==LPARSi) ) {
                    alt28=1;
                }
                else if ( (LA28_4==EOF||LA28_4==SEMICOLONSi||(LA28_4>=EQSi && LA28_4<=COMMASi)||LA28_4==DEFAULT||(LA28_4>=COLLATION && LA28_4<=EMPTY)||LA28_4==AT||(LA28_4>=ASSIGNSi && LA28_4<=EXTERNAL)||(LA28_4>=RPARSi && LA28_4<=RBRACSi)||(LA28_4>=QUESTIONSi && LA28_4<=STARSi)||(LA28_4>=PLUSSi && LA28_4<=WHERE)||(LA28_4>=STABLE && LA28_4<=DESCENDING)||LA28_4==SATISFIES||LA28_4==CASE||(LA28_4>=ELSE && LA28_4<=INSTANCE)||LA28_4==WITHOUT||(LA28_4>=EQ && LA28_4<=NODEAFTERSi)||LA28_4==WORDS||LA28_4==TIMES||(LA28_4>=SENTENCES && LA28_4<=PARAGRAPHS)||LA28_4==LEVELS||LA28_4==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 4, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                int LA28_5 = input.LA(2);

                if ( (LA28_5==LPARSi) ) {
                    alt28=1;
                }
                else if ( (LA28_5==EOF||LA28_5==SEMICOLONSi||(LA28_5>=EQSi && LA28_5<=COMMASi)||LA28_5==DEFAULT||(LA28_5>=COLLATION && LA28_5<=EMPTY)||LA28_5==AT||(LA28_5>=ASSIGNSi && LA28_5<=EXTERNAL)||(LA28_5>=RPARSi && LA28_5<=RBRACSi)||(LA28_5>=QUESTIONSi && LA28_5<=STARSi)||(LA28_5>=PLUSSi && LA28_5<=WHERE)||(LA28_5>=STABLE && LA28_5<=DESCENDING)||LA28_5==SATISFIES||LA28_5==CASE||(LA28_5>=ELSE && LA28_5<=INSTANCE)||LA28_5==WITHOUT||(LA28_5>=EQ && LA28_5<=NODEAFTERSi)||LA28_5==WORDS||LA28_5==TIMES||(LA28_5>=SENTENCES && LA28_5<=PARAGRAPHS)||LA28_5==LEVELS||LA28_5==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 5, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA28_6 = input.LA(2);

                if ( (LA28_6==LPARSi) ) {
                    alt28=1;
                }
                else if ( (LA28_6==EOF||LA28_6==SEMICOLONSi||(LA28_6>=EQSi && LA28_6<=COMMASi)||LA28_6==DEFAULT||(LA28_6>=COLLATION && LA28_6<=EMPTY)||LA28_6==AT||(LA28_6>=ASSIGNSi && LA28_6<=EXTERNAL)||(LA28_6>=RPARSi && LA28_6<=RBRACSi)||(LA28_6>=QUESTIONSi && LA28_6<=STARSi)||(LA28_6>=PLUSSi && LA28_6<=WHERE)||(LA28_6>=STABLE && LA28_6<=DESCENDING)||LA28_6==SATISFIES||LA28_6==CASE||(LA28_6>=ELSE && LA28_6<=INSTANCE)||LA28_6==WITHOUT||(LA28_6>=EQ && LA28_6<=NODEAFTERSi)||LA28_6==WORDS||LA28_6==TIMES||(LA28_6>=SENTENCES && LA28_6<=PARAGRAPHS)||LA28_6==LEVELS||LA28_6==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 6, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA28_7 = input.LA(2);

                if ( (LA28_7==LPARSi) ) {
                    alt28=1;
                }
                else if ( (LA28_7==EOF||LA28_7==SEMICOLONSi||(LA28_7>=EQSi && LA28_7<=COMMASi)||LA28_7==DEFAULT||(LA28_7>=COLLATION && LA28_7<=EMPTY)||LA28_7==AT||(LA28_7>=ASSIGNSi && LA28_7<=EXTERNAL)||(LA28_7>=RPARSi && LA28_7<=RBRACSi)||(LA28_7>=QUESTIONSi && LA28_7<=STARSi)||(LA28_7>=PLUSSi && LA28_7<=WHERE)||(LA28_7>=STABLE && LA28_7<=DESCENDING)||LA28_7==SATISFIES||LA28_7==CASE||(LA28_7>=ELSE && LA28_7<=INSTANCE)||LA28_7==WITHOUT||(LA28_7>=EQ && LA28_7<=NODEAFTERSi)||LA28_7==WORDS||LA28_7==TIMES||(LA28_7>=SENTENCES && LA28_7<=PARAGRAPHS)||LA28_7==LEVELS||LA28_7==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 7, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA28_8 = input.LA(2);

                if ( (LA28_8==LPARSi) ) {
                    alt28=1;
                }
                else if ( (LA28_8==EOF||LA28_8==SEMICOLONSi||(LA28_8>=EQSi && LA28_8<=COMMASi)||LA28_8==DEFAULT||(LA28_8>=COLLATION && LA28_8<=EMPTY)||LA28_8==AT||(LA28_8>=ASSIGNSi && LA28_8<=EXTERNAL)||(LA28_8>=RPARSi && LA28_8<=RBRACSi)||(LA28_8>=QUESTIONSi && LA28_8<=STARSi)||(LA28_8>=PLUSSi && LA28_8<=WHERE)||(LA28_8>=STABLE && LA28_8<=DESCENDING)||LA28_8==SATISFIES||LA28_8==CASE||(LA28_8>=ELSE && LA28_8<=INSTANCE)||LA28_8==WITHOUT||(LA28_8>=EQ && LA28_8<=NODEAFTERSi)||LA28_8==WORDS||LA28_8==TIMES||(LA28_8>=SENTENCES && LA28_8<=PARAGRAPHS)||LA28_8==LEVELS||LA28_8==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 8, input);

                    throw nvae;
                }
                }
                break;
            case NODE:
                {
                int LA28_9 = input.LA(2);

                if ( (LA28_9==LPARSi) ) {
                    alt28=1;
                }
                else if ( (LA28_9==EOF||LA28_9==SEMICOLONSi||(LA28_9>=EQSi && LA28_9<=COMMASi)||LA28_9==DEFAULT||(LA28_9>=COLLATION && LA28_9<=EMPTY)||LA28_9==AT||(LA28_9>=ASSIGNSi && LA28_9<=EXTERNAL)||(LA28_9>=RPARSi && LA28_9<=RBRACSi)||(LA28_9>=QUESTIONSi && LA28_9<=STARSi)||(LA28_9>=PLUSSi && LA28_9<=WHERE)||(LA28_9>=STABLE && LA28_9<=DESCENDING)||LA28_9==SATISFIES||LA28_9==CASE||(LA28_9>=ELSE && LA28_9<=INSTANCE)||LA28_9==WITHOUT||(LA28_9>=EQ && LA28_9<=NODEAFTERSi)||LA28_9==WORDS||LA28_9==TIMES||(LA28_9>=SENTENCES && LA28_9<=PARAGRAPHS)||LA28_9==LEVELS||LA28_9==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 9, input);

                    throw nvae;
                }
                }
                break;
            case ITEM:
                {
                int LA28_10 = input.LA(2);

                if ( (LA28_10==LPARSi) ) {
                    alt28=2;
                }
                else if ( (LA28_10==EOF||LA28_10==SEMICOLONSi||(LA28_10>=EQSi && LA28_10<=COMMASi)||LA28_10==DEFAULT||(LA28_10>=COLLATION && LA28_10<=EMPTY)||LA28_10==AT||(LA28_10>=ASSIGNSi && LA28_10<=EXTERNAL)||(LA28_10>=RPARSi && LA28_10<=RBRACSi)||(LA28_10>=QUESTIONSi && LA28_10<=STARSi)||(LA28_10>=PLUSSi && LA28_10<=WHERE)||(LA28_10>=STABLE && LA28_10<=DESCENDING)||LA28_10==SATISFIES||LA28_10==CASE||(LA28_10>=ELSE && LA28_10<=INSTANCE)||LA28_10==WITHOUT||(LA28_10>=EQ && LA28_10<=NODEAFTERSi)||LA28_10==WORDS||LA28_10==TIMES||(LA28_10>=SENTENCES && LA28_10<=PARAGRAPHS)||LA28_10==LEVELS||LA28_10==RBRACKSi) ) {
                    alt28=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 10, input);

                    throw nvae;
                }
                }
                break;
            case XQUERY:
            case VERSION:
            case ENCODING:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case DEFAULT:
            case FUNCTION:
            case COLLATION:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case BOUNDARYSPACE:
            case PRESERVE:
            case STRIP:
            case BASE_URI:
            case CONSTRUCTION:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case COPY_NAMESPACES:
            case NOPRESERVE:
            case INHERIT:
            case NOINHERIT:
            case IMPORT:
            case SCHEMA:
            case AT:
            case VARIABLE:
            case EXTERNAL:
            case QName:
            case AS:
            case OPTION:
            case FTOPTION:
            case EMPTY_SEQUENCE:
            case RETURN:
            case FOR:
            case IN:
            case SCORE:
            case LET:
            case WHERE:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case SOME:
            case EVERY:
            case SATISFIES:
            case TYPESWITCH:
            case CASE:
            case IF:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case FTCONTAINS:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case WITHOUT:
            case CONTENT:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case IS:
            case WEIGHT:
            case FTOR:
            case FTAND:
            case NOT:
            case FTNOT:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case WINDOW:
            case SENTENCES:
            case PARAGRAPHS:
            case DISTANCE:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case START:
            case END:
            case ENTIRE:
            case WITH:
            case WILDCARDS:
            case STEMMING:
            case THESAURUS:
            case STOP:
            case LANGUAGE:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case RELATIONSHIP:
            case LEVELS:
            case VALIDATE:
            case LAX:
            case STRICT:
            case PARENT:
            case ANCESTOR:
            case PRECEDING_SIBLING:
            case PRECEDING:
            case ANCESTOR_OR_SELF:
            case CHILD:
            case DESCENDANT:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case DOCUMENT:
            case NCName:
                {
                alt28=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("407:16: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 0, input);

                throw nvae;
            }

            switch (alt28) {
                case 1 :
                    // etc/XQFT.g:407:17: kindTest
                    {
                    pushFollow(FOLLOW_kindTest_in_itemType1417);
                    kindTest135=kindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, kindTest135.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:407:28: ( ITEM LPARSi RPARSi )
                    {
                    // etc/XQFT.g:407:28: ( ITEM LPARSi RPARSi )
                    // etc/XQFT.g:407:29: ITEM LPARSi RPARSi
                    {
                    ITEM136=(Token)input.LT(1);
                    match(input,ITEM,FOLLOW_ITEM_in_itemType1422); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ITEM136_tree = (XQFTTree)adaptor.create(ITEM136);
                    adaptor.addChild(root_0, ITEM136_tree);
                    }
                    LPARSi137=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_itemType1424); if (failed) return retval;
                    RPARSi138=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_itemType1427); if (failed) return retval;

                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:407:53: atomicType
                    {
                    pushFollow(FOLLOW_atomicType_in_itemType1433);
                    atomicType139=atomicType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, atomicType139.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end itemType

    public static class kindTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kindTest
    // etc/XQFT.g:408:9: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest );
    public final kindTest_return kindTest() throws RecognitionException {
        kindTest_return retval = new kindTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        documentTest_return documentTest140 = null;

        elementTest_return elementTest141 = null;

        attributeTest_return attributeTest142 = null;

        schemaElementTest_return schemaElementTest143 = null;

        schemaAttributeTest_return schemaAttributeTest144 = null;

        piTest_return piTest145 = null;

        commentTest_return commentTest146 = null;

        textTest_return textTest147 = null;

        anyKindTest_return anyKindTest148 = null;



        try {
            // etc/XQFT.g:408:18: ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest )
            int alt29=9;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                alt29=1;
                }
                break;
            case ELEMENT:
                {
                alt29=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt29=3;
                }
                break;
            case SCHEMA_ELEMENT:
                {
                alt29=4;
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                alt29=5;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt29=6;
                }
                break;
            case COMMENT:
                {
                alt29=7;
                }
                break;
            case TEXT:
                {
                alt29=8;
                }
                break;
            case NODE:
                {
                alt29=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("408:9: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest );", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // etc/XQFT.g:408:20: documentTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_documentTest_in_kindTest1449);
                    documentTest140=documentTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, documentTest140.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:409:15: elementTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_elementTest_in_kindTest1465);
                    elementTest141=elementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementTest141.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:410:15: attributeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_attributeTest_in_kindTest1481);
                    attributeTest142=attributeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attributeTest142.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:411:15: schemaElementTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaElementTest_in_kindTest1497);
                    schemaElementTest143=schemaElementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaElementTest143.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:412:15: schemaAttributeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaAttributeTest_in_kindTest1513);
                    schemaAttributeTest144=schemaAttributeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaAttributeTest144.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:413:15: piTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_piTest_in_kindTest1529);
                    piTest145=piTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, piTest145.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:414:15: commentTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_commentTest_in_kindTest1545);
                    commentTest146=commentTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, commentTest146.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:415:15: textTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_textTest_in_kindTest1561);
                    textTest147=textTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, textTest147.getTree());

                    }
                    break;
                case 9 :
                    // etc/XQFT.g:416:15: anyKindTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_anyKindTest_in_kindTest1577);
                    anyKindTest148=anyKindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, anyKindTest148.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end kindTest

    public static class documentTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start documentTest
    // etc/XQFT.g:417:13: documentTest : DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi ;
    public final documentTest_return documentTest() throws RecognitionException {
        documentTest_return retval = new documentTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOCUMENT_NODE149=null;
        Token LPARSi150=null;
        Token RPARSi153=null;
        elementTest_return elementTest151 = null;

        schemaElementTest_return schemaElementTest152 = null;


        XQFTTree DOCUMENT_NODE149_tree=null;
        XQFTTree LPARSi150_tree=null;
        XQFTTree RPARSi153_tree=null;

        try {
            // etc/XQFT.g:417:26: ( DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi )
            // etc/XQFT.g:417:28: DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOCUMENT_NODE149=(Token)input.LT(1);
            match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_documentTest1596); if (failed) return retval;
            if ( backtracking==0 ) {
            DOCUMENT_NODE149_tree = (XQFTTree)adaptor.create(DOCUMENT_NODE149);
            adaptor.addChild(root_0, DOCUMENT_NODE149_tree);
            }
            LPARSi150=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_documentTest1598); if (failed) return retval;
            // etc/XQFT.g:417:50: ( elementTest | schemaElementTest )?
            int alt30=3;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ELEMENT) ) {
                alt30=1;
            }
            else if ( (LA30_0==SCHEMA_ELEMENT) ) {
                alt30=2;
            }
            switch (alt30) {
                case 1 :
                    // etc/XQFT.g:417:51: elementTest
                    {
                    pushFollow(FOLLOW_elementTest_in_documentTest1602);
                    elementTest151=elementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementTest151.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:417:65: schemaElementTest
                    {
                    pushFollow(FOLLOW_schemaElementTest_in_documentTest1606);
                    schemaElementTest152=schemaElementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaElementTest152.getTree());

                    }
                    break;

            }

            RPARSi153=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_documentTest1610); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end documentTest

    public static class elementTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementTest
    // etc/XQFT.g:418:17: elementTest : ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi ;
    public final elementTest_return elementTest() throws RecognitionException {
        elementTest_return retval = new elementTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ELEMENT154=null;
        Token LPARSi155=null;
        Token COMMASi157=null;
        Token QUESTIONSi159=null;
        Token RPARSi160=null;
        elementNameOrWildcard_return elementNameOrWildcard156 = null;

        typeName_return typeName158 = null;


        XQFTTree ELEMENT154_tree=null;
        XQFTTree LPARSi155_tree=null;
        XQFTTree COMMASi157_tree=null;
        XQFTTree QUESTIONSi159_tree=null;
        XQFTTree RPARSi160_tree=null;

        try {
            // etc/XQFT.g:418:29: ( ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi )
            // etc/XQFT.g:418:31: ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ELEMENT154=(Token)input.LT(1);
            match(input,ELEMENT,FOLLOW_ELEMENT_in_elementTest1634); if (failed) return retval;
            if ( backtracking==0 ) {
            ELEMENT154_tree = (XQFTTree)adaptor.create(ELEMENT154);
            adaptor.addChild(root_0, ELEMENT154_tree);
            }
            LPARSi155=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_elementTest1636); if (failed) return retval;
            // etc/XQFT.g:418:47: ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( ((LA33_0>=XQUERY && LA33_0<=VERSION)||LA33_0==ENCODING||(LA33_0>=MODULE && LA33_0<=NAMESPACE)||(LA33_0>=DECLARE && LA33_0<=VARIABLE)||(LA33_0>=EXTERNAL && LA33_0<=AS)||(LA33_0>=OPTION && LA33_0<=DOCUMENT_NODE)||(LA33_0>=STARSi && LA33_0<=NODE)||(LA33_0>=RETURN && LA33_0<=TO)||(LA33_0>=DIV && LA33_0<=UNION)||(LA33_0>=INTERSECT && LA33_0<=GE)||LA33_0==IS||(LA33_0>=WEIGHT && LA33_0<=FTNOT)||(LA33_0>=ANY && LA33_0<=FROM)||(LA33_0>=WINDOW && LA33_0<=STRICT)||(LA33_0>=PARENT && LA33_0<=ANCESTOR_OR_SELF)||(LA33_0>=CHILD && LA33_0<=FOLLOWING)||(LA33_0>=DOCUMENT && LA33_0<=NCName)) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // etc/XQFT.g:418:48: elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )?
                    {
                    pushFollow(FOLLOW_elementNameOrWildcard_in_elementTest1640);
                    elementNameOrWildcard156=elementNameOrWildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementNameOrWildcard156.getTree());
                    // etc/XQFT.g:418:70: ( COMMASi typeName ( QUESTIONSi )? )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==COMMASi) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // etc/XQFT.g:418:71: COMMASi typeName ( QUESTIONSi )?
                            {
                            COMMASi157=(Token)input.LT(1);
                            match(input,COMMASi,FOLLOW_COMMASi_in_elementTest1643); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMASi157_tree = (XQFTTree)adaptor.create(COMMASi157);
                            adaptor.addChild(root_0, COMMASi157_tree);
                            }
                            pushFollow(FOLLOW_typeName_in_elementTest1645);
                            typeName158=typeName();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, typeName158.getTree());
                            // etc/XQFT.g:418:88: ( QUESTIONSi )?
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==QUESTIONSi) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    // etc/XQFT.g:418:88: QUESTIONSi
                                    {
                                    QUESTIONSi159=(Token)input.LT(1);
                                    match(input,QUESTIONSi,FOLLOW_QUESTIONSi_in_elementTest1647); if (failed) return retval;
                                    if ( backtracking==0 ) {
                                    QUESTIONSi159_tree = (XQFTTree)adaptor.create(QUESTIONSi159);
                                    adaptor.addChild(root_0, QUESTIONSi159_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            RPARSi160=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_elementTest1654); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementTest

    public static class elementNameOrWildcard_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementNameOrWildcard
    // etc/XQFT.g:419:21: elementNameOrWildcard : ( elementName | STARSi );
    public final elementNameOrWildcard_return elementNameOrWildcard() throws RecognitionException {
        elementNameOrWildcard_return retval = new elementNameOrWildcard_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STARSi162=null;
        elementName_return elementName161 = null;


        XQFTTree STARSi162_tree=null;

        try {
            // etc/XQFT.g:419:43: ( elementName | STARSi )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( ((LA34_0>=XQUERY && LA34_0<=VERSION)||LA34_0==ENCODING||(LA34_0>=MODULE && LA34_0<=NAMESPACE)||(LA34_0>=DECLARE && LA34_0<=VARIABLE)||(LA34_0>=EXTERNAL && LA34_0<=AS)||(LA34_0>=OPTION && LA34_0<=DOCUMENT_NODE)||(LA34_0>=SCHEMA_ELEMENT && LA34_0<=NODE)||(LA34_0>=RETURN && LA34_0<=TO)||(LA34_0>=DIV && LA34_0<=UNION)||(LA34_0>=INTERSECT && LA34_0<=GE)||LA34_0==IS||(LA34_0>=WEIGHT && LA34_0<=FTNOT)||(LA34_0>=ANY && LA34_0<=FROM)||(LA34_0>=WINDOW && LA34_0<=STRICT)||(LA34_0>=PARENT && LA34_0<=ANCESTOR_OR_SELF)||(LA34_0>=CHILD && LA34_0<=FOLLOWING)||(LA34_0>=DOCUMENT && LA34_0<=NCName)) ) {
                alt34=1;
            }
            else if ( (LA34_0==STARSi) ) {
                alt34=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("419:21: elementNameOrWildcard : ( elementName | STARSi );", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // etc/XQFT.g:419:45: elementName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_elementName_in_elementNameOrWildcard1682);
                    elementName161=elementName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementName161.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:419:59: STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi162=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_elementNameOrWildcard1686); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi162_tree = (XQFTTree)adaptor.create(STARSi162);
                    adaptor.addChild(root_0, STARSi162_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementNameOrWildcard

    public static class elementName_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementName
    // etc/XQFT.g:420:25: elementName : qName ;
    public final elementName_return elementName() throws RecognitionException {
        elementName_return retval = new elementName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName163 = null;



        try {
            // etc/XQFT.g:420:37: ( qName )
            // etc/XQFT.g:420:39: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_elementName1717);
            qName163=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName163.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementName

    public static class typeName_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeName
    // etc/XQFT.g:421:21: typeName : qName ;
    public final typeName_return typeName() throws RecognitionException {
        typeName_return retval = new typeName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName164 = null;



        try {
            // etc/XQFT.g:421:30: ( qName )
            // etc/XQFT.g:421:32: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_typeName1744);
            qName164=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName164.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeName

    public static class schemaElementTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaElementTest
    // etc/XQFT.g:422:17: schemaElementTest : SCHEMA_ELEMENT LPARSi elementDeclaration RPARSi ;
    public final schemaElementTest_return schemaElementTest() throws RecognitionException {
        schemaElementTest_return retval = new schemaElementTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCHEMA_ELEMENT165=null;
        Token LPARSi166=null;
        Token RPARSi168=null;
        elementDeclaration_return elementDeclaration167 = null;


        XQFTTree SCHEMA_ELEMENT165_tree=null;
        XQFTTree LPARSi166_tree=null;
        XQFTTree RPARSi168_tree=null;

        try {
            // etc/XQFT.g:422:35: ( SCHEMA_ELEMENT LPARSi elementDeclaration RPARSi )
            // etc/XQFT.g:422:37: SCHEMA_ELEMENT LPARSi elementDeclaration RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCHEMA_ELEMENT165=(Token)input.LT(1);
            match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_schemaElementTest1767); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMA_ELEMENT165_tree = (XQFTTree)adaptor.create(SCHEMA_ELEMENT165);
            adaptor.addChild(root_0, SCHEMA_ELEMENT165_tree);
            }
            LPARSi166=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_schemaElementTest1769); if (failed) return retval;
            pushFollow(FOLLOW_elementDeclaration_in_schemaElementTest1772);
            elementDeclaration167=elementDeclaration();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, elementDeclaration167.getTree());
            RPARSi168=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_schemaElementTest1774); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaElementTest

    public static class elementDeclaration_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementDeclaration
    // etc/XQFT.g:423:21: elementDeclaration : elementName ;
    public final elementDeclaration_return elementDeclaration() throws RecognitionException {
        elementDeclaration_return retval = new elementDeclaration_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        elementName_return elementName169 = null;



        try {
            // etc/XQFT.g:423:40: ( elementName )
            // etc/XQFT.g:423:42: elementName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_elementName_in_elementDeclaration1802);
            elementName169=elementName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, elementName169.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementDeclaration

    public static class attributeTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeTest
    // etc/XQFT.g:424:13: attributeTest : ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi ;
    public final attributeTest_return attributeTest() throws RecognitionException {
        attributeTest_return retval = new attributeTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ATTRIBUTE170=null;
        Token LPARSi171=null;
        Token COMMASi173=null;
        Token RPARSi175=null;
        attribNameOrWildcard_return attribNameOrWildcard172 = null;

        typeName_return typeName174 = null;


        XQFTTree ATTRIBUTE170_tree=null;
        XQFTTree LPARSi171_tree=null;
        XQFTTree COMMASi173_tree=null;
        XQFTTree RPARSi175_tree=null;

        try {
            // etc/XQFT.g:424:27: ( ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi )
            // etc/XQFT.g:424:29: ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ATTRIBUTE170=(Token)input.LT(1);
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attributeTest1821); if (failed) return retval;
            if ( backtracking==0 ) {
            ATTRIBUTE170_tree = (XQFTTree)adaptor.create(ATTRIBUTE170);
            adaptor.addChild(root_0, ATTRIBUTE170_tree);
            }
            LPARSi171=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_attributeTest1823); if (failed) return retval;
            // etc/XQFT.g:424:47: ( attribNameOrWildcard ( COMMASi typeName )? )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( ((LA36_0>=XQUERY && LA36_0<=VERSION)||LA36_0==ENCODING||(LA36_0>=MODULE && LA36_0<=NAMESPACE)||(LA36_0>=DECLARE && LA36_0<=VARIABLE)||(LA36_0>=EXTERNAL && LA36_0<=AS)||(LA36_0>=OPTION && LA36_0<=DOCUMENT_NODE)||(LA36_0>=STARSi && LA36_0<=NODE)||(LA36_0>=RETURN && LA36_0<=TO)||(LA36_0>=DIV && LA36_0<=UNION)||(LA36_0>=INTERSECT && LA36_0<=GE)||LA36_0==IS||(LA36_0>=WEIGHT && LA36_0<=FTNOT)||(LA36_0>=ANY && LA36_0<=FROM)||(LA36_0>=WINDOW && LA36_0<=STRICT)||(LA36_0>=PARENT && LA36_0<=ANCESTOR_OR_SELF)||(LA36_0>=CHILD && LA36_0<=FOLLOWING)||(LA36_0>=DOCUMENT && LA36_0<=NCName)) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // etc/XQFT.g:424:48: attribNameOrWildcard ( COMMASi typeName )?
                    {
                    pushFollow(FOLLOW_attribNameOrWildcard_in_attributeTest1827);
                    attribNameOrWildcard172=attribNameOrWildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attribNameOrWildcard172.getTree());
                    // etc/XQFT.g:424:69: ( COMMASi typeName )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==COMMASi) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // etc/XQFT.g:424:70: COMMASi typeName
                            {
                            COMMASi173=(Token)input.LT(1);
                            match(input,COMMASi,FOLLOW_COMMASi_in_attributeTest1830); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMASi173_tree = (XQFTTree)adaptor.create(COMMASi173);
                            adaptor.addChild(root_0, COMMASi173_tree);
                            }
                            pushFollow(FOLLOW_typeName_in_attributeTest1832);
                            typeName174=typeName();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, typeName174.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPARSi175=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_attributeTest1838); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeTest

    public static class attribNameOrWildcard_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attribNameOrWildcard
    // etc/XQFT.g:425:17: attribNameOrWildcard : ( attributeName | STARSi );
    public final attribNameOrWildcard_return attribNameOrWildcard() throws RecognitionException {
        attribNameOrWildcard_return retval = new attribNameOrWildcard_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STARSi177=null;
        attributeName_return attributeName176 = null;


        XQFTTree STARSi177_tree=null;

        try {
            // etc/XQFT.g:425:38: ( attributeName | STARSi )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( ((LA37_0>=XQUERY && LA37_0<=VERSION)||LA37_0==ENCODING||(LA37_0>=MODULE && LA37_0<=NAMESPACE)||(LA37_0>=DECLARE && LA37_0<=VARIABLE)||(LA37_0>=EXTERNAL && LA37_0<=AS)||(LA37_0>=OPTION && LA37_0<=DOCUMENT_NODE)||(LA37_0>=SCHEMA_ELEMENT && LA37_0<=NODE)||(LA37_0>=RETURN && LA37_0<=TO)||(LA37_0>=DIV && LA37_0<=UNION)||(LA37_0>=INTERSECT && LA37_0<=GE)||LA37_0==IS||(LA37_0>=WEIGHT && LA37_0<=FTNOT)||(LA37_0>=ANY && LA37_0<=FROM)||(LA37_0>=WINDOW && LA37_0<=STRICT)||(LA37_0>=PARENT && LA37_0<=ANCESTOR_OR_SELF)||(LA37_0>=CHILD && LA37_0<=FOLLOWING)||(LA37_0>=DOCUMENT && LA37_0<=NCName)) ) {
                alt37=1;
            }
            else if ( (LA37_0==STARSi) ) {
                alt37=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("425:17: attribNameOrWildcard : ( attributeName | STARSi );", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // etc/XQFT.g:425:40: attributeName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_attributeName_in_attribNameOrWildcard1862);
                    attributeName176=attributeName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attributeName176.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:425:56: STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi177=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_attribNameOrWildcard1866); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi177_tree = (XQFTTree)adaptor.create(STARSi177);
                    adaptor.addChild(root_0, STARSi177_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attribNameOrWildcard

    public static class attributeName_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeName
    // etc/XQFT.g:426:21: attributeName : qName ;
    public final attributeName_return attributeName() throws RecognitionException {
        attributeName_return retval = new attributeName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName178 = null;



        try {
            // etc/XQFT.g:426:35: ( qName )
            // etc/XQFT.g:426:37: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_attributeName1893);
            qName178=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName178.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeName

    public static class schemaAttributeTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaAttributeTest
    // etc/XQFT.g:427:13: schemaAttributeTest : SCHEMA_ATTRIBUTE LPARSi attributeDeclaration RPARSi ;
    public final schemaAttributeTest_return schemaAttributeTest() throws RecognitionException {
        schemaAttributeTest_return retval = new schemaAttributeTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCHEMA_ATTRIBUTE179=null;
        Token LPARSi180=null;
        Token RPARSi182=null;
        attributeDeclaration_return attributeDeclaration181 = null;


        XQFTTree SCHEMA_ATTRIBUTE179_tree=null;
        XQFTTree LPARSi180_tree=null;
        XQFTTree RPARSi182_tree=null;

        try {
            // etc/XQFT.g:427:33: ( SCHEMA_ATTRIBUTE LPARSi attributeDeclaration RPARSi )
            // etc/XQFT.g:427:35: SCHEMA_ATTRIBUTE LPARSi attributeDeclaration RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCHEMA_ATTRIBUTE179=(Token)input.LT(1);
            match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_schemaAttributeTest1912); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMA_ATTRIBUTE179_tree = (XQFTTree)adaptor.create(SCHEMA_ATTRIBUTE179);
            adaptor.addChild(root_0, SCHEMA_ATTRIBUTE179_tree);
            }
            LPARSi180=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_schemaAttributeTest1914); if (failed) return retval;
            pushFollow(FOLLOW_attributeDeclaration_in_schemaAttributeTest1917);
            attributeDeclaration181=attributeDeclaration();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, attributeDeclaration181.getTree());
            RPARSi182=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_schemaAttributeTest1919); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaAttributeTest

    public static class attributeDeclaration_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeDeclaration
    // etc/XQFT.g:428:17: attributeDeclaration : attributeName ;
    public final attributeDeclaration_return attributeDeclaration() throws RecognitionException {
        attributeDeclaration_return retval = new attributeDeclaration_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        attributeName_return attributeName183 = null;



        try {
            // etc/XQFT.g:428:38: ( attributeName )
            // etc/XQFT.g:428:40: attributeName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_attributeName_in_attributeDeclaration1943);
            attributeName183=attributeName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, attributeName183.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeDeclaration

    public static class piTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start piTest
    // etc/XQFT.g:429:13: piTest : PROCESSING_INSTRUCTION LPARSi ( ncNameorKeyword | StringLiteral )? RPARSi ;
    public final piTest_return piTest() throws RecognitionException {
        piTest_return retval = new piTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token PROCESSING_INSTRUCTION184=null;
        Token LPARSi185=null;
        Token StringLiteral187=null;
        Token RPARSi188=null;
        ncNameorKeyword_return ncNameorKeyword186 = null;


        XQFTTree PROCESSING_INSTRUCTION184_tree=null;
        XQFTTree LPARSi185_tree=null;
        XQFTTree StringLiteral187_tree=null;
        XQFTTree RPARSi188_tree=null;

        try {
            // etc/XQFT.g:429:20: ( PROCESSING_INSTRUCTION LPARSi ( ncNameorKeyword | StringLiteral )? RPARSi )
            // etc/XQFT.g:429:22: PROCESSING_INSTRUCTION LPARSi ( ncNameorKeyword | StringLiteral )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            PROCESSING_INSTRUCTION184=(Token)input.LT(1);
            match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_piTest1962); if (failed) return retval;
            if ( backtracking==0 ) {
            PROCESSING_INSTRUCTION184_tree = (XQFTTree)adaptor.create(PROCESSING_INSTRUCTION184);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION184_tree);
            }
            LPARSi185=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_piTest1964); if (failed) return retval;
            // etc/XQFT.g:429:53: ( ncNameorKeyword | StringLiteral )?
            int alt38=3;
            int LA38_0 = input.LA(1);

            if ( ((LA38_0>=XQUERY && LA38_0<=VERSION)||LA38_0==ENCODING||(LA38_0>=MODULE && LA38_0<=NAMESPACE)||(LA38_0>=DECLARE && LA38_0<=VARIABLE)||LA38_0==EXTERNAL||LA38_0==AS||(LA38_0>=OPTION && LA38_0<=DOCUMENT_NODE)||(LA38_0>=SCHEMA_ELEMENT && LA38_0<=NODE)||(LA38_0>=RETURN && LA38_0<=TO)||(LA38_0>=DIV && LA38_0<=UNION)||(LA38_0>=INTERSECT && LA38_0<=GE)||LA38_0==IS||(LA38_0>=WEIGHT && LA38_0<=FTNOT)||(LA38_0>=ANY && LA38_0<=FROM)||(LA38_0>=WINDOW && LA38_0<=STRICT)||(LA38_0>=PARENT && LA38_0<=ANCESTOR_OR_SELF)||(LA38_0>=CHILD && LA38_0<=FOLLOWING)||(LA38_0>=DOCUMENT && LA38_0<=NCName)) ) {
                alt38=1;
            }
            else if ( (LA38_0==StringLiteral) ) {
                alt38=2;
            }
            switch (alt38) {
                case 1 :
                    // etc/XQFT.g:429:54: ncNameorKeyword
                    {
                    pushFollow(FOLLOW_ncNameorKeyword_in_piTest1968);
                    ncNameorKeyword186=ncNameorKeyword();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ncNameorKeyword186.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:429:72: StringLiteral
                    {
                    StringLiteral187=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_piTest1972); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral187_tree = (XQFTTree)adaptor.create(StringLiteral187);
                    adaptor.addChild(root_0, StringLiteral187_tree);
                    }

                    }
                    break;

            }

            RPARSi188=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_piTest1976); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end piTest

    public static class commentTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start commentTest
    // etc/XQFT.g:430:13: commentTest : COMMENT LPARSi RPARSi ;
    public final commentTest_return commentTest() throws RecognitionException {
        commentTest_return retval = new commentTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMENT189=null;
        Token LPARSi190=null;
        Token RPARSi191=null;

        XQFTTree COMMENT189_tree=null;
        XQFTTree LPARSi190_tree=null;
        XQFTTree RPARSi191_tree=null;

        try {
            // etc/XQFT.g:430:25: ( COMMENT LPARSi RPARSi )
            // etc/XQFT.g:430:27: COMMENT LPARSi RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            COMMENT189=(Token)input.LT(1);
            match(input,COMMENT,FOLLOW_COMMENT_in_commentTest1996); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMENT189_tree = (XQFTTree)adaptor.create(COMMENT189);
            adaptor.addChild(root_0, COMMENT189_tree);
            }
            LPARSi190=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_commentTest1998); if (failed) return retval;
            RPARSi191=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_commentTest2001); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end commentTest

    public static class textTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start textTest
    // etc/XQFT.g:431:13: textTest : TEXT LPARSi RPARSi ;
    public final textTest_return textTest() throws RecognitionException {
        textTest_return retval = new textTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TEXT192=null;
        Token LPARSi193=null;
        Token RPARSi194=null;

        XQFTTree TEXT192_tree=null;
        XQFTTree LPARSi193_tree=null;
        XQFTTree RPARSi194_tree=null;

        try {
            // etc/XQFT.g:431:22: ( TEXT LPARSi RPARSi )
            // etc/XQFT.g:431:24: TEXT LPARSi RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            TEXT192=(Token)input.LT(1);
            match(input,TEXT,FOLLOW_TEXT_in_textTest2021); if (failed) return retval;
            if ( backtracking==0 ) {
            TEXT192_tree = (XQFTTree)adaptor.create(TEXT192);
            adaptor.addChild(root_0, TEXT192_tree);
            }
            LPARSi193=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_textTest2023); if (failed) return retval;
            RPARSi194=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_textTest2026); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end textTest

    public static class anyKindTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start anyKindTest
    // etc/XQFT.g:432:13: anyKindTest : NODE LPARSi RPARSi ;
    public final anyKindTest_return anyKindTest() throws RecognitionException {
        anyKindTest_return retval = new anyKindTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NODE195=null;
        Token LPARSi196=null;
        Token RPARSi197=null;

        XQFTTree NODE195_tree=null;
        XQFTTree LPARSi196_tree=null;
        XQFTTree RPARSi197_tree=null;

        try {
            // etc/XQFT.g:432:25: ( NODE LPARSi RPARSi )
            // etc/XQFT.g:432:27: NODE LPARSi RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            NODE195=(Token)input.LT(1);
            match(input,NODE,FOLLOW_NODE_in_anyKindTest2046); if (failed) return retval;
            if ( backtracking==0 ) {
            NODE195_tree = (XQFTTree)adaptor.create(NODE195);
            adaptor.addChild(root_0, NODE195_tree);
            }
            LPARSi196=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_anyKindTest2048); if (failed) return retval;
            RPARSi197=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_anyKindTest2051); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end anyKindTest

    public static class occurrenceIndicator_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start occurrenceIndicator
    // etc/XQFT.g:433:5: occurrenceIndicator : ( QUESTIONSi | STARSi | PLUSSi );
    public final occurrenceIndicator_return occurrenceIndicator() throws RecognitionException {
        occurrenceIndicator_return retval = new occurrenceIndicator_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set198=null;

        XQFTTree set198_tree=null;

        try {
            // etc/XQFT.g:433:25: ( QUESTIONSi | STARSi | PLUSSi )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set198=(Token)input.LT(1);
            if ( (input.LA(1)>=QUESTIONSi && input.LA(1)<=STARSi)||input.LA(1)==PLUSSi ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set198));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_occurrenceIndicator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end occurrenceIndicator

    public static class exprSingle_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exprSingle
    // etc/XQFT.g:437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );
    public final exprSingle_return exprSingle() throws RecognitionException {
        exprSingle_return retval = new exprSingle_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ifExpr_return ifExpr199 = null;

        typeswitchExpr_return typeswitchExpr200 = null;

        fLWORExpr_return fLWORExpr201 = null;

        quantifiedExpr_return quantifiedExpr202 = null;

        orExpr_return orExpr203 = null;



        try {
            // etc/XQFT.g:437:12: ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr )
            int alt39=5;
            switch ( input.LA(1) ) {
            case IF:
                {
                int LA39_1 = input.LA(2);

                if ( (LA39_1==LPARSi) ) {
                    int LA39_158 = input.LA(3);

                    if ( (synpred4()) ) {
                        alt39=1;
                    }
                    else if ( (true) ) {
                        alt39=5;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );", 39, 158, input);

                        throw nvae;
                    }
                }
                else if ( (LA39_1==EOF||LA39_1==SEMICOLONSi||(LA39_1>=EQSi && LA39_1<=COMMASi)||LA39_1==DEFAULT||(LA39_1>=COLLATION && LA39_1<=EMPTY)||LA39_1==RPARSi||LA39_1==RBRACSi||LA39_1==STARSi||(LA39_1>=PLUSSi && LA39_1<=FOR)||(LA39_1>=LET && LA39_1<=WHERE)||(LA39_1>=STABLE && LA39_1<=DESCENDING)||LA39_1==SATISFIES||LA39_1==CASE||(LA39_1>=ELSE && LA39_1<=INSTANCE)||(LA39_1>=TREAT && LA39_1<=CAST)||(LA39_1>=EQ && LA39_1<=NODEAFTERSi)||(LA39_1>=SLASHSi && LA39_1<=DBLSLASHSi)||LA39_1==COLONSi||(LA39_1>=LBRACKSi && LA39_1<=RBRACKSi)) ) {
                    alt39=5;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );", 39, 1, input);

                    throw nvae;
                }
                }
                break;
            case TYPESWITCH:
                {
                int LA39_2 = input.LA(2);

                if ( (LA39_2==LPARSi) ) {
                    int LA39_197 = input.LA(3);

                    if ( (synpred5()) ) {
                        alt39=2;
                    }
                    else if ( (true) ) {
                        alt39=5;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );", 39, 197, input);

                        throw nvae;
                    }
                }
                else if ( (LA39_2==EOF||LA39_2==SEMICOLONSi||(LA39_2>=EQSi && LA39_2<=COMMASi)||LA39_2==DEFAULT||(LA39_2>=COLLATION && LA39_2<=EMPTY)||LA39_2==RPARSi||LA39_2==RBRACSi||LA39_2==STARSi||(LA39_2>=PLUSSi && LA39_2<=FOR)||(LA39_2>=LET && LA39_2<=WHERE)||(LA39_2>=STABLE && LA39_2<=DESCENDING)||LA39_2==SATISFIES||LA39_2==CASE||(LA39_2>=ELSE && LA39_2<=INSTANCE)||(LA39_2>=TREAT && LA39_2<=CAST)||(LA39_2>=EQ && LA39_2<=NODEAFTERSi)||(LA39_2>=SLASHSi && LA39_2<=DBLSLASHSi)||LA39_2==COLONSi||(LA39_2>=LBRACKSi && LA39_2<=RBRACKSi)) ) {
                    alt39=5;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );", 39, 2, input);

                    throw nvae;
                }
                }
                break;
            case FOR:
                {
                int LA39_3 = input.LA(2);

                if ( (LA39_3==EOF||LA39_3==SEMICOLONSi||(LA39_3>=EQSi && LA39_3<=COMMASi)||LA39_3==DEFAULT||(LA39_3>=COLLATION && LA39_3<=EMPTY)||(LA39_3>=LPARSi && LA39_3<=RPARSi)||LA39_3==RBRACSi||LA39_3==STARSi||(LA39_3>=PLUSSi && LA39_3<=FOR)||(LA39_3>=LET && LA39_3<=WHERE)||(LA39_3>=STABLE && LA39_3<=DESCENDING)||LA39_3==SATISFIES||LA39_3==CASE||(LA39_3>=ELSE && LA39_3<=INSTANCE)||(LA39_3>=TREAT && LA39_3<=CAST)||(LA39_3>=EQ && LA39_3<=NODEAFTERSi)||(LA39_3>=SLASHSi && LA39_3<=DBLSLASHSi)||LA39_3==COLONSi||(LA39_3>=LBRACKSi && LA39_3<=RBRACKSi)) ) {
                    alt39=5;
                }
                else if ( (LA39_3==DOLLARSi) ) {
                    alt39=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );", 39, 3, input);

                    throw nvae;
                }
                }
                break;
            case LET:
                {
                int LA39_4 = input.LA(2);

                if ( (LA39_4==EOF||LA39_4==SEMICOLONSi||(LA39_4>=EQSi && LA39_4<=COMMASi)||LA39_4==DEFAULT||(LA39_4>=COLLATION && LA39_4<=EMPTY)||(LA39_4>=LPARSi && LA39_4<=RPARSi)||LA39_4==RBRACSi||LA39_4==STARSi||(LA39_4>=PLUSSi && LA39_4<=FOR)||(LA39_4>=LET && LA39_4<=WHERE)||(LA39_4>=STABLE && LA39_4<=DESCENDING)||LA39_4==SATISFIES||LA39_4==CASE||(LA39_4>=ELSE && LA39_4<=INSTANCE)||(LA39_4>=TREAT && LA39_4<=CAST)||(LA39_4>=EQ && LA39_4<=NODEAFTERSi)||(LA39_4>=SLASHSi && LA39_4<=DBLSLASHSi)||LA39_4==COLONSi||(LA39_4>=LBRACKSi && LA39_4<=RBRACKSi)) ) {
                    alt39=5;
                }
                else if ( (LA39_4==DOLLARSi||LA39_4==SCORE) ) {
                    alt39=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );", 39, 4, input);

                    throw nvae;
                }
                }
                break;
            case SOME:
                {
                int LA39_5 = input.LA(2);

                if ( (LA39_5==EOF||LA39_5==SEMICOLONSi||(LA39_5>=EQSi && LA39_5<=COMMASi)||LA39_5==DEFAULT||(LA39_5>=COLLATION && LA39_5<=EMPTY)||(LA39_5>=LPARSi && LA39_5<=RPARSi)||LA39_5==RBRACSi||LA39_5==STARSi||(LA39_5>=PLUSSi && LA39_5<=FOR)||(LA39_5>=LET && LA39_5<=WHERE)||(LA39_5>=STABLE && LA39_5<=DESCENDING)||LA39_5==SATISFIES||LA39_5==CASE||(LA39_5>=ELSE && LA39_5<=INSTANCE)||(LA39_5>=TREAT && LA39_5<=CAST)||(LA39_5>=EQ && LA39_5<=NODEAFTERSi)||(LA39_5>=SLASHSi && LA39_5<=DBLSLASHSi)||LA39_5==COLONSi||(LA39_5>=LBRACKSi && LA39_5<=RBRACKSi)) ) {
                    alt39=5;
                }
                else if ( (LA39_5==DOLLARSi) ) {
                    alt39=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );", 39, 5, input);

                    throw nvae;
                }
                }
                break;
            case EVERY:
                {
                int LA39_6 = input.LA(2);

                if ( (LA39_6==EOF||LA39_6==SEMICOLONSi||(LA39_6>=EQSi && LA39_6<=COMMASi)||LA39_6==DEFAULT||(LA39_6>=COLLATION && LA39_6<=EMPTY)||(LA39_6>=LPARSi && LA39_6<=RPARSi)||LA39_6==RBRACSi||LA39_6==STARSi||(LA39_6>=PLUSSi && LA39_6<=FOR)||(LA39_6>=LET && LA39_6<=WHERE)||(LA39_6>=STABLE && LA39_6<=DESCENDING)||LA39_6==SATISFIES||LA39_6==CASE||(LA39_6>=ELSE && LA39_6<=INSTANCE)||(LA39_6>=TREAT && LA39_6<=CAST)||(LA39_6>=EQ && LA39_6<=NODEAFTERSi)||(LA39_6>=SLASHSi && LA39_6<=DBLSLASHSi)||LA39_6==COLONSi||(LA39_6>=LBRACKSi && LA39_6<=RBRACKSi)) ) {
                    alt39=5;
                }
                else if ( (LA39_6==DOLLARSi) ) {
                    alt39=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );", 39, 6, input);

                    throw nvae;
                }
                }
                break;
            case XQUERY:
            case VERSION:
            case StringLiteral:
            case ENCODING:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case DEFAULT:
            case ELEMENT:
            case FUNCTION:
            case COLLATION:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case BOUNDARYSPACE:
            case PRESERVE:
            case STRIP:
            case BASE_URI:
            case CONSTRUCTION:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case COPY_NAMESPACES:
            case NOPRESERVE:
            case INHERIT:
            case NOINHERIT:
            case IMPORT:
            case SCHEMA:
            case AT:
            case VARIABLE:
            case DOLLARSi:
            case EXTERNAL:
            case QName:
            case AS:
            case LPARSi:
            case OPTION:
            case FTOPTION:
            case EMPTY_SEQUENCE:
            case ITEM:
            case DOCUMENT_NODE:
            case STARSi:
            case SCHEMA_ELEMENT:
            case ATTRIBUTE:
            case SCHEMA_ATTRIBUTE:
            case PROCESSING_INSTRUCTION:
            case COMMENT:
            case TEXT:
            case NODE:
            case PLUSSi:
            case RETURN:
            case IN:
            case SCORE:
            case WHERE:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case SATISFIES:
            case CASE:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case FTCONTAINS:
            case TO:
            case MINUSSi:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case WITHOUT:
            case CONTENT:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case LTSi:
            case IS:
            case WEIGHT:
            case FTOR:
            case FTAND:
            case NOT:
            case FTNOT:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case LPRAGSi:
            case WINDOW:
            case SENTENCES:
            case PARAGRAPHS:
            case DISTANCE:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case START:
            case END:
            case ENTIRE:
            case WITH:
            case WILDCARDS:
            case STEMMING:
            case THESAURUS:
            case STOP:
            case LANGUAGE:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case RELATIONSHIP:
            case LEVELS:
            case VALIDATE:
            case LAX:
            case STRICT:
            case SLASHSi:
            case DBLSLASHSi:
            case DOTSi:
            case PARENT:
            case ANCESTOR:
            case PRECEDING_SIBLING:
            case PRECEDING:
            case ANCESTOR_OR_SELF:
            case DOTDOTSi:
            case CHILD:
            case DESCENDANT:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case ATSi:
            case LCOMMENTSi:
            case LPISi:
            case DOCUMENT:
            case NCName:
                {
                alt39=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("437:1: exprSingle : ( ( IF LPARSi )=> ifExpr | ( TYPESWITCH LPARSi )=> typeswitchExpr | fLWORExpr | quantifiedExpr | orExpr );", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // etc/XQFT.g:438:5: ( IF LPARSi )=> ifExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ifExpr_in_exprSingle2099);
                    ifExpr199=ifExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ifExpr199.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:439:7: ( TYPESWITCH LPARSi )=> typeswitchExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_typeswitchExpr_in_exprSingle2115);
                    typeswitchExpr200=typeswitchExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeswitchExpr200.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:440:7: fLWORExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_fLWORExpr_in_exprSingle2123);
                    fLWORExpr201=fLWORExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, fLWORExpr201.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:441:7: quantifiedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_quantifiedExpr_in_exprSingle2131);
                    quantifiedExpr202=quantifiedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, quantifiedExpr202.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:442:7: orExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_orExpr_in_exprSingle2139);
                    orExpr203=orExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orExpr203.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end exprSingle

    public static class fLWORExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fLWORExpr
    // etc/XQFT.g:444:5: fLWORExpr : (fc+= forClause | lc+= letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle -> ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle ) ;
    public final fLWORExpr_return fLWORExpr() throws RecognitionException {
        fLWORExpr_return retval = new fLWORExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token RETURN206=null;
        List list_fc=null;
        List list_lc=null;
        whereClause_return whereClause204 = null;

        orderByClause_return orderByClause205 = null;

        exprSingle_return exprSingle207 = null;

        RuleReturnScope fc = null;
        RuleReturnScope lc = null;
        XQFTTree RETURN206_tree=null;
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_letClause=new RewriteRuleSubtreeStream(adaptor,"rule letClause");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_forClause=new RewriteRuleSubtreeStream(adaptor,"rule forClause");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        try {
            // etc/XQFT.g:444:15: ( (fc+= forClause | lc+= letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle -> ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle ) )
            // etc/XQFT.g:444:17: (fc+= forClause | lc+= letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle
            {
            // etc/XQFT.g:444:17: (fc+= forClause | lc+= letClause )+
            int cnt40=0;
            loop40:
            do {
                int alt40=3;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==FOR) ) {
                    alt40=1;
                }
                else if ( (LA40_0==LET) ) {
                    alt40=2;
                }


                switch (alt40) {
            	case 1 :
            	    // etc/XQFT.g:444:18: fc+= forClause
            	    {
            	    pushFollow(FOLLOW_forClause_in_fLWORExpr2154);
            	    fc=forClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_forClause.add(fc.getTree());
            	    if (list_fc==null) list_fc=new ArrayList();
            	    list_fc.add(fc);


            	    }
            	    break;
            	case 2 :
            	    // etc/XQFT.g:444:34: lc+= letClause
            	    {
            	    pushFollow(FOLLOW_letClause_in_fLWORExpr2160);
            	    lc=letClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_letClause.add(lc.getTree());
            	    if (list_lc==null) list_lc=new ArrayList();
            	    list_lc.add(lc);


            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);

            // etc/XQFT.g:444:50: ( whereClause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==WHERE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // etc/XQFT.g:444:50: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_fLWORExpr2164);
                    whereClause204=whereClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_whereClause.add(whereClause204.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:444:63: ( orderByClause )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ORDER||LA42_0==STABLE) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // etc/XQFT.g:444:63: orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_fLWORExpr2167);
                    orderByClause205=orderByClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_orderByClause.add(orderByClause205.getTree());

                    }
                    break;

            }

            RETURN206=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_fLWORExpr2170); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN206);

            pushFollow(FOLLOW_exprSingle_in_fLWORExpr2172);
            exprSingle207=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle207.getTree());

            // AST REWRITE
            // elements: exprSingle, lc, fc, whereClause, orderByClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: fc, lc
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_fc=new RewriteRuleSubtreeStream(adaptor,"token fc",list_fc);
            RewriteRuleSubtreeStream stream_lc=new RewriteRuleSubtreeStream(adaptor,"token lc",list_lc);
            root_0 = (XQFTTree)adaptor.nil();
            // 445:9: -> ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle )
            {
                // etc/XQFT.g:445:12: ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FLWOR, "AST_FLWOR"), root_1);

                // etc/XQFT.g:445:24: ( $fc)*
                while ( stream_fc.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_fc.next()).getTree());

                }
                stream_fc.reset();
                // etc/XQFT.g:445:29: ( $lc)*
                while ( stream_lc.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_lc.next()).getTree());

                }
                stream_lc.reset();
                // etc/XQFT.g:445:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.next());

                }
                stream_whereClause.reset();
                // etc/XQFT.g:445:47: ( orderByClause )?
                if ( stream_orderByClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByClause.next());

                }
                stream_orderByClause.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end fLWORExpr

    public static class forClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forClause
    // etc/XQFT.g:447:9: forClause : FOR forClauseTupletDef ( COMMASi forClauseTupletDef )* -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ ) ;
    public final forClause_return forClause() throws RecognitionException {
        forClause_return retval = new forClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FOR208=null;
        Token COMMASi210=null;
        forClauseTupletDef_return forClauseTupletDef209 = null;

        forClauseTupletDef_return forClauseTupletDef211 = null;


        XQFTTree FOR208_tree=null;
        XQFTTree COMMASi210_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_forClauseTupletDef=new RewriteRuleSubtreeStream(adaptor,"rule forClauseTupletDef");
        try {
            // etc/XQFT.g:447:19: ( FOR forClauseTupletDef ( COMMASi forClauseTupletDef )* -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ ) )
            // etc/XQFT.g:447:21: FOR forClauseTupletDef ( COMMASi forClauseTupletDef )*
            {
            FOR208=(Token)input.LT(1);
            match(input,FOR,FOLLOW_FOR_in_forClause2222); if (failed) return retval;
            if ( backtracking==0 ) stream_FOR.add(FOR208);

            pushFollow(FOLLOW_forClauseTupletDef_in_forClause2224);
            forClauseTupletDef209=forClauseTupletDef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_forClauseTupletDef.add(forClauseTupletDef209.getTree());
            // etc/XQFT.g:447:44: ( COMMASi forClauseTupletDef )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==COMMASi) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // etc/XQFT.g:447:45: COMMASi forClauseTupletDef
            	    {
            	    COMMASi210=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_forClause2227); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi210);

            	    pushFollow(FOLLOW_forClauseTupletDef_in_forClause2229);
            	    forClauseTupletDef211=forClauseTupletDef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_forClauseTupletDef.add(forClauseTupletDef211.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            // AST REWRITE
            // elements: forClauseTupletDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 448:13: -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ )
            {
                // etc/XQFT.g:448:16: ^( AST_FORCLAUSE ( forClauseTupletDef )+ )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FORCLAUSE, "AST_FORCLAUSE"), root_1);

                if ( !(stream_forClauseTupletDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_forClauseTupletDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_forClauseTupletDef.next());

                }
                stream_forClauseTupletDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forClause

    public static class forClauseTupletDef_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forClauseTupletDef
    // etc/XQFT.g:450:13: forClauseTupletDef : DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle ;
    public final forClauseTupletDef_return forClauseTupletDef() throws RecognitionException {
        forClauseTupletDef_return retval = new forClauseTupletDef_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi212=null;
        Token IN217=null;
        varName_return varName213 = null;

        typeDeclaration_return typeDeclaration214 = null;

        positionalVar_return positionalVar215 = null;

        ftScoreVar_return ftScoreVar216 = null;

        exprSingle_return exprSingle218 = null;


        XQFTTree DOLLARSi212_tree=null;
        XQFTTree IN217_tree=null;

        try {
            // etc/XQFT.g:450:32: ( DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle )
            // etc/XQFT.g:450:34: DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOLLARSi212=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_forClauseTupletDef2272); if (failed) return retval;
            pushFollow(FOLLOW_varName_in_forClauseTupletDef2275);
            varName213=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName213.getTree());
            // etc/XQFT.g:450:52: ( typeDeclaration )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==AS) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // etc/XQFT.g:450:52: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_forClauseTupletDef2277);
                    typeDeclaration214=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration214.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:450:69: ( positionalVar )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==AT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // etc/XQFT.g:450:69: positionalVar
                    {
                    pushFollow(FOLLOW_positionalVar_in_forClauseTupletDef2280);
                    positionalVar215=positionalVar();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, positionalVar215.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:450:84: ( ftScoreVar )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SCORE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // etc/XQFT.g:450:84: ftScoreVar
                    {
                    pushFollow(FOLLOW_ftScoreVar_in_forClauseTupletDef2283);
                    ftScoreVar216=ftScoreVar();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftScoreVar216.getTree());

                    }
                    break;

            }

            IN217=(Token)input.LT(1);
            match(input,IN,FOLLOW_IN_in_forClauseTupletDef2286); if (failed) return retval;
            pushFollow(FOLLOW_exprSingle_in_forClauseTupletDef2289);
            exprSingle218=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle218.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forClauseTupletDef

    public static class varName_return extends ParserRuleReturnScope {
        public String name;
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varName
    // etc/XQFT.g:452:13: varName returns [String name] : qn= qName ;
    public final varName_return varName() throws RecognitionException {
        varName_return retval = new varName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qn = null;



        try {
            // etc/XQFT.g:452:43: (qn= qName )
            // etc/XQFT.g:452:45: qn= qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_varName2315);
            qn=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            if ( backtracking==0 ) {
              retval.name = qn.text;
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varName

    public static class positionalVar_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start positionalVar
    // etc/XQFT.g:453:13: positionalVar : AT DOLLARSi varName ;
    public final positionalVar_return positionalVar() throws RecognitionException {
        positionalVar_return retval = new positionalVar_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT219=null;
        Token DOLLARSi220=null;
        varName_return varName221 = null;


        XQFTTree AT219_tree=null;
        XQFTTree DOLLARSi220_tree=null;

        try {
            // etc/XQFT.g:453:27: ( AT DOLLARSi varName )
            // etc/XQFT.g:453:29: AT DOLLARSi varName
            {
            root_0 = (XQFTTree)adaptor.nil();

            AT219=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_positionalVar2336); if (failed) return retval;
            if ( backtracking==0 ) {
            AT219_tree = (XQFTTree)adaptor.create(AT219);
            adaptor.addChild(root_0, AT219_tree);
            }
            DOLLARSi220=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_positionalVar2338); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi220_tree = (XQFTTree)adaptor.create(DOLLARSi220);
            adaptor.addChild(root_0, DOLLARSi220_tree);
            }
            pushFollow(FOLLOW_varName_in_positionalVar2340);
            varName221=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName221.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end positionalVar

    public static class ftScoreVar_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftScoreVar
    // etc/XQFT.g:454:13: ftScoreVar : SCORE DOLLARSi varName ;
    public final ftScoreVar_return ftScoreVar() throws RecognitionException {
        ftScoreVar_return retval = new ftScoreVar_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCORE222=null;
        Token DOLLARSi223=null;
        varName_return varName224 = null;


        XQFTTree SCORE222_tree=null;
        XQFTTree DOLLARSi223_tree=null;

        try {
            // etc/XQFT.g:454:24: ( SCORE DOLLARSi varName )
            // etc/XQFT.g:454:26: SCORE DOLLARSi varName
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCORE222=(Token)input.LT(1);
            match(input,SCORE,FOLLOW_SCORE_in_ftScoreVar2359); if (failed) return retval;
            if ( backtracking==0 ) {
            SCORE222_tree = (XQFTTree)adaptor.create(SCORE222);
            adaptor.addChild(root_0, SCORE222_tree);
            }
            DOLLARSi223=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_ftScoreVar2361); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi223_tree = (XQFTTree)adaptor.create(DOLLARSi223);
            adaptor.addChild(root_0, DOLLARSi223_tree);
            }
            pushFollow(FOLLOW_varName_in_ftScoreVar2363);
            varName224=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName224.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftScoreVar

    public static class letClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start letClause
    // etc/XQFT.g:456:9: letClause : LET varBinding ( COMMASi varBinding )* -> ^( AST_LETCLAUSE ( varBinding )+ ) ;
    public final letClause_return letClause() throws RecognitionException {
        letClause_return retval = new letClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LET225=null;
        Token COMMASi227=null;
        varBinding_return varBinding226 = null;

        varBinding_return varBinding228 = null;


        XQFTTree LET225_tree=null;
        XQFTTree COMMASi227_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_LET=new RewriteRuleTokenStream(adaptor,"token LET");
        RewriteRuleSubtreeStream stream_varBinding=new RewriteRuleSubtreeStream(adaptor,"rule varBinding");
        try {
            // etc/XQFT.g:456:19: ( LET varBinding ( COMMASi varBinding )* -> ^( AST_LETCLAUSE ( varBinding )+ ) )
            // etc/XQFT.g:456:21: LET varBinding ( COMMASi varBinding )*
            {
            LET225=(Token)input.LT(1);
            match(input,LET,FOLLOW_LET_in_letClause2391); if (failed) return retval;
            if ( backtracking==0 ) stream_LET.add(LET225);

            pushFollow(FOLLOW_varBinding_in_letClause2393);
            varBinding226=varBinding();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_varBinding.add(varBinding226.getTree());
            // etc/XQFT.g:456:36: ( COMMASi varBinding )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMASi) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // etc/XQFT.g:456:37: COMMASi varBinding
            	    {
            	    COMMASi227=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_letClause2396); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi227);

            	    pushFollow(FOLLOW_varBinding_in_letClause2398);
            	    varBinding228=varBinding();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_varBinding.add(varBinding228.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            // AST REWRITE
            // elements: varBinding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 457:13: -> ^( AST_LETCLAUSE ( varBinding )+ )
            {
                // etc/XQFT.g:457:16: ^( AST_LETCLAUSE ( varBinding )+ )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_LETCLAUSE, "AST_LETCLAUSE"), root_1);

                if ( !(stream_varBinding.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_varBinding.hasNext() ) {
                    adaptor.addChild(root_1, stream_varBinding.next());

                }
                stream_varBinding.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end letClause

    public static class varBinding_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varBinding
    // etc/XQFT.g:459:9: varBinding : ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle -> ( SCORE )? $v ( typeDeclaration )? exprSingle ;
    public final varBinding_return varBinding() throws RecognitionException {
        varBinding_return retval = new varBinding_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi229=null;
        Token SCORE231=null;
        Token DOLLARSi232=null;
        Token ASSIGNSi233=null;
        varName_return v = null;

        typeDeclaration_return typeDeclaration230 = null;

        exprSingle_return exprSingle234 = null;


        XQFTTree DOLLARSi229_tree=null;
        XQFTTree SCORE231_tree=null;
        XQFTTree DOLLARSi232_tree=null;
        XQFTTree ASSIGNSi233_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_ASSIGNSi=new RewriteRuleTokenStream(adaptor,"token ASSIGNSi");
        RewriteRuleTokenStream stream_SCORE=new RewriteRuleTokenStream(adaptor,"token SCORE");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // etc/XQFT.g:459:20: ( ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle -> ( SCORE )? $v ( typeDeclaration )? exprSingle )
            // etc/XQFT.g:460:13: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle
            {
            // etc/XQFT.g:460:13: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==DOLLARSi) ) {
                alt49=1;
            }
            else if ( (LA49_0==SCORE) ) {
                alt49=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("460:13: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName )", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // etc/XQFT.g:460:14: DOLLARSi v= varName ( typeDeclaration )?
                    {
                    DOLLARSi229=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varBinding2450); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi229);

                    pushFollow(FOLLOW_varName_in_varBinding2454);
                    v=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(v.getTree());
                    // etc/XQFT.g:460:33: ( typeDeclaration )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==AS) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // etc/XQFT.g:460:33: typeDeclaration
                            {
                            pushFollow(FOLLOW_typeDeclaration_in_varBinding2456);
                            typeDeclaration230=typeDeclaration();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_typeDeclaration.add(typeDeclaration230.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:460:52: SCORE DOLLARSi v= varName
                    {
                    SCORE231=(Token)input.LT(1);
                    match(input,SCORE,FOLLOW_SCORE_in_varBinding2461); if (failed) return retval;
                    if ( backtracking==0 ) stream_SCORE.add(SCORE231);

                    DOLLARSi232=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varBinding2463); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi232);

                    pushFollow(FOLLOW_varName_in_varBinding2467);
                    v=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(v.getTree());

                    }
                    break;

            }

            ASSIGNSi233=(Token)input.LT(1);
            match(input,ASSIGNSi,FOLLOW_ASSIGNSi_in_varBinding2483); if (failed) return retval;
            if ( backtracking==0 ) stream_ASSIGNSi.add(ASSIGNSi233);

            pushFollow(FOLLOW_exprSingle_in_varBinding2485);
            exprSingle234=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle234.getTree());

            // AST REWRITE
            // elements: exprSingle, v, typeDeclaration, SCORE
            // token labels: 
            // rule labels: retval, v
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",v!=null?v.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 462:13: -> ( SCORE )? $v ( typeDeclaration )? exprSingle
            {
                // etc/XQFT.g:462:16: ( SCORE )?
                if ( stream_SCORE.hasNext() ) {
                    adaptor.addChild(root_0, stream_SCORE.next());

                }
                stream_SCORE.reset();
                adaptor.addChild(root_0, stream_v.next());
                // etc/XQFT.g:462:26: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeDeclaration.next());

                }
                stream_typeDeclaration.reset();
                adaptor.addChild(root_0, stream_exprSingle.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varBinding

    public static class whereClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whereClause
    // etc/XQFT.g:465:9: whereClause : WHERE exprSingle -> ^( AST_WHERECLAUSE exprSingle ) ;
    public final whereClause_return whereClause() throws RecognitionException {
        whereClause_return retval = new whereClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WHERE235=null;
        exprSingle_return exprSingle236 = null;


        XQFTTree WHERE235_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:465:21: ( WHERE exprSingle -> ^( AST_WHERECLAUSE exprSingle ) )
            // etc/XQFT.g:465:23: WHERE exprSingle
            {
            WHERE235=(Token)input.LT(1);
            match(input,WHERE,FOLLOW_WHERE_in_whereClause2535); if (failed) return retval;
            if ( backtracking==0 ) stream_WHERE.add(WHERE235);

            pushFollow(FOLLOW_exprSingle_in_whereClause2537);
            exprSingle236=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle236.getTree());

            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 466:13: -> ^( AST_WHERECLAUSE exprSingle )
            {
                // etc/XQFT.g:466:16: ^( AST_WHERECLAUSE exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_WHERECLAUSE, "AST_WHERECLAUSE"), root_1);

                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end whereClause

    public static class orderByClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderByClause
    // etc/XQFT.g:468:9: orderByClause : ( ORDER BY | STABLE ORDER BY ) orderSpecList -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList ) ;
    public final orderByClause_return orderByClause() throws RecognitionException {
        orderByClause_return retval = new orderByClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDER237=null;
        Token BY238=null;
        Token STABLE239=null;
        Token ORDER240=null;
        Token BY241=null;
        orderSpecList_return orderSpecList242 = null;


        XQFTTree ORDER237_tree=null;
        XQFTTree BY238_tree=null;
        XQFTTree STABLE239_tree=null;
        XQFTTree ORDER240_tree=null;
        XQFTTree BY241_tree=null;
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_STABLE=new RewriteRuleTokenStream(adaptor,"token STABLE");
        RewriteRuleSubtreeStream stream_orderSpecList=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecList");
        try {
            // etc/XQFT.g:468:23: ( ( ORDER BY | STABLE ORDER BY ) orderSpecList -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList ) )
            // etc/XQFT.g:468:25: ( ORDER BY | STABLE ORDER BY ) orderSpecList
            {
            // etc/XQFT.g:468:25: ( ORDER BY | STABLE ORDER BY )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ORDER) ) {
                alt50=1;
            }
            else if ( (LA50_0==STABLE) ) {
                alt50=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("468:25: ( ORDER BY | STABLE ORDER BY )", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // etc/XQFT.g:468:26: ORDER BY
                    {
                    ORDER237=(Token)input.LT(1);
                    match(input,ORDER,FOLLOW_ORDER_in_orderByClause2586); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDER.add(ORDER237);

                    BY238=(Token)input.LT(1);
                    match(input,BY,FOLLOW_BY_in_orderByClause2588); if (failed) return retval;
                    if ( backtracking==0 ) stream_BY.add(BY238);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:468:37: STABLE ORDER BY
                    {
                    STABLE239=(Token)input.LT(1);
                    match(input,STABLE,FOLLOW_STABLE_in_orderByClause2592); if (failed) return retval;
                    if ( backtracking==0 ) stream_STABLE.add(STABLE239);

                    ORDER240=(Token)input.LT(1);
                    match(input,ORDER,FOLLOW_ORDER_in_orderByClause2594); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDER.add(ORDER240);

                    BY241=(Token)input.LT(1);
                    match(input,BY,FOLLOW_BY_in_orderByClause2596); if (failed) return retval;
                    if ( backtracking==0 ) stream_BY.add(BY241);


                    }
                    break;

            }

            pushFollow(FOLLOW_orderSpecList_in_orderByClause2599);
            orderSpecList242=orderSpecList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_orderSpecList.add(orderSpecList242.getTree());

            // AST REWRITE
            // elements: orderSpecList, STABLE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 469:13: -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList )
            {
                // etc/XQFT.g:469:16: ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_ORDERBYCLAUSE, "AST_ORDERBYCLAUSE"), root_1);

                // etc/XQFT.g:469:36: ( STABLE )?
                if ( stream_STABLE.hasNext() ) {
                    adaptor.addChild(root_1, stream_STABLE.next());

                }
                stream_STABLE.reset();
                adaptor.addChild(root_1, stream_orderSpecList.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderByClause

    public static class orderSpecList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderSpecList
    // etc/XQFT.g:471:13: orderSpecList : orderSpec ( COMMASi orderSpec )* -> ( orderSpec )+ ;
    public final orderSpecList_return orderSpecList() throws RecognitionException {
        orderSpecList_return retval = new orderSpecList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMASi244=null;
        orderSpec_return orderSpec243 = null;

        orderSpec_return orderSpec245 = null;


        XQFTTree COMMASi244_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_orderSpec=new RewriteRuleSubtreeStream(adaptor,"rule orderSpec");
        try {
            // etc/XQFT.g:471:27: ( orderSpec ( COMMASi orderSpec )* -> ( orderSpec )+ )
            // etc/XQFT.g:471:29: orderSpec ( COMMASi orderSpec )*
            {
            pushFollow(FOLLOW_orderSpec_in_orderSpecList2642);
            orderSpec243=orderSpec();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_orderSpec.add(orderSpec243.getTree());
            // etc/XQFT.g:471:39: ( COMMASi orderSpec )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==COMMASi) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // etc/XQFT.g:471:40: COMMASi orderSpec
            	    {
            	    COMMASi244=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_orderSpecList2645); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi244);

            	    pushFollow(FOLLOW_orderSpec_in_orderSpecList2647);
            	    orderSpec245=orderSpec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_orderSpec.add(orderSpec245.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            // AST REWRITE
            // elements: orderSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 472:17: -> ( orderSpec )+
            {
                if ( !(stream_orderSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderSpec.hasNext() ) {
                    adaptor.addChild(root_0, stream_orderSpec.next());

                }
                stream_orderSpec.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderSpecList

    public static class orderSpec_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderSpec
    // etc/XQFT.g:474:17: orderSpec : exprSingle orderModifier ;
    public final orderSpec_return orderSpec() throws RecognitionException {
        orderSpec_return retval = new orderSpec_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        exprSingle_return exprSingle246 = null;

        orderModifier_return orderModifier247 = null;



        try {
            // etc/XQFT.g:474:27: ( exprSingle orderModifier )
            // etc/XQFT.g:474:29: exprSingle orderModifier
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_orderSpec2694);
            exprSingle246=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle246.getTree());
            pushFollow(FOLLOW_orderModifier_in_orderSpec2696);
            orderModifier247=orderModifier();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, orderModifier247.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderSpec

    public static class orderModifier_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderModifier
    // etc/XQFT.g:475:21: orderModifier : ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? ;
    public final orderModifier_return orderModifier() throws RecognitionException {
        orderModifier_return retval = new orderModifier_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set248=null;
        Token EMPTY249=null;
        Token set250=null;
        Token COLLATION251=null;
        uriLiteral_return uriLiteral252 = null;


        XQFTTree set248_tree=null;
        XQFTTree EMPTY249_tree=null;
        XQFTTree set250_tree=null;
        XQFTTree COLLATION251_tree=null;

        try {
            // etc/XQFT.g:475:35: ( ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? )
            // etc/XQFT.g:475:37: ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:475:37: ( ASCENDING | DESCENDING )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( ((LA52_0>=ASCENDING && LA52_0<=DESCENDING)) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // etc/XQFT.g:
                    {
                    set248=(Token)input.LT(1);
                    if ( (input.LA(1)>=ASCENDING && input.LA(1)<=DESCENDING) ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set248));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderModifier2723);    throw mse;
                    }


                    }
                    break;

            }

            // etc/XQFT.g:475:63: ( EMPTY ( GREATEST | LEAST ) )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==EMPTY) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // etc/XQFT.g:475:64: EMPTY ( GREATEST | LEAST )
                    {
                    EMPTY249=(Token)input.LT(1);
                    match(input,EMPTY,FOLLOW_EMPTY_in_orderModifier2733); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EMPTY249_tree = (XQFTTree)adaptor.create(EMPTY249);
                    adaptor.addChild(root_0, EMPTY249_tree);
                    }
                    set250=(Token)input.LT(1);
                    if ( (input.LA(1)>=GREATEST && input.LA(1)<=LEAST) ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set250));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderModifier2735);    throw mse;
                    }


                    }
                    break;

            }

            // etc/XQFT.g:475:91: ( COLLATION uriLiteral )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==COLLATION) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // etc/XQFT.g:475:92: COLLATION uriLiteral
                    {
                    COLLATION251=(Token)input.LT(1);
                    match(input,COLLATION,FOLLOW_COLLATION_in_orderModifier2746); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLLATION251_tree = (XQFTTree)adaptor.create(COLLATION251);
                    adaptor.addChild(root_0, COLLATION251_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_orderModifier2748);
                    uriLiteral252=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral252.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderModifier

    public static class quantifiedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start quantifiedExpr
    // etc/XQFT.g:477:5: quantifiedExpr : (quant= SOME | quant= EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle ) ;
    public final quantifiedExpr_return quantifiedExpr() throws RecognitionException {
        quantifiedExpr_return retval = new quantifiedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token quant=null;
        Token COMMASi254=null;
        Token SATISFIES256=null;
        quantifiedExprTupleDef_return quantifiedExprTupleDef253 = null;

        quantifiedExprTupleDef_return quantifiedExprTupleDef255 = null;

        exprSingle_return exprSingle257 = null;


        XQFTTree quant_tree=null;
        XQFTTree COMMASi254_tree=null;
        XQFTTree SATISFIES256_tree=null;
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_SATISFIES=new RewriteRuleTokenStream(adaptor,"token SATISFIES");
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_EVERY=new RewriteRuleTokenStream(adaptor,"token EVERY");
        RewriteRuleSubtreeStream stream_quantifiedExprTupleDef=new RewriteRuleSubtreeStream(adaptor,"rule quantifiedExprTupleDef");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:477:20: ( (quant= SOME | quant= EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle ) )
            // etc/XQFT.g:478:9: (quant= SOME | quant= EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle
            {
            // etc/XQFT.g:478:9: (quant= SOME | quant= EVERY )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==SOME) ) {
                alt55=1;
            }
            else if ( (LA55_0==EVERY) ) {
                alt55=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("478:9: (quant= SOME | quant= EVERY )", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // etc/XQFT.g:478:10: quant= SOME
                    {
                    quant=(Token)input.LT(1);
                    match(input,SOME,FOLLOW_SOME_in_quantifiedExpr2774); if (failed) return retval;
                    if ( backtracking==0 ) stream_SOME.add(quant);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:478:23: quant= EVERY
                    {
                    quant=(Token)input.LT(1);
                    match(input,EVERY,FOLLOW_EVERY_in_quantifiedExpr2780); if (failed) return retval;
                    if ( backtracking==0 ) stream_EVERY.add(quant);


                    }
                    break;

            }

            pushFollow(FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr2783);
            quantifiedExprTupleDef253=quantifiedExprTupleDef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_quantifiedExprTupleDef.add(quantifiedExprTupleDef253.getTree());
            // etc/XQFT.g:479:9: ( COMMASi quantifiedExprTupleDef )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMASi) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // etc/XQFT.g:479:10: COMMASi quantifiedExprTupleDef
            	    {
            	    COMMASi254=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_quantifiedExpr2794); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi254);

            	    pushFollow(FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr2796);
            	    quantifiedExprTupleDef255=quantifiedExprTupleDef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_quantifiedExprTupleDef.add(quantifiedExprTupleDef255.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            SATISFIES256=(Token)input.LT(1);
            match(input,SATISFIES,FOLLOW_SATISFIES_in_quantifiedExpr2800); if (failed) return retval;
            if ( backtracking==0 ) stream_SATISFIES.add(SATISFIES256);

            pushFollow(FOLLOW_exprSingle_in_quantifiedExpr2802);
            exprSingle257=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle257.getTree());

            // AST REWRITE
            // elements: exprSingle, quantifiedExprTupleDef, quant
            // token labels: quant
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_quant=new RewriteRuleTokenStream(adaptor,"token quant",quant);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 480:9: -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle )
            {
                // etc/XQFT.g:480:12: ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_QUANTIFIEDEXPR, "AST_QUANTIFIEDEXPR"), root_1);

                adaptor.addChild(root_1, stream_quant.next());
                if ( !(stream_quantifiedExprTupleDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_quantifiedExprTupleDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantifiedExprTupleDef.next());

                }
                stream_quantifiedExprTupleDef.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end quantifiedExpr

    public static class quantifiedExprTupleDef_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start quantifiedExprTupleDef
    // etc/XQFT.g:483:9: quantifiedExprTupleDef : DOLLARSi varName ( typeDeclaration )? IN exprSingle -> varName ( typeDeclaration )? exprSingle ;
    public final quantifiedExprTupleDef_return quantifiedExprTupleDef() throws RecognitionException {
        quantifiedExprTupleDef_return retval = new quantifiedExprTupleDef_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi258=null;
        Token IN261=null;
        varName_return varName259 = null;

        typeDeclaration_return typeDeclaration260 = null;

        exprSingle_return exprSingle262 = null;


        XQFTTree DOLLARSi258_tree=null;
        XQFTTree IN261_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // etc/XQFT.g:483:32: ( DOLLARSi varName ( typeDeclaration )? IN exprSingle -> varName ( typeDeclaration )? exprSingle )
            // etc/XQFT.g:484:13: DOLLARSi varName ( typeDeclaration )? IN exprSingle
            {
            DOLLARSi258=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_quantifiedExprTupleDef2858); if (failed) return retval;
            if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi258);

            pushFollow(FOLLOW_varName_in_quantifiedExprTupleDef2860);
            varName259=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_varName.add(varName259.getTree());
            // etc/XQFT.g:484:30: ( typeDeclaration )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==AS) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // etc/XQFT.g:484:30: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_quantifiedExprTupleDef2862);
                    typeDeclaration260=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeDeclaration.add(typeDeclaration260.getTree());

                    }
                    break;

            }

            IN261=(Token)input.LT(1);
            match(input,IN,FOLLOW_IN_in_quantifiedExprTupleDef2865); if (failed) return retval;
            if ( backtracking==0 ) stream_IN.add(IN261);

            pushFollow(FOLLOW_exprSingle_in_quantifiedExprTupleDef2867);
            exprSingle262=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle262.getTree());

            // AST REWRITE
            // elements: exprSingle, varName, typeDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 485:13: -> varName ( typeDeclaration )? exprSingle
            {
                adaptor.addChild(root_0, stream_varName.next());
                // etc/XQFT.g:485:24: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeDeclaration.next());

                }
                stream_typeDeclaration.reset();
                adaptor.addChild(root_0, stream_exprSingle.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end quantifiedExprTupleDef

    public static class typeswitchExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeswitchExpr
    // etc/XQFT.g:487:5: typeswitchExpr : TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle ) ;
    public final typeswitchExpr_return typeswitchExpr() throws RecognitionException {
        typeswitchExpr_return retval = new typeswitchExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TYPESWITCH263=null;
        Token LPARSi264=null;
        Token RPARSi266=null;
        Token DEFAULT268=null;
        Token DOLLARSi269=null;
        Token RETURN271=null;
        expr_return expr265 = null;

        caseClause_return caseClause267 = null;

        varName_return varName270 = null;

        exprSingle_return exprSingle272 = null;


        XQFTTree TYPESWITCH263_tree=null;
        XQFTTree LPARSi264_tree=null;
        XQFTTree RPARSi266_tree=null;
        XQFTTree DEFAULT268_tree=null;
        XQFTTree DOLLARSi269_tree=null;
        XQFTTree RETURN271_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_TYPESWITCH=new RewriteRuleTokenStream(adaptor,"token TYPESWITCH");
        RewriteRuleSubtreeStream stream_caseClause=new RewriteRuleSubtreeStream(adaptor,"rule caseClause");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:487:20: ( TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle ) )
            // etc/XQFT.g:487:22: TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle
            {
            TYPESWITCH263=(Token)input.LT(1);
            match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_typeswitchExpr2902); if (failed) return retval;
            if ( backtracking==0 ) stream_TYPESWITCH.add(TYPESWITCH263);

            LPARSi264=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_typeswitchExpr2904); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi264);

            pushFollow(FOLLOW_expr_in_typeswitchExpr2906);
            expr265=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr265.getTree());
            RPARSi266=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_typeswitchExpr2908); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi266);

            // etc/XQFT.g:487:52: ( caseClause )+
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==CASE) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // etc/XQFT.g:487:52: caseClause
            	    {
            	    pushFollow(FOLLOW_caseClause_in_typeswitchExpr2910);
            	    caseClause267=caseClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_caseClause.add(caseClause267.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);

            DEFAULT268=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_typeswitchExpr2922); if (failed) return retval;
            if ( backtracking==0 ) stream_DEFAULT.add(DEFAULT268);

            // etc/XQFT.g:488:17: ( DOLLARSi varName )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==DOLLARSi) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // etc/XQFT.g:488:18: DOLLARSi varName
                    {
                    DOLLARSi269=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_typeswitchExpr2925); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi269);

                    pushFollow(FOLLOW_varName_in_typeswitchExpr2927);
                    varName270=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(varName270.getTree());

                    }
                    break;

            }

            RETURN271=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_typeswitchExpr2931); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN271);

            pushFollow(FOLLOW_exprSingle_in_typeswitchExpr2933);
            exprSingle272=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle272.getTree());

            // AST REWRITE
            // elements: caseClause, varName, exprSingle, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 489:9: -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle )
            {
                // etc/XQFT.g:489:12: ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_TYPESWITCHEXPR, "AST_TYPESWITCHEXPR"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                if ( !(stream_caseClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_caseClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_caseClause.next());

                }
                stream_caseClause.reset();
                // etc/XQFT.g:489:50: ( varName )?
                if ( stream_varName.hasNext() ) {
                    adaptor.addChild(root_1, stream_varName.next());

                }
                stream_varName.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeswitchExpr

    public static class caseClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start caseClause
    // etc/XQFT.g:491:9: caseClause : CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle ) ;
    public final caseClause_return caseClause() throws RecognitionException {
        caseClause_return retval = new caseClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CASE273=null;
        Token DOLLARSi274=null;
        Token AS276=null;
        Token RETURN278=null;
        varName_return varName275 = null;

        sequenceType_return sequenceType277 = null;

        exprSingle_return exprSingle279 = null;


        XQFTTree CASE273_tree=null;
        XQFTTree DOLLARSi274_tree=null;
        XQFTTree AS276_tree=null;
        XQFTTree RETURN278_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:491:20: ( CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle ) )
            // etc/XQFT.g:491:22: CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle
            {
            CASE273=(Token)input.LT(1);
            match(input,CASE,FOLLOW_CASE_in_caseClause2973); if (failed) return retval;
            if ( backtracking==0 ) stream_CASE.add(CASE273);

            // etc/XQFT.g:491:27: ( DOLLARSi varName AS )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==DOLLARSi) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // etc/XQFT.g:491:28: DOLLARSi varName AS
                    {
                    DOLLARSi274=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_caseClause2976); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi274);

                    pushFollow(FOLLOW_varName_in_caseClause2978);
                    varName275=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(varName275.getTree());
                    AS276=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_caseClause2980); if (failed) return retval;
                    if ( backtracking==0 ) stream_AS.add(AS276);


                    }
                    break;

            }

            pushFollow(FOLLOW_sequenceType_in_caseClause2984);
            sequenceType277=sequenceType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_sequenceType.add(sequenceType277.getTree());
            RETURN278=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_caseClause2986); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN278);

            pushFollow(FOLLOW_exprSingle_in_caseClause2988);
            exprSingle279=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle279.getTree());

            // AST REWRITE
            // elements: exprSingle, sequenceType, varName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 492:13: -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle )
            {
                // etc/XQFT.g:492:16: ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_CASECLAUSE, "AST_CASECLAUSE"), root_1);

                // etc/XQFT.g:492:33: ( varName )?
                if ( stream_varName.hasNext() ) {
                    adaptor.addChild(root_1, stream_varName.next());

                }
                stream_varName.reset();
                adaptor.addChild(root_1, stream_sequenceType.next());
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end caseClause

    public static class ifExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifExpr
    // etc/XQFT.g:495:5: ifExpr : IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle -> ^( AST_IFEXPR expr exprSingle exprSingle ) ;
    public final ifExpr_return ifExpr() throws RecognitionException {
        ifExpr_return retval = new ifExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token IF280=null;
        Token LPARSi281=null;
        Token RPARSi283=null;
        Token THEN284=null;
        Token ELSE286=null;
        expr_return expr282 = null;

        exprSingle_return exprSingle285 = null;

        exprSingle_return exprSingle287 = null;


        XQFTTree IF280_tree=null;
        XQFTTree LPARSi281_tree=null;
        XQFTTree RPARSi283_tree=null;
        XQFTTree THEN284_tree=null;
        XQFTTree ELSE286_tree=null;
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:495:12: ( IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle -> ^( AST_IFEXPR expr exprSingle exprSingle ) )
            // etc/XQFT.g:495:14: IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle
            {
            IF280=(Token)input.LT(1);
            match(input,IF,FOLLOW_IF_in_ifExpr3034); if (failed) return retval;
            if ( backtracking==0 ) stream_IF.add(IF280);

            LPARSi281=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_ifExpr3036); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi281);

            pushFollow(FOLLOW_expr_in_ifExpr3038);
            expr282=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr282.getTree());
            RPARSi283=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_ifExpr3040); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi283);

            THEN284=(Token)input.LT(1);
            match(input,THEN,FOLLOW_THEN_in_ifExpr3042); if (failed) return retval;
            if ( backtracking==0 ) stream_THEN.add(THEN284);

            pushFollow(FOLLOW_exprSingle_in_ifExpr3044);
            exprSingle285=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle285.getTree());
            ELSE286=(Token)input.LT(1);
            match(input,ELSE,FOLLOW_ELSE_in_ifExpr3046); if (failed) return retval;
            if ( backtracking==0 ) stream_ELSE.add(ELSE286);

            pushFollow(FOLLOW_exprSingle_in_ifExpr3048);
            exprSingle287=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle287.getTree());

            // AST REWRITE
            // elements: exprSingle, expr, exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 496:9: -> ^( AST_IFEXPR expr exprSingle exprSingle )
            {
                // etc/XQFT.g:496:12: ^( AST_IFEXPR expr exprSingle exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_IFEXPR, "AST_IFEXPR"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                adaptor.addChild(root_1, stream_exprSingle.next());
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifExpr

    public static class orExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orExpr
    // etc/XQFT.g:498:5: orExpr : andExpr ( OR andExpr )* ;
    public final orExpr_return orExpr() throws RecognitionException {
        orExpr_return retval = new orExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OR289=null;
        andExpr_return andExpr288 = null;

        andExpr_return andExpr290 = null;


        XQFTTree OR289_tree=null;

        try {
            // etc/XQFT.g:498:12: ( andExpr ( OR andExpr )* )
            // etc/XQFT.g:498:14: andExpr ( OR andExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_andExpr_in_orExpr3088);
            andExpr288=andExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, andExpr288.getTree());
            // etc/XQFT.g:498:22: ( OR andExpr )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==OR) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // etc/XQFT.g:498:24: OR andExpr
            	    {
            	    OR289=(Token)input.LT(1);
            	    match(input,OR,FOLLOW_OR_in_orExpr3092); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    OR289_tree = (XQFTTree)adaptor.create(OR289);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(OR289_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_andExpr_in_orExpr3095);
            	    andExpr290=andExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, andExpr290.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orExpr

    public static class andExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start andExpr
    // etc/XQFT.g:499:9: andExpr : comparisonExpr ( AND comparisonExpr )* ;
    public final andExpr_return andExpr() throws RecognitionException {
        andExpr_return retval = new andExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AND292=null;
        comparisonExpr_return comparisonExpr291 = null;

        comparisonExpr_return comparisonExpr293 = null;


        XQFTTree AND292_tree=null;

        try {
            // etc/XQFT.g:499:17: ( comparisonExpr ( AND comparisonExpr )* )
            // etc/XQFT.g:499:19: comparisonExpr ( AND comparisonExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_comparisonExpr_in_andExpr3113);
            comparisonExpr291=comparisonExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, comparisonExpr291.getTree());
            // etc/XQFT.g:499:34: ( AND comparisonExpr )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==AND) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // etc/XQFT.g:499:36: AND comparisonExpr
            	    {
            	    AND292=(Token)input.LT(1);
            	    match(input,AND,FOLLOW_AND_in_andExpr3117); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    AND292_tree = (XQFTTree)adaptor.create(AND292);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(AND292_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_comparisonExpr_in_andExpr3120);
            	    comparisonExpr293=comparisonExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, comparisonExpr293.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end andExpr

    public static class comparisonExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start comparisonExpr
    // etc/XQFT.g:503:1: comparisonExpr : ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )? ;
    public final comparisonExpr_return comparisonExpr() throws RecognitionException {
        comparisonExpr_return retval = new comparisonExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftContainsExpr_return ftContainsExpr294 = null;

        valueComp_return valueComp295 = null;

        generalComp_return generalComp296 = null;

        nodeComp_return nodeComp297 = null;

        ftContainsExpr_return ftContainsExpr298 = null;



        try {
            // etc/XQFT.g:503:16: ( ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )? )
            // etc/XQFT.g:503:18: ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr3133);
            ftContainsExpr294=ftContainsExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftContainsExpr294.getTree());
            // etc/XQFT.g:503:33: ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==EQSi||(LA64_0>=EQ && LA64_0<=NODEAFTERSi)) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // etc/XQFT.g:503:35: ( valueComp | generalComp | nodeComp ) ftContainsExpr
                    {
                    // etc/XQFT.g:503:35: ( valueComp | generalComp | nodeComp )
                    int alt63=3;
                    switch ( input.LA(1) ) {
                    case EQ:
                    case NE:
                    case LT:
                    case LE:
                    case GT:
                    case GE:
                        {
                        alt63=1;
                        }
                        break;
                    case EQSi:
                    case NEQSi:
                    case LTSi:
                    case LTOREQSi:
                    case GTSi:
                    case GTOREQSi:
                        {
                        alt63=2;
                        }
                        break;
                    case IS:
                    case NODEBEFORESi:
                    case NODEAFTERSi:
                        {
                        alt63=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("503:35: ( valueComp | generalComp | nodeComp )", 63, 0, input);

                        throw nvae;
                    }

                    switch (alt63) {
                        case 1 :
                            // etc/XQFT.g:503:36: valueComp
                            {
                            pushFollow(FOLLOW_valueComp_in_comparisonExpr3138);
                            valueComp295=valueComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(valueComp295.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:503:49: generalComp
                            {
                            pushFollow(FOLLOW_generalComp_in_comparisonExpr3143);
                            generalComp296=generalComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(generalComp296.getTree(), root_0);

                            }
                            break;
                        case 3 :
                            // etc/XQFT.g:503:64: nodeComp
                            {
                            pushFollow(FOLLOW_nodeComp_in_comparisonExpr3148);
                            nodeComp297=nodeComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(nodeComp297.getTree(), root_0);

                            }
                            break;

                    }

                    pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr3152);
                    ftContainsExpr298=ftContainsExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftContainsExpr298.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end comparisonExpr

    public static class ftContainsExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftContainsExpr
    // etc/XQFT.g:504:5: ftContainsExpr : rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )? ;
    public final ftContainsExpr_return ftContainsExpr() throws RecognitionException {
        ftContainsExpr_return retval = new ftContainsExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTCONTAINS300=null;
        rangeExpr_return rangeExpr299 = null;

        ftSelection_return ftSelection301 = null;

        ftIgnoreOption_return ftIgnoreOption302 = null;


        XQFTTree FTCONTAINS300_tree=null;

        try {
            // etc/XQFT.g:504:20: ( rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )? )
            // etc/XQFT.g:504:22: rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_rangeExpr_in_ftContainsExpr3166);
            rangeExpr299=rangeExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, rangeExpr299.getTree());
            // etc/XQFT.g:504:32: ( FTCONTAINS ftSelection ( ftIgnoreOption )? )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==FTCONTAINS) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // etc/XQFT.g:504:34: FTCONTAINS ftSelection ( ftIgnoreOption )?
                    {
                    FTCONTAINS300=(Token)input.LT(1);
                    match(input,FTCONTAINS,FOLLOW_FTCONTAINS_in_ftContainsExpr3170); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FTCONTAINS300_tree = (XQFTTree)adaptor.create(FTCONTAINS300);
                    root_0 = (XQFTTree)adaptor.becomeRoot(FTCONTAINS300_tree, root_0);
                    }
                    pushFollow(FOLLOW_ftSelection_in_ftContainsExpr3173);
                    ftSelection301=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection301.getTree());
                    // etc/XQFT.g:504:58: ( ftIgnoreOption )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==WITHOUT) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // etc/XQFT.g:504:58: ftIgnoreOption
                            {
                            pushFollow(FOLLOW_ftIgnoreOption_in_ftContainsExpr3175);
                            ftIgnoreOption302=ftIgnoreOption();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftIgnoreOption302.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftContainsExpr

    public static class rangeExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rangeExpr
    // etc/XQFT.g:505:9: rangeExpr : additiveExpr ( TO additiveExpr )? ;
    public final rangeExpr_return rangeExpr() throws RecognitionException {
        rangeExpr_return retval = new rangeExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TO304=null;
        additiveExpr_return additiveExpr303 = null;

        additiveExpr_return additiveExpr305 = null;


        XQFTTree TO304_tree=null;

        try {
            // etc/XQFT.g:505:19: ( additiveExpr ( TO additiveExpr )? )
            // etc/XQFT.g:505:21: additiveExpr ( TO additiveExpr )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpr_in_rangeExpr3198);
            additiveExpr303=additiveExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr303.getTree());
            // etc/XQFT.g:505:34: ( TO additiveExpr )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==TO) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // etc/XQFT.g:505:36: TO additiveExpr
                    {
                    TO304=(Token)input.LT(1);
                    match(input,TO,FOLLOW_TO_in_rangeExpr3202); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TO304_tree = (XQFTTree)adaptor.create(TO304);
                    root_0 = (XQFTTree)adaptor.becomeRoot(TO304_tree, root_0);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_rangeExpr3205);
                    additiveExpr305=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr305.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end rangeExpr

    public static class additiveExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start additiveExpr
    // etc/XQFT.g:506:13: additiveExpr : multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )* ;
    public final additiveExpr_return additiveExpr() throws RecognitionException {
        additiveExpr_return retval = new additiveExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set307=null;
        multiplicativeExpr_return multiplicativeExpr306 = null;

        multiplicativeExpr_return multiplicativeExpr308 = null;


        XQFTTree set307_tree=null;

        try {
            // etc/XQFT.g:506:26: ( multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )* )
            // etc/XQFT.g:506:28: multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr3227);
            multiplicativeExpr306=multiplicativeExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpr306.getTree());
            // etc/XQFT.g:506:47: ( ( PLUSSi | MINUSSi ) multiplicativeExpr )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==PLUSSi||LA68_0==MINUSSi) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // etc/XQFT.g:506:49: ( PLUSSi | MINUSSi ) multiplicativeExpr
            	    {
            	    set307=(Token)input.LT(1);
            	    if ( input.LA(1)==PLUSSi||input.LA(1)==MINUSSi ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set307), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_additiveExpr3231);    throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr3240);
            	    multiplicativeExpr308=multiplicativeExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpr308.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end additiveExpr

    public static class multiplicativeExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start multiplicativeExpr
    // etc/XQFT.g:507:17: multiplicativeExpr : unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )* ;
    public final multiplicativeExpr_return multiplicativeExpr() throws RecognitionException {
        multiplicativeExpr_return retval = new multiplicativeExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set310=null;
        unionExpr_return unionExpr309 = null;

        unionExpr_return unionExpr311 = null;


        XQFTTree set310_tree=null;

        try {
            // etc/XQFT.g:507:36: ( unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )* )
            // etc/XQFT.g:507:38: unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr3266);
            unionExpr309=unionExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr309.getTree());
            // etc/XQFT.g:507:48: ( ( STARSi | DIV | IDIV | MOD ) unionExpr )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==STARSi||(LA69_0>=DIV && LA69_0<=MOD)) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // etc/XQFT.g:507:50: ( STARSi | DIV | IDIV | MOD ) unionExpr
            	    {
            	    set310=(Token)input.LT(1);
            	    if ( input.LA(1)==STARSi||(input.LA(1)>=DIV && input.LA(1)<=MOD) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set310), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_multiplicativeExpr3270);    throw mse;
            	    }

            	    pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr3287);
            	    unionExpr311=unionExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr311.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end multiplicativeExpr

    public static class unionExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unionExpr
    // etc/XQFT.g:508:21: unionExpr : intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )* ;
    public final unionExpr_return unionExpr() throws RecognitionException {
        unionExpr_return retval = new unionExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set313=null;
        intersectExceptExpr_return intersectExceptExpr312 = null;

        intersectExceptExpr_return intersectExceptExpr314 = null;


        XQFTTree set313_tree=null;

        try {
            // etc/XQFT.g:508:31: ( intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )* )
            // etc/XQFT.g:508:33: intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr3317);
            intersectExceptExpr312=intersectExceptExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, intersectExceptExpr312.getTree());
            // etc/XQFT.g:508:53: ( ( UNION | PIPESi ) intersectExceptExpr )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( ((LA70_0>=UNION && LA70_0<=PIPESi)) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // etc/XQFT.g:508:55: ( UNION | PIPESi ) intersectExceptExpr
            	    {
            	    set313=(Token)input.LT(1);
            	    if ( (input.LA(1)>=UNION && input.LA(1)<=PIPESi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set313), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_unionExpr3321);    throw mse;
            	    }

            	    pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr3330);
            	    intersectExceptExpr314=intersectExceptExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, intersectExceptExpr314.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unionExpr

    public static class intersectExceptExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start intersectExceptExpr
    // etc/XQFT.g:509:25: intersectExceptExpr : instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )* ;
    public final intersectExceptExpr_return intersectExceptExpr() throws RecognitionException {
        intersectExceptExpr_return retval = new intersectExceptExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set316=null;
        instanceofExpr_return instanceofExpr315 = null;

        instanceofExpr_return instanceofExpr317 = null;


        XQFTTree set316_tree=null;

        try {
            // etc/XQFT.g:509:45: ( instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )* )
            // etc/XQFT.g:509:47: instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr3364);
            instanceofExpr315=instanceofExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, instanceofExpr315.getTree());
            // etc/XQFT.g:509:62: ( ( INTERSECT | EXCEPT ) instanceofExpr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( ((LA71_0>=INTERSECT && LA71_0<=EXCEPT)) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // etc/XQFT.g:509:64: ( INTERSECT | EXCEPT ) instanceofExpr
            	    {
            	    set316=(Token)input.LT(1);
            	    if ( (input.LA(1)>=INTERSECT && input.LA(1)<=EXCEPT) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set316), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_intersectExceptExpr3368);    throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr3377);
            	    instanceofExpr317=instanceofExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, instanceofExpr317.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end intersectExceptExpr

    public static class instanceofExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start instanceofExpr
    // etc/XQFT.g:510:29: instanceofExpr : treatExpr ( INSTANCE OF sequenceType )? ;
    public final instanceofExpr_return instanceofExpr() throws RecognitionException {
        instanceofExpr_return retval = new instanceofExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token INSTANCE319=null;
        Token OF320=null;
        treatExpr_return treatExpr318 = null;

        sequenceType_return sequenceType321 = null;


        XQFTTree INSTANCE319_tree=null;
        XQFTTree OF320_tree=null;

        try {
            // etc/XQFT.g:510:44: ( treatExpr ( INSTANCE OF sequenceType )? )
            // etc/XQFT.g:510:46: treatExpr ( INSTANCE OF sequenceType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_treatExpr_in_instanceofExpr3415);
            treatExpr318=treatExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, treatExpr318.getTree());
            // etc/XQFT.g:510:56: ( INSTANCE OF sequenceType )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==INSTANCE) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // etc/XQFT.g:510:58: INSTANCE OF sequenceType
                    {
                    INSTANCE319=(Token)input.LT(1);
                    match(input,INSTANCE,FOLLOW_INSTANCE_in_instanceofExpr3419); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSTANCE319_tree = (XQFTTree)adaptor.create(INSTANCE319);
                    root_0 = (XQFTTree)adaptor.becomeRoot(INSTANCE319_tree, root_0);
                    }
                    OF320=(Token)input.LT(1);
                    match(input,OF,FOLLOW_OF_in_instanceofExpr3422); if (failed) return retval;
                    pushFollow(FOLLOW_sequenceType_in_instanceofExpr3425);
                    sequenceType321=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType321.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end instanceofExpr

    public static class treatExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start treatExpr
    // etc/XQFT.g:511:33: treatExpr : castableExpr ( TREAT AS sequenceType )? ;
    public final treatExpr_return treatExpr() throws RecognitionException {
        treatExpr_return retval = new treatExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TREAT323=null;
        Token AS324=null;
        castableExpr_return castableExpr322 = null;

        sequenceType_return sequenceType325 = null;


        XQFTTree TREAT323_tree=null;
        XQFTTree AS324_tree=null;

        try {
            // etc/XQFT.g:511:43: ( castableExpr ( TREAT AS sequenceType )? )
            // etc/XQFT.g:511:45: castableExpr ( TREAT AS sequenceType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_castableExpr_in_treatExpr3467);
            castableExpr322=castableExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, castableExpr322.getTree());
            // etc/XQFT.g:511:58: ( TREAT AS sequenceType )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==TREAT) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // etc/XQFT.g:511:60: TREAT AS sequenceType
                    {
                    TREAT323=(Token)input.LT(1);
                    match(input,TREAT,FOLLOW_TREAT_in_treatExpr3471); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TREAT323_tree = (XQFTTree)adaptor.create(TREAT323);
                    root_0 = (XQFTTree)adaptor.becomeRoot(TREAT323_tree, root_0);
                    }
                    AS324=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_treatExpr3474); if (failed) return retval;
                    pushFollow(FOLLOW_sequenceType_in_treatExpr3477);
                    sequenceType325=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType325.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end treatExpr

    public static class castableExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castableExpr
    // etc/XQFT.g:512:37: castableExpr : castExpr ( CASTABLE AS singleType )? ;
    public final castableExpr_return castableExpr() throws RecognitionException {
        castableExpr_return retval = new castableExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CASTABLE327=null;
        Token AS328=null;
        castExpr_return castExpr326 = null;

        singleType_return singleType329 = null;


        XQFTTree CASTABLE327_tree=null;
        XQFTTree AS328_tree=null;

        try {
            // etc/XQFT.g:512:50: ( castExpr ( CASTABLE AS singleType )? )
            // etc/XQFT.g:512:52: castExpr ( CASTABLE AS singleType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_castExpr_in_castableExpr3523);
            castExpr326=castExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, castExpr326.getTree());
            // etc/XQFT.g:512:61: ( CASTABLE AS singleType )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==CASTABLE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // etc/XQFT.g:512:63: CASTABLE AS singleType
                    {
                    CASTABLE327=(Token)input.LT(1);
                    match(input,CASTABLE,FOLLOW_CASTABLE_in_castableExpr3527); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASTABLE327_tree = (XQFTTree)adaptor.create(CASTABLE327);
                    root_0 = (XQFTTree)adaptor.becomeRoot(CASTABLE327_tree, root_0);
                    }
                    AS328=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_castableExpr3530); if (failed) return retval;
                    pushFollow(FOLLOW_singleType_in_castableExpr3533);
                    singleType329=singleType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, singleType329.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end castableExpr

    public static class castExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castExpr
    // etc/XQFT.g:513:41: castExpr : unaryExpr ( CAST AS singleType )? ;
    public final castExpr_return castExpr() throws RecognitionException {
        castExpr_return retval = new castExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CAST331=null;
        Token AS332=null;
        unaryExpr_return unaryExpr330 = null;

        singleType_return singleType333 = null;


        XQFTTree CAST331_tree=null;
        XQFTTree AS332_tree=null;

        try {
            // etc/XQFT.g:513:50: ( unaryExpr ( CAST AS singleType )? )
            // etc/XQFT.g:513:52: unaryExpr ( CAST AS singleType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpr_in_castExpr3583);
            unaryExpr330=unaryExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpr330.getTree());
            // etc/XQFT.g:513:62: ( CAST AS singleType )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==CAST) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // etc/XQFT.g:513:64: CAST AS singleType
                    {
                    CAST331=(Token)input.LT(1);
                    match(input,CAST,FOLLOW_CAST_in_castExpr3587); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CAST331_tree = (XQFTTree)adaptor.create(CAST331);
                    root_0 = (XQFTTree)adaptor.becomeRoot(CAST331_tree, root_0);
                    }
                    AS332=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_castExpr3590); if (failed) return retval;
                    pushFollow(FOLLOW_singleType_in_castExpr3593);
                    singleType333=singleType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, singleType333.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end castExpr

    public static class unaryExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unaryExpr
    // etc/XQFT.g:514:45: unaryExpr : ( ( MINUSSi | PLUSSi )* ) valueExpr ;
    public final unaryExpr_return unaryExpr() throws RecognitionException {
        unaryExpr_return retval = new unaryExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set334=null;
        valueExpr_return valueExpr335 = null;


        XQFTTree set334_tree=null;

        try {
            // etc/XQFT.g:514:55: ( ( ( MINUSSi | PLUSSi )* ) valueExpr )
            // etc/XQFT.g:514:57: ( ( MINUSSi | PLUSSi )* ) valueExpr
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:514:57: ( ( MINUSSi | PLUSSi )* )
            // etc/XQFT.g:514:58: ( MINUSSi | PLUSSi )*
            {
            // etc/XQFT.g:514:58: ( MINUSSi | PLUSSi )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==PLUSSi||LA76_0==MINUSSi) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // etc/XQFT.g:
            	    {
            	    set334=(Token)input.LT(1);
            	    if ( input.LA(1)==PLUSSi||input.LA(1)==MINUSSi ) {
            	        input.consume();
            	        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set334));
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_unaryExpr3648);    throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            pushFollow(FOLLOW_valueExpr_in_unaryExpr3659);
            valueExpr335=valueExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, valueExpr335.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unaryExpr

    public static class singleType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start singleType
    // etc/XQFT.g:515:45: singleType : atomicType ( QUESTIONSi )? ;
    public final singleType_return singleType() throws RecognitionException {
        singleType_return retval = new singleType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token QUESTIONSi337=null;
        atomicType_return atomicType336 = null;


        XQFTTree QUESTIONSi337_tree=null;

        try {
            // etc/XQFT.g:515:56: ( atomicType ( QUESTIONSi )? )
            // etc/XQFT.g:515:58: atomicType ( QUESTIONSi )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_atomicType_in_singleType3710);
            atomicType336=atomicType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, atomicType336.getTree());
            // etc/XQFT.g:515:69: ( QUESTIONSi )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==QUESTIONSi) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // etc/XQFT.g:515:69: QUESTIONSi
                    {
                    QUESTIONSi337=(Token)input.LT(1);
                    match(input,QUESTIONSi,FOLLOW_QUESTIONSi_in_singleType3712); if (failed) return retval;
                    if ( backtracking==0 ) {
                    QUESTIONSi337_tree = (XQFTTree)adaptor.create(QUESTIONSi337);
                    adaptor.addChild(root_0, QUESTIONSi337_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end singleType

    public static class atomicType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start atomicType
    // etc/XQFT.g:516:49: atomicType : qName ;
    public final atomicType_return atomicType() throws RecognitionException {
        atomicType_return retval = new atomicType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName338 = null;



        try {
            // etc/XQFT.g:516:60: ( qName )
            // etc/XQFT.g:516:62: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_atomicType3768);
            qName338=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName338.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end atomicType

    public static class ftIgnoreOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftIgnoreOption
    // etc/XQFT.g:518:9: ftIgnoreOption : WITHOUT CONTENT unionExpr ;
    public final ftIgnoreOption_return ftIgnoreOption() throws RecognitionException {
        ftIgnoreOption_return retval = new ftIgnoreOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITHOUT339=null;
        Token CONTENT340=null;
        unionExpr_return unionExpr341 = null;


        XQFTTree WITHOUT339_tree=null;
        XQFTTree CONTENT340_tree=null;

        try {
            // etc/XQFT.g:518:24: ( WITHOUT CONTENT unionExpr )
            // etc/XQFT.g:518:26: WITHOUT CONTENT unionExpr
            {
            root_0 = (XQFTTree)adaptor.nil();

            WITHOUT339=(Token)input.LT(1);
            match(input,WITHOUT,FOLLOW_WITHOUT_in_ftIgnoreOption3800); if (failed) return retval;
            if ( backtracking==0 ) {
            WITHOUT339_tree = (XQFTTree)adaptor.create(WITHOUT339);
            root_0 = (XQFTTree)adaptor.becomeRoot(WITHOUT339_tree, root_0);
            }
            CONTENT340=(Token)input.LT(1);
            match(input,CONTENT,FOLLOW_CONTENT_in_ftIgnoreOption3803); if (failed) return retval;
            if ( backtracking==0 ) {
            CONTENT340_tree = (XQFTTree)adaptor.create(CONTENT340);
            adaptor.addChild(root_0, CONTENT340_tree);
            }
            pushFollow(FOLLOW_unionExpr_in_ftIgnoreOption3805);
            unionExpr341=unionExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr341.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftIgnoreOption

    public static class valueComp_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start valueComp
    // etc/XQFT.g:520:5: valueComp : ( EQ | NE | LT | LE | GT | GE );
    public final valueComp_return valueComp() throws RecognitionException {
        valueComp_return retval = new valueComp_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set342=null;

        XQFTTree set342_tree=null;

        try {
            // etc/XQFT.g:520:17: ( EQ | NE | LT | LE | GT | GE )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set342=(Token)input.LT(1);
            if ( (input.LA(1)>=EQ && input.LA(1)<=GE) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set342));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_valueComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end valueComp

    public static class generalComp_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start generalComp
    // etc/XQFT.g:521:5: generalComp : ( EQSi | NEQSi | LTSi | LTOREQSi | GTSi | GTOREQSi );
    public final generalComp_return generalComp() throws RecognitionException {
        generalComp_return retval = new generalComp_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set343=null;

        XQFTTree set343_tree=null;

        try {
            // etc/XQFT.g:521:17: ( EQSi | NEQSi | LTSi | LTOREQSi | GTSi | GTOREQSi )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set343=(Token)input.LT(1);
            if ( input.LA(1)==EQSi||(input.LA(1)>=NEQSi && input.LA(1)<=GTOREQSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set343));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_generalComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end generalComp

    public static class nodeComp_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nodeComp
    // etc/XQFT.g:522:5: nodeComp : ( IS | NODEBEFORESi | NODEAFTERSi );
    public final nodeComp_return nodeComp() throws RecognitionException {
        nodeComp_return retval = new nodeComp_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set344=null;

        XQFTTree set344_tree=null;

        try {
            // etc/XQFT.g:522:17: ( IS | NODEBEFORESi | NODEAFTERSi )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set344=(Token)input.LT(1);
            if ( (input.LA(1)>=IS && input.LA(1)<=NODEAFTERSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set344));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_nodeComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nodeComp

    public static class ftSelection_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftSelection
    // etc/XQFT.g:526:1: ftSelection : ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )? ;
    public final ftSelection_return ftSelection() throws RecognitionException {
        ftSelection_return retval = new ftSelection_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WEIGHT347=null;
        ftOr_return ftOr345 = null;

        ftPosFilter_return ftPosFilter346 = null;

        rangeExpr_return rangeExpr348 = null;


        XQFTTree WEIGHT347_tree=null;

        try {
            // etc/XQFT.g:526:13: ( ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )? )
            // etc/XQFT.g:526:15: ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftOr_in_ftSelection3902);
            ftOr345=ftOr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftOr345.getTree());
            // etc/XQFT.g:526:20: ( ftPosFilter )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==ORDERED||LA78_0==AT||LA78_0==WINDOW||(LA78_0>=DISTANCE && LA78_0<=DIFFERENT)||LA78_0==ENTIRE) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // etc/XQFT.g:526:20: ftPosFilter
            	    {
            	    pushFollow(FOLLOW_ftPosFilter_in_ftSelection3904);
            	    ftPosFilter346=ftPosFilter();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftPosFilter346.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // etc/XQFT.g:526:33: ( WEIGHT rangeExpr )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==WEIGHT) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // etc/XQFT.g:526:34: WEIGHT rangeExpr
                    {
                    WEIGHT347=(Token)input.LT(1);
                    match(input,WEIGHT,FOLLOW_WEIGHT_in_ftSelection3908); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WEIGHT347_tree = (XQFTTree)adaptor.create(WEIGHT347);
                    adaptor.addChild(root_0, WEIGHT347_tree);
                    }
                    pushFollow(FOLLOW_rangeExpr_in_ftSelection3910);
                    rangeExpr348=rangeExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, rangeExpr348.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftSelection

    public static class ftOr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOr
    // etc/XQFT.g:527:5: ftOr : ftAnd ( FTOR ftAnd )* ;
    public final ftOr_return ftOr() throws RecognitionException {
        ftOr_return retval = new ftOr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTOR350=null;
        ftAnd_return ftAnd349 = null;

        ftAnd_return ftAnd351 = null;


        XQFTTree FTOR350_tree=null;

        try {
            // etc/XQFT.g:527:10: ( ftAnd ( FTOR ftAnd )* )
            // etc/XQFT.g:527:12: ftAnd ( FTOR ftAnd )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftAnd_in_ftOr3923);
            ftAnd349=ftAnd();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftAnd349.getTree());
            // etc/XQFT.g:527:18: ( FTOR ftAnd )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==FTOR) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // etc/XQFT.g:527:20: FTOR ftAnd
            	    {
            	    FTOR350=(Token)input.LT(1);
            	    match(input,FTOR,FOLLOW_FTOR_in_ftOr3927); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    FTOR350_tree = (XQFTTree)adaptor.create(FTOR350);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(FTOR350_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_ftAnd_in_ftOr3930);
            	    ftAnd351=ftAnd();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftAnd351.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOr

    public static class ftAnd_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftAnd
    // etc/XQFT.g:528:9: ftAnd : ftMildNot ( FTAND ftMildNot )* ;
    public final ftAnd_return ftAnd() throws RecognitionException {
        ftAnd_return retval = new ftAnd_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTAND353=null;
        ftMildNot_return ftMildNot352 = null;

        ftMildNot_return ftMildNot354 = null;


        XQFTTree FTAND353_tree=null;

        try {
            // etc/XQFT.g:528:15: ( ftMildNot ( FTAND ftMildNot )* )
            // etc/XQFT.g:528:17: ftMildNot ( FTAND ftMildNot )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftMildNot_in_ftAnd3948);
            ftMildNot352=ftMildNot();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftMildNot352.getTree());
            // etc/XQFT.g:528:27: ( FTAND ftMildNot )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==FTAND) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // etc/XQFT.g:528:29: FTAND ftMildNot
            	    {
            	    FTAND353=(Token)input.LT(1);
            	    match(input,FTAND,FOLLOW_FTAND_in_ftAnd3952); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    FTAND353_tree = (XQFTTree)adaptor.create(FTAND353);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(FTAND353_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_ftMildNot_in_ftAnd3955);
            	    ftMildNot354=ftMildNot();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftMildNot354.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftAnd

    public static class ftMildNot_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMildNot
    // etc/XQFT.g:529:13: ftMildNot : ftUnaryNot ( NOT IN ftUnaryNot )* ;
    public final ftMildNot_return ftMildNot() throws RecognitionException {
        ftMildNot_return retval = new ftMildNot_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NOT356=null;
        Token IN357=null;
        ftUnaryNot_return ftUnaryNot355 = null;

        ftUnaryNot_return ftUnaryNot358 = null;


        XQFTTree NOT356_tree=null;
        XQFTTree IN357_tree=null;

        try {
            // etc/XQFT.g:529:23: ( ftUnaryNot ( NOT IN ftUnaryNot )* )
            // etc/XQFT.g:529:25: ftUnaryNot ( NOT IN ftUnaryNot )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot3977);
            ftUnaryNot355=ftUnaryNot();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot355.getTree());
            // etc/XQFT.g:529:36: ( NOT IN ftUnaryNot )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==NOT) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // etc/XQFT.g:529:38: NOT IN ftUnaryNot
            	    {
            	    NOT356=(Token)input.LT(1);
            	    match(input,NOT,FOLLOW_NOT_in_ftMildNot3981); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    NOT356_tree = (XQFTTree)adaptor.create(NOT356);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(NOT356_tree, root_0);
            	    }
            	    IN357=(Token)input.LT(1);
            	    match(input,IN,FOLLOW_IN_in_ftMildNot3984); if (failed) return retval;
            	    pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot3987);
            	    ftUnaryNot358=ftUnaryNot();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot358.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMildNot

    public static class ftUnaryNot_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftUnaryNot
    // etc/XQFT.g:530:17: ftUnaryNot : ( FTNOT )? ftPrimaryWithOptions ;
    public final ftUnaryNot_return ftUnaryNot() throws RecognitionException {
        ftUnaryNot_return retval = new ftUnaryNot_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTNOT359=null;
        ftPrimaryWithOptions_return ftPrimaryWithOptions360 = null;


        XQFTTree FTNOT359_tree=null;

        try {
            // etc/XQFT.g:530:28: ( ( FTNOT )? ftPrimaryWithOptions )
            // etc/XQFT.g:530:30: ( FTNOT )? ftPrimaryWithOptions
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:530:30: ( FTNOT )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==FTNOT) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // etc/XQFT.g:530:31: FTNOT
                    {
                    FTNOT359=(Token)input.LT(1);
                    match(input,FTNOT,FOLLOW_FTNOT_in_ftUnaryNot4014); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FTNOT359_tree = (XQFTTree)adaptor.create(FTNOT359);
                    root_0 = (XQFTTree)adaptor.becomeRoot(FTNOT359_tree, root_0);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot4019);
            ftPrimaryWithOptions360=ftPrimaryWithOptions();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftPrimaryWithOptions360.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftUnaryNot

    public static class ftPrimaryWithOptions_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPrimaryWithOptions
    // etc/XQFT.g:531:17: ftPrimaryWithOptions : ftPrimary ( ftMatchOption )* ;
    public final ftPrimaryWithOptions_return ftPrimaryWithOptions() throws RecognitionException {
        ftPrimaryWithOptions_return retval = new ftPrimaryWithOptions_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftPrimary_return ftPrimary361 = null;

        ftMatchOption_return ftMatchOption362 = null;



        try {
            // etc/XQFT.g:531:38: ( ftPrimary ( ftMatchOption )* )
            // etc/XQFT.g:531:40: ftPrimary ( ftMatchOption )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftPrimary_in_ftPrimaryWithOptions4042);
            ftPrimary361=ftPrimary();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(ftPrimary361.getTree(), root_0);
            // etc/XQFT.g:531:51: ( ftMatchOption )*
            loop84:
            do {
                int alt84=2;
                switch ( input.LA(1) ) {
                case WITHOUT:
                    {
                    int LA84_11 = input.LA(2);

                    if ( ((LA84_11>=WILDCARDS && LA84_11<=STOP)) ) {
                        alt84=1;
                    }


                    }
                    break;
                case CASE:
                    {
                    int LA84_34 = input.LA(2);

                    if ( (LA84_34==INSENSITIVE) ) {
                        alt84=1;
                    }
                    else if ( (LA84_34==SENSITIVE) ) {
                        alt84=1;
                    }


                    }
                    break;
                case OPTION:
                case WITH:
                case LANGUAGE:
                case LOWERCASE:
                case UPPERCASE:
                case DIACRITICS:
                    {
                    alt84=1;
                    }
                    break;

                }

                switch (alt84) {
            	case 1 :
            	    // etc/XQFT.g:531:52: ftMatchOption
            	    {
            	    pushFollow(FOLLOW_ftMatchOption_in_ftPrimaryWithOptions4046);
            	    ftMatchOption362=ftMatchOption();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOption362.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPrimaryWithOptions

    public static class ftPrimary_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPrimary
    // etc/XQFT.g:532:21: ftPrimary : ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection );
    public final ftPrimary_return ftPrimary() throws RecognitionException {
        ftPrimary_return retval = new ftPrimary_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPARSi365=null;
        Token RPARSi367=null;
        ftWords_return ftWords363 = null;

        ftTimes_return ftTimes364 = null;

        ftSelection_return ftSelection366 = null;

        ftExtensionSelection_return ftExtensionSelection368 = null;


        XQFTTree LPARSi365_tree=null;
        XQFTTree RPARSi367_tree=null;

        try {
            // etc/XQFT.g:532:31: ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection )
            int alt86=3;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case LBRACESi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
                {
                alt86=1;
                }
                break;
            case LPARSi:
                {
                alt86=2;
                }
                break;
            case LPRAGSi:
                {
                alt86=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("532:21: ftPrimary : ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection );", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // etc/XQFT.g:532:33: ftWords ( ftTimes )?
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWords_in_ftPrimary4075);
                    ftWords363=ftWords();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(ftWords363.getTree(), root_0);
                    // etc/XQFT.g:532:42: ( ftTimes )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==OCCURS) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // etc/XQFT.g:532:42: ftTimes
                            {
                            pushFollow(FOLLOW_ftTimes_in_ftPrimary4078);
                            ftTimes364=ftTimes();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftTimes364.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:533:35: LPARSi ftSelection RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    LPARSi365=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftPrimary4116); if (failed) return retval;
                    pushFollow(FOLLOW_ftSelection_in_ftPrimary4119);
                    ftSelection366=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection366.getTree());
                    RPARSi367=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftPrimary4121); if (failed) return retval;

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:534:35: ftExtensionSelection
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionSelection_in_ftPrimary4159);
                    ftExtensionSelection368=ftExtensionSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftExtensionSelection368.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPrimary

    public static class ftWords_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWords
    // etc/XQFT.g:536:25: ftWords : ftWordsValue ( ftAnyallOption )? ;
    public final ftWords_return ftWords() throws RecognitionException {
        ftWords_return retval = new ftWords_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftWordsValue_return ftWordsValue369 = null;

        ftAnyallOption_return ftAnyallOption370 = null;



        try {
            // etc/XQFT.g:536:33: ( ftWordsValue ( ftAnyallOption )? )
            // etc/XQFT.g:536:35: ftWordsValue ( ftAnyallOption )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftWordsValue_in_ftWords4219);
            ftWordsValue369=ftWordsValue();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(ftWordsValue369.getTree(), root_0);
            // etc/XQFT.g:536:49: ( ftAnyallOption )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==ANY||LA87_0==ALL||LA87_0==PHRASE) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // etc/XQFT.g:536:49: ftAnyallOption
                    {
                    pushFollow(FOLLOW_ftAnyallOption_in_ftWords4222);
                    ftAnyallOption370=ftAnyallOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftAnyallOption370.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWords

    public static class ftWordsValue_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWordsValue
    // etc/XQFT.g:537:29: ftWordsValue : ( literal | ( LBRACESi expr RBRACSi ) );
    public final ftWordsValue_return ftWordsValue() throws RecognitionException {
        ftWordsValue_return retval = new ftWordsValue_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi372=null;
        Token RBRACSi374=null;
        literal_return literal371 = null;

        expr_return expr373 = null;


        XQFTTree LBRACESi372_tree=null;
        XQFTTree RBRACSi374_tree=null;

        try {
            // etc/XQFT.g:537:42: ( literal | ( LBRACESi expr RBRACSi ) )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==StringLiteral||(LA88_0>=IntegerLiteral && LA88_0<=DoubleLiteral)) ) {
                alt88=1;
            }
            else if ( (LA88_0==LBRACESi) ) {
                alt88=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("537:29: ftWordsValue : ( literal | ( LBRACESi expr RBRACSi ) );", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // etc/XQFT.g:537:44: literal
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_ftWordsValue4258);
                    literal371=literal();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal371.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:537:54: ( LBRACESi expr RBRACSi )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:537:54: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:537:55: LBRACESi expr RBRACSi
                    {
                    LBRACESi372=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_ftWordsValue4263); if (failed) return retval;
                    pushFollow(FOLLOW_expr_in_ftWordsValue4266);
                    expr373=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr373.getTree());
                    RBRACSi374=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_ftWordsValue4268); if (failed) return retval;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWordsValue

    public static class literal_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start literal
    // etc/XQFT.g:538:33: literal : ( numericLiteral | StringLiteral );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token StringLiteral376=null;
        numericLiteral_return numericLiteral375 = null;


        XQFTTree StringLiteral376_tree=null;

        try {
            // etc/XQFT.g:538:41: ( numericLiteral | StringLiteral )
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( ((LA89_0>=IntegerLiteral && LA89_0<=DoubleLiteral)) ) {
                alt89=1;
            }
            else if ( (LA89_0==StringLiteral) ) {
                alt89=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("538:33: literal : ( numericLiteral | StringLiteral );", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // etc/XQFT.g:538:43: numericLiteral
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_literal4309);
                    numericLiteral375=numericLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, numericLiteral375.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:538:60: StringLiteral
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    StringLiteral376=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_literal4313); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral376_tree = (XQFTTree)adaptor.create(StringLiteral376);
                    adaptor.addChild(root_0, StringLiteral376_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end literal

    public static class numericLiteral_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start numericLiteral
    // etc/XQFT.g:539:37: numericLiteral : ( IntegerLiteral | DecimalLiteral | DoubleLiteral );
    public final numericLiteral_return numericLiteral() throws RecognitionException {
        numericLiteral_return retval = new numericLiteral_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set377=null;

        XQFTTree set377_tree=null;

        try {
            // etc/XQFT.g:539:52: ( IntegerLiteral | DecimalLiteral | DoubleLiteral )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set377=(Token)input.LT(1);
            if ( (input.LA(1)>=IntegerLiteral && input.LA(1)<=DoubleLiteral) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set377));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_numericLiteral0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end numericLiteral

    public static class ftAnyallOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftAnyallOption
    // etc/XQFT.g:540:29: ftAnyallOption : ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE );
    public final ftAnyallOption_return ftAnyallOption() throws RecognitionException {
        ftAnyallOption_return retval = new ftAnyallOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ANY378=null;
        Token WORD379=null;
        Token ALL380=null;
        Token WORDS381=null;
        Token PHRASE382=null;

        XQFTTree ANY378_tree=null;
        XQFTTree WORD379_tree=null;
        XQFTTree ALL380_tree=null;
        XQFTTree WORDS381_tree=null;
        XQFTTree PHRASE382_tree=null;

        try {
            // etc/XQFT.g:540:44: ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE )
            int alt92=3;
            switch ( input.LA(1) ) {
            case ANY:
                {
                alt92=1;
                }
                break;
            case ALL:
                {
                alt92=2;
                }
                break;
            case PHRASE:
                {
                alt92=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("540:29: ftAnyallOption : ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE );", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // etc/XQFT.g:540:46: ( ANY ( WORD )? )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:540:46: ( ANY ( WORD )? )
                    // etc/XQFT.g:540:47: ANY ( WORD )?
                    {
                    ANY378=(Token)input.LT(1);
                    match(input,ANY,FOLLOW_ANY_in_ftAnyallOption4400); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ANY378_tree = (XQFTTree)adaptor.create(ANY378);
                    adaptor.addChild(root_0, ANY378_tree);
                    }
                    // etc/XQFT.g:540:51: ( WORD )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==WORD) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // etc/XQFT.g:540:51: WORD
                            {
                            WORD379=(Token)input.LT(1);
                            match(input,WORD,FOLLOW_WORD_in_ftAnyallOption4402); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WORD379_tree = (XQFTTree)adaptor.create(WORD379);
                            adaptor.addChild(root_0, WORD379_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:540:60: ( ALL ( WORDS )? )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:540:60: ( ALL ( WORDS )? )
                    // etc/XQFT.g:540:61: ALL ( WORDS )?
                    {
                    ALL380=(Token)input.LT(1);
                    match(input,ALL,FOLLOW_ALL_in_ftAnyallOption4409); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ALL380_tree = (XQFTTree)adaptor.create(ALL380);
                    adaptor.addChild(root_0, ALL380_tree);
                    }
                    // etc/XQFT.g:540:65: ( WORDS )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==WORDS) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // etc/XQFT.g:540:65: WORDS
                            {
                            WORDS381=(Token)input.LT(1);
                            match(input,WORDS,FOLLOW_WORDS_in_ftAnyallOption4411); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WORDS381_tree = (XQFTTree)adaptor.create(WORDS381);
                            adaptor.addChild(root_0, WORDS381_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:540:75: PHRASE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    PHRASE382=(Token)input.LT(1);
                    match(input,PHRASE,FOLLOW_PHRASE_in_ftAnyallOption4417); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PHRASE382_tree = (XQFTTree)adaptor.create(PHRASE382);
                    adaptor.addChild(root_0, PHRASE382_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftAnyallOption

    public static class ftTimes_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftTimes
    // etc/XQFT.g:541:25: ftTimes : OCCURS ftRange TIMES ;
    public final ftTimes_return ftTimes() throws RecognitionException {
        ftTimes_return retval = new ftTimes_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OCCURS383=null;
        Token TIMES385=null;
        ftRange_return ftRange384 = null;


        XQFTTree OCCURS383_tree=null;
        XQFTTree TIMES385_tree=null;

        try {
            // etc/XQFT.g:541:33: ( OCCURS ftRange TIMES )
            // etc/XQFT.g:541:35: OCCURS ftRange TIMES
            {
            root_0 = (XQFTTree)adaptor.nil();

            OCCURS383=(Token)input.LT(1);
            match(input,OCCURS,FOLLOW_OCCURS_in_ftTimes4448); if (failed) return retval;
            pushFollow(FOLLOW_ftRange_in_ftTimes4451);
            ftRange384=ftRange();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRange384.getTree());
            TIMES385=(Token)input.LT(1);
            match(input,TIMES,FOLLOW_TIMES_in_ftTimes4453); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftTimes

    public static class ftRange_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftRange
    // etc/XQFT.g:542:29: ftRange : ( ( EXACTLY additiveExpr ) | ( AT ( LEAST | MOST ) additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );
    public final ftRange_return ftRange() throws RecognitionException {
        ftRange_return retval = new ftRange_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token EXACTLY386=null;
        Token AT388=null;
        Token set389=null;
        Token FROM391=null;
        Token TO393=null;
        additiveExpr_return additiveExpr387 = null;

        additiveExpr_return additiveExpr390 = null;

        additiveExpr_return additiveExpr392 = null;

        additiveExpr_return additiveExpr394 = null;


        XQFTTree EXACTLY386_tree=null;
        XQFTTree AT388_tree=null;
        XQFTTree set389_tree=null;
        XQFTTree FROM391_tree=null;
        XQFTTree TO393_tree=null;

        try {
            // etc/XQFT.g:542:37: ( ( EXACTLY additiveExpr ) | ( AT ( LEAST | MOST ) additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) )
            int alt93=3;
            switch ( input.LA(1) ) {
            case EXACTLY:
                {
                alt93=1;
                }
                break;
            case AT:
                {
                alt93=2;
                }
                break;
            case FROM:
                {
                alt93=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("542:29: ftRange : ( ( EXACTLY additiveExpr ) | ( AT ( LEAST | MOST ) additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // etc/XQFT.g:542:39: ( EXACTLY additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:542:39: ( EXACTLY additiveExpr )
                    // etc/XQFT.g:542:40: EXACTLY additiveExpr
                    {
                    EXACTLY386=(Token)input.LT(1);
                    match(input,EXACTLY,FOLLOW_EXACTLY_in_ftRange4490); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXACTLY386_tree = (XQFTTree)adaptor.create(EXACTLY386);
                    adaptor.addChild(root_0, EXACTLY386_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange4492);
                    additiveExpr387=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr387.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:543:41: ( AT ( LEAST | MOST ) additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:543:41: ( AT ( LEAST | MOST ) additiveExpr )
                    // etc/XQFT.g:543:42: AT ( LEAST | MOST ) additiveExpr
                    {
                    AT388=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRange4536); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT388_tree = (XQFTTree)adaptor.create(AT388);
                    adaptor.addChild(root_0, AT388_tree);
                    }
                    set389=(Token)input.LT(1);
                    if ( input.LA(1)==LEAST||input.LA(1)==MOST ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set389));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftRange4538);    throw mse;
                    }

                    pushFollow(FOLLOW_additiveExpr_in_ftRange4544);
                    additiveExpr390=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr390.getTree());

                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:544:41: ( FROM additiveExpr TO additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:544:41: ( FROM additiveExpr TO additiveExpr )
                    // etc/XQFT.g:544:42: FROM additiveExpr TO additiveExpr
                    {
                    FROM391=(Token)input.LT(1);
                    match(input,FROM,FOLLOW_FROM_in_ftRange4588); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FROM391_tree = (XQFTTree)adaptor.create(FROM391);
                    adaptor.addChild(root_0, FROM391_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange4590);
                    additiveExpr392=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr392.getTree());
                    TO393=(Token)input.LT(1);
                    match(input,TO,FOLLOW_TO_in_ftRange4592); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TO393_tree = (XQFTTree)adaptor.create(TO393);
                    adaptor.addChild(root_0, TO393_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange4594);
                    additiveExpr394=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr394.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftRange

    public static class ftExtensionSelection_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftExtensionSelection
    // etc/XQFT.g:545:25: ftExtensionSelection : ( pragma )+ LBRACESi ( ftSelection )? RBRACSi ;
    public final ftExtensionSelection_return ftExtensionSelection() throws RecognitionException {
        ftExtensionSelection_return retval = new ftExtensionSelection_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi396=null;
        Token RBRACSi398=null;
        pragma_return pragma395 = null;

        ftSelection_return ftSelection397 = null;


        XQFTTree LBRACESi396_tree=null;
        XQFTTree RBRACSi398_tree=null;

        try {
            // etc/XQFT.g:545:46: ( ( pragma )+ LBRACESi ( ftSelection )? RBRACSi )
            // etc/XQFT.g:545:48: ( pragma )+ LBRACESi ( ftSelection )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:545:48: ( pragma )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==LPRAGSi) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // etc/XQFT.g:545:48: pragma
            	    {
            	    pushFollow(FOLLOW_pragma_in_ftExtensionSelection4626);
            	    pragma395=pragma();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, pragma395.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);

            LBRACESi396=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_ftExtensionSelection4629); if (failed) return retval;
            // etc/XQFT.g:545:66: ( ftSelection )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==StringLiteral||LA95_0==LPARSi||LA95_0==LBRACESi||(LA95_0>=FTNOT && LA95_0<=DoubleLiteral)||LA95_0==LPRAGSi) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // etc/XQFT.g:545:66: ftSelection
                    {
                    pushFollow(FOLLOW_ftSelection_in_ftExtensionSelection4632);
                    ftSelection397=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection397.getTree());

                    }
                    break;

            }

            RBRACSi398=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_ftExtensionSelection4635); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftExtensionSelection

    public static class pragma_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pragma
    // etc/XQFT.g:546:29: pragma : LPRAGSi qName ( PragmaContents )? RPRAGSi ;
    public final pragma_return pragma() throws RecognitionException {
        pragma_return retval = new pragma_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPRAGSi399=null;
        Token PragmaContents401=null;
        Token RPRAGSi402=null;
        qName_return qName400 = null;


        XQFTTree LPRAGSi399_tree=null;
        XQFTTree PragmaContents401_tree=null;
        XQFTTree RPRAGSi402_tree=null;

        try {
            // etc/XQFT.g:546:36: ( LPRAGSi qName ( PragmaContents )? RPRAGSi )
            // etc/XQFT.g:546:38: LPRAGSi qName ( PragmaContents )? RPRAGSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LPRAGSi399=(Token)input.LT(1);
            match(input,LPRAGSi,FOLLOW_LPRAGSi_in_pragma4671); if (failed) return retval;
            pushFollow(FOLLOW_qName_in_pragma4674);
            qName400=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName400.getTree());
            // etc/XQFT.g:546:53: ( PragmaContents )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==PragmaContents) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // etc/XQFT.g:546:53: PragmaContents
                    {
                    PragmaContents401=(Token)input.LT(1);
                    match(input,PragmaContents,FOLLOW_PragmaContents_in_pragma4676); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PragmaContents401_tree = (XQFTTree)adaptor.create(PragmaContents401);
                    adaptor.addChild(root_0, PragmaContents401_tree);
                    }

                    }
                    break;

            }

            RPRAGSi402=(Token)input.LT(1);
            match(input,RPRAGSi,FOLLOW_RPRAGSi_in_pragma4679); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end pragma

    public static class ftPosFilter_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPosFilter
    // etc/XQFT.g:548:5: ftPosFilter : ( ftOrder | ftWindow | ftDistance | ftScope | ftContent );
    public final ftPosFilter_return ftPosFilter() throws RecognitionException {
        ftPosFilter_return retval = new ftPosFilter_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftOrder_return ftOrder403 = null;

        ftWindow_return ftWindow404 = null;

        ftDistance_return ftDistance405 = null;

        ftScope_return ftScope406 = null;

        ftContent_return ftContent407 = null;



        try {
            // etc/XQFT.g:548:17: ( ftOrder | ftWindow | ftDistance | ftScope | ftContent )
            int alt97=5;
            switch ( input.LA(1) ) {
            case ORDERED:
                {
                alt97=1;
                }
                break;
            case WINDOW:
                {
                alt97=2;
                }
                break;
            case DISTANCE:
                {
                alt97=3;
                }
                break;
            case SAME:
            case DIFFERENT:
                {
                alt97=4;
                }
                break;
            case AT:
            case ENTIRE:
                {
                alt97=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("548:5: ftPosFilter : ( ftOrder | ftWindow | ftDistance | ftScope | ftContent );", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // etc/XQFT.g:548:19: ftOrder
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftOrder_in_ftPosFilter4720);
                    ftOrder403=ftOrder();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftOrder403.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:548:29: ftWindow
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWindow_in_ftPosFilter4724);
                    ftWindow404=ftWindow();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWindow404.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:548:40: ftDistance
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftDistance_in_ftPosFilter4728);
                    ftDistance405=ftDistance();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftDistance405.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:548:53: ftScope
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftScope_in_ftPosFilter4732);
                    ftScope406=ftScope();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftScope406.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:548:63: ftContent
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftContent_in_ftPosFilter4736);
                    ftContent407=ftContent();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftContent407.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPosFilter

    public static class ftOrder_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOrder
    // etc/XQFT.g:549:9: ftOrder : ORDERED ;
    public final ftOrder_return ftOrder() throws RecognitionException {
        ftOrder_return retval = new ftOrder_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDERED408=null;

        XQFTTree ORDERED408_tree=null;

        try {
            // etc/XQFT.g:549:17: ( ORDERED )
            // etc/XQFT.g:549:19: ORDERED
            {
            root_0 = (XQFTTree)adaptor.nil();

            ORDERED408=(Token)input.LT(1);
            match(input,ORDERED,FOLLOW_ORDERED_in_ftOrder4751); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERED408_tree = (XQFTTree)adaptor.create(ORDERED408);
            adaptor.addChild(root_0, ORDERED408_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOrder

    public static class ftWindow_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWindow
    // etc/XQFT.g:550:9: ftWindow : WINDOW additiveExpr ftUnit ;
    public final ftWindow_return ftWindow() throws RecognitionException {
        ftWindow_return retval = new ftWindow_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WINDOW409=null;
        additiveExpr_return additiveExpr410 = null;

        ftUnit_return ftUnit411 = null;


        XQFTTree WINDOW409_tree=null;

        try {
            // etc/XQFT.g:550:18: ( WINDOW additiveExpr ftUnit )
            // etc/XQFT.g:550:20: WINDOW additiveExpr ftUnit
            {
            root_0 = (XQFTTree)adaptor.nil();

            WINDOW409=(Token)input.LT(1);
            match(input,WINDOW,FOLLOW_WINDOW_in_ftWindow4766); if (failed) return retval;
            if ( backtracking==0 ) {
            WINDOW409_tree = (XQFTTree)adaptor.create(WINDOW409);
            adaptor.addChild(root_0, WINDOW409_tree);
            }
            pushFollow(FOLLOW_additiveExpr_in_ftWindow4768);
            additiveExpr410=additiveExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr410.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftWindow4770);
            ftUnit411=ftUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnit411.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWindow

    public static class ftUnit_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftUnit
    // etc/XQFT.g:551:13: ftUnit : ( WORDS | SENTENCES | PARAGRAPHS );
    public final ftUnit_return ftUnit() throws RecognitionException {
        ftUnit_return retval = new ftUnit_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set412=null;

        XQFTTree set412_tree=null;

        try {
            // etc/XQFT.g:551:20: ( WORDS | SENTENCES | PARAGRAPHS )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set412=(Token)input.LT(1);
            if ( input.LA(1)==WORDS||(input.LA(1)>=SENTENCES && input.LA(1)<=PARAGRAPHS) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set412));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftUnit0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftUnit

    public static class ftDistance_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftDistance
    // etc/XQFT.g:552:9: ftDistance : DISTANCE ftRange ftUnit ;
    public final ftDistance_return ftDistance() throws RecognitionException {
        ftDistance_return retval = new ftDistance_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DISTANCE413=null;
        ftRange_return ftRange414 = null;

        ftUnit_return ftUnit415 = null;


        XQFTTree DISTANCE413_tree=null;

        try {
            // etc/XQFT.g:552:20: ( DISTANCE ftRange ftUnit )
            // etc/XQFT.g:552:22: DISTANCE ftRange ftUnit
            {
            root_0 = (XQFTTree)adaptor.nil();

            DISTANCE413=(Token)input.LT(1);
            match(input,DISTANCE,FOLLOW_DISTANCE_in_ftDistance4816); if (failed) return retval;
            if ( backtracking==0 ) {
            DISTANCE413_tree = (XQFTTree)adaptor.create(DISTANCE413);
            adaptor.addChild(root_0, DISTANCE413_tree);
            }
            pushFollow(FOLLOW_ftRange_in_ftDistance4818);
            ftRange414=ftRange();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRange414.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftDistance4820);
            ftUnit415=ftUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnit415.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftDistance

    public static class ftScope_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftScope
    // etc/XQFT.g:553:9: ftScope : ( SAME | DIFFERENT ) ftBigUnit ;
    public final ftScope_return ftScope() throws RecognitionException {
        ftScope_return retval = new ftScope_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set416=null;
        ftBigUnit_return ftBigUnit417 = null;


        XQFTTree set416_tree=null;

        try {
            // etc/XQFT.g:553:17: ( ( SAME | DIFFERENT ) ftBigUnit )
            // etc/XQFT.g:553:19: ( SAME | DIFFERENT ) ftBigUnit
            {
            root_0 = (XQFTTree)adaptor.nil();

            set416=(Token)input.LT(1);
            if ( (input.LA(1)>=SAME && input.LA(1)<=DIFFERENT) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set416));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftScope4835);    throw mse;
            }

            pushFollow(FOLLOW_ftBigUnit_in_ftScope4843);
            ftBigUnit417=ftBigUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftBigUnit417.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftScope

    public static class ftBigUnit_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftBigUnit
    // etc/XQFT.g:554:13: ftBigUnit : ( SENTENCE | PARAGRAPH );
    public final ftBigUnit_return ftBigUnit() throws RecognitionException {
        ftBigUnit_return retval = new ftBigUnit_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set418=null;

        XQFTTree set418_tree=null;

        try {
            // etc/XQFT.g:554:23: ( SENTENCE | PARAGRAPH )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set418=(Token)input.LT(1);
            if ( (input.LA(1)>=SENTENCE && input.LA(1)<=PARAGRAPH) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set418));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftBigUnit0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftBigUnit

    public static class ftContent_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftContent
    // etc/XQFT.g:555:9: ftContent : ( AT ( START | END ) | ENTIRE CONTENT );
    public final ftContent_return ftContent() throws RecognitionException {
        ftContent_return retval = new ftContent_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT419=null;
        Token set420=null;
        Token ENTIRE421=null;
        Token CONTENT422=null;

        XQFTTree AT419_tree=null;
        XQFTTree set420_tree=null;
        XQFTTree ENTIRE421_tree=null;
        XQFTTree CONTENT422_tree=null;

        try {
            // etc/XQFT.g:555:19: ( AT ( START | END ) | ENTIRE CONTENT )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==AT) ) {
                alt98=1;
            }
            else if ( (LA98_0==ENTIRE) ) {
                alt98=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("555:9: ftContent : ( AT ( START | END ) | ENTIRE CONTENT );", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // etc/XQFT.g:555:21: AT ( START | END )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    AT419=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftContent4885); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT419_tree = (XQFTTree)adaptor.create(AT419);
                    adaptor.addChild(root_0, AT419_tree);
                    }
                    set420=(Token)input.LT(1);
                    if ( (input.LA(1)>=START && input.LA(1)<=END) ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set420));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftContent4887);    throw mse;
                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:555:40: ENTIRE CONTENT
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    ENTIRE421=(Token)input.LT(1);
                    match(input,ENTIRE,FOLLOW_ENTIRE_in_ftContent4897); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ENTIRE421_tree = (XQFTTree)adaptor.create(ENTIRE421);
                    adaptor.addChild(root_0, ENTIRE421_tree);
                    }
                    CONTENT422=(Token)input.LT(1);
                    match(input,CONTENT,FOLLOW_CONTENT_in_ftContent4899); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CONTENT422_tree = (XQFTTree)adaptor.create(CONTENT422);
                    adaptor.addChild(root_0, CONTENT422_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftContent

    public static class ftMatchOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMatchOption
    // etc/XQFT.g:559:1: ftMatchOption : ( ftLanguageOption | ftCaseOption | ftDiacriticsOption | ftExtensionOption | WITH ( WILDCARDS | ftThesaurusOption | STEMMING | ftStopwordOption ) | WITHOUT ( WILDCARDS | THESAURUS | STEMMING | STOP WORDS ) );
    public final ftMatchOption_return ftMatchOption() throws RecognitionException {
        ftMatchOption_return retval = new ftMatchOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITH427=null;
        Token WILDCARDS428=null;
        Token STEMMING430=null;
        Token WITHOUT432=null;
        Token WILDCARDS433=null;
        Token THESAURUS434=null;
        Token STEMMING435=null;
        Token STOP436=null;
        Token WORDS437=null;
        ftLanguageOption_return ftLanguageOption423 = null;

        ftCaseOption_return ftCaseOption424 = null;

        ftDiacriticsOption_return ftDiacriticsOption425 = null;

        ftExtensionOption_return ftExtensionOption426 = null;

        ftThesaurusOption_return ftThesaurusOption429 = null;

        ftStopwordOption_return ftStopwordOption431 = null;


        XQFTTree WITH427_tree=null;
        XQFTTree WILDCARDS428_tree=null;
        XQFTTree STEMMING430_tree=null;
        XQFTTree WITHOUT432_tree=null;
        XQFTTree WILDCARDS433_tree=null;
        XQFTTree THESAURUS434_tree=null;
        XQFTTree STEMMING435_tree=null;
        XQFTTree STOP436_tree=null;
        XQFTTree WORDS437_tree=null;

        try {
            // etc/XQFT.g:559:15: ( ftLanguageOption | ftCaseOption | ftDiacriticsOption | ftExtensionOption | WITH ( WILDCARDS | ftThesaurusOption | STEMMING | ftStopwordOption ) | WITHOUT ( WILDCARDS | THESAURUS | STEMMING | STOP WORDS ) )
            int alt101=6;
            switch ( input.LA(1) ) {
            case LANGUAGE:
                {
                alt101=1;
                }
                break;
            case CASE:
            case LOWERCASE:
            case UPPERCASE:
                {
                alt101=2;
                }
                break;
            case DIACRITICS:
                {
                alt101=3;
                }
                break;
            case OPTION:
                {
                alt101=4;
                }
                break;
            case WITH:
                {
                alt101=5;
                }
                break;
            case WITHOUT:
                {
                alt101=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("559:1: ftMatchOption : ( ftLanguageOption | ftCaseOption | ftDiacriticsOption | ftExtensionOption | WITH ( WILDCARDS | ftThesaurusOption | STEMMING | ftStopwordOption ) | WITHOUT ( WILDCARDS | THESAURUS | STEMMING | STOP WORDS ) );", 101, 0, input);

                throw nvae;
            }

            switch (alt101) {
                case 1 :
                    // etc/XQFT.g:560:5: ftLanguageOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftLanguageOption_in_ftMatchOption4922);
                    ftLanguageOption423=ftLanguageOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftLanguageOption423.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:561:7: ftCaseOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftCaseOption_in_ftMatchOption4930);
                    ftCaseOption424=ftCaseOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftCaseOption424.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:562:7: ftDiacriticsOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftDiacriticsOption_in_ftMatchOption4938);
                    ftDiacriticsOption425=ftDiacriticsOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftDiacriticsOption425.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:563:7: ftExtensionOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionOption_in_ftMatchOption4946);
                    ftExtensionOption426=ftExtensionOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftExtensionOption426.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:564:7: WITH ( WILDCARDS | ftThesaurusOption | STEMMING | ftStopwordOption )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH427=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftMatchOption4954); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH427_tree = (XQFTTree)adaptor.create(WITH427);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITH427_tree, root_0);
                    }
                    // etc/XQFT.g:564:13: ( WILDCARDS | ftThesaurusOption | STEMMING | ftStopwordOption )
                    int alt99=4;
                    switch ( input.LA(1) ) {
                    case WILDCARDS:
                        {
                        alt99=1;
                        }
                        break;
                    case THESAURUS:
                        {
                        alt99=2;
                        }
                        break;
                    case STEMMING:
                        {
                        alt99=3;
                        }
                        break;
                    case DEFAULT:
                    case STOP:
                        {
                        alt99=4;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("564:13: ( WILDCARDS | ftThesaurusOption | STEMMING | ftStopwordOption )", 99, 0, input);

                        throw nvae;
                    }

                    switch (alt99) {
                        case 1 :
                            // etc/XQFT.g:564:14: WILDCARDS
                            {
                            WILDCARDS428=(Token)input.LT(1);
                            match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftMatchOption4958); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WILDCARDS428_tree = (XQFTTree)adaptor.create(WILDCARDS428);
                            adaptor.addChild(root_0, WILDCARDS428_tree);
                            }

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:565:14: ftThesaurusOption
                            {
                            pushFollow(FOLLOW_ftThesaurusOption_in_ftMatchOption4973);
                            ftThesaurusOption429=ftThesaurusOption();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusOption429.getTree());

                            }
                            break;
                        case 3 :
                            // etc/XQFT.g:566:14: STEMMING
                            {
                            STEMMING430=(Token)input.LT(1);
                            match(input,STEMMING,FOLLOW_STEMMING_in_ftMatchOption4988); if (failed) return retval;
                            if ( backtracking==0 ) {
                            STEMMING430_tree = (XQFTTree)adaptor.create(STEMMING430);
                            adaptor.addChild(root_0, STEMMING430_tree);
                            }

                            }
                            break;
                        case 4 :
                            // etc/XQFT.g:567:14: ftStopwordOption
                            {
                            pushFollow(FOLLOW_ftStopwordOption_in_ftMatchOption5003);
                            ftStopwordOption431=ftStopwordOption();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftStopwordOption431.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // etc/XQFT.g:569:7: WITHOUT ( WILDCARDS | THESAURUS | STEMMING | STOP WORDS )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITHOUT432=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftMatchOption5025); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT432_tree = (XQFTTree)adaptor.create(WITHOUT432);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITHOUT432_tree, root_0);
                    }
                    // etc/XQFT.g:569:17: ( WILDCARDS | THESAURUS | STEMMING | STOP WORDS )
                    int alt100=4;
                    switch ( input.LA(1) ) {
                    case WILDCARDS:
                        {
                        alt100=1;
                        }
                        break;
                    case THESAURUS:
                        {
                        alt100=2;
                        }
                        break;
                    case STEMMING:
                        {
                        alt100=3;
                        }
                        break;
                    case STOP:
                        {
                        alt100=4;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("569:17: ( WILDCARDS | THESAURUS | STEMMING | STOP WORDS )", 100, 0, input);

                        throw nvae;
                    }

                    switch (alt100) {
                        case 1 :
                            // etc/XQFT.g:569:18: WILDCARDS
                            {
                            WILDCARDS433=(Token)input.LT(1);
                            match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftMatchOption5030); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WILDCARDS433_tree = (XQFTTree)adaptor.create(WILDCARDS433);
                            adaptor.addChild(root_0, WILDCARDS433_tree);
                            }

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:570:18: THESAURUS
                            {
                            THESAURUS434=(Token)input.LT(1);
                            match(input,THESAURUS,FOLLOW_THESAURUS_in_ftMatchOption5049); if (failed) return retval;
                            if ( backtracking==0 ) {
                            THESAURUS434_tree = (XQFTTree)adaptor.create(THESAURUS434);
                            adaptor.addChild(root_0, THESAURUS434_tree);
                            }

                            }
                            break;
                        case 3 :
                            // etc/XQFT.g:571:18: STEMMING
                            {
                            STEMMING435=(Token)input.LT(1);
                            match(input,STEMMING,FOLLOW_STEMMING_in_ftMatchOption5068); if (failed) return retval;
                            if ( backtracking==0 ) {
                            STEMMING435_tree = (XQFTTree)adaptor.create(STEMMING435);
                            adaptor.addChild(root_0, STEMMING435_tree);
                            }

                            }
                            break;
                        case 4 :
                            // etc/XQFT.g:572:18: STOP WORDS
                            {
                            STOP436=(Token)input.LT(1);
                            match(input,STOP,FOLLOW_STOP_in_ftMatchOption5087); if (failed) return retval;
                            if ( backtracking==0 ) {
                            STOP436_tree = (XQFTTree)adaptor.create(STOP436);
                            adaptor.addChild(root_0, STOP436_tree);
                            }
                            WORDS437=(Token)input.LT(1);
                            match(input,WORDS,FOLLOW_WORDS_in_ftMatchOption5089); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WORDS437_tree = (XQFTTree)adaptor.create(WORDS437);
                            adaptor.addChild(root_0, WORDS437_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMatchOption

    public static class ftLanguageOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftLanguageOption
    // etc/XQFT.g:576:5: ftLanguageOption : LANGUAGE StringLiteral ;
    public final ftLanguageOption_return ftLanguageOption() throws RecognitionException {
        ftLanguageOption_return retval = new ftLanguageOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LANGUAGE438=null;
        Token StringLiteral439=null;

        XQFTTree LANGUAGE438_tree=null;
        XQFTTree StringLiteral439_tree=null;

        try {
            // etc/XQFT.g:576:22: ( LANGUAGE StringLiteral )
            // etc/XQFT.g:576:24: LANGUAGE StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            LANGUAGE438=(Token)input.LT(1);
            match(input,LANGUAGE,FOLLOW_LANGUAGE_in_ftLanguageOption5120); if (failed) return retval;
            if ( backtracking==0 ) {
            LANGUAGE438_tree = (XQFTTree)adaptor.create(LANGUAGE438);
            root_0 = (XQFTTree)adaptor.becomeRoot(LANGUAGE438_tree, root_0);
            }
            StringLiteral439=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_ftLanguageOption5123); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral439_tree = (XQFTTree)adaptor.create(StringLiteral439);
            adaptor.addChild(root_0, StringLiteral439_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftLanguageOption

    public static class ftCaseOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftCaseOption
    // etc/XQFT.g:578:5: ftCaseOption : ( CASE ( INSENSITIVE | SENSITIVE ) | LOWERCASE | UPPERCASE );
    public final ftCaseOption_return ftCaseOption() throws RecognitionException {
        ftCaseOption_return retval = new ftCaseOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CASE440=null;
        Token set441=null;
        Token LOWERCASE442=null;
        Token UPPERCASE443=null;

        XQFTTree CASE440_tree=null;
        XQFTTree set441_tree=null;
        XQFTTree LOWERCASE442_tree=null;
        XQFTTree UPPERCASE443_tree=null;

        try {
            // etc/XQFT.g:578:18: ( CASE ( INSENSITIVE | SENSITIVE ) | LOWERCASE | UPPERCASE )
            int alt102=3;
            switch ( input.LA(1) ) {
            case CASE:
                {
                alt102=1;
                }
                break;
            case LOWERCASE:
                {
                alt102=2;
                }
                break;
            case UPPERCASE:
                {
                alt102=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("578:5: ftCaseOption : ( CASE ( INSENSITIVE | SENSITIVE ) | LOWERCASE | UPPERCASE );", 102, 0, input);

                throw nvae;
            }

            switch (alt102) {
                case 1 :
                    // etc/XQFT.g:579:9: CASE ( INSENSITIVE | SENSITIVE )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    CASE440=(Token)input.LT(1);
                    match(input,CASE,FOLLOW_CASE_in_ftCaseOption5144); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASE440_tree = (XQFTTree)adaptor.create(CASE440);
                    root_0 = (XQFTTree)adaptor.becomeRoot(CASE440_tree, root_0);
                    }
                    set441=(Token)input.LT(1);
                    if ( (input.LA(1)>=INSENSITIVE && input.LA(1)<=SENSITIVE) ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set441));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftCaseOption5147);    throw mse;
                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:580:11: LOWERCASE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    LOWERCASE442=(Token)input.LT(1);
                    match(input,LOWERCASE,FOLLOW_LOWERCASE_in_ftCaseOption5165); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LOWERCASE442_tree = (XQFTTree)adaptor.create(LOWERCASE442);
                    root_0 = (XQFTTree)adaptor.becomeRoot(LOWERCASE442_tree, root_0);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:581:11: UPPERCASE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    UPPERCASE443=(Token)input.LT(1);
                    match(input,UPPERCASE,FOLLOW_UPPERCASE_in_ftCaseOption5178); if (failed) return retval;
                    if ( backtracking==0 ) {
                    UPPERCASE443_tree = (XQFTTree)adaptor.create(UPPERCASE443);
                    root_0 = (XQFTTree)adaptor.becomeRoot(UPPERCASE443_tree, root_0);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftCaseOption

    public static class ftDiacriticsOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftDiacriticsOption
    // etc/XQFT.g:584:5: ftDiacriticsOption : DIACRITICS ( INSENSITIVE | SENSITIVE ) ;
    public final ftDiacriticsOption_return ftDiacriticsOption() throws RecognitionException {
        ftDiacriticsOption_return retval = new ftDiacriticsOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DIACRITICS444=null;
        Token set445=null;

        XQFTTree DIACRITICS444_tree=null;
        XQFTTree set445_tree=null;

        try {
            // etc/XQFT.g:584:24: ( DIACRITICS ( INSENSITIVE | SENSITIVE ) )
            // etc/XQFT.g:584:26: DIACRITICS ( INSENSITIVE | SENSITIVE )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DIACRITICS444=(Token)input.LT(1);
            match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ftDiacriticsOption5204); if (failed) return retval;
            if ( backtracking==0 ) {
            DIACRITICS444_tree = (XQFTTree)adaptor.create(DIACRITICS444);
            root_0 = (XQFTTree)adaptor.becomeRoot(DIACRITICS444_tree, root_0);
            }
            set445=(Token)input.LT(1);
            if ( (input.LA(1)>=INSENSITIVE && input.LA(1)<=SENSITIVE) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set445));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftDiacriticsOption5207);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftDiacriticsOption

    public static class ftExtensionOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftExtensionOption
    // etc/XQFT.g:586:5: ftExtensionOption : OPTION qName StringLiteral ;
    public final ftExtensionOption_return ftExtensionOption() throws RecognitionException {
        ftExtensionOption_return retval = new ftExtensionOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OPTION446=null;
        Token StringLiteral448=null;
        qName_return qName447 = null;


        XQFTTree OPTION446_tree=null;
        XQFTTree StringLiteral448_tree=null;

        try {
            // etc/XQFT.g:586:23: ( OPTION qName StringLiteral )
            // etc/XQFT.g:586:25: OPTION qName StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            OPTION446=(Token)input.LT(1);
            match(input,OPTION,FOLLOW_OPTION_in_ftExtensionOption5225); if (failed) return retval;
            if ( backtracking==0 ) {
            OPTION446_tree = (XQFTTree)adaptor.create(OPTION446);
            root_0 = (XQFTTree)adaptor.becomeRoot(OPTION446_tree, root_0);
            }
            pushFollow(FOLLOW_qName_in_ftExtensionOption5228);
            qName447=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName447.getTree());
            StringLiteral448=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_ftExtensionOption5230); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral448_tree = (XQFTTree)adaptor.create(StringLiteral448);
            adaptor.addChild(root_0, StringLiteral448_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftExtensionOption

    public static class ftThesaurusOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftThesaurusOption
    // etc/XQFT.g:588:5: ftThesaurusOption : THESAURUS ( ( ftThesaurusID | DEFAULT ) | ( LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi ) ) ;
    public final ftThesaurusOption_return ftThesaurusOption() throws RecognitionException {
        ftThesaurusOption_return retval = new ftThesaurusOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token THESAURUS449=null;
        Token DEFAULT451=null;
        Token LPARSi452=null;
        Token DEFAULT454=null;
        Token COMMASi455=null;
        Token RPARSi457=null;
        ftThesaurusID_return ftThesaurusID450 = null;

        ftThesaurusID_return ftThesaurusID453 = null;

        ftThesaurusID_return ftThesaurusID456 = null;


        XQFTTree THESAURUS449_tree=null;
        XQFTTree DEFAULT451_tree=null;
        XQFTTree LPARSi452_tree=null;
        XQFTTree DEFAULT454_tree=null;
        XQFTTree COMMASi455_tree=null;
        XQFTTree RPARSi457_tree=null;

        try {
            // etc/XQFT.g:588:23: ( THESAURUS ( ( ftThesaurusID | DEFAULT ) | ( LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi ) ) )
            // etc/XQFT.g:589:9: THESAURUS ( ( ftThesaurusID | DEFAULT ) | ( LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi ) )
            {
            root_0 = (XQFTTree)adaptor.nil();

            THESAURUS449=(Token)input.LT(1);
            match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption5259); if (failed) return retval;
            if ( backtracking==0 ) {
            THESAURUS449_tree = (XQFTTree)adaptor.create(THESAURUS449);
            adaptor.addChild(root_0, THESAURUS449_tree);
            }
            // etc/XQFT.g:589:20: ( ( ftThesaurusID | DEFAULT ) | ( LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi ) )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==DEFAULT||LA106_0==AT) ) {
                alt106=1;
            }
            else if ( (LA106_0==LPARSi) ) {
                alt106=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("589:20: ( ( ftThesaurusID | DEFAULT ) | ( LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi ) )", 106, 0, input);

                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    // etc/XQFT.g:590:13: ( ftThesaurusID | DEFAULT )
                    {
                    // etc/XQFT.g:590:13: ( ftThesaurusID | DEFAULT )
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==AT) ) {
                        alt103=1;
                    }
                    else if ( (LA103_0==DEFAULT) ) {
                        alt103=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("590:13: ( ftThesaurusID | DEFAULT )", 103, 0, input);

                        throw nvae;
                    }
                    switch (alt103) {
                        case 1 :
                            // etc/XQFT.g:590:14: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption5277);
                            ftThesaurusID450=ftThesaurusID();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID450.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:590:30: DEFAULT
                            {
                            DEFAULT451=(Token)input.LT(1);
                            match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption5281); if (failed) return retval;
                            if ( backtracking==0 ) {
                            DEFAULT451_tree = (XQFTTree)adaptor.create(DEFAULT451);
                            adaptor.addChild(root_0, DEFAULT451_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:591:14: ( LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi )
                    {
                    // etc/XQFT.g:591:14: ( LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi )
                    // etc/XQFT.g:591:15: LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi
                    {
                    LPARSi452=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftThesaurusOption5298); if (failed) return retval;
                    // etc/XQFT.g:591:23: ( ftThesaurusID | DEFAULT )
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==AT) ) {
                        alt104=1;
                    }
                    else if ( (LA104_0==DEFAULT) ) {
                        alt104=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("591:23: ( ftThesaurusID | DEFAULT )", 104, 0, input);

                        throw nvae;
                    }
                    switch (alt104) {
                        case 1 :
                            // etc/XQFT.g:591:24: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption5302);
                            ftThesaurusID453=ftThesaurusID();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID453.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:591:40: DEFAULT
                            {
                            DEFAULT454=(Token)input.LT(1);
                            match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption5306); if (failed) return retval;
                            if ( backtracking==0 ) {
                            DEFAULT454_tree = (XQFTTree)adaptor.create(DEFAULT454);
                            adaptor.addChild(root_0, DEFAULT454_tree);
                            }

                            }
                            break;

                    }

                    // etc/XQFT.g:591:49: ( COMMASi ftThesaurusID )*
                    loop105:
                    do {
                        int alt105=2;
                        int LA105_0 = input.LA(1);

                        if ( (LA105_0==COMMASi) ) {
                            alt105=1;
                        }


                        switch (alt105) {
                    	case 1 :
                    	    // etc/XQFT.g:591:50: COMMASi ftThesaurusID
                    	    {
                    	    COMMASi455=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_ftThesaurusOption5310); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi455_tree = (XQFTTree)adaptor.create(COMMASi455);
                    	    adaptor.addChild(root_0, COMMASi455_tree);
                    	    }
                    	    pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption5312);
                    	    ftThesaurusID456=ftThesaurusID();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID456.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop105;
                        }
                    } while (true);

                    RPARSi457=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftThesaurusOption5316); if (failed) return retval;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftThesaurusOption

    public static class ftThesaurusID_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftThesaurusID
    // etc/XQFT.g:594:9: ftThesaurusID : AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )? ;
    public final ftThesaurusID_return ftThesaurusID() throws RecognitionException {
        ftThesaurusID_return retval = new ftThesaurusID_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT458=null;
        Token RELATIONSHIP460=null;
        Token StringLiteral461=null;
        Token LEVELS463=null;
        uriLiteral_return uriLiteral459 = null;

        ftRange_return ftRange462 = null;


        XQFTTree AT458_tree=null;
        XQFTTree RELATIONSHIP460_tree=null;
        XQFTTree StringLiteral461_tree=null;
        XQFTTree LEVELS463_tree=null;

        try {
            // etc/XQFT.g:594:23: ( AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )? )
            // etc/XQFT.g:594:25: AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            AT458=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_ftThesaurusID5348); if (failed) return retval;
            if ( backtracking==0 ) {
            AT458_tree = (XQFTTree)adaptor.create(AT458);
            adaptor.addChild(root_0, AT458_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_ftThesaurusID5350);
            uriLiteral459=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral459.getTree());
            // etc/XQFT.g:594:39: ( RELATIONSHIP StringLiteral )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==RELATIONSHIP) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // etc/XQFT.g:594:40: RELATIONSHIP StringLiteral
                    {
                    RELATIONSHIP460=(Token)input.LT(1);
                    match(input,RELATIONSHIP,FOLLOW_RELATIONSHIP_in_ftThesaurusID5353); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RELATIONSHIP460_tree = (XQFTTree)adaptor.create(RELATIONSHIP460);
                    adaptor.addChild(root_0, RELATIONSHIP460_tree);
                    }
                    StringLiteral461=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftThesaurusID5355); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral461_tree = (XQFTTree)adaptor.create(StringLiteral461);
                    adaptor.addChild(root_0, StringLiteral461_tree);
                    }

                    }
                    break;

            }

            // etc/XQFT.g:594:69: ( ftRange LEVELS )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==EXACTLY||LA108_0==FROM) ) {
                alt108=1;
            }
            else if ( (LA108_0==AT) ) {
                int LA108_2 = input.LA(2);

                if ( (LA108_2==LEAST||LA108_2==MOST) ) {
                    alt108=1;
                }
            }
            switch (alt108) {
                case 1 :
                    // etc/XQFT.g:594:70: ftRange LEVELS
                    {
                    pushFollow(FOLLOW_ftRange_in_ftThesaurusID5360);
                    ftRange462=ftRange();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftRange462.getTree());
                    LEVELS463=(Token)input.LT(1);
                    match(input,LEVELS,FOLLOW_LEVELS_in_ftThesaurusID5362); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LEVELS463_tree = (XQFTTree)adaptor.create(LEVELS463);
                    adaptor.addChild(root_0, LEVELS463_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftThesaurusID

    public static class ftStopwordOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftStopwordOption
    // etc/XQFT.g:596:5: ftStopwordOption : ( STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );
    public final ftStopwordOption_return ftStopwordOption() throws RecognitionException {
        ftStopwordOption_return retval = new ftStopwordOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STOP464=null;
        Token WORDS465=null;
        Token DEFAULT468=null;
        Token STOP469=null;
        Token WORDS470=null;
        ftRefOrList_return ftRefOrList466 = null;

        ftInclExclStringLiteral_return ftInclExclStringLiteral467 = null;

        ftInclExclStringLiteral_return ftInclExclStringLiteral471 = null;


        XQFTTree STOP464_tree=null;
        XQFTTree WORDS465_tree=null;
        XQFTTree DEFAULT468_tree=null;
        XQFTTree STOP469_tree=null;
        XQFTTree WORDS470_tree=null;

        try {
            // etc/XQFT.g:596:22: ( STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | DEFAULT STOP WORDS ( ftInclExclStringLiteral )* )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==STOP) ) {
                alt111=1;
            }
            else if ( (LA111_0==DEFAULT) ) {
                alt111=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("596:5: ftStopwordOption : ( STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // etc/XQFT.g:597:9: STOP WORDS ftRefOrList ( ftInclExclStringLiteral )*
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STOP464=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption5385); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP464_tree = (XQFTTree)adaptor.create(STOP464);
                    adaptor.addChild(root_0, STOP464_tree);
                    }
                    WORDS465=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption5387); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS465_tree = (XQFTTree)adaptor.create(WORDS465);
                    adaptor.addChild(root_0, WORDS465_tree);
                    }
                    pushFollow(FOLLOW_ftRefOrList_in_ftStopwordOption5389);
                    ftRefOrList466=ftRefOrList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftRefOrList466.getTree());
                    // etc/XQFT.g:597:32: ( ftInclExclStringLiteral )*
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==UNION||LA109_0==EXCEPT) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    // etc/XQFT.g:597:32: ftInclExclStringLiteral
                    	    {
                    	    pushFollow(FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption5391);
                    	    ftInclExclStringLiteral467=ftInclExclStringLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftInclExclStringLiteral467.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:598:11: DEFAULT STOP WORDS ( ftInclExclStringLiteral )*
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    DEFAULT468=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_ftStopwordOption5404); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEFAULT468_tree = (XQFTTree)adaptor.create(DEFAULT468);
                    adaptor.addChild(root_0, DEFAULT468_tree);
                    }
                    STOP469=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption5406); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP469_tree = (XQFTTree)adaptor.create(STOP469);
                    adaptor.addChild(root_0, STOP469_tree);
                    }
                    WORDS470=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption5408); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS470_tree = (XQFTTree)adaptor.create(WORDS470);
                    adaptor.addChild(root_0, WORDS470_tree);
                    }
                    // etc/XQFT.g:598:30: ( ftInclExclStringLiteral )*
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==UNION||LA110_0==EXCEPT) ) {
                            alt110=1;
                        }


                        switch (alt110) {
                    	case 1 :
                    	    // etc/XQFT.g:598:30: ftInclExclStringLiteral
                    	    {
                    	    pushFollow(FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption5410);
                    	    ftInclExclStringLiteral471=ftInclExclStringLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftInclExclStringLiteral471.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop110;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftStopwordOption

    public static class ftRefOrList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftRefOrList
    // etc/XQFT.g:600:9: ftRefOrList : ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi );
    public final ftRefOrList_return ftRefOrList() throws RecognitionException {
        ftRefOrList_return retval = new ftRefOrList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT472=null;
        Token LPARSi474=null;
        Token StringLiteral475=null;
        Token COMMASi476=null;
        Token StringLiteral477=null;
        Token RPARSi478=null;
        uriLiteral_return uriLiteral473 = null;


        XQFTTree AT472_tree=null;
        XQFTTree LPARSi474_tree=null;
        XQFTTree StringLiteral475_tree=null;
        XQFTTree COMMASi476_tree=null;
        XQFTTree StringLiteral477_tree=null;
        XQFTTree RPARSi478_tree=null;

        try {
            // etc/XQFT.g:600:21: ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==AT) ) {
                alt113=1;
            }
            else if ( (LA113_0==LPARSi) ) {
                alt113=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("600:9: ftRefOrList : ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi );", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // etc/XQFT.g:601:13: ( AT uriLiteral )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:601:13: ( AT uriLiteral )
                    // etc/XQFT.g:601:14: AT uriLiteral
                    {
                    AT472=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRefOrList5445); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT472_tree = (XQFTTree)adaptor.create(AT472);
                    adaptor.addChild(root_0, AT472_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_ftRefOrList5447);
                    uriLiteral473=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral473.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:602:15: LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    LPARSi474=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftRefOrList5464); if (failed) return retval;
                    StringLiteral475=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftRefOrList5467); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral475_tree = (XQFTTree)adaptor.create(StringLiteral475);
                    adaptor.addChild(root_0, StringLiteral475_tree);
                    }
                    // etc/XQFT.g:602:37: ( COMMASi StringLiteral )*
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==COMMASi) ) {
                            alt112=1;
                        }


                        switch (alt112) {
                    	case 1 :
                    	    // etc/XQFT.g:602:38: COMMASi StringLiteral
                    	    {
                    	    COMMASi476=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_ftRefOrList5470); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi476_tree = (XQFTTree)adaptor.create(COMMASi476);
                    	    adaptor.addChild(root_0, COMMASi476_tree);
                    	    }
                    	    StringLiteral477=(Token)input.LT(1);
                    	    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftRefOrList5472); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    StringLiteral477_tree = (XQFTTree)adaptor.create(StringLiteral477);
                    	    adaptor.addChild(root_0, StringLiteral477_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop112;
                        }
                    } while (true);

                    RPARSi478=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftRefOrList5476); if (failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftRefOrList

    public static class ftInclExclStringLiteral_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftInclExclStringLiteral
    // etc/XQFT.g:604:9: ftInclExclStringLiteral : ( UNION | EXCEPT ) ftRefOrList ;
    public final ftInclExclStringLiteral_return ftInclExclStringLiteral() throws RecognitionException {
        ftInclExclStringLiteral_return retval = new ftInclExclStringLiteral_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set479=null;
        ftRefOrList_return ftRefOrList480 = null;


        XQFTTree set479_tree=null;

        try {
            // etc/XQFT.g:604:33: ( ( UNION | EXCEPT ) ftRefOrList )
            // etc/XQFT.g:604:35: ( UNION | EXCEPT ) ftRefOrList
            {
            root_0 = (XQFTTree)adaptor.nil();

            set479=(Token)input.LT(1);
            if ( input.LA(1)==UNION||input.LA(1)==EXCEPT ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set479));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftInclExclStringLiteral5501);    throw mse;
            }

            pushFollow(FOLLOW_ftRefOrList_in_ftInclExclStringLiteral5509);
            ftRefOrList480=ftRefOrList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRefOrList480.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftInclExclStringLiteral

    public static class valueExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start valueExpr
    // etc/XQFT.g:608:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );
    public final valueExpr_return valueExpr() throws RecognitionException {
        valueExpr_return retval = new valueExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        validateExpr_return validateExpr481 = null;

        pathExpr_return pathExpr482 = null;

        extensionExpr_return extensionExpr483 = null;



        try {
            // etc/XQFT.g:608:11: ( validateExpr | pathExpr | extensionExpr )
            int alt114=3;
            switch ( input.LA(1) ) {
            case VALIDATE:
                {
                int LA114_1 = input.LA(2);

                if ( (LA114_1==EOF||LA114_1==SEMICOLONSi||(LA114_1>=EQSi && LA114_1<=COMMASi)||LA114_1==DEFAULT||(LA114_1>=COLLATION && LA114_1<=EMPTY)||(LA114_1>=LPARSi && LA114_1<=RPARSi)||LA114_1==RBRACSi||LA114_1==STARSi||(LA114_1>=PLUSSi && LA114_1<=FOR)||(LA114_1>=LET && LA114_1<=WHERE)||(LA114_1>=STABLE && LA114_1<=DESCENDING)||LA114_1==SATISFIES||LA114_1==CASE||(LA114_1>=ELSE && LA114_1<=INSTANCE)||(LA114_1>=TREAT && LA114_1<=WITHOUT)||(LA114_1>=EQ && LA114_1<=NODEAFTERSi)||LA114_1==WORDS||LA114_1==TIMES||(LA114_1>=SENTENCES && LA114_1<=PARAGRAPHS)||LA114_1==LEVELS||(LA114_1>=SLASHSi && LA114_1<=DBLSLASHSi)||LA114_1==COLONSi||(LA114_1>=LBRACKSi && LA114_1<=RBRACKSi)) ) {
                    alt114=2;
                }
                else if ( (LA114_1==LBRACESi||(LA114_1>=LAX && LA114_1<=STRICT)) ) {
                    alt114=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("608:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );", 114, 1, input);

                    throw nvae;
                }
                }
                break;
            case XQUERY:
            case VERSION:
            case StringLiteral:
            case ENCODING:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case DEFAULT:
            case ELEMENT:
            case FUNCTION:
            case COLLATION:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case BOUNDARYSPACE:
            case PRESERVE:
            case STRIP:
            case BASE_URI:
            case CONSTRUCTION:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case COPY_NAMESPACES:
            case NOPRESERVE:
            case INHERIT:
            case NOINHERIT:
            case IMPORT:
            case SCHEMA:
            case AT:
            case VARIABLE:
            case DOLLARSi:
            case EXTERNAL:
            case QName:
            case AS:
            case LPARSi:
            case OPTION:
            case FTOPTION:
            case EMPTY_SEQUENCE:
            case ITEM:
            case DOCUMENT_NODE:
            case STARSi:
            case SCHEMA_ELEMENT:
            case ATTRIBUTE:
            case SCHEMA_ATTRIBUTE:
            case PROCESSING_INSTRUCTION:
            case COMMENT:
            case TEXT:
            case NODE:
            case RETURN:
            case FOR:
            case IN:
            case SCORE:
            case LET:
            case WHERE:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case SOME:
            case EVERY:
            case SATISFIES:
            case TYPESWITCH:
            case CASE:
            case IF:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case FTCONTAINS:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case WITHOUT:
            case CONTENT:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case LTSi:
            case IS:
            case WEIGHT:
            case FTOR:
            case FTAND:
            case NOT:
            case FTNOT:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case WINDOW:
            case SENTENCES:
            case PARAGRAPHS:
            case DISTANCE:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case START:
            case END:
            case ENTIRE:
            case WITH:
            case WILDCARDS:
            case STEMMING:
            case THESAURUS:
            case STOP:
            case LANGUAGE:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case RELATIONSHIP:
            case LEVELS:
            case LAX:
            case STRICT:
            case SLASHSi:
            case DBLSLASHSi:
            case DOTSi:
            case PARENT:
            case ANCESTOR:
            case PRECEDING_SIBLING:
            case PRECEDING:
            case ANCESTOR_OR_SELF:
            case DOTDOTSi:
            case CHILD:
            case DESCENDANT:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case ATSi:
            case LCOMMENTSi:
            case LPISi:
            case DOCUMENT:
            case NCName:
                {
                alt114=2;
                }
                break;
            case LPRAGSi:
                {
                alt114=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("608:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // etc/XQFT.g:608:13: validateExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_validateExpr_in_valueExpr5531);
                    validateExpr481=validateExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, validateExpr481.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:608:28: pathExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_pathExpr_in_valueExpr5535);
                    pathExpr482=pathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, pathExpr482.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:608:39: extensionExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_extensionExpr_in_valueExpr5539);
                    extensionExpr483=extensionExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, extensionExpr483.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end valueExpr

    public static class validateExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start validateExpr
    // etc/XQFT.g:609:5: validateExpr : VALIDATE ( validationMode )? LBRACESi expr RBRACSi ;
    public final validateExpr_return validateExpr() throws RecognitionException {
        validateExpr_return retval = new validateExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token VALIDATE484=null;
        Token LBRACESi486=null;
        Token RBRACSi488=null;
        validationMode_return validationMode485 = null;

        expr_return expr487 = null;


        XQFTTree VALIDATE484_tree=null;
        XQFTTree LBRACESi486_tree=null;
        XQFTTree RBRACSi488_tree=null;

        try {
            // etc/XQFT.g:609:18: ( VALIDATE ( validationMode )? LBRACESi expr RBRACSi )
            // etc/XQFT.g:609:20: VALIDATE ( validationMode )? LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            VALIDATE484=(Token)input.LT(1);
            match(input,VALIDATE,FOLLOW_VALIDATE_in_validateExpr5550); if (failed) return retval;
            if ( backtracking==0 ) {
            VALIDATE484_tree = (XQFTTree)adaptor.create(VALIDATE484);
            adaptor.addChild(root_0, VALIDATE484_tree);
            }
            // etc/XQFT.g:609:29: ( validationMode )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=LAX && LA115_0<=STRICT)) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // etc/XQFT.g:609:29: validationMode
                    {
                    pushFollow(FOLLOW_validationMode_in_validateExpr5552);
                    validationMode485=validationMode();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, validationMode485.getTree());

                    }
                    break;

            }

            LBRACESi486=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_validateExpr5555); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_validateExpr5558);
            expr487=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr487.getTree());
            RBRACSi488=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_validateExpr5560); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end validateExpr

    public static class validationMode_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start validationMode
    // etc/XQFT.g:610:9: validationMode : ( LAX | STRICT );
    public final validationMode_return validationMode() throws RecognitionException {
        validationMode_return retval = new validationMode_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set489=null;

        XQFTTree set489_tree=null;

        try {
            // etc/XQFT.g:610:24: ( LAX | STRICT )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set489=(Token)input.LT(1);
            if ( (input.LA(1)>=LAX && input.LA(1)<=STRICT) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set489));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_validationMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end validationMode

    public static class pathExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pathExpr
    // etc/XQFT.g:612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );
    public final pathExpr_return pathExpr() throws RecognitionException {
        pathExpr_return retval = new pathExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token s=null;
        Token d=null;
        relativePathExpr_return relativePathExpr490 = null;

        relativePathExpr_return relativePathExpr491 = null;

        relativePathExpr_return relativePathExpr492 = null;


        XQFTTree s_tree=null;
        XQFTTree d_tree=null;
        RewriteRuleTokenStream stream_DBLSLASHSi=new RewriteRuleTokenStream(adaptor,"token DBLSLASHSi");
        RewriteRuleTokenStream stream_SLASHSi=new RewriteRuleTokenStream(adaptor,"token SLASHSi");
        RewriteRuleSubtreeStream stream_relativePathExpr=new RewriteRuleSubtreeStream(adaptor,"rule relativePathExpr");
        try {
            // etc/XQFT.g:612:14: ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) )
            int alt116=4;
            switch ( input.LA(1) ) {
            case SLASHSi:
                {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==ANCESTOR) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DOTDOTSi) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ATTRIBUTE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ATSi) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DOCUMENT_NODE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ELEMENT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==CHILD) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==SCHEMA_ELEMENT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==SCHEMA_ATTRIBUTE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==PROCESSING_INSTRUCTION) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==COMMENT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==TEXT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==NODE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==STARSi) ) {
                    int LA116_169 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 169, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==NCName) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ALL) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ANY) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ANCESTOR_OR_SELF) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==PARENT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==AND) ) {
                    int LA116_175 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 175, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==AS) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ASCENDING) ) {
                    int LA116_177 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 177, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==AT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==BASE_URI) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==BY) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==BOUNDARYSPACE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==CASE) ) {
                    int LA116_182 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 182, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==CAST) ) {
                    int LA116_183 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 183, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==CASTABLE) ) {
                    int LA116_184 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 184, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==DESCENDANT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==COLLATION) ) {
                    int LA116_186 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 186, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==CONSTRUCTION) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==CONTENT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==COPY_NAMESPACES) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DECLARE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DEFAULT) ) {
                    int LA116_191 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 191, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==DESCENDANT_OR_SELF) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==FOLLOWING) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DESCENDING) ) {
                    int LA116_194 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 194, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==DIACRITICS) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DIFFERENT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DISTANCE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DIV) ) {
                    int LA116_198 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 198, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==DOCUMENT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ELSE) ) {
                    int LA116_200 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 200, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==ENCODING) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==END) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ENTIRE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==EMPTY) ) {
                    int LA116_204 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 204, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==EMPTY_SEQUENCE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==EQ) ) {
                    int LA116_206 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 206, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==EVERY) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==EXACTLY) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==EXCEPT) ) {
                    int LA116_209 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 209, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==EXTERNAL) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==FOLLOWING_SIBLING) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==SELF) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==FOR) ) {
                    int LA116_213 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 213, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==FROM) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==FTAND) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==FTCONTAINS) ) {
                    int LA116_216 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 216, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==FTNOT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==FTOPTION) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==FTOR) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==FUNCTION) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==GE) ) {
                    int LA116_221 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 221, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==GREATEST) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==GT) ) {
                    int LA116_223 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 223, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==IDIV) ) {
                    int LA116_224 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 224, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==IF) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==IMPORT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==IN) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==INHERIT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==INSENSITIVE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==INSTANCE) ) {
                    int LA116_230 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 230, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==INTERSECT) ) {
                    int LA116_231 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 231, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==IS) ) {
                    int LA116_232 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 232, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==ITEM) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==LANGUAGE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==LAX) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==LE) ) {
                    int LA116_236 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 236, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==LEAST) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==LET) ) {
                    int LA116_238 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 238, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==LEVELS) ) {
                    int LA116_239 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 239, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==LOWERCASE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==LT) ) {
                    int LA116_241 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 241, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==MOD) ) {
                    int LA116_242 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 242, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==MODULE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==MOST) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==NAMESPACE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==NE) ) {
                    int LA116_246 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 246, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==NOINHERIT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==NOPRESERVE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==NOT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==OCCURS) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==OF) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==OPTION) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==OR) ) {
                    int LA116_253 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 253, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==ORDER) ) {
                    int LA116_254 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 254, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==ORDERED) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==ORDERING) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==PARAGRAPH) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==PARAGRAPHS) ) {
                    int LA116_258 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 258, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==PRECEDING) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==PHRASE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==PRECEDING_SIBLING) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==PRESERVE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==RELATIONSHIP) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==RETURN) ) {
                    int LA116_264 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 264, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==SAME) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==SATISFIES) ) {
                    int LA116_266 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 266, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==SCHEMA) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==SCORE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==SENSITIVE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==SENTENCES) ) {
                    int LA116_270 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 270, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==SENTENCE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==SOME) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==STABLE) ) {
                    int LA116_273 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 273, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==START) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==STEMMING) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==STOP) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==STRICT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==STRIP) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==THESAURUS) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==THEN) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==TIMES) ) {
                    int LA116_281 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 281, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==TO) ) {
                    int LA116_282 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 282, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==TREAT) ) {
                    int LA116_283 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 283, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==TYPESWITCH) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==UNION) ) {
                    int LA116_285 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 285, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==UNORDERED) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==UPPERCASE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==VALIDATE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==VARIABLE) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==VERSION) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==WEIGHT) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==WHERE) ) {
                    int LA116_292 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 292, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==WILDCARDS) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==WINDOW) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==WITH) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==WITHOUT) ) {
                    int LA116_296 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 296, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==WORD) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==WORDS) ) {
                    int LA116_298 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 298, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==XQUERY) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==QName) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DOTSi) && (synpred6())) {
                    alt116=1;
                }
                else if ( ((LA116_1>=IntegerLiteral && LA116_1<=DoubleLiteral)) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==StringLiteral) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==DOLLARSi) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==LPARSi) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==LTSi) ) {
                    int LA116_306 = input.LA(3);

                    if ( (synpred6()) ) {
                        alt116=1;
                    }
                    else if ( (true) ) {
                        alt116=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 306, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_1==LCOMMENTSi) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==LPISi) && (synpred6())) {
                    alt116=1;
                }
                else if ( (LA116_1==EOF||LA116_1==SEMICOLONSi||(LA116_1>=EQSi && LA116_1<=COMMASi)||LA116_1==RPARSi||LA116_1==RBRACSi||LA116_1==PLUSSi||LA116_1==MINUSSi||LA116_1==PIPESi||LA116_1==NEQSi||(LA116_1>=LTOREQSi && LA116_1<=GTOREQSi)||(LA116_1>=NODEBEFORESi && LA116_1<=NODEAFTERSi)||LA116_1==RBRACKSi) ) {
                    alt116=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 1, input);

                    throw nvae;
                }
                }
                break;
            case DBLSLASHSi:
                {
                alt116=3;
                }
                break;
            case XQUERY:
            case VERSION:
            case StringLiteral:
            case ENCODING:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case DEFAULT:
            case ELEMENT:
            case FUNCTION:
            case COLLATION:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case BOUNDARYSPACE:
            case PRESERVE:
            case STRIP:
            case BASE_URI:
            case CONSTRUCTION:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case COPY_NAMESPACES:
            case NOPRESERVE:
            case INHERIT:
            case NOINHERIT:
            case IMPORT:
            case SCHEMA:
            case AT:
            case VARIABLE:
            case DOLLARSi:
            case EXTERNAL:
            case QName:
            case AS:
            case LPARSi:
            case OPTION:
            case FTOPTION:
            case EMPTY_SEQUENCE:
            case ITEM:
            case DOCUMENT_NODE:
            case STARSi:
            case SCHEMA_ELEMENT:
            case ATTRIBUTE:
            case SCHEMA_ATTRIBUTE:
            case PROCESSING_INSTRUCTION:
            case COMMENT:
            case TEXT:
            case NODE:
            case RETURN:
            case FOR:
            case IN:
            case SCORE:
            case LET:
            case WHERE:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case SOME:
            case EVERY:
            case SATISFIES:
            case TYPESWITCH:
            case CASE:
            case IF:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case FTCONTAINS:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case WITHOUT:
            case CONTENT:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case LTSi:
            case IS:
            case WEIGHT:
            case FTOR:
            case FTAND:
            case NOT:
            case FTNOT:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case WINDOW:
            case SENTENCES:
            case PARAGRAPHS:
            case DISTANCE:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case START:
            case END:
            case ENTIRE:
            case WITH:
            case WILDCARDS:
            case STEMMING:
            case THESAURUS:
            case STOP:
            case LANGUAGE:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case RELATIONSHIP:
            case LEVELS:
            case VALIDATE:
            case LAX:
            case STRICT:
            case DOTSi:
            case PARENT:
            case ANCESTOR:
            case PRECEDING_SIBLING:
            case PRECEDING:
            case ANCESTOR_OR_SELF:
            case DOTDOTSi:
            case CHILD:
            case DESCENDANT:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case ATSi:
            case LCOMMENTSi:
            case LPISi:
            case DOCUMENT:
            case NCName:
                {
                alt116=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("612:5: pathExpr : ( ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr -> ^( AST_PATHEXPR_SGL relativePathExpr ) | s= SLASHSi -> AST_PATHEXPR_SGL | d= DBLSLASHSi relativePathExpr -> ^( AST_PATHEXPR_DBL relativePathExpr ) | relativePathExpr -> ^( AST_RELATIVEPATHEXPR relativePathExpr ) );", 116, 0, input);

                throw nvae;
            }

            switch (alt116) {
                case 1 :
                    // etc/XQFT.g:613:10: ( SLASHSi relativePathExpr )=>s= SLASHSi relativePathExpr
                    {
                    s=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr5622); if (failed) return retval;
                    if ( backtracking==0 ) stream_SLASHSi.add(s);

                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr5624);
                    relativePathExpr490=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_relativePathExpr.add(relativePathExpr490.getTree());

                    // AST REWRITE
                    // elements: relativePathExpr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 613:66: -> ^( AST_PATHEXPR_SGL relativePathExpr )
                    {
                        // etc/XQFT.g:613:69: ^( AST_PATHEXPR_SGL relativePathExpr )
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_PATHEXPR_SGL, "AST_PATHEXPR_SGL"), root_1);

                        adaptor.addChild(root_1, stream_relativePathExpr.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:614:11: s= SLASHSi
                    {
                    s=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr5646); if (failed) return retval;
                    if ( backtracking==0 ) stream_SLASHSi.add(s);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 614:21: -> AST_PATHEXPR_SGL
                    {
                        adaptor.addChild(root_0, adaptor.create(AST_PATHEXPR_SGL, "AST_PATHEXPR_SGL"));

                    }

                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:615:11: d= DBLSLASHSi relativePathExpr
                    {
                    d=(Token)input.LT(1);
                    match(input,DBLSLASHSi,FOLLOW_DBLSLASHSi_in_pathExpr5664); if (failed) return retval;
                    if ( backtracking==0 ) stream_DBLSLASHSi.add(d);

                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr5666);
                    relativePathExpr491=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_relativePathExpr.add(relativePathExpr491.getTree());

                    // AST REWRITE
                    // elements: relativePathExpr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 615:41: -> ^( AST_PATHEXPR_DBL relativePathExpr )
                    {
                        // etc/XQFT.g:615:44: ^( AST_PATHEXPR_DBL relativePathExpr )
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_PATHEXPR_DBL, "AST_PATHEXPR_DBL"), root_1);

                        adaptor.addChild(root_1, stream_relativePathExpr.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:616:11: relativePathExpr
                    {
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr5687);
                    relativePathExpr492=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_relativePathExpr.add(relativePathExpr492.getTree());

                    // AST REWRITE
                    // elements: relativePathExpr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 616:28: -> ^( AST_RELATIVEPATHEXPR relativePathExpr )
                    {
                        // etc/XQFT.g:616:31: ^( AST_RELATIVEPATHEXPR relativePathExpr )
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_RELATIVEPATHEXPR, "AST_RELATIVEPATHEXPR"), root_1);

                        adaptor.addChild(root_1, stream_relativePathExpr.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end pathExpr

    public static class relativePathExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start relativePathExpr
    // etc/XQFT.g:626:9: relativePathExpr : stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )* ;
    public final relativePathExpr_return relativePathExpr() throws RecognitionException {
        relativePathExpr_return retval = new relativePathExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SLASHSi494=null;
        Token DBLSLASHSi495=null;
        stepExpr_return stepExpr493 = null;

        stepExpr_return stepExpr496 = null;


        XQFTTree SLASHSi494_tree=null;
        XQFTTree DBLSLASHSi495_tree=null;

        try {
            // etc/XQFT.g:626:26: ( stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )* )
            // etc/XQFT.g:626:28: stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_stepExpr_in_relativePathExpr5735);
            stepExpr493=stepExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, stepExpr493.getTree());
            // etc/XQFT.g:626:37: ( ( SLASHSi | DBLSLASHSi ) stepExpr )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( ((LA118_0>=SLASHSi && LA118_0<=DBLSLASHSi)) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // etc/XQFT.g:626:38: ( SLASHSi | DBLSLASHSi ) stepExpr
            	    {
            	    // etc/XQFT.g:626:38: ( SLASHSi | DBLSLASHSi )
            	    int alt117=2;
            	    int LA117_0 = input.LA(1);

            	    if ( (LA117_0==SLASHSi) ) {
            	        alt117=1;
            	    }
            	    else if ( (LA117_0==DBLSLASHSi) ) {
            	        alt117=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("626:38: ( SLASHSi | DBLSLASHSi )", 117, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt117) {
            	        case 1 :
            	            // etc/XQFT.g:626:39: SLASHSi
            	            {
            	            SLASHSi494=(Token)input.LT(1);
            	            match(input,SLASHSi,FOLLOW_SLASHSi_in_relativePathExpr5739); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            SLASHSi494_tree = (XQFTTree)adaptor.create(SLASHSi494);
            	            root_0 = (XQFTTree)adaptor.becomeRoot(SLASHSi494_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // etc/XQFT.g:626:50: DBLSLASHSi
            	            {
            	            DBLSLASHSi495=(Token)input.LT(1);
            	            match(input,DBLSLASHSi,FOLLOW_DBLSLASHSi_in_relativePathExpr5744); if (failed) return retval;
            	            if ( backtracking==0 ) {
            	            DBLSLASHSi495_tree = (XQFTTree)adaptor.create(DBLSLASHSi495);
            	            root_0 = (XQFTTree)adaptor.becomeRoot(DBLSLASHSi495_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_stepExpr_in_relativePathExpr5748);
            	    stepExpr496=stepExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, stepExpr496.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end relativePathExpr

    public static class stepExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start stepExpr
    // etc/XQFT.g:628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );
    public final stepExpr_return stepExpr() throws RecognitionException {
        stepExpr_return retval = new stepExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        axisStep_return axisStep497 = null;

        axisStep_return axisStep498 = null;

        filterExpr_return filterExpr499 = null;


        RewriteRuleSubtreeStream stream_axisStep=new RewriteRuleSubtreeStream(adaptor,"rule axisStep");
        try {
            // etc/XQFT.g:628:22: ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr )
            int alt119=3;
            switch ( input.LA(1) ) {
            case ANCESTOR:
                {
                int LA119_1 = input.LA(2);

                if ( (LA119_1==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOTDOTSi:
                {
                int LA119_2 = input.LA(2);

                if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 2, input);

                    throw nvae;
                }
                }
                break;
            case ATTRIBUTE:
                {
                int LA119_3 = input.LA(2);

                if ( ((LA119_3>=XQUERY && LA119_3<=VERSION)||LA119_3==ENCODING||(LA119_3>=MODULE && LA119_3<=NAMESPACE)||(LA119_3>=DECLARE && LA119_3<=VARIABLE)||(LA119_3>=EXTERNAL && LA119_3<=LPARSi)||LA119_3==LBRACESi||(LA119_3>=OPTION && LA119_3<=DOCUMENT_NODE)||(LA119_3>=SCHEMA_ELEMENT && LA119_3<=NODE)||(LA119_3>=RETURN && LA119_3<=TO)||(LA119_3>=DIV && LA119_3<=UNION)||(LA119_3>=INTERSECT && LA119_3<=GE)||LA119_3==IS||(LA119_3>=WEIGHT && LA119_3<=FTNOT)||(LA119_3>=ANY && LA119_3<=FROM)||(LA119_3>=WINDOW && LA119_3<=STRICT)||(LA119_3>=PARENT && LA119_3<=ANCESTOR_OR_SELF)||(LA119_3>=CHILD && LA119_3<=FOLLOWING)||(LA119_3>=DOCUMENT && LA119_3<=NCName)) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 3, input);

                    throw nvae;
                }
                }
                break;
            case ATSi:
                {
                switch ( input.LA(2) ) {
                case DOCUMENT_NODE:
                    {
                    int LA119_405 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 405, input);

                        throw nvae;
                    }
                    }
                    break;
                case ELEMENT:
                    {
                    int LA119_406 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 406, input);

                        throw nvae;
                    }
                    }
                    break;
                case ATTRIBUTE:
                    {
                    int LA119_407 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 407, input);

                        throw nvae;
                    }
                    }
                    break;
                case SCHEMA_ELEMENT:
                    {
                    int LA119_408 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 408, input);

                        throw nvae;
                    }
                    }
                    break;
                case SCHEMA_ATTRIBUTE:
                    {
                    int LA119_409 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 409, input);

                        throw nvae;
                    }
                    }
                    break;
                case PROCESSING_INSTRUCTION:
                    {
                    int LA119_410 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 410, input);

                        throw nvae;
                    }
                    }
                    break;
                case COMMENT:
                    {
                    int LA119_411 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 411, input);

                        throw nvae;
                    }
                    }
                    break;
                case TEXT:
                    {
                    int LA119_412 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 412, input);

                        throw nvae;
                    }
                    }
                    break;
                case NODE:
                    {
                    int LA119_413 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 413, input);

                        throw nvae;
                    }
                    }
                    break;
                case STARSi:
                    {
                    int LA119_414 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 414, input);

                        throw nvae;
                    }
                    }
                    break;
                case NCName:
                    {
                    int LA119_415 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 415, input);

                        throw nvae;
                    }
                    }
                    break;
                case ALL:
                    {
                    int LA119_416 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 416, input);

                        throw nvae;
                    }
                    }
                    break;
                case ANY:
                    {
                    int LA119_417 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 417, input);

                        throw nvae;
                    }
                    }
                    break;
                case ANCESTOR:
                    {
                    int LA119_418 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 418, input);

                        throw nvae;
                    }
                    }
                    break;
                case ANCESTOR_OR_SELF:
                    {
                    int LA119_419 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 419, input);

                        throw nvae;
                    }
                    }
                    break;
                case AND:
                    {
                    int LA119_420 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 420, input);

                        throw nvae;
                    }
                    }
                    break;
                case AS:
                    {
                    int LA119_421 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 421, input);

                        throw nvae;
                    }
                    }
                    break;
                case ASCENDING:
                    {
                    int LA119_422 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 422, input);

                        throw nvae;
                    }
                    }
                    break;
                case AT:
                    {
                    int LA119_423 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 423, input);

                        throw nvae;
                    }
                    }
                    break;
                case BASE_URI:
                    {
                    int LA119_424 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 424, input);

                        throw nvae;
                    }
                    }
                    break;
                case BY:
                    {
                    int LA119_425 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 425, input);

                        throw nvae;
                    }
                    }
                    break;
                case BOUNDARYSPACE:
                    {
                    int LA119_426 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 426, input);

                        throw nvae;
                    }
                    }
                    break;
                case CASE:
                    {
                    int LA119_427 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 427, input);

                        throw nvae;
                    }
                    }
                    break;
                case CAST:
                    {
                    int LA119_428 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 428, input);

                        throw nvae;
                    }
                    }
                    break;
                case CASTABLE:
                    {
                    int LA119_429 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 429, input);

                        throw nvae;
                    }
                    }
                    break;
                case CHILD:
                    {
                    int LA119_430 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 430, input);

                        throw nvae;
                    }
                    }
                    break;
                case COLLATION:
                    {
                    int LA119_431 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 431, input);

                        throw nvae;
                    }
                    }
                    break;
                case CONSTRUCTION:
                    {
                    int LA119_432 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 432, input);

                        throw nvae;
                    }
                    }
                    break;
                case CONTENT:
                    {
                    int LA119_433 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 433, input);

                        throw nvae;
                    }
                    }
                    break;
                case COPY_NAMESPACES:
                    {
                    int LA119_434 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 434, input);

                        throw nvae;
                    }
                    }
                    break;
                case DECLARE:
                    {
                    int LA119_435 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 435, input);

                        throw nvae;
                    }
                    }
                    break;
                case DEFAULT:
                    {
                    int LA119_436 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 436, input);

                        throw nvae;
                    }
                    }
                    break;
                case DESCENDANT:
                    {
                    int LA119_437 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 437, input);

                        throw nvae;
                    }
                    }
                    break;
                case DESCENDANT_OR_SELF:
                    {
                    int LA119_438 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 438, input);

                        throw nvae;
                    }
                    }
                    break;
                case DESCENDING:
                    {
                    int LA119_439 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 439, input);

                        throw nvae;
                    }
                    }
                    break;
                case DIACRITICS:
                    {
                    int LA119_440 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 440, input);

                        throw nvae;
                    }
                    }
                    break;
                case DIFFERENT:
                    {
                    int LA119_441 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 441, input);

                        throw nvae;
                    }
                    }
                    break;
                case DISTANCE:
                    {
                    int LA119_442 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 442, input);

                        throw nvae;
                    }
                    }
                    break;
                case DIV:
                    {
                    int LA119_443 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 443, input);

                        throw nvae;
                    }
                    }
                    break;
                case DOCUMENT:
                    {
                    int LA119_444 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 444, input);

                        throw nvae;
                    }
                    }
                    break;
                case ELSE:
                    {
                    int LA119_445 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 445, input);

                        throw nvae;
                    }
                    }
                    break;
                case ENCODING:
                    {
                    int LA119_446 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 446, input);

                        throw nvae;
                    }
                    }
                    break;
                case END:
                    {
                    int LA119_447 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 447, input);

                        throw nvae;
                    }
                    }
                    break;
                case ENTIRE:
                    {
                    int LA119_448 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 448, input);

                        throw nvae;
                    }
                    }
                    break;
                case EMPTY:
                    {
                    int LA119_449 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 449, input);

                        throw nvae;
                    }
                    }
                    break;
                case EMPTY_SEQUENCE:
                    {
                    int LA119_450 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 450, input);

                        throw nvae;
                    }
                    }
                    break;
                case EQ:
                    {
                    int LA119_451 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 451, input);

                        throw nvae;
                    }
                    }
                    break;
                case EVERY:
                    {
                    int LA119_452 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 452, input);

                        throw nvae;
                    }
                    }
                    break;
                case EXACTLY:
                    {
                    int LA119_453 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 453, input);

                        throw nvae;
                    }
                    }
                    break;
                case EXCEPT:
                    {
                    int LA119_454 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 454, input);

                        throw nvae;
                    }
                    }
                    break;
                case EXTERNAL:
                    {
                    int LA119_455 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 455, input);

                        throw nvae;
                    }
                    }
                    break;
                case FOLLOWING:
                    {
                    int LA119_456 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 456, input);

                        throw nvae;
                    }
                    }
                    break;
                case FOLLOWING_SIBLING:
                    {
                    int LA119_457 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 457, input);

                        throw nvae;
                    }
                    }
                    break;
                case FOR:
                    {
                    int LA119_458 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 458, input);

                        throw nvae;
                    }
                    }
                    break;
                case FROM:
                    {
                    int LA119_459 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 459, input);

                        throw nvae;
                    }
                    }
                    break;
                case FTAND:
                    {
                    int LA119_460 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 460, input);

                        throw nvae;
                    }
                    }
                    break;
                case FTCONTAINS:
                    {
                    int LA119_461 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 461, input);

                        throw nvae;
                    }
                    }
                    break;
                case FTNOT:
                    {
                    int LA119_462 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 462, input);

                        throw nvae;
                    }
                    }
                    break;
                case FTOPTION:
                    {
                    int LA119_463 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 463, input);

                        throw nvae;
                    }
                    }
                    break;
                case FTOR:
                    {
                    int LA119_464 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 464, input);

                        throw nvae;
                    }
                    }
                    break;
                case FUNCTION:
                    {
                    int LA119_465 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 465, input);

                        throw nvae;
                    }
                    }
                    break;
                case GE:
                    {
                    int LA119_466 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 466, input);

                        throw nvae;
                    }
                    }
                    break;
                case GREATEST:
                    {
                    int LA119_467 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 467, input);

                        throw nvae;
                    }
                    }
                    break;
                case GT:
                    {
                    int LA119_468 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 468, input);

                        throw nvae;
                    }
                    }
                    break;
                case IDIV:
                    {
                    int LA119_469 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 469, input);

                        throw nvae;
                    }
                    }
                    break;
                case IF:
                    {
                    int LA119_470 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 470, input);

                        throw nvae;
                    }
                    }
                    break;
                case IMPORT:
                    {
                    int LA119_471 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 471, input);

                        throw nvae;
                    }
                    }
                    break;
                case IN:
                    {
                    int LA119_472 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 472, input);

                        throw nvae;
                    }
                    }
                    break;
                case INHERIT:
                    {
                    int LA119_473 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 473, input);

                        throw nvae;
                    }
                    }
                    break;
                case INSENSITIVE:
                    {
                    int LA119_474 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 474, input);

                        throw nvae;
                    }
                    }
                    break;
                case INSTANCE:
                    {
                    int LA119_475 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 475, input);

                        throw nvae;
                    }
                    }
                    break;
                case INTERSECT:
                    {
                    int LA119_476 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 476, input);

                        throw nvae;
                    }
                    }
                    break;
                case IS:
                    {
                    int LA119_477 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 477, input);

                        throw nvae;
                    }
                    }
                    break;
                case ITEM:
                    {
                    int LA119_478 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 478, input);

                        throw nvae;
                    }
                    }
                    break;
                case LANGUAGE:
                    {
                    int LA119_479 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 479, input);

                        throw nvae;
                    }
                    }
                    break;
                case LAX:
                    {
                    int LA119_480 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 480, input);

                        throw nvae;
                    }
                    }
                    break;
                case LE:
                    {
                    int LA119_481 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 481, input);

                        throw nvae;
                    }
                    }
                    break;
                case LEAST:
                    {
                    int LA119_482 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 482, input);

                        throw nvae;
                    }
                    }
                    break;
                case LET:
                    {
                    int LA119_483 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 483, input);

                        throw nvae;
                    }
                    }
                    break;
                case LEVELS:
                    {
                    int LA119_484 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 484, input);

                        throw nvae;
                    }
                    }
                    break;
                case LOWERCASE:
                    {
                    int LA119_485 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 485, input);

                        throw nvae;
                    }
                    }
                    break;
                case LT:
                    {
                    int LA119_486 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 486, input);

                        throw nvae;
                    }
                    }
                    break;
                case MOD:
                    {
                    int LA119_487 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 487, input);

                        throw nvae;
                    }
                    }
                    break;
                case MODULE:
                    {
                    int LA119_488 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 488, input);

                        throw nvae;
                    }
                    }
                    break;
                case MOST:
                    {
                    int LA119_489 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 489, input);

                        throw nvae;
                    }
                    }
                    break;
                case NAMESPACE:
                    {
                    int LA119_490 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 490, input);

                        throw nvae;
                    }
                    }
                    break;
                case NE:
                    {
                    int LA119_491 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 491, input);

                        throw nvae;
                    }
                    }
                    break;
                case NOINHERIT:
                    {
                    int LA119_492 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 492, input);

                        throw nvae;
                    }
                    }
                    break;
                case NOPRESERVE:
                    {
                    int LA119_493 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 493, input);

                        throw nvae;
                    }
                    }
                    break;
                case NOT:
                    {
                    int LA119_494 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 494, input);

                        throw nvae;
                    }
                    }
                    break;
                case OCCURS:
                    {
                    int LA119_495 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 495, input);

                        throw nvae;
                    }
                    }
                    break;
                case OF:
                    {
                    int LA119_496 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 496, input);

                        throw nvae;
                    }
                    }
                    break;
                case OPTION:
                    {
                    int LA119_497 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 497, input);

                        throw nvae;
                    }
                    }
                    break;
                case OR:
                    {
                    int LA119_498 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 498, input);

                        throw nvae;
                    }
                    }
                    break;
                case ORDER:
                    {
                    int LA119_499 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 499, input);

                        throw nvae;
                    }
                    }
                    break;
                case ORDERED:
                    {
                    int LA119_500 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 500, input);

                        throw nvae;
                    }
                    }
                    break;
                case ORDERING:
                    {
                    int LA119_501 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 501, input);

                        throw nvae;
                    }
                    }
                    break;
                case PARAGRAPH:
                    {
                    int LA119_502 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 502, input);

                        throw nvae;
                    }
                    }
                    break;
                case PARAGRAPHS:
                    {
                    int LA119_503 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 503, input);

                        throw nvae;
                    }
                    }
                    break;
                case PARENT:
                    {
                    int LA119_504 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 504, input);

                        throw nvae;
                    }
                    }
                    break;
                case PHRASE:
                    {
                    int LA119_505 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 505, input);

                        throw nvae;
                    }
                    }
                    break;
                case PRECEDING:
                    {
                    int LA119_506 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 506, input);

                        throw nvae;
                    }
                    }
                    break;
                case PRECEDING_SIBLING:
                    {
                    int LA119_507 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 507, input);

                        throw nvae;
                    }
                    }
                    break;
                case PRESERVE:
                    {
                    int LA119_508 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 508, input);

                        throw nvae;
                    }
                    }
                    break;
                case RELATIONSHIP:
                    {
                    int LA119_509 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 509, input);

                        throw nvae;
                    }
                    }
                    break;
                case RETURN:
                    {
                    int LA119_510 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 510, input);

                        throw nvae;
                    }
                    }
                    break;
                case SAME:
                    {
                    int LA119_511 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 511, input);

                        throw nvae;
                    }
                    }
                    break;
                case SATISFIES:
                    {
                    int LA119_512 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 512, input);

                        throw nvae;
                    }
                    }
                    break;
                case SCHEMA:
                    {
                    int LA119_513 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 513, input);

                        throw nvae;
                    }
                    }
                    break;
                case SCORE:
                    {
                    int LA119_514 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 514, input);

                        throw nvae;
                    }
                    }
                    break;
                case SELF:
                    {
                    int LA119_515 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 515, input);

                        throw nvae;
                    }
                    }
                    break;
                case SENSITIVE:
                    {
                    int LA119_516 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 516, input);

                        throw nvae;
                    }
                    }
                    break;
                case SENTENCES:
                    {
                    int LA119_517 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 517, input);

                        throw nvae;
                    }
                    }
                    break;
                case SENTENCE:
                    {
                    int LA119_518 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 518, input);

                        throw nvae;
                    }
                    }
                    break;
                case SOME:
                    {
                    int LA119_519 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 519, input);

                        throw nvae;
                    }
                    }
                    break;
                case STABLE:
                    {
                    int LA119_520 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 520, input);

                        throw nvae;
                    }
                    }
                    break;
                case START:
                    {
                    int LA119_521 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 521, input);

                        throw nvae;
                    }
                    }
                    break;
                case STEMMING:
                    {
                    int LA119_522 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 522, input);

                        throw nvae;
                    }
                    }
                    break;
                case STOP:
                    {
                    int LA119_523 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 523, input);

                        throw nvae;
                    }
                    }
                    break;
                case STRICT:
                    {
                    int LA119_524 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 524, input);

                        throw nvae;
                    }
                    }
                    break;
                case STRIP:
                    {
                    int LA119_525 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 525, input);

                        throw nvae;
                    }
                    }
                    break;
                case THESAURUS:
                    {
                    int LA119_526 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 526, input);

                        throw nvae;
                    }
                    }
                    break;
                case THEN:
                    {
                    int LA119_527 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 527, input);

                        throw nvae;
                    }
                    }
                    break;
                case TIMES:
                    {
                    int LA119_528 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 528, input);

                        throw nvae;
                    }
                    }
                    break;
                case TO:
                    {
                    int LA119_529 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 529, input);

                        throw nvae;
                    }
                    }
                    break;
                case TREAT:
                    {
                    int LA119_530 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 530, input);

                        throw nvae;
                    }
                    }
                    break;
                case TYPESWITCH:
                    {
                    int LA119_531 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 531, input);

                        throw nvae;
                    }
                    }
                    break;
                case UNION:
                    {
                    int LA119_532 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 532, input);

                        throw nvae;
                    }
                    }
                    break;
                case UNORDERED:
                    {
                    int LA119_533 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 533, input);

                        throw nvae;
                    }
                    }
                    break;
                case UPPERCASE:
                    {
                    int LA119_534 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 534, input);

                        throw nvae;
                    }
                    }
                    break;
                case VALIDATE:
                    {
                    int LA119_535 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 535, input);

                        throw nvae;
                    }
                    }
                    break;
                case VARIABLE:
                    {
                    int LA119_536 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 536, input);

                        throw nvae;
                    }
                    }
                    break;
                case VERSION:
                    {
                    int LA119_537 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 537, input);

                        throw nvae;
                    }
                    }
                    break;
                case WEIGHT:
                    {
                    int LA119_538 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 538, input);

                        throw nvae;
                    }
                    }
                    break;
                case WHERE:
                    {
                    int LA119_539 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 539, input);

                        throw nvae;
                    }
                    }
                    break;
                case WILDCARDS:
                    {
                    int LA119_540 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 540, input);

                        throw nvae;
                    }
                    }
                    break;
                case WINDOW:
                    {
                    int LA119_541 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 541, input);

                        throw nvae;
                    }
                    }
                    break;
                case WITH:
                    {
                    int LA119_542 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 542, input);

                        throw nvae;
                    }
                    }
                    break;
                case WITHOUT:
                    {
                    int LA119_543 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 543, input);

                        throw nvae;
                    }
                    }
                    break;
                case WORD:
                    {
                    int LA119_544 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 544, input);

                        throw nvae;
                    }
                    }
                    break;
                case WORDS:
                    {
                    int LA119_545 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 545, input);

                        throw nvae;
                    }
                    }
                    break;
                case XQUERY:
                    {
                    int LA119_546 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 546, input);

                        throw nvae;
                    }
                    }
                    break;
                case QName:
                    {
                    int LA119_547 = input.LA(3);

                    if ( (synpred7()) ) {
                        alt119=1;
                    }
                    else if ( (true) ) {
                        alt119=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 547, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 4, input);

                    throw nvae;
                }

                }
                break;
            case DOCUMENT_NODE:
                {
                int LA119_5 = input.LA(2);

                if ( (LA119_5==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 5, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA119_6 = input.LA(2);

                if ( ((LA119_6>=XQUERY && LA119_6<=VERSION)||LA119_6==ENCODING||(LA119_6>=MODULE && LA119_6<=NAMESPACE)||(LA119_6>=DECLARE && LA119_6<=VARIABLE)||(LA119_6>=EXTERNAL && LA119_6<=LPARSi)||LA119_6==LBRACESi||(LA119_6>=OPTION && LA119_6<=DOCUMENT_NODE)||(LA119_6>=SCHEMA_ELEMENT && LA119_6<=NODE)||(LA119_6>=RETURN && LA119_6<=TO)||(LA119_6>=DIV && LA119_6<=UNION)||(LA119_6>=INTERSECT && LA119_6<=GE)||LA119_6==IS||(LA119_6>=WEIGHT && LA119_6<=FTNOT)||(LA119_6>=ANY && LA119_6<=FROM)||(LA119_6>=WINDOW && LA119_6<=STRICT)||(LA119_6>=PARENT && LA119_6<=ANCESTOR_OR_SELF)||(LA119_6>=CHILD && LA119_6<=FOLLOWING)||(LA119_6>=DOCUMENT && LA119_6<=NCName)) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 6, input);

                    throw nvae;
                }
                }
                break;
            case CHILD:
                {
                int LA119_7 = input.LA(2);

                if ( (LA119_7==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 7, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA_ELEMENT:
                {
                int LA119_8 = input.LA(2);

                if ( (LA119_8==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 8, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                int LA119_9 = input.LA(2);

                if ( (LA119_9==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 9, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA119_10 = input.LA(2);

                if ( ((LA119_10>=XQUERY && LA119_10<=VERSION)||LA119_10==ENCODING||(LA119_10>=MODULE && LA119_10<=NAMESPACE)||(LA119_10>=DECLARE && LA119_10<=VARIABLE)||LA119_10==EXTERNAL||(LA119_10>=AS && LA119_10<=LPARSi)||LA119_10==LBRACESi||(LA119_10>=OPTION && LA119_10<=DOCUMENT_NODE)||(LA119_10>=SCHEMA_ELEMENT && LA119_10<=NODE)||(LA119_10>=RETURN && LA119_10<=TO)||(LA119_10>=DIV && LA119_10<=UNION)||(LA119_10>=INTERSECT && LA119_10<=GE)||LA119_10==IS||(LA119_10>=WEIGHT && LA119_10<=FTNOT)||(LA119_10>=ANY && LA119_10<=FROM)||(LA119_10>=WINDOW && LA119_10<=STRICT)||(LA119_10>=PARENT && LA119_10<=ANCESTOR_OR_SELF)||(LA119_10>=CHILD && LA119_10<=FOLLOWING)||(LA119_10>=DOCUMENT && LA119_10<=NCName)) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 10, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA119_11 = input.LA(2);

                if ( (LA119_11==LPARSi||LA119_11==LBRACESi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 11, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA119_12 = input.LA(2);

                if ( (LA119_12==LPARSi||LA119_12==LBRACESi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 12, input);

                    throw nvae;
                }
                }
                break;
            case NODE:
                {
                int LA119_13 = input.LA(2);

                if ( (LA119_13==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 13, input);

                    throw nvae;
                }
                }
                break;
            case STARSi:
                {
                int LA119_14 = input.LA(2);

                if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 14, input);

                    throw nvae;
                }
                }
                break;
            case NCName:
                {
                int LA119_15 = input.LA(2);

                if ( (LA119_15==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 15, input);

                    throw nvae;
                }
                }
                break;
            case ALL:
                {
                int LA119_16 = input.LA(2);

                if ( (LA119_16==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 16, input);

                    throw nvae;
                }
                }
                break;
            case ANY:
                {
                int LA119_17 = input.LA(2);

                if ( (LA119_17==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 17, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                int LA119_18 = input.LA(2);

                if ( (LA119_18==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 18, input);

                    throw nvae;
                }
                }
                break;
            case PARENT:
                {
                int LA119_19 = input.LA(2);

                if ( (LA119_19==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 19, input);

                    throw nvae;
                }
                }
                break;
            case AND:
                {
                int LA119_20 = input.LA(2);

                if ( (LA119_20==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 20, input);

                    throw nvae;
                }
                }
                break;
            case AS:
                {
                int LA119_21 = input.LA(2);

                if ( (LA119_21==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 21, input);

                    throw nvae;
                }
                }
                break;
            case ASCENDING:
                {
                int LA119_22 = input.LA(2);

                if ( (LA119_22==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 22, input);

                    throw nvae;
                }
                }
                break;
            case AT:
                {
                int LA119_23 = input.LA(2);

                if ( (LA119_23==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 23, input);

                    throw nvae;
                }
                }
                break;
            case BASE_URI:
                {
                int LA119_24 = input.LA(2);

                if ( (LA119_24==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 24, input);

                    throw nvae;
                }
                }
                break;
            case BY:
                {
                int LA119_25 = input.LA(2);

                if ( (LA119_25==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 25, input);

                    throw nvae;
                }
                }
                break;
            case BOUNDARYSPACE:
                {
                int LA119_26 = input.LA(2);

                if ( (LA119_26==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 26, input);

                    throw nvae;
                }
                }
                break;
            case CASE:
                {
                int LA119_27 = input.LA(2);

                if ( (LA119_27==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 27, input);

                    throw nvae;
                }
                }
                break;
            case CAST:
                {
                int LA119_28 = input.LA(2);

                if ( (LA119_28==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 28, input);

                    throw nvae;
                }
                }
                break;
            case CASTABLE:
                {
                int LA119_29 = input.LA(2);

                if ( (LA119_29==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 29, input);

                    throw nvae;
                }
                }
                break;
            case DESCENDANT:
                {
                int LA119_30 = input.LA(2);

                if ( (LA119_30==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 30, input);

                    throw nvae;
                }
                }
                break;
            case COLLATION:
                {
                int LA119_31 = input.LA(2);

                if ( (LA119_31==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 31, input);

                    throw nvae;
                }
                }
                break;
            case CONSTRUCTION:
                {
                int LA119_32 = input.LA(2);

                if ( (LA119_32==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 32, input);

                    throw nvae;
                }
                }
                break;
            case CONTENT:
                {
                int LA119_33 = input.LA(2);

                if ( (LA119_33==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 33, input);

                    throw nvae;
                }
                }
                break;
            case COPY_NAMESPACES:
                {
                int LA119_34 = input.LA(2);

                if ( (LA119_34==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 34, input);

                    throw nvae;
                }
                }
                break;
            case DECLARE:
                {
                int LA119_35 = input.LA(2);

                if ( (LA119_35==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 35, input);

                    throw nvae;
                }
                }
                break;
            case DEFAULT:
                {
                int LA119_36 = input.LA(2);

                if ( (LA119_36==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 36, input);

                    throw nvae;
                }
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                int LA119_37 = input.LA(2);

                if ( (LA119_37==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 37, input);

                    throw nvae;
                }
                }
                break;
            case FOLLOWING:
                {
                int LA119_38 = input.LA(2);

                if ( (LA119_38==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 38, input);

                    throw nvae;
                }
                }
                break;
            case DESCENDING:
                {
                int LA119_39 = input.LA(2);

                if ( (LA119_39==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 39, input);

                    throw nvae;
                }
                }
                break;
            case DIACRITICS:
                {
                int LA119_40 = input.LA(2);

                if ( (LA119_40==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 40, input);

                    throw nvae;
                }
                }
                break;
            case DIFFERENT:
                {
                int LA119_41 = input.LA(2);

                if ( (LA119_41==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 41, input);

                    throw nvae;
                }
                }
                break;
            case DISTANCE:
                {
                int LA119_42 = input.LA(2);

                if ( (LA119_42==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 42, input);

                    throw nvae;
                }
                }
                break;
            case DIV:
                {
                int LA119_43 = input.LA(2);

                if ( (LA119_43==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 43, input);

                    throw nvae;
                }
                }
                break;
            case DOCUMENT:
                {
                int LA119_44 = input.LA(2);

                if ( (LA119_44==LPARSi||LA119_44==LBRACESi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 44, input);

                    throw nvae;
                }
                }
                break;
            case ELSE:
                {
                int LA119_45 = input.LA(2);

                if ( (LA119_45==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 45, input);

                    throw nvae;
                }
                }
                break;
            case ENCODING:
                {
                int LA119_46 = input.LA(2);

                if ( (LA119_46==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 46, input);

                    throw nvae;
                }
                }
                break;
            case END:
                {
                int LA119_47 = input.LA(2);

                if ( (LA119_47==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 47, input);

                    throw nvae;
                }
                }
                break;
            case ENTIRE:
                {
                int LA119_48 = input.LA(2);

                if ( (LA119_48==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 48, input);

                    throw nvae;
                }
                }
                break;
            case EMPTY:
                {
                int LA119_49 = input.LA(2);

                if ( (LA119_49==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 49, input);

                    throw nvae;
                }
                }
                break;
            case EMPTY_SEQUENCE:
                {
                int LA119_50 = input.LA(2);

                if ( (LA119_50==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 50, input);

                    throw nvae;
                }
                }
                break;
            case EQ:
                {
                int LA119_51 = input.LA(2);

                if ( (LA119_51==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 51, input);

                    throw nvae;
                }
                }
                break;
            case EVERY:
                {
                int LA119_52 = input.LA(2);

                if ( (LA119_52==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 52, input);

                    throw nvae;
                }
                }
                break;
            case EXACTLY:
                {
                int LA119_53 = input.LA(2);

                if ( (LA119_53==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 53, input);

                    throw nvae;
                }
                }
                break;
            case EXCEPT:
                {
                int LA119_54 = input.LA(2);

                if ( (LA119_54==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 54, input);

                    throw nvae;
                }
                }
                break;
            case EXTERNAL:
                {
                int LA119_55 = input.LA(2);

                if ( (LA119_55==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 55, input);

                    throw nvae;
                }
                }
                break;
            case FOLLOWING_SIBLING:
                {
                int LA119_56 = input.LA(2);

                if ( (LA119_56==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 56, input);

                    throw nvae;
                }
                }
                break;
            case SELF:
                {
                int LA119_57 = input.LA(2);

                if ( (LA119_57==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 57, input);

                    throw nvae;
                }
                }
                break;
            case FOR:
                {
                int LA119_58 = input.LA(2);

                if ( (LA119_58==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 58, input);

                    throw nvae;
                }
                }
                break;
            case FROM:
                {
                int LA119_59 = input.LA(2);

                if ( (LA119_59==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 59, input);

                    throw nvae;
                }
                }
                break;
            case FTAND:
                {
                int LA119_60 = input.LA(2);

                if ( (LA119_60==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 60, input);

                    throw nvae;
                }
                }
                break;
            case FTCONTAINS:
                {
                int LA119_61 = input.LA(2);

                if ( (LA119_61==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 61, input);

                    throw nvae;
                }
                }
                break;
            case FTNOT:
                {
                int LA119_62 = input.LA(2);

                if ( (LA119_62==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 62, input);

                    throw nvae;
                }
                }
                break;
            case FTOPTION:
                {
                int LA119_63 = input.LA(2);

                if ( (LA119_63==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 63, input);

                    throw nvae;
                }
                }
                break;
            case FTOR:
                {
                int LA119_64 = input.LA(2);

                if ( (LA119_64==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 64, input);

                    throw nvae;
                }
                }
                break;
            case FUNCTION:
                {
                int LA119_65 = input.LA(2);

                if ( (LA119_65==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 65, input);

                    throw nvae;
                }
                }
                break;
            case GE:
                {
                int LA119_66 = input.LA(2);

                if ( (LA119_66==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 66, input);

                    throw nvae;
                }
                }
                break;
            case GREATEST:
                {
                int LA119_67 = input.LA(2);

                if ( (LA119_67==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 67, input);

                    throw nvae;
                }
                }
                break;
            case GT:
                {
                int LA119_68 = input.LA(2);

                if ( (LA119_68==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 68, input);

                    throw nvae;
                }
                }
                break;
            case IDIV:
                {
                int LA119_69 = input.LA(2);

                if ( (LA119_69==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 69, input);

                    throw nvae;
                }
                }
                break;
            case IF:
                {
                int LA119_70 = input.LA(2);

                if ( (LA119_70==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 70, input);

                    throw nvae;
                }
                }
                break;
            case IMPORT:
                {
                int LA119_71 = input.LA(2);

                if ( (LA119_71==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 71, input);

                    throw nvae;
                }
                }
                break;
            case IN:
                {
                int LA119_72 = input.LA(2);

                if ( (LA119_72==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 72, input);

                    throw nvae;
                }
                }
                break;
            case INHERIT:
                {
                int LA119_73 = input.LA(2);

                if ( (LA119_73==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 73, input);

                    throw nvae;
                }
                }
                break;
            case INSENSITIVE:
                {
                int LA119_74 = input.LA(2);

                if ( (LA119_74==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 74, input);

                    throw nvae;
                }
                }
                break;
            case INSTANCE:
                {
                int LA119_75 = input.LA(2);

                if ( (LA119_75==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 75, input);

                    throw nvae;
                }
                }
                break;
            case INTERSECT:
                {
                int LA119_76 = input.LA(2);

                if ( (LA119_76==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 76, input);

                    throw nvae;
                }
                }
                break;
            case IS:
                {
                int LA119_77 = input.LA(2);

                if ( (LA119_77==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 77, input);

                    throw nvae;
                }
                }
                break;
            case ITEM:
                {
                int LA119_78 = input.LA(2);

                if ( (LA119_78==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 78, input);

                    throw nvae;
                }
                }
                break;
            case LANGUAGE:
                {
                int LA119_79 = input.LA(2);

                if ( (LA119_79==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 79, input);

                    throw nvae;
                }
                }
                break;
            case LAX:
                {
                int LA119_80 = input.LA(2);

                if ( (LA119_80==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 80, input);

                    throw nvae;
                }
                }
                break;
            case LE:
                {
                int LA119_81 = input.LA(2);

                if ( (LA119_81==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 81, input);

                    throw nvae;
                }
                }
                break;
            case LEAST:
                {
                int LA119_82 = input.LA(2);

                if ( (LA119_82==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 82, input);

                    throw nvae;
                }
                }
                break;
            case LET:
                {
                int LA119_83 = input.LA(2);

                if ( (LA119_83==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 83, input);

                    throw nvae;
                }
                }
                break;
            case LEVELS:
                {
                int LA119_84 = input.LA(2);

                if ( (LA119_84==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 84, input);

                    throw nvae;
                }
                }
                break;
            case LOWERCASE:
                {
                int LA119_85 = input.LA(2);

                if ( (LA119_85==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 85, input);

                    throw nvae;
                }
                }
                break;
            case LT:
                {
                int LA119_86 = input.LA(2);

                if ( (LA119_86==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 86, input);

                    throw nvae;
                }
                }
                break;
            case MOD:
                {
                int LA119_87 = input.LA(2);

                if ( (LA119_87==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 87, input);

                    throw nvae;
                }
                }
                break;
            case MODULE:
                {
                int LA119_88 = input.LA(2);

                if ( (LA119_88==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 88, input);

                    throw nvae;
                }
                }
                break;
            case MOST:
                {
                int LA119_89 = input.LA(2);

                if ( (LA119_89==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 89, input);

                    throw nvae;
                }
                }
                break;
            case NAMESPACE:
                {
                int LA119_90 = input.LA(2);

                if ( (LA119_90==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 90, input);

                    throw nvae;
                }
                }
                break;
            case NE:
                {
                int LA119_91 = input.LA(2);

                if ( (LA119_91==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 91, input);

                    throw nvae;
                }
                }
                break;
            case NOINHERIT:
                {
                int LA119_92 = input.LA(2);

                if ( (LA119_92==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 92, input);

                    throw nvae;
                }
                }
                break;
            case NOPRESERVE:
                {
                int LA119_93 = input.LA(2);

                if ( (LA119_93==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 93, input);

                    throw nvae;
                }
                }
                break;
            case NOT:
                {
                int LA119_94 = input.LA(2);

                if ( (LA119_94==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 94, input);

                    throw nvae;
                }
                }
                break;
            case OCCURS:
                {
                int LA119_95 = input.LA(2);

                if ( (LA119_95==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 95, input);

                    throw nvae;
                }
                }
                break;
            case OF:
                {
                int LA119_96 = input.LA(2);

                if ( (LA119_96==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 96, input);

                    throw nvae;
                }
                }
                break;
            case OPTION:
                {
                int LA119_97 = input.LA(2);

                if ( (LA119_97==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 97, input);

                    throw nvae;
                }
                }
                break;
            case OR:
                {
                int LA119_98 = input.LA(2);

                if ( (LA119_98==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 98, input);

                    throw nvae;
                }
                }
                break;
            case ORDER:
                {
                int LA119_99 = input.LA(2);

                if ( (LA119_99==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 99, input);

                    throw nvae;
                }
                }
                break;
            case ORDERED:
                {
                int LA119_100 = input.LA(2);

                if ( (LA119_100==LPARSi||LA119_100==LBRACESi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 100, input);

                    throw nvae;
                }
                }
                break;
            case ORDERING:
                {
                int LA119_101 = input.LA(2);

                if ( (LA119_101==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 101, input);

                    throw nvae;
                }
                }
                break;
            case PARAGRAPH:
                {
                int LA119_102 = input.LA(2);

                if ( (LA119_102==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 102, input);

                    throw nvae;
                }
                }
                break;
            case PARAGRAPHS:
                {
                int LA119_103 = input.LA(2);

                if ( (LA119_103==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 103, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING:
                {
                int LA119_104 = input.LA(2);

                if ( (LA119_104==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 104, input);

                    throw nvae;
                }
                }
                break;
            case PHRASE:
                {
                int LA119_105 = input.LA(2);

                if ( (LA119_105==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 105, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING_SIBLING:
                {
                int LA119_106 = input.LA(2);

                if ( (LA119_106==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 106, input);

                    throw nvae;
                }
                }
                break;
            case PRESERVE:
                {
                int LA119_107 = input.LA(2);

                if ( (LA119_107==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 107, input);

                    throw nvae;
                }
                }
                break;
            case RELATIONSHIP:
                {
                int LA119_108 = input.LA(2);

                if ( (LA119_108==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 108, input);

                    throw nvae;
                }
                }
                break;
            case RETURN:
                {
                int LA119_109 = input.LA(2);

                if ( (LA119_109==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 109, input);

                    throw nvae;
                }
                }
                break;
            case SAME:
                {
                int LA119_110 = input.LA(2);

                if ( (LA119_110==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 110, input);

                    throw nvae;
                }
                }
                break;
            case SATISFIES:
                {
                int LA119_111 = input.LA(2);

                if ( (LA119_111==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 111, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA:
                {
                int LA119_112 = input.LA(2);

                if ( (LA119_112==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 112, input);

                    throw nvae;
                }
                }
                break;
            case SCORE:
                {
                int LA119_113 = input.LA(2);

                if ( (LA119_113==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 113, input);

                    throw nvae;
                }
                }
                break;
            case SENSITIVE:
                {
                int LA119_114 = input.LA(2);

                if ( (LA119_114==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 114, input);

                    throw nvae;
                }
                }
                break;
            case SENTENCES:
                {
                int LA119_115 = input.LA(2);

                if ( (LA119_115==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 115, input);

                    throw nvae;
                }
                }
                break;
            case SENTENCE:
                {
                int LA119_116 = input.LA(2);

                if ( (LA119_116==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 116, input);

                    throw nvae;
                }
                }
                break;
            case SOME:
                {
                int LA119_117 = input.LA(2);

                if ( (LA119_117==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 117, input);

                    throw nvae;
                }
                }
                break;
            case STABLE:
                {
                int LA119_118 = input.LA(2);

                if ( (LA119_118==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 118, input);

                    throw nvae;
                }
                }
                break;
            case START:
                {
                int LA119_119 = input.LA(2);

                if ( (LA119_119==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 119, input);

                    throw nvae;
                }
                }
                break;
            case STEMMING:
                {
                int LA119_120 = input.LA(2);

                if ( (LA119_120==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 120, input);

                    throw nvae;
                }
                }
                break;
            case STOP:
                {
                int LA119_121 = input.LA(2);

                if ( (LA119_121==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 121, input);

                    throw nvae;
                }
                }
                break;
            case STRICT:
                {
                int LA119_122 = input.LA(2);

                if ( (LA119_122==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 122, input);

                    throw nvae;
                }
                }
                break;
            case STRIP:
                {
                int LA119_123 = input.LA(2);

                if ( (LA119_123==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 123, input);

                    throw nvae;
                }
                }
                break;
            case THESAURUS:
                {
                int LA119_124 = input.LA(2);

                if ( (LA119_124==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 124, input);

                    throw nvae;
                }
                }
                break;
            case THEN:
                {
                int LA119_125 = input.LA(2);

                if ( (LA119_125==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 125, input);

                    throw nvae;
                }
                }
                break;
            case TIMES:
                {
                int LA119_126 = input.LA(2);

                if ( (LA119_126==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 126, input);

                    throw nvae;
                }
                }
                break;
            case TO:
                {
                int LA119_127 = input.LA(2);

                if ( (LA119_127==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 127, input);

                    throw nvae;
                }
                }
                break;
            case TREAT:
                {
                int LA119_128 = input.LA(2);

                if ( (LA119_128==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 128, input);

                    throw nvae;
                }
                }
                break;
            case TYPESWITCH:
                {
                int LA119_129 = input.LA(2);

                if ( (LA119_129==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 129, input);

                    throw nvae;
                }
                }
                break;
            case UNION:
                {
                int LA119_130 = input.LA(2);

                if ( (LA119_130==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 130, input);

                    throw nvae;
                }
                }
                break;
            case UNORDERED:
                {
                int LA119_131 = input.LA(2);

                if ( (LA119_131==LPARSi||LA119_131==LBRACESi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 131, input);

                    throw nvae;
                }
                }
                break;
            case UPPERCASE:
                {
                int LA119_132 = input.LA(2);

                if ( (LA119_132==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 132, input);

                    throw nvae;
                }
                }
                break;
            case VALIDATE:
                {
                int LA119_133 = input.LA(2);

                if ( (LA119_133==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 133, input);

                    throw nvae;
                }
                }
                break;
            case VARIABLE:
                {
                int LA119_134 = input.LA(2);

                if ( (LA119_134==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 134, input);

                    throw nvae;
                }
                }
                break;
            case VERSION:
                {
                int LA119_135 = input.LA(2);

                if ( (LA119_135==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 135, input);

                    throw nvae;
                }
                }
                break;
            case WEIGHT:
                {
                int LA119_136 = input.LA(2);

                if ( (LA119_136==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 136, input);

                    throw nvae;
                }
                }
                break;
            case WHERE:
                {
                int LA119_137 = input.LA(2);

                if ( (LA119_137==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 137, input);

                    throw nvae;
                }
                }
                break;
            case WILDCARDS:
                {
                int LA119_138 = input.LA(2);

                if ( (LA119_138==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 138, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
                {
                int LA119_139 = input.LA(2);

                if ( (LA119_139==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 139, input);

                    throw nvae;
                }
                }
                break;
            case WITH:
                {
                int LA119_140 = input.LA(2);

                if ( (LA119_140==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 140, input);

                    throw nvae;
                }
                }
                break;
            case WITHOUT:
                {
                int LA119_141 = input.LA(2);

                if ( (LA119_141==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 141, input);

                    throw nvae;
                }
                }
                break;
            case WORD:
                {
                int LA119_142 = input.LA(2);

                if ( (LA119_142==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 142, input);

                    throw nvae;
                }
                }
                break;
            case WORDS:
                {
                int LA119_143 = input.LA(2);

                if ( (LA119_143==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 143, input);

                    throw nvae;
                }
                }
                break;
            case XQUERY:
                {
                int LA119_144 = input.LA(2);

                if ( (LA119_144==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 144, input);

                    throw nvae;
                }
                }
                break;
            case QName:
                {
                int LA119_145 = input.LA(2);

                if ( (LA119_145==LPARSi) ) {
                    alt119=3;
                }
                else if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 145, input);

                    throw nvae;
                }
                }
                break;
            case DOTSi:
                {
                int LA119_146 = input.LA(2);

                if ( (synpred7()) ) {
                    alt119=1;
                }
                else if ( (true) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 146, input);

                    throw nvae;
                }
                }
                break;
            case StringLiteral:
            case DOLLARSi:
            case LPARSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case LCOMMENTSi:
            case LPISi:
                {
                alt119=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("628:13: stepExpr : ( ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep -> ^( AST_STEPEXPR axisStep ) | axisStep -> ^( AST_STEPEXPR axisStep ) | filterExpr );", 119, 0, input);

                throw nvae;
            }

            switch (alt119) {
                case 1 :
                    // etc/XQFT.g:629:17: ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )=> axisStep
                    {
                    pushFollow(FOLLOW_axisStep_in_stepExpr5894);
                    axisStep497=axisStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_axisStep.add(axisStep497.getTree());

                    // AST REWRITE
                    // elements: axisStep
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 632:37: -> ^( AST_STEPEXPR axisStep )
                    {
                        // etc/XQFT.g:632:40: ^( AST_STEPEXPR axisStep )
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_STEPEXPR, "AST_STEPEXPR"), root_1);

                        adaptor.addChild(root_1, stream_axisStep.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:633:19: axisStep
                    {
                    pushFollow(FOLLOW_axisStep_in_stepExpr5922);
                    axisStep498=axisStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_axisStep.add(axisStep498.getTree());

                    // AST REWRITE
                    // elements: axisStep
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 633:28: -> ^( AST_STEPEXPR axisStep )
                    {
                        // etc/XQFT.g:633:31: ^( AST_STEPEXPR axisStep )
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_STEPEXPR, "AST_STEPEXPR"), root_1);

                        adaptor.addChild(root_1, stream_axisStep.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:634:19: filterExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_filterExpr_in_stepExpr5950);
                    filterExpr499=filterExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, filterExpr499.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end stepExpr

    public static class axisStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start axisStep
    // etc/XQFT.g:637:13: axisStep : ( reverseStep | forwardStep | contextItemExpr ) predicateList ;
    public final axisStep_return axisStep() throws RecognitionException {
        axisStep_return retval = new axisStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        reverseStep_return reverseStep500 = null;

        forwardStep_return forwardStep501 = null;

        contextItemExpr_return contextItemExpr502 = null;

        predicateList_return predicateList503 = null;



        try {
            // etc/XQFT.g:637:22: ( ( reverseStep | forwardStep | contextItemExpr ) predicateList )
            // etc/XQFT.g:637:24: ( reverseStep | forwardStep | contextItemExpr ) predicateList
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:637:24: ( reverseStep | forwardStep | contextItemExpr )
            int alt120=3;
            switch ( input.LA(1) ) {
            case ANCESTOR:
                {
                int LA120_1 = input.LA(2);

                if ( (LA120_1==DBLCOLONSi) ) {
                    alt120=1;
                }
                else if ( (LA120_1==EOF||LA120_1==SEMICOLONSi||(LA120_1>=EQSi && LA120_1<=COMMASi)||LA120_1==DEFAULT||(LA120_1>=COLLATION && LA120_1<=EMPTY)||LA120_1==RPARSi||LA120_1==RBRACSi||LA120_1==STARSi||(LA120_1>=PLUSSi && LA120_1<=FOR)||(LA120_1>=LET && LA120_1<=WHERE)||(LA120_1>=STABLE && LA120_1<=DESCENDING)||LA120_1==SATISFIES||LA120_1==CASE||(LA120_1>=ELSE && LA120_1<=INSTANCE)||(LA120_1>=TREAT && LA120_1<=WITHOUT)||(LA120_1>=EQ && LA120_1<=NODEAFTERSi)||LA120_1==WORDS||LA120_1==TIMES||(LA120_1>=SENTENCES && LA120_1<=PARAGRAPHS)||LA120_1==LEVELS||(LA120_1>=SLASHSi && LA120_1<=DBLSLASHSi)||LA120_1==COLONSi||(LA120_1>=LBRACKSi && LA120_1<=RBRACKSi)) ) {
                    alt120=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("637:24: ( reverseStep | forwardStep | contextItemExpr )", 120, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOTDOTSi:
                {
                alt120=1;
                }
                break;
            case XQUERY:
            case VERSION:
            case ENCODING:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case DEFAULT:
            case ELEMENT:
            case FUNCTION:
            case COLLATION:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case BOUNDARYSPACE:
            case PRESERVE:
            case STRIP:
            case BASE_URI:
            case CONSTRUCTION:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case COPY_NAMESPACES:
            case NOPRESERVE:
            case INHERIT:
            case NOINHERIT:
            case IMPORT:
            case SCHEMA:
            case AT:
            case VARIABLE:
            case EXTERNAL:
            case QName:
            case AS:
            case OPTION:
            case FTOPTION:
            case EMPTY_SEQUENCE:
            case ITEM:
            case DOCUMENT_NODE:
            case STARSi:
            case SCHEMA_ELEMENT:
            case ATTRIBUTE:
            case SCHEMA_ATTRIBUTE:
            case PROCESSING_INSTRUCTION:
            case COMMENT:
            case TEXT:
            case NODE:
            case RETURN:
            case FOR:
            case IN:
            case SCORE:
            case LET:
            case WHERE:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case SOME:
            case EVERY:
            case SATISFIES:
            case TYPESWITCH:
            case CASE:
            case IF:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case FTCONTAINS:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case WITHOUT:
            case CONTENT:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case IS:
            case WEIGHT:
            case FTOR:
            case FTAND:
            case NOT:
            case FTNOT:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case WINDOW:
            case SENTENCES:
            case PARAGRAPHS:
            case DISTANCE:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case START:
            case END:
            case ENTIRE:
            case WITH:
            case WILDCARDS:
            case STEMMING:
            case THESAURUS:
            case STOP:
            case LANGUAGE:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case RELATIONSHIP:
            case LEVELS:
            case VALIDATE:
            case LAX:
            case STRICT:
            case CHILD:
            case DESCENDANT:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case ATSi:
            case DOCUMENT:
            case NCName:
                {
                alt120=2;
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                int LA120_18 = input.LA(2);

                if ( (LA120_18==DBLCOLONSi) ) {
                    alt120=1;
                }
                else if ( (LA120_18==EOF||LA120_18==SEMICOLONSi||(LA120_18>=EQSi && LA120_18<=COMMASi)||LA120_18==DEFAULT||(LA120_18>=COLLATION && LA120_18<=EMPTY)||LA120_18==RPARSi||LA120_18==RBRACSi||LA120_18==STARSi||(LA120_18>=PLUSSi && LA120_18<=FOR)||(LA120_18>=LET && LA120_18<=WHERE)||(LA120_18>=STABLE && LA120_18<=DESCENDING)||LA120_18==SATISFIES||LA120_18==CASE||(LA120_18>=ELSE && LA120_18<=INSTANCE)||(LA120_18>=TREAT && LA120_18<=WITHOUT)||(LA120_18>=EQ && LA120_18<=NODEAFTERSi)||LA120_18==WORDS||LA120_18==TIMES||(LA120_18>=SENTENCES && LA120_18<=PARAGRAPHS)||LA120_18==LEVELS||(LA120_18>=SLASHSi && LA120_18<=DBLSLASHSi)||LA120_18==COLONSi||(LA120_18>=LBRACKSi && LA120_18<=RBRACKSi)) ) {
                    alt120=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("637:24: ( reverseStep | forwardStep | contextItemExpr )", 120, 18, input);

                    throw nvae;
                }
                }
                break;
            case PARENT:
                {
                int LA120_19 = input.LA(2);

                if ( (LA120_19==DBLCOLONSi) ) {
                    alt120=1;
                }
                else if ( (LA120_19==EOF||LA120_19==SEMICOLONSi||(LA120_19>=EQSi && LA120_19<=COMMASi)||LA120_19==DEFAULT||(LA120_19>=COLLATION && LA120_19<=EMPTY)||LA120_19==RPARSi||LA120_19==RBRACSi||LA120_19==STARSi||(LA120_19>=PLUSSi && LA120_19<=FOR)||(LA120_19>=LET && LA120_19<=WHERE)||(LA120_19>=STABLE && LA120_19<=DESCENDING)||LA120_19==SATISFIES||LA120_19==CASE||(LA120_19>=ELSE && LA120_19<=INSTANCE)||(LA120_19>=TREAT && LA120_19<=WITHOUT)||(LA120_19>=EQ && LA120_19<=NODEAFTERSi)||LA120_19==WORDS||LA120_19==TIMES||(LA120_19>=SENTENCES && LA120_19<=PARAGRAPHS)||LA120_19==LEVELS||(LA120_19>=SLASHSi && LA120_19<=DBLSLASHSi)||LA120_19==COLONSi||(LA120_19>=LBRACKSi && LA120_19<=RBRACKSi)) ) {
                    alt120=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("637:24: ( reverseStep | forwardStep | contextItemExpr )", 120, 19, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING:
                {
                int LA120_104 = input.LA(2);

                if ( (LA120_104==DBLCOLONSi) ) {
                    alt120=1;
                }
                else if ( (LA120_104==EOF||LA120_104==SEMICOLONSi||(LA120_104>=EQSi && LA120_104<=COMMASi)||LA120_104==DEFAULT||(LA120_104>=COLLATION && LA120_104<=EMPTY)||LA120_104==RPARSi||LA120_104==RBRACSi||LA120_104==STARSi||(LA120_104>=PLUSSi && LA120_104<=FOR)||(LA120_104>=LET && LA120_104<=WHERE)||(LA120_104>=STABLE && LA120_104<=DESCENDING)||LA120_104==SATISFIES||LA120_104==CASE||(LA120_104>=ELSE && LA120_104<=INSTANCE)||(LA120_104>=TREAT && LA120_104<=WITHOUT)||(LA120_104>=EQ && LA120_104<=NODEAFTERSi)||LA120_104==WORDS||LA120_104==TIMES||(LA120_104>=SENTENCES && LA120_104<=PARAGRAPHS)||LA120_104==LEVELS||(LA120_104>=SLASHSi && LA120_104<=DBLSLASHSi)||LA120_104==COLONSi||(LA120_104>=LBRACKSi && LA120_104<=RBRACKSi)) ) {
                    alt120=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("637:24: ( reverseStep | forwardStep | contextItemExpr )", 120, 104, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING_SIBLING:
                {
                int LA120_106 = input.LA(2);

                if ( (LA120_106==DBLCOLONSi) ) {
                    alt120=1;
                }
                else if ( (LA120_106==EOF||LA120_106==SEMICOLONSi||(LA120_106>=EQSi && LA120_106<=COMMASi)||LA120_106==DEFAULT||(LA120_106>=COLLATION && LA120_106<=EMPTY)||LA120_106==RPARSi||LA120_106==RBRACSi||LA120_106==STARSi||(LA120_106>=PLUSSi && LA120_106<=FOR)||(LA120_106>=LET && LA120_106<=WHERE)||(LA120_106>=STABLE && LA120_106<=DESCENDING)||LA120_106==SATISFIES||LA120_106==CASE||(LA120_106>=ELSE && LA120_106<=INSTANCE)||(LA120_106>=TREAT && LA120_106<=WITHOUT)||(LA120_106>=EQ && LA120_106<=NODEAFTERSi)||LA120_106==WORDS||LA120_106==TIMES||(LA120_106>=SENTENCES && LA120_106<=PARAGRAPHS)||LA120_106==LEVELS||(LA120_106>=SLASHSi && LA120_106<=DBLSLASHSi)||LA120_106==COLONSi||(LA120_106>=LBRACKSi && LA120_106<=RBRACKSi)) ) {
                    alt120=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("637:24: ( reverseStep | forwardStep | contextItemExpr )", 120, 106, input);

                    throw nvae;
                }
                }
                break;
            case DOTSi:
                {
                alt120=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("637:24: ( reverseStep | forwardStep | contextItemExpr )", 120, 0, input);

                throw nvae;
            }

            switch (alt120) {
                case 1 :
                    // etc/XQFT.g:637:25: reverseStep
                    {
                    pushFollow(FOLLOW_reverseStep_in_axisStep5985);
                    reverseStep500=reverseStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, reverseStep500.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:637:39: forwardStep
                    {
                    pushFollow(FOLLOW_forwardStep_in_axisStep5989);
                    forwardStep501=forwardStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, forwardStep501.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:637:53: contextItemExpr
                    {
                    pushFollow(FOLLOW_contextItemExpr_in_axisStep5993);
                    contextItemExpr502=contextItemExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, contextItemExpr502.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_predicateList_in_axisStep5997);
            predicateList503=predicateList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, predicateList503.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end axisStep

    public static class contextItemExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start contextItemExpr
    // etc/XQFT.g:638:17: contextItemExpr : DOTSi ;
    public final contextItemExpr_return contextItemExpr() throws RecognitionException {
        contextItemExpr_return retval = new contextItemExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOTSi504=null;

        XQFTTree DOTSi504_tree=null;

        try {
            // etc/XQFT.g:638:33: ( DOTSi )
            // etc/XQFT.g:638:35: DOTSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOTSi504=(Token)input.LT(1);
            match(input,DOTSi,FOLLOW_DOTSi_in_contextItemExpr6020); if (failed) return retval;
            if ( backtracking==0 ) {
            DOTSi504_tree = (XQFTTree)adaptor.create(DOTSi504);
            adaptor.addChild(root_0, DOTSi504_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end contextItemExpr

    public static class reverseStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start reverseStep
    // etc/XQFT.g:639:17: reverseStep : ( reverseAxis nodeTest | abbrevReverseStep );
    public final reverseStep_return reverseStep() throws RecognitionException {
        reverseStep_return retval = new reverseStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        reverseAxis_return reverseAxis505 = null;

        nodeTest_return nodeTest506 = null;

        abbrevReverseStep_return abbrevReverseStep507 = null;



        try {
            // etc/XQFT.g:639:29: ( reverseAxis nodeTest | abbrevReverseStep )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( ((LA121_0>=PARENT && LA121_0<=ANCESTOR_OR_SELF)) ) {
                alt121=1;
            }
            else if ( (LA121_0==DOTDOTSi) ) {
                alt121=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("639:17: reverseStep : ( reverseAxis nodeTest | abbrevReverseStep );", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // etc/XQFT.g:639:31: reverseAxis nodeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_reverseAxis_in_reverseStep6043);
                    reverseAxis505=reverseAxis();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, reverseAxis505.getTree());
                    pushFollow(FOLLOW_nodeTest_in_reverseStep6045);
                    nodeTest506=nodeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest506.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:639:54: abbrevReverseStep
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_abbrevReverseStep_in_reverseStep6049);
                    abbrevReverseStep507=abbrevReverseStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, abbrevReverseStep507.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end reverseStep

    public static class reverseAxis_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start reverseAxis
    // etc/XQFT.g:640:21: reverseAxis : ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi ;
    public final reverseAxis_return reverseAxis() throws RecognitionException {
        reverseAxis_return retval = new reverseAxis_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set508=null;
        Token DBLCOLONSi509=null;

        XQFTTree set508_tree=null;
        XQFTTree DBLCOLONSi509_tree=null;

        try {
            // etc/XQFT.g:640:33: ( ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi )
            // etc/XQFT.g:640:35: ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            set508=(Token)input.LT(1);
            if ( (input.LA(1)>=PARENT && input.LA(1)<=ANCESTOR_OR_SELF) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set508));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_reverseAxis6076);    throw mse;
            }

            DBLCOLONSi509=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_reverseAxis6096); if (failed) return retval;
            if ( backtracking==0 ) {
            DBLCOLONSi509_tree = (XQFTTree)adaptor.create(DBLCOLONSi509);
            adaptor.addChild(root_0, DBLCOLONSi509_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end reverseAxis

    public static class nodeTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nodeTest
    // etc/XQFT.g:641:21: nodeTest : ( kindTest | nameTest );
    public final nodeTest_return nodeTest() throws RecognitionException {
        nodeTest_return retval = new nodeTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        kindTest_return kindTest510 = null;

        nameTest_return nameTest511 = null;



        try {
            // etc/XQFT.g:641:30: ( kindTest | nameTest )
            int alt122=2;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                int LA122_1 = input.LA(2);

                if ( (LA122_1==LPARSi) ) {
                    alt122=1;
                }
                else if ( (LA122_1==EOF||LA122_1==SEMICOLONSi||(LA122_1>=EQSi && LA122_1<=COMMASi)||LA122_1==DEFAULT||(LA122_1>=COLLATION && LA122_1<=EMPTY)||LA122_1==RPARSi||LA122_1==RBRACSi||LA122_1==STARSi||(LA122_1>=PLUSSi && LA122_1<=FOR)||(LA122_1>=LET && LA122_1<=WHERE)||(LA122_1>=STABLE && LA122_1<=DESCENDING)||LA122_1==SATISFIES||LA122_1==CASE||(LA122_1>=ELSE && LA122_1<=INSTANCE)||(LA122_1>=TREAT && LA122_1<=WITHOUT)||(LA122_1>=EQ && LA122_1<=NODEAFTERSi)||LA122_1==WORDS||LA122_1==TIMES||(LA122_1>=SENTENCES && LA122_1<=PARAGRAPHS)||LA122_1==LEVELS||(LA122_1>=SLASHSi && LA122_1<=DBLSLASHSi)||LA122_1==COLONSi||(LA122_1>=LBRACKSi && LA122_1<=RBRACKSi)) ) {
                    alt122=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 1, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA122_2 = input.LA(2);

                if ( (LA122_2==LPARSi) ) {
                    alt122=1;
                }
                else if ( (LA122_2==EOF||LA122_2==SEMICOLONSi||(LA122_2>=EQSi && LA122_2<=COMMASi)||LA122_2==DEFAULT||(LA122_2>=COLLATION && LA122_2<=EMPTY)||LA122_2==RPARSi||LA122_2==RBRACSi||LA122_2==STARSi||(LA122_2>=PLUSSi && LA122_2<=FOR)||(LA122_2>=LET && LA122_2<=WHERE)||(LA122_2>=STABLE && LA122_2<=DESCENDING)||LA122_2==SATISFIES||LA122_2==CASE||(LA122_2>=ELSE && LA122_2<=INSTANCE)||(LA122_2>=TREAT && LA122_2<=WITHOUT)||(LA122_2>=EQ && LA122_2<=NODEAFTERSi)||LA122_2==WORDS||LA122_2==TIMES||(LA122_2>=SENTENCES && LA122_2<=PARAGRAPHS)||LA122_2==LEVELS||(LA122_2>=SLASHSi && LA122_2<=DBLSLASHSi)||LA122_2==COLONSi||(LA122_2>=LBRACKSi && LA122_2<=RBRACKSi)) ) {
                    alt122=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 2, input);

                    throw nvae;
                }
                }
                break;
            case ATTRIBUTE:
                {
                int LA122_3 = input.LA(2);

                if ( (LA122_3==LPARSi) ) {
                    alt122=1;
                }
                else if ( (LA122_3==EOF||LA122_3==SEMICOLONSi||(LA122_3>=EQSi && LA122_3<=COMMASi)||LA122_3==DEFAULT||(LA122_3>=COLLATION && LA122_3<=EMPTY)||LA122_3==RPARSi||LA122_3==RBRACSi||LA122_3==STARSi||(LA122_3>=PLUSSi && LA122_3<=FOR)||(LA122_3>=LET && LA122_3<=WHERE)||(LA122_3>=STABLE && LA122_3<=DESCENDING)||LA122_3==SATISFIES||LA122_3==CASE||(LA122_3>=ELSE && LA122_3<=INSTANCE)||(LA122_3>=TREAT && LA122_3<=WITHOUT)||(LA122_3>=EQ && LA122_3<=NODEAFTERSi)||LA122_3==WORDS||LA122_3==TIMES||(LA122_3>=SENTENCES && LA122_3<=PARAGRAPHS)||LA122_3==LEVELS||(LA122_3>=SLASHSi && LA122_3<=DBLSLASHSi)||LA122_3==COLONSi||(LA122_3>=LBRACKSi && LA122_3<=RBRACKSi)) ) {
                    alt122=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 3, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA_ELEMENT:
                {
                int LA122_4 = input.LA(2);

                if ( (LA122_4==LPARSi) ) {
                    alt122=1;
                }
                else if ( (LA122_4==EOF||LA122_4==SEMICOLONSi||(LA122_4>=EQSi && LA122_4<=COMMASi)||LA122_4==DEFAULT||(LA122_4>=COLLATION && LA122_4<=EMPTY)||LA122_4==RPARSi||LA122_4==RBRACSi||LA122_4==STARSi||(LA122_4>=PLUSSi && LA122_4<=FOR)||(LA122_4>=LET && LA122_4<=WHERE)||(LA122_4>=STABLE && LA122_4<=DESCENDING)||LA122_4==SATISFIES||LA122_4==CASE||(LA122_4>=ELSE && LA122_4<=INSTANCE)||(LA122_4>=TREAT && LA122_4<=WITHOUT)||(LA122_4>=EQ && LA122_4<=NODEAFTERSi)||LA122_4==WORDS||LA122_4==TIMES||(LA122_4>=SENTENCES && LA122_4<=PARAGRAPHS)||LA122_4==LEVELS||(LA122_4>=SLASHSi && LA122_4<=DBLSLASHSi)||LA122_4==COLONSi||(LA122_4>=LBRACKSi && LA122_4<=RBRACKSi)) ) {
                    alt122=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 4, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                int LA122_5 = input.LA(2);

                if ( (LA122_5==LPARSi) ) {
                    alt122=1;
                }
                else if ( (LA122_5==EOF||LA122_5==SEMICOLONSi||(LA122_5>=EQSi && LA122_5<=COMMASi)||LA122_5==DEFAULT||(LA122_5>=COLLATION && LA122_5<=EMPTY)||LA122_5==RPARSi||LA122_5==RBRACSi||LA122_5==STARSi||(LA122_5>=PLUSSi && LA122_5<=FOR)||(LA122_5>=LET && LA122_5<=WHERE)||(LA122_5>=STABLE && LA122_5<=DESCENDING)||LA122_5==SATISFIES||LA122_5==CASE||(LA122_5>=ELSE && LA122_5<=INSTANCE)||(LA122_5>=TREAT && LA122_5<=WITHOUT)||(LA122_5>=EQ && LA122_5<=NODEAFTERSi)||LA122_5==WORDS||LA122_5==TIMES||(LA122_5>=SENTENCES && LA122_5<=PARAGRAPHS)||LA122_5==LEVELS||(LA122_5>=SLASHSi && LA122_5<=DBLSLASHSi)||LA122_5==COLONSi||(LA122_5>=LBRACKSi && LA122_5<=RBRACKSi)) ) {
                    alt122=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 5, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA122_6 = input.LA(2);

                if ( (LA122_6==LPARSi) ) {
                    alt122=1;
                }
                else if ( (LA122_6==EOF||LA122_6==SEMICOLONSi||(LA122_6>=EQSi && LA122_6<=COMMASi)||LA122_6==DEFAULT||(LA122_6>=COLLATION && LA122_6<=EMPTY)||LA122_6==RPARSi||LA122_6==RBRACSi||LA122_6==STARSi||(LA122_6>=PLUSSi && LA122_6<=FOR)||(LA122_6>=LET && LA122_6<=WHERE)||(LA122_6>=STABLE && LA122_6<=DESCENDING)||LA122_6==SATISFIES||LA122_6==CASE||(LA122_6>=ELSE && LA122_6<=INSTANCE)||(LA122_6>=TREAT && LA122_6<=WITHOUT)||(LA122_6>=EQ && LA122_6<=NODEAFTERSi)||LA122_6==WORDS||LA122_6==TIMES||(LA122_6>=SENTENCES && LA122_6<=PARAGRAPHS)||LA122_6==LEVELS||(LA122_6>=SLASHSi && LA122_6<=DBLSLASHSi)||LA122_6==COLONSi||(LA122_6>=LBRACKSi && LA122_6<=RBRACKSi)) ) {
                    alt122=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 6, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA122_7 = input.LA(2);

                if ( (LA122_7==LPARSi) ) {
                    alt122=1;
                }
                else if ( (LA122_7==EOF||LA122_7==SEMICOLONSi||(LA122_7>=EQSi && LA122_7<=COMMASi)||LA122_7==DEFAULT||(LA122_7>=COLLATION && LA122_7<=EMPTY)||LA122_7==RPARSi||LA122_7==RBRACSi||LA122_7==STARSi||(LA122_7>=PLUSSi && LA122_7<=FOR)||(LA122_7>=LET && LA122_7<=WHERE)||(LA122_7>=STABLE && LA122_7<=DESCENDING)||LA122_7==SATISFIES||LA122_7==CASE||(LA122_7>=ELSE && LA122_7<=INSTANCE)||(LA122_7>=TREAT && LA122_7<=WITHOUT)||(LA122_7>=EQ && LA122_7<=NODEAFTERSi)||LA122_7==WORDS||LA122_7==TIMES||(LA122_7>=SENTENCES && LA122_7<=PARAGRAPHS)||LA122_7==LEVELS||(LA122_7>=SLASHSi && LA122_7<=DBLSLASHSi)||LA122_7==COLONSi||(LA122_7>=LBRACKSi && LA122_7<=RBRACKSi)) ) {
                    alt122=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 7, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA122_8 = input.LA(2);

                if ( (LA122_8==LPARSi) ) {
                    alt122=1;
                }
                else if ( (LA122_8==EOF||LA122_8==SEMICOLONSi||(LA122_8>=EQSi && LA122_8<=COMMASi)||LA122_8==DEFAULT||(LA122_8>=COLLATION && LA122_8<=EMPTY)||LA122_8==RPARSi||LA122_8==RBRACSi||LA122_8==STARSi||(LA122_8>=PLUSSi && LA122_8<=FOR)||(LA122_8>=LET && LA122_8<=WHERE)||(LA122_8>=STABLE && LA122_8<=DESCENDING)||LA122_8==SATISFIES||LA122_8==CASE||(LA122_8>=ELSE && LA122_8<=INSTANCE)||(LA122_8>=TREAT && LA122_8<=WITHOUT)||(LA122_8>=EQ && LA122_8<=NODEAFTERSi)||LA122_8==WORDS||LA122_8==TIMES||(LA122_8>=SENTENCES && LA122_8<=PARAGRAPHS)||LA122_8==LEVELS||(LA122_8>=SLASHSi && LA122_8<=DBLSLASHSi)||LA122_8==COLONSi||(LA122_8>=LBRACKSi && LA122_8<=RBRACKSi)) ) {
                    alt122=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 8, input);

                    throw nvae;
                }
                }
                break;
            case NODE:
                {
                int LA122_9 = input.LA(2);

                if ( (LA122_9==LPARSi) ) {
                    alt122=1;
                }
                else if ( (LA122_9==EOF||LA122_9==SEMICOLONSi||(LA122_9>=EQSi && LA122_9<=COMMASi)||LA122_9==DEFAULT||(LA122_9>=COLLATION && LA122_9<=EMPTY)||LA122_9==RPARSi||LA122_9==RBRACSi||LA122_9==STARSi||(LA122_9>=PLUSSi && LA122_9<=FOR)||(LA122_9>=LET && LA122_9<=WHERE)||(LA122_9>=STABLE && LA122_9<=DESCENDING)||LA122_9==SATISFIES||LA122_9==CASE||(LA122_9>=ELSE && LA122_9<=INSTANCE)||(LA122_9>=TREAT && LA122_9<=WITHOUT)||(LA122_9>=EQ && LA122_9<=NODEAFTERSi)||LA122_9==WORDS||LA122_9==TIMES||(LA122_9>=SENTENCES && LA122_9<=PARAGRAPHS)||LA122_9==LEVELS||(LA122_9>=SLASHSi && LA122_9<=DBLSLASHSi)||LA122_9==COLONSi||(LA122_9>=LBRACKSi && LA122_9<=RBRACKSi)) ) {
                    alt122=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 9, input);

                    throw nvae;
                }
                }
                break;
            case XQUERY:
            case VERSION:
            case ENCODING:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case DEFAULT:
            case FUNCTION:
            case COLLATION:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case BOUNDARYSPACE:
            case PRESERVE:
            case STRIP:
            case BASE_URI:
            case CONSTRUCTION:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case COPY_NAMESPACES:
            case NOPRESERVE:
            case INHERIT:
            case NOINHERIT:
            case IMPORT:
            case SCHEMA:
            case AT:
            case VARIABLE:
            case EXTERNAL:
            case QName:
            case AS:
            case OPTION:
            case FTOPTION:
            case EMPTY_SEQUENCE:
            case ITEM:
            case STARSi:
            case RETURN:
            case FOR:
            case IN:
            case SCORE:
            case LET:
            case WHERE:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case SOME:
            case EVERY:
            case SATISFIES:
            case TYPESWITCH:
            case CASE:
            case IF:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case FTCONTAINS:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case WITHOUT:
            case CONTENT:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case IS:
            case WEIGHT:
            case FTOR:
            case FTAND:
            case NOT:
            case FTNOT:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case WINDOW:
            case SENTENCES:
            case PARAGRAPHS:
            case DISTANCE:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case START:
            case END:
            case ENTIRE:
            case WITH:
            case WILDCARDS:
            case STEMMING:
            case THESAURUS:
            case STOP:
            case LANGUAGE:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case RELATIONSHIP:
            case LEVELS:
            case VALIDATE:
            case LAX:
            case STRICT:
            case PARENT:
            case ANCESTOR:
            case PRECEDING_SIBLING:
            case PRECEDING:
            case ANCESTOR_OR_SELF:
            case CHILD:
            case DESCENDANT:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case DOCUMENT:
            case NCName:
                {
                alt122=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("641:21: nodeTest : ( kindTest | nameTest );", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // etc/XQFT.g:641:32: kindTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_kindTest_in_nodeTest6123);
                    kindTest510=kindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, kindTest510.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:641:43: nameTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_nameTest_in_nodeTest6127);
                    nameTest511=nameTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nameTest511.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nodeTest

    public static class nameTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nameTest
    // etc/XQFT.g:642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );
    public final nameTest_return nameTest() throws RecognitionException {
        nameTest_return retval = new nameTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        wildcard_return wildcard512 = null;

        qName_return qName513 = null;



        try {
            // etc/XQFT.g:642:48: ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==STARSi) && (synpred8())) {
                alt123=1;
            }
            else if ( (LA123_0==NCName) ) {
                int LA123_2 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ALL) ) {
                int LA123_3 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ANY) ) {
                int LA123_4 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ANCESTOR) ) {
                int LA123_5 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 5, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ANCESTOR_OR_SELF) ) {
                int LA123_6 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 6, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==AND) ) {
                int LA123_7 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 7, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==AS) ) {
                int LA123_8 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 8, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ASCENDING) ) {
                int LA123_9 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 9, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==AT) ) {
                int LA123_10 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 10, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ATTRIBUTE) ) {
                int LA123_11 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 11, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==BASE_URI) ) {
                int LA123_12 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 12, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==BY) ) {
                int LA123_13 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 13, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==BOUNDARYSPACE) ) {
                int LA123_14 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 14, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==CASE) ) {
                int LA123_15 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 15, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==CAST) ) {
                int LA123_16 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 16, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==CASTABLE) ) {
                int LA123_17 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 17, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==CHILD) ) {
                int LA123_18 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 18, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==COLLATION) ) {
                int LA123_19 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 19, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==COMMENT) ) {
                int LA123_20 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 20, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==CONSTRUCTION) ) {
                int LA123_21 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 21, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==CONTENT) ) {
                int LA123_22 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 22, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==COPY_NAMESPACES) ) {
                int LA123_23 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 23, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DECLARE) ) {
                int LA123_24 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 24, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DEFAULT) ) {
                int LA123_25 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 25, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DESCENDANT) ) {
                int LA123_26 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 26, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DESCENDANT_OR_SELF) ) {
                int LA123_27 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 27, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DESCENDING) ) {
                int LA123_28 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 28, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DIACRITICS) ) {
                int LA123_29 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 29, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DIFFERENT) ) {
                int LA123_30 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 30, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DISTANCE) ) {
                int LA123_31 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 31, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DIV) ) {
                int LA123_32 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 32, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DOCUMENT) ) {
                int LA123_33 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 33, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==DOCUMENT_NODE) ) {
                int LA123_34 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 34, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ELEMENT) ) {
                int LA123_35 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 35, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ELSE) ) {
                int LA123_36 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 36, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ENCODING) ) {
                int LA123_37 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 37, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==END) ) {
                int LA123_38 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 38, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ENTIRE) ) {
                int LA123_39 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 39, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==EMPTY) ) {
                int LA123_40 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 40, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==EMPTY_SEQUENCE) ) {
                int LA123_41 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 41, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==EQ) ) {
                int LA123_42 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 42, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==EVERY) ) {
                int LA123_43 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 43, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==EXACTLY) ) {
                int LA123_44 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 44, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==EXCEPT) ) {
                int LA123_45 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 45, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==EXTERNAL) ) {
                int LA123_46 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 46, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FOLLOWING) ) {
                int LA123_47 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 47, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FOLLOWING_SIBLING) ) {
                int LA123_48 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 48, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FOR) ) {
                int LA123_49 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 49, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FROM) ) {
                int LA123_50 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 50, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FTAND) ) {
                int LA123_51 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 51, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FTCONTAINS) ) {
                int LA123_52 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 52, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FTNOT) ) {
                int LA123_53 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 53, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FTOPTION) ) {
                int LA123_54 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 54, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FTOR) ) {
                int LA123_55 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 55, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==FUNCTION) ) {
                int LA123_56 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 56, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==GE) ) {
                int LA123_57 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 57, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==GREATEST) ) {
                int LA123_58 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 58, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==GT) ) {
                int LA123_59 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 59, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==IDIV) ) {
                int LA123_60 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 60, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==IF) ) {
                int LA123_61 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 61, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==IMPORT) ) {
                int LA123_62 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 62, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==IN) ) {
                int LA123_63 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 63, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==INHERIT) ) {
                int LA123_64 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 64, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==INSENSITIVE) ) {
                int LA123_65 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 65, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==INSTANCE) ) {
                int LA123_66 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 66, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==INTERSECT) ) {
                int LA123_67 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 67, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==IS) ) {
                int LA123_68 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 68, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ITEM) ) {
                int LA123_69 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 69, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==LANGUAGE) ) {
                int LA123_70 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 70, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==LAX) ) {
                int LA123_71 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 71, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==LE) ) {
                int LA123_72 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 72, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==LEAST) ) {
                int LA123_73 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 73, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==LET) ) {
                int LA123_74 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 74, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==LEVELS) ) {
                int LA123_75 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 75, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==LOWERCASE) ) {
                int LA123_76 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 76, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==LT) ) {
                int LA123_77 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 77, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==MOD) ) {
                int LA123_78 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 78, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==MODULE) ) {
                int LA123_79 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 79, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==MOST) ) {
                int LA123_80 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 80, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==NAMESPACE) ) {
                int LA123_81 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 81, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==NE) ) {
                int LA123_82 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 82, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==NODE) ) {
                int LA123_83 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 83, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==NOINHERIT) ) {
                int LA123_84 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 84, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==NOPRESERVE) ) {
                int LA123_85 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 85, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==NOT) ) {
                int LA123_86 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 86, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==OCCURS) ) {
                int LA123_87 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 87, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==OF) ) {
                int LA123_88 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 88, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==OPTION) ) {
                int LA123_89 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 89, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==OR) ) {
                int LA123_90 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 90, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ORDER) ) {
                int LA123_91 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 91, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ORDERED) ) {
                int LA123_92 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 92, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==ORDERING) ) {
                int LA123_93 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 93, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==PARAGRAPH) ) {
                int LA123_94 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 94, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==PARAGRAPHS) ) {
                int LA123_95 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 95, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==PARENT) ) {
                int LA123_96 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 96, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==PHRASE) ) {
                int LA123_97 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 97, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==PRECEDING) ) {
                int LA123_98 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 98, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==PRECEDING_SIBLING) ) {
                int LA123_99 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 99, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==PRESERVE) ) {
                int LA123_100 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 100, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==PROCESSING_INSTRUCTION) ) {
                int LA123_101 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 101, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==RELATIONSHIP) ) {
                int LA123_102 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 102, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==RETURN) ) {
                int LA123_103 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 103, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SAME) ) {
                int LA123_104 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 104, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SATISFIES) ) {
                int LA123_105 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 105, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SCHEMA) ) {
                int LA123_106 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 106, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SCHEMA_ATTRIBUTE) ) {
                int LA123_107 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 107, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SCHEMA_ELEMENT) ) {
                int LA123_108 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 108, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SCORE) ) {
                int LA123_109 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 109, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SELF) ) {
                int LA123_110 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 110, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SENSITIVE) ) {
                int LA123_111 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 111, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SENTENCES) ) {
                int LA123_112 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 112, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SENTENCE) ) {
                int LA123_113 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 113, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==SOME) ) {
                int LA123_114 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 114, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==STABLE) ) {
                int LA123_115 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 115, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==START) ) {
                int LA123_116 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 116, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==STEMMING) ) {
                int LA123_117 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 117, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==STOP) ) {
                int LA123_118 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 118, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==STRICT) ) {
                int LA123_119 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 119, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==STRIP) ) {
                int LA123_120 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 120, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==TEXT) ) {
                int LA123_121 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 121, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==THESAURUS) ) {
                int LA123_122 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 122, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==THEN) ) {
                int LA123_123 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 123, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==TIMES) ) {
                int LA123_124 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 124, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==TO) ) {
                int LA123_125 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 125, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==TREAT) ) {
                int LA123_126 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 126, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==TYPESWITCH) ) {
                int LA123_127 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 127, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==UNION) ) {
                int LA123_128 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 128, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==UNORDERED) ) {
                int LA123_129 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 129, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==UPPERCASE) ) {
                int LA123_130 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 130, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==VALIDATE) ) {
                int LA123_131 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 131, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==VARIABLE) ) {
                int LA123_132 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 132, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==VERSION) ) {
                int LA123_133 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 133, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==WEIGHT) ) {
                int LA123_134 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 134, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==WHERE) ) {
                int LA123_135 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 135, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==WILDCARDS) ) {
                int LA123_136 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 136, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==WINDOW) ) {
                int LA123_137 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 137, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==WITH) ) {
                int LA123_138 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 138, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==WITHOUT) ) {
                int LA123_139 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 139, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==WORD) ) {
                int LA123_140 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 140, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==WORDS) ) {
                int LA123_141 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 141, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==XQUERY) ) {
                int LA123_142 = input.LA(2);

                if ( (synpred8()) ) {
                    alt123=1;
                }
                else if ( (true) ) {
                    alt123=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 142, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==QName) ) {
                alt123=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("642:25: nameTest options {k=1; } : ( ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard | qName );", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // etc/XQFT.g:643:29: ( STARSi | ncNameorKeyword COLONSi STARSi )=> wildcard
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_wildcard_in_nameTest6208);
                    wildcard512=wildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, wildcard512.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:644:31: qName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_qName_in_nameTest6240);
                    qName513=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName513.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nameTest

    public static class wildcard_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start wildcard
    // etc/XQFT.g:646:29: wildcard : ( ( STARSi COLONSi )=> STARSi COLONSi ncNameorKeyword | STARSi | ncNameorKeyword COLONSi STARSi );
    public final wildcard_return wildcard() throws RecognitionException {
        wildcard_return retval = new wildcard_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STARSi514=null;
        Token COLONSi515=null;
        Token STARSi517=null;
        Token COLONSi519=null;
        Token STARSi520=null;
        ncNameorKeyword_return ncNameorKeyword516 = null;

        ncNameorKeyword_return ncNameorKeyword518 = null;


        XQFTTree STARSi514_tree=null;
        XQFTTree COLONSi515_tree=null;
        XQFTTree STARSi517_tree=null;
        XQFTTree COLONSi519_tree=null;
        XQFTTree STARSi520_tree=null;

        try {
            // etc/XQFT.g:646:38: ( ( STARSi COLONSi )=> STARSi COLONSi ncNameorKeyword | STARSi | ncNameorKeyword COLONSi STARSi )
            int alt124=3;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==STARSi) ) {
                int LA124_1 = input.LA(2);

                if ( (LA124_1==COLONSi) && (synpred9())) {
                    alt124=1;
                }
                else if ( (LA124_1==EOF||LA124_1==SEMICOLONSi||(LA124_1>=EQSi && LA124_1<=COMMASi)||LA124_1==DEFAULT||(LA124_1>=COLLATION && LA124_1<=EMPTY)||LA124_1==RPARSi||LA124_1==RBRACSi||LA124_1==STARSi||(LA124_1>=PLUSSi && LA124_1<=FOR)||(LA124_1>=LET && LA124_1<=WHERE)||(LA124_1>=STABLE && LA124_1<=DESCENDING)||LA124_1==SATISFIES||LA124_1==CASE||(LA124_1>=ELSE && LA124_1<=INSTANCE)||(LA124_1>=TREAT && LA124_1<=WITHOUT)||(LA124_1>=EQ && LA124_1<=NODEAFTERSi)||LA124_1==WORDS||LA124_1==TIMES||(LA124_1>=SENTENCES && LA124_1<=PARAGRAPHS)||LA124_1==LEVELS||(LA124_1>=SLASHSi && LA124_1<=DBLSLASHSi)||(LA124_1>=LBRACKSi && LA124_1<=RBRACKSi)) ) {
                    alt124=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("646:29: wildcard : ( ( STARSi COLONSi )=> STARSi COLONSi ncNameorKeyword | STARSi | ncNameorKeyword COLONSi STARSi );", 124, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA124_0>=XQUERY && LA124_0<=VERSION)||LA124_0==ENCODING||(LA124_0>=MODULE && LA124_0<=NAMESPACE)||(LA124_0>=DECLARE && LA124_0<=VARIABLE)||LA124_0==EXTERNAL||LA124_0==AS||(LA124_0>=OPTION && LA124_0<=DOCUMENT_NODE)||(LA124_0>=SCHEMA_ELEMENT && LA124_0<=NODE)||(LA124_0>=RETURN && LA124_0<=TO)||(LA124_0>=DIV && LA124_0<=UNION)||(LA124_0>=INTERSECT && LA124_0<=GE)||LA124_0==IS||(LA124_0>=WEIGHT && LA124_0<=FTNOT)||(LA124_0>=ANY && LA124_0<=FROM)||(LA124_0>=WINDOW && LA124_0<=STRICT)||(LA124_0>=PARENT && LA124_0<=ANCESTOR_OR_SELF)||(LA124_0>=CHILD && LA124_0<=FOLLOWING)||(LA124_0>=DOCUMENT && LA124_0<=NCName)) ) {
                alt124=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("646:29: wildcard : ( ( STARSi COLONSi )=> STARSi COLONSi ncNameorKeyword | STARSi | ncNameorKeyword COLONSi STARSi );", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // etc/XQFT.g:647:33: ( STARSi COLONSi )=> STARSi COLONSi ncNameorKeyword
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi514=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard6342); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi514_tree = (XQFTTree)adaptor.create(STARSi514);
                    adaptor.addChild(root_0, STARSi514_tree);
                    }
                    COLONSi515=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard6344); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLONSi515_tree = (XQFTTree)adaptor.create(COLONSi515);
                    adaptor.addChild(root_0, COLONSi515_tree);
                    }
                    pushFollow(FOLLOW_ncNameorKeyword_in_wildcard6346);
                    ncNameorKeyword516=ncNameorKeyword();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ncNameorKeyword516.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:648:35: STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi517=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard6384); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi517_tree = (XQFTTree)adaptor.create(STARSi517);
                    adaptor.addChild(root_0, STARSi517_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:649:35: ncNameorKeyword COLONSi STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ncNameorKeyword_in_wildcard6420);
                    ncNameorKeyword518=ncNameorKeyword();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ncNameorKeyword518.getTree());
                    COLONSi519=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard6422); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLONSi519_tree = (XQFTTree)adaptor.create(COLONSi519);
                    adaptor.addChild(root_0, COLONSi519_tree);
                    }
                    STARSi520=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard6424); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi520_tree = (XQFTTree)adaptor.create(STARSi520);
                    adaptor.addChild(root_0, STARSi520_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end wildcard

    public static class abbrevReverseStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start abbrevReverseStep
    // etc/XQFT.g:651:21: abbrevReverseStep : DOTDOTSi ;
    public final abbrevReverseStep_return abbrevReverseStep() throws RecognitionException {
        abbrevReverseStep_return retval = new abbrevReverseStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOTDOTSi521=null;

        XQFTTree DOTDOTSi521_tree=null;

        try {
            // etc/XQFT.g:651:39: ( DOTDOTSi )
            // etc/XQFT.g:651:41: DOTDOTSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOTDOTSi521=(Token)input.LT(1);
            match(input,DOTDOTSi,FOLLOW_DOTDOTSi_in_abbrevReverseStep6481); if (failed) return retval;
            if ( backtracking==0 ) {
            DOTDOTSi521_tree = (XQFTTree)adaptor.create(DOTDOTSi521);
            adaptor.addChild(root_0, DOTDOTSi521_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end abbrevReverseStep

    public static class forwardStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forwardStep
    // etc/XQFT.g:653:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );
    public final forwardStep_return forwardStep() throws RecognitionException {
        forwardStep_return retval = new forwardStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        forwardAxis_return forwardAxis522 = null;

        nodeTest_return nodeTest523 = null;

        abbrevForwardStep_return abbrevForwardStep524 = null;



        try {
            // etc/XQFT.g:653:29: ( forwardAxis nodeTest | abbrevForwardStep )
            int alt125=2;
            switch ( input.LA(1) ) {
            case ATTRIBUTE:
                {
                int LA125_1 = input.LA(2);

                if ( (LA125_1==EOF||LA125_1==SEMICOLONSi||(LA125_1>=EQSi && LA125_1<=COMMASi)||LA125_1==DEFAULT||(LA125_1>=COLLATION && LA125_1<=EMPTY)||(LA125_1>=LPARSi && LA125_1<=RPARSi)||LA125_1==RBRACSi||LA125_1==STARSi||(LA125_1>=PLUSSi && LA125_1<=FOR)||(LA125_1>=LET && LA125_1<=WHERE)||(LA125_1>=STABLE && LA125_1<=DESCENDING)||LA125_1==SATISFIES||LA125_1==CASE||(LA125_1>=ELSE && LA125_1<=INSTANCE)||(LA125_1>=TREAT && LA125_1<=WITHOUT)||(LA125_1>=EQ && LA125_1<=NODEAFTERSi)||LA125_1==WORDS||LA125_1==TIMES||(LA125_1>=SENTENCES && LA125_1<=PARAGRAPHS)||LA125_1==LEVELS||(LA125_1>=SLASHSi && LA125_1<=DBLSLASHSi)||LA125_1==COLONSi||(LA125_1>=LBRACKSi && LA125_1<=RBRACKSi)) ) {
                    alt125=2;
                }
                else if ( (LA125_1==DBLCOLONSi) ) {
                    alt125=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("653:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 1, input);

                    throw nvae;
                }
                }
                break;
            case XQUERY:
            case VERSION:
            case ENCODING:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case DEFAULT:
            case ELEMENT:
            case FUNCTION:
            case COLLATION:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case BOUNDARYSPACE:
            case PRESERVE:
            case STRIP:
            case BASE_URI:
            case CONSTRUCTION:
            case ORDERING:
            case ORDERED:
            case UNORDERED:
            case COPY_NAMESPACES:
            case NOPRESERVE:
            case INHERIT:
            case NOINHERIT:
            case IMPORT:
            case SCHEMA:
            case AT:
            case VARIABLE:
            case EXTERNAL:
            case QName:
            case AS:
            case OPTION:
            case FTOPTION:
            case EMPTY_SEQUENCE:
            case ITEM:
            case DOCUMENT_NODE:
            case STARSi:
            case SCHEMA_ELEMENT:
            case SCHEMA_ATTRIBUTE:
            case PROCESSING_INSTRUCTION:
            case COMMENT:
            case TEXT:
            case NODE:
            case RETURN:
            case FOR:
            case IN:
            case SCORE:
            case LET:
            case WHERE:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case SOME:
            case EVERY:
            case SATISFIES:
            case TYPESWITCH:
            case CASE:
            case IF:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case FTCONTAINS:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case WITHOUT:
            case CONTENT:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case IS:
            case WEIGHT:
            case FTOR:
            case FTAND:
            case NOT:
            case FTNOT:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case WINDOW:
            case SENTENCES:
            case PARAGRAPHS:
            case DISTANCE:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case START:
            case END:
            case ENTIRE:
            case WITH:
            case WILDCARDS:
            case STEMMING:
            case THESAURUS:
            case STOP:
            case LANGUAGE:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case RELATIONSHIP:
            case LEVELS:
            case VALIDATE:
            case LAX:
            case STRICT:
            case PARENT:
            case ANCESTOR:
            case PRECEDING_SIBLING:
            case PRECEDING:
            case ANCESTOR_OR_SELF:
            case ATSi:
            case DOCUMENT:
            case NCName:
                {
                alt125=2;
                }
                break;
            case CHILD:
                {
                int LA125_5 = input.LA(2);

                if ( (LA125_5==DBLCOLONSi) ) {
                    alt125=1;
                }
                else if ( (LA125_5==EOF||LA125_5==SEMICOLONSi||(LA125_5>=EQSi && LA125_5<=COMMASi)||LA125_5==DEFAULT||(LA125_5>=COLLATION && LA125_5<=EMPTY)||LA125_5==RPARSi||LA125_5==RBRACSi||LA125_5==STARSi||(LA125_5>=PLUSSi && LA125_5<=FOR)||(LA125_5>=LET && LA125_5<=WHERE)||(LA125_5>=STABLE && LA125_5<=DESCENDING)||LA125_5==SATISFIES||LA125_5==CASE||(LA125_5>=ELSE && LA125_5<=INSTANCE)||(LA125_5>=TREAT && LA125_5<=WITHOUT)||(LA125_5>=EQ && LA125_5<=NODEAFTERSi)||LA125_5==WORDS||LA125_5==TIMES||(LA125_5>=SENTENCES && LA125_5<=PARAGRAPHS)||LA125_5==LEVELS||(LA125_5>=SLASHSi && LA125_5<=DBLSLASHSi)||LA125_5==COLONSi||(LA125_5>=LBRACKSi && LA125_5<=RBRACKSi)) ) {
                    alt125=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("653:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 5, input);

                    throw nvae;
                }
                }
                break;
            case DESCENDANT:
                {
                int LA125_28 = input.LA(2);

                if ( (LA125_28==DBLCOLONSi) ) {
                    alt125=1;
                }
                else if ( (LA125_28==EOF||LA125_28==SEMICOLONSi||(LA125_28>=EQSi && LA125_28<=COMMASi)||LA125_28==DEFAULT||(LA125_28>=COLLATION && LA125_28<=EMPTY)||LA125_28==RPARSi||LA125_28==RBRACSi||LA125_28==STARSi||(LA125_28>=PLUSSi && LA125_28<=FOR)||(LA125_28>=LET && LA125_28<=WHERE)||(LA125_28>=STABLE && LA125_28<=DESCENDING)||LA125_28==SATISFIES||LA125_28==CASE||(LA125_28>=ELSE && LA125_28<=INSTANCE)||(LA125_28>=TREAT && LA125_28<=WITHOUT)||(LA125_28>=EQ && LA125_28<=NODEAFTERSi)||LA125_28==WORDS||LA125_28==TIMES||(LA125_28>=SENTENCES && LA125_28<=PARAGRAPHS)||LA125_28==LEVELS||(LA125_28>=SLASHSi && LA125_28<=DBLSLASHSi)||LA125_28==COLONSi||(LA125_28>=LBRACKSi && LA125_28<=RBRACKSi)) ) {
                    alt125=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("653:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 28, input);

                    throw nvae;
                }
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                int LA125_35 = input.LA(2);

                if ( (LA125_35==DBLCOLONSi) ) {
                    alt125=1;
                }
                else if ( (LA125_35==EOF||LA125_35==SEMICOLONSi||(LA125_35>=EQSi && LA125_35<=COMMASi)||LA125_35==DEFAULT||(LA125_35>=COLLATION && LA125_35<=EMPTY)||LA125_35==RPARSi||LA125_35==RBRACSi||LA125_35==STARSi||(LA125_35>=PLUSSi && LA125_35<=FOR)||(LA125_35>=LET && LA125_35<=WHERE)||(LA125_35>=STABLE && LA125_35<=DESCENDING)||LA125_35==SATISFIES||LA125_35==CASE||(LA125_35>=ELSE && LA125_35<=INSTANCE)||(LA125_35>=TREAT && LA125_35<=WITHOUT)||(LA125_35>=EQ && LA125_35<=NODEAFTERSi)||LA125_35==WORDS||LA125_35==TIMES||(LA125_35>=SENTENCES && LA125_35<=PARAGRAPHS)||LA125_35==LEVELS||(LA125_35>=SLASHSi && LA125_35<=DBLSLASHSi)||LA125_35==COLONSi||(LA125_35>=LBRACKSi && LA125_35<=RBRACKSi)) ) {
                    alt125=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("653:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 35, input);

                    throw nvae;
                }
                }
                break;
            case FOLLOWING:
                {
                int LA125_36 = input.LA(2);

                if ( (LA125_36==DBLCOLONSi) ) {
                    alt125=1;
                }
                else if ( (LA125_36==EOF||LA125_36==SEMICOLONSi||(LA125_36>=EQSi && LA125_36<=COMMASi)||LA125_36==DEFAULT||(LA125_36>=COLLATION && LA125_36<=EMPTY)||LA125_36==RPARSi||LA125_36==RBRACSi||LA125_36==STARSi||(LA125_36>=PLUSSi && LA125_36<=FOR)||(LA125_36>=LET && LA125_36<=WHERE)||(LA125_36>=STABLE && LA125_36<=DESCENDING)||LA125_36==SATISFIES||LA125_36==CASE||(LA125_36>=ELSE && LA125_36<=INSTANCE)||(LA125_36>=TREAT && LA125_36<=WITHOUT)||(LA125_36>=EQ && LA125_36<=NODEAFTERSi)||LA125_36==WORDS||LA125_36==TIMES||(LA125_36>=SENTENCES && LA125_36<=PARAGRAPHS)||LA125_36==LEVELS||(LA125_36>=SLASHSi && LA125_36<=DBLSLASHSi)||LA125_36==COLONSi||(LA125_36>=LBRACKSi && LA125_36<=RBRACKSi)) ) {
                    alt125=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("653:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 36, input);

                    throw nvae;
                }
                }
                break;
            case FOLLOWING_SIBLING:
                {
                int LA125_54 = input.LA(2);

                if ( (LA125_54==DBLCOLONSi) ) {
                    alt125=1;
                }
                else if ( (LA125_54==EOF||LA125_54==SEMICOLONSi||(LA125_54>=EQSi && LA125_54<=COMMASi)||LA125_54==DEFAULT||(LA125_54>=COLLATION && LA125_54<=EMPTY)||LA125_54==RPARSi||LA125_54==RBRACSi||LA125_54==STARSi||(LA125_54>=PLUSSi && LA125_54<=FOR)||(LA125_54>=LET && LA125_54<=WHERE)||(LA125_54>=STABLE && LA125_54<=DESCENDING)||LA125_54==SATISFIES||LA125_54==CASE||(LA125_54>=ELSE && LA125_54<=INSTANCE)||(LA125_54>=TREAT && LA125_54<=WITHOUT)||(LA125_54>=EQ && LA125_54<=NODEAFTERSi)||LA125_54==WORDS||LA125_54==TIMES||(LA125_54>=SENTENCES && LA125_54<=PARAGRAPHS)||LA125_54==LEVELS||(LA125_54>=SLASHSi && LA125_54<=DBLSLASHSi)||LA125_54==COLONSi||(LA125_54>=LBRACKSi && LA125_54<=RBRACKSi)) ) {
                    alt125=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("653:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 54, input);

                    throw nvae;
                }
                }
                break;
            case SELF:
                {
                int LA125_55 = input.LA(2);

                if ( (LA125_55==DBLCOLONSi) ) {
                    alt125=1;
                }
                else if ( (LA125_55==EOF||LA125_55==SEMICOLONSi||(LA125_55>=EQSi && LA125_55<=COMMASi)||LA125_55==DEFAULT||(LA125_55>=COLLATION && LA125_55<=EMPTY)||LA125_55==RPARSi||LA125_55==RBRACSi||LA125_55==STARSi||(LA125_55>=PLUSSi && LA125_55<=FOR)||(LA125_55>=LET && LA125_55<=WHERE)||(LA125_55>=STABLE && LA125_55<=DESCENDING)||LA125_55==SATISFIES||LA125_55==CASE||(LA125_55>=ELSE && LA125_55<=INSTANCE)||(LA125_55>=TREAT && LA125_55<=WITHOUT)||(LA125_55>=EQ && LA125_55<=NODEAFTERSi)||LA125_55==WORDS||LA125_55==TIMES||(LA125_55>=SENTENCES && LA125_55<=PARAGRAPHS)||LA125_55==LEVELS||(LA125_55>=SLASHSi && LA125_55<=DBLSLASHSi)||LA125_55==COLONSi||(LA125_55>=LBRACKSi && LA125_55<=RBRACKSi)) ) {
                    alt125=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("653:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 55, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("653:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // etc/XQFT.g:653:31: forwardAxis nodeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_forwardAxis_in_forwardStep6525);
                    forwardAxis522=forwardAxis();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(forwardAxis522.getTree(), root_0);
                    pushFollow(FOLLOW_nodeTest_in_forwardStep6528);
                    nodeTest523=nodeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest523.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:653:55: abbrevForwardStep
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_abbrevForwardStep_in_forwardStep6532);
                    abbrevForwardStep524=abbrevForwardStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, abbrevForwardStep524.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forwardStep

    public static class forwardAxis_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forwardAxis
    // etc/XQFT.g:654:21: forwardAxis : ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi ;
    public final forwardAxis_return forwardAxis() throws RecognitionException {
        forwardAxis_return retval = new forwardAxis_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set525=null;
        Token DBLCOLONSi526=null;

        XQFTTree set525_tree=null;
        XQFTTree DBLCOLONSi526_tree=null;

        try {
            // etc/XQFT.g:654:33: ( ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi )
            // etc/XQFT.g:655:25: ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            set525=(Token)input.LT(1);
            if ( input.LA(1)==ATTRIBUTE||(input.LA(1)>=CHILD && input.LA(1)<=FOLLOWING) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set525));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_forwardAxis6588);    throw mse;
            }

            DBLCOLONSi526=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_forwardAxis6695); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forwardAxis

    public static class abbrevForwardStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start abbrevForwardStep
    // etc/XQFT.g:660:21: abbrevForwardStep : ( ATSi )? nodeTest ;
    public final abbrevForwardStep_return abbrevForwardStep() throws RecognitionException {
        abbrevForwardStep_return retval = new abbrevForwardStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ATSi527=null;
        nodeTest_return nodeTest528 = null;


        XQFTTree ATSi527_tree=null;

        try {
            // etc/XQFT.g:660:39: ( ( ATSi )? nodeTest )
            // etc/XQFT.g:660:41: ( ATSi )? nodeTest
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:660:45: ( ATSi )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ATSi) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // etc/XQFT.g:660:45: ATSi
                    {
                    ATSi527=(Token)input.LT(1);
                    match(input,ATSi,FOLLOW_ATSi_in_abbrevForwardStep6744); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ATSi527_tree = (XQFTTree)adaptor.create(ATSi527);
                    root_0 = (XQFTTree)adaptor.becomeRoot(ATSi527_tree, root_0);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_nodeTest_in_abbrevForwardStep6748);
            nodeTest528=nodeTest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest528.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end abbrevForwardStep

    public static class predicateList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start predicateList
    // etc/XQFT.g:662:17: predicateList : (p= predicate )* ;
    public final predicateList_return predicateList() throws RecognitionException {
        predicateList_return retval = new predicateList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        predicate_return p = null;



        try {
            // etc/XQFT.g:662:31: ( (p= predicate )* )
            // etc/XQFT.g:662:33: (p= predicate )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:662:34: (p= predicate )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==LBRACKSi) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // etc/XQFT.g:662:34: p= predicate
            	    {
            	    pushFollow(FOLLOW_predicate_in_predicateList6810);
            	    p=predicate();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, p.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end predicateList

    public static class predicate_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start predicate
    // etc/XQFT.g:663:21: predicate : LBRACKSi expr RBRACKSi -> ^( AST_PREDICATE expr ) ;
    public final predicate_return predicate() throws RecognitionException {
        predicate_return retval = new predicate_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACKSi529=null;
        Token RBRACKSi531=null;
        expr_return expr530 = null;


        XQFTTree LBRACKSi529_tree=null;
        XQFTTree RBRACKSi531_tree=null;
        RewriteRuleTokenStream stream_LBRACKSi=new RewriteRuleTokenStream(adaptor,"token LBRACKSi");
        RewriteRuleTokenStream stream_RBRACKSi=new RewriteRuleTokenStream(adaptor,"token RBRACKSi");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            // etc/XQFT.g:663:31: ( LBRACKSi expr RBRACKSi -> ^( AST_PREDICATE expr ) )
            // etc/XQFT.g:663:33: LBRACKSi expr RBRACKSi
            {
            LBRACKSi529=(Token)input.LT(1);
            match(input,LBRACKSi,FOLLOW_LBRACKSi_in_predicate6838); if (failed) return retval;
            if ( backtracking==0 ) stream_LBRACKSi.add(LBRACKSi529);

            pushFollow(FOLLOW_expr_in_predicate6840);
            expr530=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr530.getTree());
            RBRACKSi531=(Token)input.LT(1);
            match(input,RBRACKSi,FOLLOW_RBRACKSi_in_predicate6842); if (failed) return retval;
            if ( backtracking==0 ) stream_RBRACKSi.add(RBRACKSi531);


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 664:37: -> ^( AST_PREDICATE expr )
            {
                // etc/XQFT.g:664:40: ^( AST_PREDICATE expr )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_PREDICATE, "AST_PREDICATE"), root_1);

                adaptor.addChild(root_1, stream_expr.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end predicate

    public static class extensionExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start extensionExpr
    // etc/XQFT.g:666:5: extensionExpr : ( pragma )+ LBRACESi ( expr )? RBRACSi ;
    public final extensionExpr_return extensionExpr() throws RecognitionException {
        extensionExpr_return retval = new extensionExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi533=null;
        Token RBRACSi535=null;
        pragma_return pragma532 = null;

        expr_return expr534 = null;


        XQFTTree LBRACESi533_tree=null;
        XQFTTree RBRACSi535_tree=null;

        try {
            // etc/XQFT.g:666:19: ( ( pragma )+ LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:666:21: ( pragma )+ LBRACESi ( expr )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:666:21: ( pragma )+
            int cnt128=0;
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==LPRAGSi) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // etc/XQFT.g:666:21: pragma
            	    {
            	    pushFollow(FOLLOW_pragma_in_extensionExpr6914);
            	    pragma532=pragma();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, pragma532.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);

            LBRACESi533=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_extensionExpr6917); if (failed) return retval;
            // etc/XQFT.g:666:39: ( expr )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=XQUERY && LA129_0<=ENCODING)||(LA129_0>=MODULE && LA129_0<=NAMESPACE)||(LA129_0>=DECLARE && LA129_0<=DOLLARSi)||(LA129_0>=EXTERNAL && LA129_0<=LPARSi)||(LA129_0>=OPTION && LA129_0<=DOCUMENT_NODE)||(LA129_0>=STARSi && LA129_0<=UNION)||(LA129_0>=INTERSECT && LA129_0<=GE)||LA129_0==LTSi||LA129_0==IS||(LA129_0>=WEIGHT && LA129_0<=LPRAGSi)||(LA129_0>=WINDOW && LA129_0<=ANCESTOR_OR_SELF)||(LA129_0>=DOTDOTSi && LA129_0<=ATSi)||LA129_0==LCOMMENTSi||LA129_0==LPISi||(LA129_0>=DOCUMENT && LA129_0<=NCName)) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // etc/XQFT.g:666:39: expr
                    {
                    pushFollow(FOLLOW_expr_in_extensionExpr6920);
                    expr534=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr534.getTree());

                    }
                    break;

            }

            RBRACSi535=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_extensionExpr6923); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end extensionExpr

    public static class filterExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start filterExpr
    // etc/XQFT.g:670:1: filterExpr : primaryExpr predicateList ;
    public final filterExpr_return filterExpr() throws RecognitionException {
        filterExpr_return retval = new filterExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        primaryExpr_return primaryExpr536 = null;

        predicateList_return predicateList537 = null;



        try {
            // etc/XQFT.g:670:12: ( primaryExpr predicateList )
            // etc/XQFT.g:670:14: primaryExpr predicateList
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_primaryExpr_in_filterExpr6935);
            primaryExpr536=primaryExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, primaryExpr536.getTree());
            pushFollow(FOLLOW_predicateList_in_filterExpr6937);
            predicateList537=predicateList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, predicateList537.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end filterExpr

    public static class primaryExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primaryExpr
    // etc/XQFT.g:671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );
    public final primaryExpr_return primaryExpr() throws RecognitionException {
        primaryExpr_return retval = new primaryExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        literal_return literal538 = null;

        varRef_return varRef539 = null;

        parenthesizedExpr_return parenthesizedExpr540 = null;

        functionCall_return functionCall541 = null;

        orderedExpr_return orderedExpr542 = null;

        unorderedExpr_return unorderedExpr543 = null;

        constructor_return constructor544 = null;



        try {
            // etc/XQFT.g:671:17: ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor )
            int alt130=7;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
                {
                alt130=1;
                }
                break;
            case DOLLARSi:
                {
                alt130=2;
                }
                break;
            case LPARSi:
                {
                alt130=3;
                }
                break;
            case XQUERY:
            case VERSION:
            case ENCODING:
            case MODULE:
            case NAMESPACE:
            case DECLARE:
            case DEFAULT:
            case FUNCTION:
            case COLLATION:
            case ORDER:
            case EMPTY:
            case GREATEST:
            case LEAST:
            case BOUNDARYSPACE:
            case PRESERVE:
            case STRIP:
            case BASE_URI:
            case CONSTRUCTION:
            case ORDERING:
            case COPY_NAMESPACES:
            case NOPRESERVE:
            case INHERIT:
            case NOINHERIT:
            case IMPORT:
            case SCHEMA:
            case AT:
            case VARIABLE:
            case EXTERNAL:
            case QName:
            case AS:
            case OPTION:
            case FTOPTION:
            case EMPTY_SEQUENCE:
            case ITEM:
            case DOCUMENT_NODE:
            case SCHEMA_ELEMENT:
            case SCHEMA_ATTRIBUTE:
            case NODE:
            case RETURN:
            case FOR:
            case IN:
            case SCORE:
            case LET:
            case WHERE:
            case BY:
            case STABLE:
            case ASCENDING:
            case DESCENDING:
            case SOME:
            case EVERY:
            case SATISFIES:
            case TYPESWITCH:
            case CASE:
            case IF:
            case THEN:
            case ELSE:
            case OR:
            case AND:
            case FTCONTAINS:
            case TO:
            case DIV:
            case IDIV:
            case MOD:
            case UNION:
            case INTERSECT:
            case EXCEPT:
            case INSTANCE:
            case OF:
            case TREAT:
            case CASTABLE:
            case CAST:
            case WITHOUT:
            case CONTENT:
            case EQ:
            case NE:
            case LT:
            case LE:
            case GT:
            case GE:
            case IS:
            case WEIGHT:
            case FTOR:
            case FTAND:
            case NOT:
            case FTNOT:
            case ANY:
            case WORD:
            case ALL:
            case WORDS:
            case PHRASE:
            case OCCURS:
            case TIMES:
            case EXACTLY:
            case MOST:
            case FROM:
            case WINDOW:
            case SENTENCES:
            case PARAGRAPHS:
            case DISTANCE:
            case SAME:
            case DIFFERENT:
            case SENTENCE:
            case PARAGRAPH:
            case START:
            case END:
            case ENTIRE:
            case WITH:
            case WILDCARDS:
            case STEMMING:
            case THESAURUS:
            case STOP:
            case LANGUAGE:
            case INSENSITIVE:
            case SENSITIVE:
            case LOWERCASE:
            case UPPERCASE:
            case DIACRITICS:
            case RELATIONSHIP:
            case LEVELS:
            case VALIDATE:
            case LAX:
            case STRICT:
            case PARENT:
            case ANCESTOR:
            case PRECEDING_SIBLING:
            case PRECEDING:
            case ANCESTOR_OR_SELF:
            case CHILD:
            case DESCENDANT:
            case SELF:
            case DESCENDANT_OR_SELF:
            case FOLLOWING_SIBLING:
            case FOLLOWING:
            case NCName:
                {
                alt130=4;
                }
                break;
            case ATTRIBUTE:
                {
                int LA130_15 = input.LA(2);

                if ( (LA130_15==LPARSi) ) {
                    alt130=4;
                }
                else if ( ((LA130_15>=XQUERY && LA130_15<=VERSION)||LA130_15==ENCODING||(LA130_15>=MODULE && LA130_15<=NAMESPACE)||(LA130_15>=DECLARE && LA130_15<=VARIABLE)||(LA130_15>=EXTERNAL && LA130_15<=AS)||LA130_15==LBRACESi||(LA130_15>=OPTION && LA130_15<=DOCUMENT_NODE)||(LA130_15>=SCHEMA_ELEMENT && LA130_15<=NODE)||(LA130_15>=RETURN && LA130_15<=TO)||(LA130_15>=DIV && LA130_15<=UNION)||(LA130_15>=INTERSECT && LA130_15<=GE)||LA130_15==IS||(LA130_15>=WEIGHT && LA130_15<=FTNOT)||(LA130_15>=ANY && LA130_15<=FROM)||(LA130_15>=WINDOW && LA130_15<=STRICT)||(LA130_15>=PARENT && LA130_15<=ANCESTOR_OR_SELF)||(LA130_15>=CHILD && LA130_15<=FOLLOWING)||(LA130_15>=DOCUMENT && LA130_15<=NCName)) ) {
                    alt130=7;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 15, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA130_24 = input.LA(2);

                if ( (LA130_24==LBRACESi) ) {
                    alt130=7;
                }
                else if ( (LA130_24==LPARSi) ) {
                    alt130=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 24, input);

                    throw nvae;
                }
                }
                break;
            case DOCUMENT:
                {
                int LA130_37 = input.LA(2);

                if ( (LA130_37==LBRACESi) ) {
                    alt130=7;
                }
                else if ( (LA130_37==LPARSi) ) {
                    alt130=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 37, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA130_39 = input.LA(2);

                if ( ((LA130_39>=XQUERY && LA130_39<=VERSION)||LA130_39==ENCODING||(LA130_39>=MODULE && LA130_39<=NAMESPACE)||(LA130_39>=DECLARE && LA130_39<=VARIABLE)||(LA130_39>=EXTERNAL && LA130_39<=AS)||LA130_39==LBRACESi||(LA130_39>=OPTION && LA130_39<=DOCUMENT_NODE)||(LA130_39>=SCHEMA_ELEMENT && LA130_39<=NODE)||(LA130_39>=RETURN && LA130_39<=TO)||(LA130_39>=DIV && LA130_39<=UNION)||(LA130_39>=INTERSECT && LA130_39<=GE)||LA130_39==IS||(LA130_39>=WEIGHT && LA130_39<=FTNOT)||(LA130_39>=ANY && LA130_39<=FROM)||(LA130_39>=WINDOW && LA130_39<=STRICT)||(LA130_39>=PARENT && LA130_39<=ANCESTOR_OR_SELF)||(LA130_39>=CHILD && LA130_39<=FOLLOWING)||(LA130_39>=DOCUMENT && LA130_39<=NCName)) ) {
                    alt130=7;
                }
                else if ( (LA130_39==LPARSi) ) {
                    alt130=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 39, input);

                    throw nvae;
                }
                }
                break;
            case ORDERED:
                {
                int LA130_96 = input.LA(2);

                if ( (LA130_96==LBRACESi) ) {
                    alt130=5;
                }
                else if ( (LA130_96==LPARSi) ) {
                    alt130=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 96, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA130_105 = input.LA(2);

                if ( (LA130_105==LPARSi) ) {
                    alt130=4;
                }
                else if ( ((LA130_105>=XQUERY && LA130_105<=VERSION)||LA130_105==ENCODING||(LA130_105>=MODULE && LA130_105<=NAMESPACE)||(LA130_105>=DECLARE && LA130_105<=VARIABLE)||LA130_105==EXTERNAL||LA130_105==AS||LA130_105==LBRACESi||(LA130_105>=OPTION && LA130_105<=DOCUMENT_NODE)||(LA130_105>=SCHEMA_ELEMENT && LA130_105<=NODE)||(LA130_105>=RETURN && LA130_105<=TO)||(LA130_105>=DIV && LA130_105<=UNION)||(LA130_105>=INTERSECT && LA130_105<=GE)||LA130_105==IS||(LA130_105>=WEIGHT && LA130_105<=FTNOT)||(LA130_105>=ANY && LA130_105<=FROM)||(LA130_105>=WINDOW && LA130_105<=STRICT)||(LA130_105>=PARENT && LA130_105<=ANCESTOR_OR_SELF)||(LA130_105>=CHILD && LA130_105<=FOLLOWING)||(LA130_105>=DOCUMENT && LA130_105<=NCName)) ) {
                    alt130=7;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 105, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA130_125 = input.LA(2);

                if ( (LA130_125==LBRACESi) ) {
                    alt130=7;
                }
                else if ( (LA130_125==LPARSi) ) {
                    alt130=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 125, input);

                    throw nvae;
                }
                }
                break;
            case UNORDERED:
                {
                int LA130_133 = input.LA(2);

                if ( (LA130_133==LBRACESi) ) {
                    alt130=6;
                }
                else if ( (LA130_133==LPARSi) ) {
                    alt130=4;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 133, input);

                    throw nvae;
                }
                }
                break;
            case LTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt130=7;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("671:5: primaryExpr : ( literal | varRef | parenthesizedExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // etc/XQFT.g:672:9: literal
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpr6957);
                    literal538=literal();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal538.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:673:11: varRef
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_varRef_in_primaryExpr6970);
                    varRef539=varRef();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, varRef539.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:674:11: parenthesizedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpr_in_primaryExpr6983);
                    parenthesizedExpr540=parenthesizedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpr540.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:675:11: functionCall
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_functionCall_in_primaryExpr6996);
                    functionCall541=functionCall();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, functionCall541.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:676:11: orderedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_orderedExpr_in_primaryExpr7009);
                    orderedExpr542=orderedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orderedExpr542.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:677:11: unorderedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_unorderedExpr_in_primaryExpr7022);
                    unorderedExpr543=unorderedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, unorderedExpr543.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:678:11: constructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_constructor_in_primaryExpr7035);
                    constructor544=constructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, constructor544.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end primaryExpr

    public static class varRef_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varRef
    // etc/XQFT.g:680:9: varRef : DOLLARSi varName ;
    public final varRef_return varRef() throws RecognitionException {
        varRef_return retval = new varRef_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi545=null;
        varName_return varName546 = null;


        XQFTTree DOLLARSi545_tree=null;

        try {
            // etc/XQFT.g:680:16: ( DOLLARSi varName )
            // etc/XQFT.g:680:18: DOLLARSi varName
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOLLARSi545=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varRef7055); if (failed) return retval;
            pushFollow(FOLLOW_varName_in_varRef7058);
            varName546=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName546.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varRef

    public static class parenthesizedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start parenthesizedExpr
    // etc/XQFT.g:681:9: parenthesizedExpr : LPARSi ( expr )? RPARSi ;
    public final parenthesizedExpr_return parenthesizedExpr() throws RecognitionException {
        parenthesizedExpr_return retval = new parenthesizedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPARSi547=null;
        Token RPARSi549=null;
        expr_return expr548 = null;


        XQFTTree LPARSi547_tree=null;
        XQFTTree RPARSi549_tree=null;

        try {
            // etc/XQFT.g:681:27: ( LPARSi ( expr )? RPARSi )
            // etc/XQFT.g:681:29: LPARSi ( expr )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LPARSi547=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_parenthesizedExpr7073); if (failed) return retval;
            // etc/XQFT.g:681:37: ( expr )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=XQUERY && LA131_0<=ENCODING)||(LA131_0>=MODULE && LA131_0<=NAMESPACE)||(LA131_0>=DECLARE && LA131_0<=DOLLARSi)||(LA131_0>=EXTERNAL && LA131_0<=LPARSi)||(LA131_0>=OPTION && LA131_0<=DOCUMENT_NODE)||(LA131_0>=STARSi && LA131_0<=UNION)||(LA131_0>=INTERSECT && LA131_0<=GE)||LA131_0==LTSi||LA131_0==IS||(LA131_0>=WEIGHT && LA131_0<=LPRAGSi)||(LA131_0>=WINDOW && LA131_0<=ANCESTOR_OR_SELF)||(LA131_0>=DOTDOTSi && LA131_0<=ATSi)||LA131_0==LCOMMENTSi||LA131_0==LPISi||(LA131_0>=DOCUMENT && LA131_0<=NCName)) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // etc/XQFT.g:681:37: expr
                    {
                    pushFollow(FOLLOW_expr_in_parenthesizedExpr7076);
                    expr548=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr548.getTree());

                    }
                    break;

            }

            RPARSi549=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_parenthesizedExpr7079); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end parenthesizedExpr

    public static class functionCall_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionCall
    // etc/XQFT.g:682:9: functionCall : qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi -> ^( AST_FUNCTIONCALL qName ( exprSingle )* ) ;
    public final functionCall_return functionCall() throws RecognitionException {
        functionCall_return retval = new functionCall_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPARSi551=null;
        Token COMMASi553=null;
        Token RPARSi555=null;
        qName_return qName550 = null;

        exprSingle_return exprSingle552 = null;

        exprSingle_return exprSingle554 = null;


        XQFTTree LPARSi551_tree=null;
        XQFTTree COMMASi553_tree=null;
        XQFTTree RPARSi555_tree=null;
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:682:22: ( qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi -> ^( AST_FUNCTIONCALL qName ( exprSingle )* ) )
            // etc/XQFT.g:683:13: qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi
            {
            pushFollow(FOLLOW_qName_in_functionCall7108);
            qName550=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qName.add(qName550.getTree());
            LPARSi551=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_functionCall7110); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi551);

            // etc/XQFT.g:684:13: ( exprSingle ( COMMASi exprSingle )* )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( ((LA133_0>=XQUERY && LA133_0<=ENCODING)||(LA133_0>=MODULE && LA133_0<=NAMESPACE)||(LA133_0>=DECLARE && LA133_0<=DOLLARSi)||(LA133_0>=EXTERNAL && LA133_0<=LPARSi)||(LA133_0>=OPTION && LA133_0<=DOCUMENT_NODE)||(LA133_0>=STARSi && LA133_0<=UNION)||(LA133_0>=INTERSECT && LA133_0<=GE)||LA133_0==LTSi||LA133_0==IS||(LA133_0>=WEIGHT && LA133_0<=LPRAGSi)||(LA133_0>=WINDOW && LA133_0<=ANCESTOR_OR_SELF)||(LA133_0>=DOTDOTSi && LA133_0<=ATSi)||LA133_0==LCOMMENTSi||LA133_0==LPISi||(LA133_0>=DOCUMENT && LA133_0<=NCName)) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // etc/XQFT.g:684:14: exprSingle ( COMMASi exprSingle )*
                    {
                    pushFollow(FOLLOW_exprSingle_in_functionCall7127);
                    exprSingle552=exprSingle();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_exprSingle.add(exprSingle552.getTree());
                    // etc/XQFT.g:684:25: ( COMMASi exprSingle )*
                    loop132:
                    do {
                        int alt132=2;
                        int LA132_0 = input.LA(1);

                        if ( (LA132_0==COMMASi) ) {
                            alt132=1;
                        }


                        switch (alt132) {
                    	case 1 :
                    	    // etc/XQFT.g:684:26: COMMASi exprSingle
                    	    {
                    	    COMMASi553=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_functionCall7130); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi553);

                    	    pushFollow(FOLLOW_exprSingle_in_functionCall7132);
                    	    exprSingle554=exprSingle();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_exprSingle.add(exprSingle554.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);


                    }
                    break;

            }

            RPARSi555=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_functionCall7151); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi555);


            // AST REWRITE
            // elements: exprSingle, qName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 686:17: -> ^( AST_FUNCTIONCALL qName ( exprSingle )* )
            {
                // etc/XQFT.g:686:20: ^( AST_FUNCTIONCALL qName ( exprSingle )* )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FUNCTIONCALL, "AST_FUNCTIONCALL"), root_1);

                adaptor.addChild(root_1, stream_qName.next());
                // etc/XQFT.g:686:45: ( exprSingle )*
                while ( stream_exprSingle.hasNext() ) {
                    adaptor.addChild(root_1, stream_exprSingle.next());

                }
                stream_exprSingle.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionCall

    public static class orderedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderedExpr
    // etc/XQFT.g:688:9: orderedExpr : ORDERED LBRACESi expr RBRACSi ;
    public final orderedExpr_return orderedExpr() throws RecognitionException {
        orderedExpr_return retval = new orderedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDERED556=null;
        Token LBRACESi557=null;
        Token RBRACSi559=null;
        expr_return expr558 = null;


        XQFTTree ORDERED556_tree=null;
        XQFTTree LBRACESi557_tree=null;
        XQFTTree RBRACSi559_tree=null;

        try {
            // etc/XQFT.g:688:21: ( ORDERED LBRACESi expr RBRACSi )
            // etc/XQFT.g:688:23: ORDERED LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ORDERED556=(Token)input.LT(1);
            match(input,ORDERED,FOLLOW_ORDERED_in_orderedExpr7194); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERED556_tree = (XQFTTree)adaptor.create(ORDERED556);
            adaptor.addChild(root_0, ORDERED556_tree);
            }
            LBRACESi557=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_orderedExpr7196); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_orderedExpr7199);
            expr558=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr558.getTree());
            RBRACSi559=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_orderedExpr7201); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderedExpr

    public static class unorderedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unorderedExpr
    // etc/XQFT.g:689:9: unorderedExpr : UNORDERED LBRACESi expr RBRACSi ;
    public final unorderedExpr_return unorderedExpr() throws RecognitionException {
        unorderedExpr_return retval = new unorderedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token UNORDERED560=null;
        Token LBRACESi561=null;
        Token RBRACSi563=null;
        expr_return expr562 = null;


        XQFTTree UNORDERED560_tree=null;
        XQFTTree LBRACESi561_tree=null;
        XQFTTree RBRACSi563_tree=null;

        try {
            // etc/XQFT.g:689:23: ( UNORDERED LBRACESi expr RBRACSi )
            // etc/XQFT.g:689:25: UNORDERED LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            UNORDERED560=(Token)input.LT(1);
            match(input,UNORDERED,FOLLOW_UNORDERED_in_unorderedExpr7217); if (failed) return retval;
            if ( backtracking==0 ) {
            UNORDERED560_tree = (XQFTTree)adaptor.create(UNORDERED560);
            adaptor.addChild(root_0, UNORDERED560_tree);
            }
            LBRACESi561=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_unorderedExpr7219); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_unorderedExpr7222);
            expr562=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr562.getTree());
            RBRACSi563=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_unorderedExpr7224); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unorderedExpr

    public static class constructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constructor
    // etc/XQFT.g:690:9: constructor : ( directConstructor | computedConstructor );
    public final constructor_return constructor() throws RecognitionException {
        constructor_return retval = new constructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        directConstructor_return directConstructor564 = null;

        computedConstructor_return computedConstructor565 = null;



        try {
            // etc/XQFT.g:690:21: ( directConstructor | computedConstructor )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==LTSi||LA134_0==LCOMMENTSi||LA134_0==LPISi) ) {
                alt134=1;
            }
            else if ( (LA134_0==ELEMENT||LA134_0==ATTRIBUTE||(LA134_0>=PROCESSING_INSTRUCTION && LA134_0<=TEXT)||LA134_0==DOCUMENT) ) {
                alt134=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("690:9: constructor : ( directConstructor | computedConstructor );", 134, 0, input);

                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    // etc/XQFT.g:690:23: directConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_directConstructor_in_constructor7244);
                    directConstructor564=directConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, directConstructor564.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:690:43: computedConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_computedConstructor_in_constructor7248);
                    computedConstructor565=computedConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, computedConstructor565.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end constructor

    public static class directConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start directConstructor
    // etc/XQFT.g:691:13: directConstructor : ( dirElemConstructor | dirCommentConstructor | dirPIConstructor );
    public final directConstructor_return directConstructor() throws RecognitionException {
        directConstructor_return retval = new directConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        dirElemConstructor_return dirElemConstructor566 = null;

        dirCommentConstructor_return dirCommentConstructor567 = null;

        dirPIConstructor_return dirPIConstructor568 = null;



        try {
            // etc/XQFT.g:691:31: ( dirElemConstructor | dirCommentConstructor | dirPIConstructor )
            int alt135=3;
            switch ( input.LA(1) ) {
            case LTSi:
                {
                alt135=1;
                }
                break;
            case LCOMMENTSi:
                {
                alt135=2;
                }
                break;
            case LPISi:
                {
                alt135=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("691:13: directConstructor : ( dirElemConstructor | dirCommentConstructor | dirPIConstructor );", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // etc/XQFT.g:692:17: dirElemConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_dirElemConstructor_in_directConstructor7288);
                    dirElemConstructor566=dirElemConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirElemConstructor566.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:693:19: dirCommentConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_dirCommentConstructor_in_directConstructor7308);
                    dirCommentConstructor567=dirCommentConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirCommentConstructor567.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:694:19: dirPIConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_dirPIConstructor_in_directConstructor7328);
                    dirPIConstructor568=dirPIConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirPIConstructor568.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end directConstructor

    public static class dirElemConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirElemConstructor
    // etc/XQFT.g:697:17: dirElemConstructor : LTSi qn= qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi ) -> ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* ) ;
    public final dirElemConstructor_return dirElemConstructor() throws RecognitionException {
        dirElemConstructor_return retval = new dirElemConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LTSi569=null;
        Token RSELFTERMSi571=null;
        Token GTSi572=null;
        Token LENDTAGSi574=null;
        Token GTSi576=null;
        qName_return qn = null;

        dirAttributeList_return dirAttributeList570 = null;

        dirElemContent_return dirElemContent573 = null;

        qName_return qName575 = null;


        XQFTTree LTSi569_tree=null;
        XQFTTree RSELFTERMSi571_tree=null;
        XQFTTree GTSi572_tree=null;
        XQFTTree LENDTAGSi574_tree=null;
        XQFTTree GTSi576_tree=null;
        RewriteRuleTokenStream stream_LTSi=new RewriteRuleTokenStream(adaptor,"token LTSi");
        RewriteRuleTokenStream stream_LENDTAGSi=new RewriteRuleTokenStream(adaptor,"token LENDTAGSi");
        RewriteRuleTokenStream stream_RSELFTERMSi=new RewriteRuleTokenStream(adaptor,"token RSELFTERMSi");
        RewriteRuleTokenStream stream_GTSi=new RewriteRuleTokenStream(adaptor,"token GTSi");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_dirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule dirElemContent");
        RewriteRuleSubtreeStream stream_dirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule dirAttributeList");
        try {
            // etc/XQFT.g:697:36: ( LTSi qn= qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi ) -> ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* ) )
            // etc/XQFT.g:698:21: LTSi qn= qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )
            {
            LTSi569=(Token)input.LT(1);
            match(input,LTSi,FOLLOW_LTSi_in_dirElemConstructor7386); if (failed) return retval;
            if ( backtracking==0 ) stream_LTSi.add(LTSi569);

            if ( backtracking==0 ) {
              lexer.stack.pushState(lexer.state); lexer.state=State.IN_TAG;
            }
            pushFollow(FOLLOW_qName_in_dirElemConstructor7412);
            qn=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qName.add(qn.getTree());
            pushFollow(FOLLOW_dirAttributeList_in_dirElemConstructor7414);
            dirAttributeList570=dirAttributeList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_dirAttributeList.add(dirAttributeList570.getTree());
            // etc/XQFT.g:700:21: ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==RSELFTERMSi) ) {
                alt137=1;
            }
            else if ( (LA137_0==GTSi) ) {
                alt137=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("700:21: ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // etc/XQFT.g:700:22: RSELFTERMSi
                    {
                    RSELFTERMSi571=(Token)input.LT(1);
                    match(input,RSELFTERMSi,FOLLOW_RSELFTERMSi_in_dirElemConstructor7437); if (failed) return retval;
                    if ( backtracking==0 ) stream_RSELFTERMSi.add(RSELFTERMSi571);

                    if ( backtracking==0 ) {
                      lexer.state=lexer.stack.pop();
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:702:24: GTSi ( dirElemContent )* LENDTAGSi qName GTSi
                    {
                    GTSi572=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor7488); if (failed) return retval;
                    if ( backtracking==0 ) stream_GTSi.add(GTSi572);

                    if ( backtracking==0 ) {
                      lexer.state=State.IN_ELEMENT;
                    }
                    // etc/XQFT.g:705:25: ( dirElemContent )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==LBRACESi||LA136_0==LTSi||(LA136_0>=ElementContent && LA136_0<=LCDATASi)||LA136_0==LCOMMENTSi||LA136_0==LPISi) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // etc/XQFT.g:705:25: dirElemContent
                    	    {
                    	    pushFollow(FOLLOW_dirElemContent_in_dirElemConstructor7542);
                    	    dirElemContent573=dirElemContent();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_dirElemContent.add(dirElemContent573.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);

                    LENDTAGSi574=(Token)input.LT(1);
                    match(input,LENDTAGSi,FOLLOW_LENDTAGSi_in_dirElemConstructor7570); if (failed) return retval;
                    if ( backtracking==0 ) stream_LENDTAGSi.add(LENDTAGSi574);

                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }
                    pushFollow(FOLLOW_qName_in_dirElemConstructor7602);
                    qName575=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_qName.add(qName575.getTree());
                    GTSi576=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor7633); if (failed) return retval;
                    if ( backtracking==0 ) stream_GTSi.add(GTSi576);

                    if ( backtracking==0 ) {
                      lexer.state=lexer.stack.pop();
                    }

                    }
                    break;

            }


            // AST REWRITE
            // elements: dirAttributeList, dirElemContent, qn
            // token labels: 
            // rule labels: qn, retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"token qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 710:25: -> ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* )
            {
                // etc/XQFT.g:710:28: ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONSTRUCTOR, "AST_DIRELEMCONSTRUCTOR"), root_1);

                adaptor.addChild(root_1, stream_qn.next());
                adaptor.addChild(root_1, stream_dirAttributeList.next());
                // etc/XQFT.g:710:74: ( dirElemContent )*
                while ( stream_dirElemContent.hasNext() ) {
                    adaptor.addChild(root_1, stream_dirElemContent.next());

                }
                stream_dirElemContent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirElemConstructor

    public static class dirAttributeList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirAttributeList
    // etc/XQFT.g:712:21: dirAttributeList : ( qName EQSi dirAttributeValue )* ;
    public final dirAttributeList_return dirAttributeList() throws RecognitionException {
        dirAttributeList_return retval = new dirAttributeList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token EQSi578=null;
        qName_return qName577 = null;

        dirAttributeValue_return dirAttributeValue579 = null;


        XQFTTree EQSi578_tree=null;

        try {
            // etc/XQFT.g:712:38: ( ( qName EQSi dirAttributeValue )* )
            // etc/XQFT.g:712:40: ( qName EQSi dirAttributeValue )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:712:40: ( qName EQSi dirAttributeValue )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( ((LA138_0>=XQUERY && LA138_0<=VERSION)||LA138_0==ENCODING||(LA138_0>=MODULE && LA138_0<=NAMESPACE)||(LA138_0>=DECLARE && LA138_0<=VARIABLE)||(LA138_0>=EXTERNAL && LA138_0<=AS)||(LA138_0>=OPTION && LA138_0<=DOCUMENT_NODE)||(LA138_0>=SCHEMA_ELEMENT && LA138_0<=NODE)||(LA138_0>=RETURN && LA138_0<=TO)||(LA138_0>=DIV && LA138_0<=UNION)||(LA138_0>=INTERSECT && LA138_0<=GE)||LA138_0==IS||(LA138_0>=WEIGHT && LA138_0<=FTNOT)||(LA138_0>=ANY && LA138_0<=FROM)||(LA138_0>=WINDOW && LA138_0<=STRICT)||(LA138_0>=PARENT && LA138_0<=ANCESTOR_OR_SELF)||(LA138_0>=CHILD && LA138_0<=FOLLOWING)||(LA138_0>=DOCUMENT && LA138_0<=NCName)) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // etc/XQFT.g:712:41: qName EQSi dirAttributeValue
            	    {
            	    pushFollow(FOLLOW_qName_in_dirAttributeList7732);
            	    qName577=qName();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, qName577.getTree());
            	    EQSi578=(Token)input.LT(1);
            	    match(input,EQSi,FOLLOW_EQSi_in_dirAttributeList7734); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    EQSi578_tree = (XQFTTree)adaptor.create(EQSi578);
            	    adaptor.addChild(root_0, EQSi578_tree);
            	    }
            	    pushFollow(FOLLOW_dirAttributeValue_in_dirAttributeList7736);
            	    dirAttributeValue579=dirAttributeValue();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, dirAttributeValue579.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirAttributeList

    public static class dirAttributeValue_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirAttributeValue
    // etc/XQFT.g:713:25: dirAttributeValue : ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi );
    public final dirAttributeValue_return dirAttributeValue() throws RecognitionException {
        dirAttributeValue_return retval = new dirAttributeValue_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token QUOTSi580=null;
        Token QuotAttributeContent581=null;
        Token QUOTSi583=null;
        Token APOSSi584=null;
        Token AposAttributeContent585=null;
        Token APOSSi587=null;
        xmlEnclosedExpr_return xmlEnclosedExpr582 = null;

        xmlEnclosedExpr_return xmlEnclosedExpr586 = null;


        XQFTTree QUOTSi580_tree=null;
        XQFTTree QuotAttributeContent581_tree=null;
        XQFTTree QUOTSi583_tree=null;
        XQFTTree APOSSi584_tree=null;
        XQFTTree AposAttributeContent585_tree=null;
        XQFTTree APOSSi587_tree=null;

        try {
            // etc/XQFT.g:713:43: ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==QUOTSi) ) {
                alt141=1;
            }
            else if ( (LA141_0==APOSSi) ) {
                alt141=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("713:25: dirAttributeValue : ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi );", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // etc/XQFT.g:714:29: QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    QUOTSi580=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue7799); if (failed) return retval;
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_QUOT_ATTRIBUTE;
                    }
                    // etc/XQFT.g:715:29: ( QuotAttributeContent | xmlEnclosedExpr )*
                    loop139:
                    do {
                        int alt139=3;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==QuotAttributeContent) ) {
                            alt139=1;
                        }
                        else if ( (LA139_0==LBRACESi) ) {
                            alt139=2;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // etc/XQFT.g:715:30: QuotAttributeContent
                    	    {
                    	    QuotAttributeContent581=(Token)input.LT(1);
                    	    match(input,QuotAttributeContent,FOLLOW_QuotAttributeContent_in_dirAttributeValue7833); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    QuotAttributeContent581_tree = (XQFTTree)adaptor.create(QuotAttributeContent581);
                    	    adaptor.addChild(root_0, QuotAttributeContent581_tree);
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // etc/XQFT.g:715:53: xmlEnclosedExpr
                    	    {
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue7837);
                    	    xmlEnclosedExpr582=xmlEnclosedExpr();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, xmlEnclosedExpr582.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    QUOTSi583=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue7870); if (failed) return retval;
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:717:31: APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    APOSSi584=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue7905); if (failed) return retval;
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_APOS_ATTRIBUTE;
                    }
                    // etc/XQFT.g:718:29: ( AposAttributeContent | xmlEnclosedExpr )*
                    loop140:
                    do {
                        int alt140=3;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==AposAttributeContent) ) {
                            alt140=1;
                        }
                        else if ( (LA140_0==LBRACESi) ) {
                            alt140=2;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // etc/XQFT.g:718:30: AposAttributeContent
                    	    {
                    	    AposAttributeContent585=(Token)input.LT(1);
                    	    match(input,AposAttributeContent,FOLLOW_AposAttributeContent_in_dirAttributeValue7939); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    AposAttributeContent585_tree = (XQFTTree)adaptor.create(AposAttributeContent585);
                    	    adaptor.addChild(root_0, AposAttributeContent585_tree);
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // etc/XQFT.g:718:53: xmlEnclosedExpr
                    	    {
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue7943);
                    	    xmlEnclosedExpr586=xmlEnclosedExpr();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, xmlEnclosedExpr586.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);

                    APOSSi587=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue7976); if (failed) return retval;
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirAttributeValue

    public static class xmlEnclosedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start xmlEnclosedExpr
    // etc/XQFT.g:721:25: xmlEnclosedExpr : LBRACESi expr RBRACSi ;
    public final xmlEnclosedExpr_return xmlEnclosedExpr() throws RecognitionException {
        xmlEnclosedExpr_return retval = new xmlEnclosedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi588=null;
        Token RBRACSi590=null;
        expr_return expr589 = null;


        XQFTTree LBRACESi588_tree=null;
        XQFTTree RBRACSi590_tree=null;

        try {
            // etc/XQFT.g:721:41: ( LBRACESi expr RBRACSi )
            // etc/XQFT.g:722:29: LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LBRACESi588=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_xmlEnclosedExpr8065); if (failed) return retval;
            if ( backtracking==0 ) {
              lexer.stack.pushState(lexer.state); lexer.state=State.DEFAULT;
            }
            pushFollow(FOLLOW_expr_in_xmlEnclosedExpr8103);
            expr589=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr589.getTree());
            RBRACSi590=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_xmlEnclosedExpr8134); if (failed) return retval;
            if ( backtracking==0 ) {
              lexer.state = lexer.stack.pop();
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end xmlEnclosedExpr

    public static class dirElemContent_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirElemContent
    // etc/XQFT.g:727:21: dirElemContent : (dc= directConstructor -> ^( AST_DIRELEMCONTENT $dc) | cd= cDataSection -> ^( AST_DIRELEMCONTENT $cd) | ec= ElementContent -> ^( AST_DIRELEMCONTENT $ec) | xe= xmlEnclosedExpr -> ^( AST_DIRELEMCONTENT $xe) );
    public final dirElemContent_return dirElemContent() throws RecognitionException {
        dirElemContent_return retval = new dirElemContent_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ec=null;
        directConstructor_return dc = null;

        cDataSection_return cd = null;

        xmlEnclosedExpr_return xe = null;


        XQFTTree ec_tree=null;
        RewriteRuleTokenStream stream_ElementContent=new RewriteRuleTokenStream(adaptor,"token ElementContent");
        RewriteRuleSubtreeStream stream_directConstructor=new RewriteRuleSubtreeStream(adaptor,"rule directConstructor");
        RewriteRuleSubtreeStream stream_cDataSection=new RewriteRuleSubtreeStream(adaptor,"rule cDataSection");
        RewriteRuleSubtreeStream stream_xmlEnclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule xmlEnclosedExpr");
        try {
            // etc/XQFT.g:727:36: (dc= directConstructor -> ^( AST_DIRELEMCONTENT $dc) | cd= cDataSection -> ^( AST_DIRELEMCONTENT $cd) | ec= ElementContent -> ^( AST_DIRELEMCONTENT $ec) | xe= xmlEnclosedExpr -> ^( AST_DIRELEMCONTENT $xe) )
            int alt142=4;
            switch ( input.LA(1) ) {
            case LTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt142=1;
                }
                break;
            case LCDATASi:
                {
                alt142=2;
                }
                break;
            case ElementContent:
                {
                alt142=3;
                }
                break;
            case LBRACESi:
                {
                alt142=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("727:21: dirElemContent : (dc= directConstructor -> ^( AST_DIRELEMCONTENT $dc) | cd= cDataSection -> ^( AST_DIRELEMCONTENT $cd) | ec= ElementContent -> ^( AST_DIRELEMCONTENT $ec) | xe= xmlEnclosedExpr -> ^( AST_DIRELEMCONTENT $xe) );", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // etc/XQFT.g:728:25: dc= directConstructor
                    {
                    pushFollow(FOLLOW_directConstructor_in_dirElemContent8217);
                    dc=directConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_directConstructor.add(dc.getTree());

                    // AST REWRITE
                    // elements: dc
                    // token labels: 
                    // rule labels: dc, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_dc=new RewriteRuleSubtreeStream(adaptor,"token dc",dc!=null?dc.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 728:45: -> ^( AST_DIRELEMCONTENT $dc)
                    {
                        // etc/XQFT.g:728:48: ^( AST_DIRELEMCONTENT $dc)
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONTENT, "AST_DIRELEMCONTENT"), root_1);

                        adaptor.addChild(root_1, stream_dc.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:729:27: cd= cDataSection
                    {
                    pushFollow(FOLLOW_cDataSection_in_dirElemContent8255);
                    cd=cDataSection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_cDataSection.add(cd.getTree());

                    // AST REWRITE
                    // elements: cd
                    // token labels: 
                    // rule labels: cd, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"token cd",cd!=null?cd.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 729:43: -> ^( AST_DIRELEMCONTENT $cd)
                    {
                        // etc/XQFT.g:729:46: ^( AST_DIRELEMCONTENT $cd)
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONTENT, "AST_DIRELEMCONTENT"), root_1);

                        adaptor.addChild(root_1, stream_cd.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:730:27: ec= ElementContent
                    {
                    ec=(Token)input.LT(1);
                    match(input,ElementContent,FOLLOW_ElementContent_in_dirElemContent8294); if (failed) return retval;
                    if ( backtracking==0 ) stream_ElementContent.add(ec);


                    // AST REWRITE
                    // elements: ec
                    // token labels: ec
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_ec=new RewriteRuleTokenStream(adaptor,"token ec",ec);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 730:45: -> ^( AST_DIRELEMCONTENT $ec)
                    {
                        // etc/XQFT.g:730:48: ^( AST_DIRELEMCONTENT $ec)
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONTENT, "AST_DIRELEMCONTENT"), root_1);

                        adaptor.addChild(root_1, stream_ec.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:731:27: xe= xmlEnclosedExpr
                    {
                    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirElemContent8333);
                    xe=xmlEnclosedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_xmlEnclosedExpr.add(xe.getTree());

                    // AST REWRITE
                    // elements: xe
                    // token labels: 
                    // rule labels: retval, xe
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_xe=new RewriteRuleSubtreeStream(adaptor,"token xe",xe!=null?xe.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 731:46: -> ^( AST_DIRELEMCONTENT $xe)
                    {
                        // etc/XQFT.g:731:49: ^( AST_DIRELEMCONTENT $xe)
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONTENT, "AST_DIRELEMCONTENT"), root_1);

                        adaptor.addChild(root_1, stream_xe.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirElemContent

    public static class cDataSection_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start cDataSection
    // etc/XQFT.g:734:21: cDataSection : LCDATASi CDataContents RCDATASi ;
    public final cDataSection_return cDataSection() throws RecognitionException {
        cDataSection_return retval = new cDataSection_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LCDATASi591=null;
        Token CDataContents592=null;
        Token RCDATASi593=null;

        XQFTTree LCDATASi591_tree=null;
        XQFTTree CDataContents592_tree=null;
        XQFTTree RCDATASi593_tree=null;

        try {
            // etc/XQFT.g:734:34: ( LCDATASi CDataContents RCDATASi )
            // etc/XQFT.g:734:36: LCDATASi CDataContents RCDATASi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LCDATASi591=(Token)input.LT(1);
            match(input,LCDATASi,FOLLOW_LCDATASi_in_cDataSection8391); if (failed) return retval;
            if ( backtracking==0 ) {
            LCDATASi591_tree = (XQFTTree)adaptor.create(LCDATASi591);
            adaptor.addChild(root_0, LCDATASi591_tree);
            }
            CDataContents592=(Token)input.LT(1);
            match(input,CDataContents,FOLLOW_CDataContents_in_cDataSection8393); if (failed) return retval;
            if ( backtracking==0 ) {
            CDataContents592_tree = (XQFTTree)adaptor.create(CDataContents592);
            adaptor.addChild(root_0, CDataContents592_tree);
            }
            RCDATASi593=(Token)input.LT(1);
            match(input,RCDATASi,FOLLOW_RCDATASi_in_cDataSection8395); if (failed) return retval;
            if ( backtracking==0 ) {
            RCDATASi593_tree = (XQFTTree)adaptor.create(RCDATASi593);
            adaptor.addChild(root_0, RCDATASi593_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end cDataSection

    public static class dirCommentConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirCommentConstructor
    // etc/XQFT.g:736:17: dirCommentConstructor : LCOMMENTSi DirCommentContent RCOMMENTSi ;
    public final dirCommentConstructor_return dirCommentConstructor() throws RecognitionException {
        dirCommentConstructor_return retval = new dirCommentConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LCOMMENTSi594=null;
        Token DirCommentContent595=null;
        Token RCOMMENTSi596=null;

        XQFTTree LCOMMENTSi594_tree=null;
        XQFTTree DirCommentContent595_tree=null;
        XQFTTree RCOMMENTSi596_tree=null;

        try {
            // etc/XQFT.g:736:39: ( LCOMMENTSi DirCommentContent RCOMMENTSi )
            // etc/XQFT.g:736:41: LCOMMENTSi DirCommentContent RCOMMENTSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LCOMMENTSi594=(Token)input.LT(1);
            match(input,LCOMMENTSi,FOLLOW_LCOMMENTSi_in_dirCommentConstructor8419); if (failed) return retval;
            if ( backtracking==0 ) {
            LCOMMENTSi594_tree = (XQFTTree)adaptor.create(LCOMMENTSi594);
            adaptor.addChild(root_0, LCOMMENTSi594_tree);
            }
            DirCommentContent595=(Token)input.LT(1);
            match(input,DirCommentContent,FOLLOW_DirCommentContent_in_dirCommentConstructor8421); if (failed) return retval;
            if ( backtracking==0 ) {
            DirCommentContent595_tree = (XQFTTree)adaptor.create(DirCommentContent595);
            adaptor.addChild(root_0, DirCommentContent595_tree);
            }
            RCOMMENTSi596=(Token)input.LT(1);
            match(input,RCOMMENTSi,FOLLOW_RCOMMENTSi_in_dirCommentConstructor8423); if (failed) return retval;
            if ( backtracking==0 ) {
            RCOMMENTSi596_tree = (XQFTTree)adaptor.create(RCOMMENTSi596);
            adaptor.addChild(root_0, RCOMMENTSi596_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirCommentConstructor

    public static class dirPIConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirPIConstructor
    // etc/XQFT.g:738:17: dirPIConstructor : LPISi PiTarget ( DirPiContents )? RPISi ;
    public final dirPIConstructor_return dirPIConstructor() throws RecognitionException {
        dirPIConstructor_return retval = new dirPIConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPISi597=null;
        Token PiTarget598=null;
        Token DirPiContents599=null;
        Token RPISi600=null;

        XQFTTree LPISi597_tree=null;
        XQFTTree PiTarget598_tree=null;
        XQFTTree DirPiContents599_tree=null;
        XQFTTree RPISi600_tree=null;

        try {
            // etc/XQFT.g:738:34: ( LPISi PiTarget ( DirPiContents )? RPISi )
            // etc/XQFT.g:738:36: LPISi PiTarget ( DirPiContents )? RPISi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LPISi597=(Token)input.LT(1);
            match(input,LPISi,FOLLOW_LPISi_in_dirPIConstructor8447); if (failed) return retval;
            if ( backtracking==0 ) {
            LPISi597_tree = (XQFTTree)adaptor.create(LPISi597);
            adaptor.addChild(root_0, LPISi597_tree);
            }
            PiTarget598=(Token)input.LT(1);
            match(input,PiTarget,FOLLOW_PiTarget_in_dirPIConstructor8449); if (failed) return retval;
            if ( backtracking==0 ) {
            PiTarget598_tree = (XQFTTree)adaptor.create(PiTarget598);
            adaptor.addChild(root_0, PiTarget598_tree);
            }
            // etc/XQFT.g:738:51: ( DirPiContents )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==DirPiContents) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // etc/XQFT.g:738:51: DirPiContents
                    {
                    DirPiContents599=(Token)input.LT(1);
                    match(input,DirPiContents,FOLLOW_DirPiContents_in_dirPIConstructor8451); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DirPiContents599_tree = (XQFTTree)adaptor.create(DirPiContents599);
                    adaptor.addChild(root_0, DirPiContents599_tree);
                    }

                    }
                    break;

            }

            RPISi600=(Token)input.LT(1);
            match(input,RPISi,FOLLOW_RPISi_in_dirPIConstructor8454); if (failed) return retval;
            if ( backtracking==0 ) {
            RPISi600_tree = (XQFTTree)adaptor.create(RPISi600);
            adaptor.addChild(root_0, RPISi600_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirPIConstructor

    public static class computedConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start computedConstructor
    // etc/XQFT.g:740:13: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );
    public final computedConstructor_return computedConstructor() throws RecognitionException {
        computedConstructor_return retval = new computedConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        compDocConstructor_return compDocConstructor601 = null;

        compElemConstructor_return compElemConstructor602 = null;

        compAttrConstructor_return compAttrConstructor603 = null;

        compTextConstructor_return compTextConstructor604 = null;

        compCommentConstructor_return compCommentConstructor605 = null;

        compPIConstructor_return compPIConstructor606 = null;



        try {
            // etc/XQFT.g:740:33: ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor )
            int alt144=6;
            switch ( input.LA(1) ) {
            case DOCUMENT:
                {
                alt144=1;
                }
                break;
            case ELEMENT:
                {
                alt144=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt144=3;
                }
                break;
            case TEXT:
                {
                alt144=4;
                }
                break;
            case COMMENT:
                {
                alt144=5;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt144=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("740:13: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // etc/XQFT.g:741:17: compDocConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compDocConstructor_in_computedConstructor8491);
                    compDocConstructor601=compDocConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compDocConstructor601.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:742:19: compElemConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compElemConstructor_in_computedConstructor8511);
                    compElemConstructor602=compElemConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compElemConstructor602.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:743:19: compAttrConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compAttrConstructor_in_computedConstructor8531);
                    compAttrConstructor603=compAttrConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compAttrConstructor603.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:744:19: compTextConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compTextConstructor_in_computedConstructor8551);
                    compTextConstructor604=compTextConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compTextConstructor604.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:745:19: compCommentConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compCommentConstructor_in_computedConstructor8571);
                    compCommentConstructor605=compCommentConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compCommentConstructor605.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:746:19: compPIConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compPIConstructor_in_computedConstructor8591);
                    compPIConstructor606=compPIConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compPIConstructor606.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end computedConstructor

    public static class compDocConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compDocConstructor
    // etc/XQFT.g:749:17: compDocConstructor : DOCUMENT LBRACESi expr RBRACSi ;
    public final compDocConstructor_return compDocConstructor() throws RecognitionException {
        compDocConstructor_return retval = new compDocConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOCUMENT607=null;
        Token LBRACESi608=null;
        Token RBRACSi610=null;
        expr_return expr609 = null;


        XQFTTree DOCUMENT607_tree=null;
        XQFTTree LBRACESi608_tree=null;
        XQFTTree RBRACSi610_tree=null;

        try {
            // etc/XQFT.g:749:36: ( DOCUMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:749:38: DOCUMENT LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOCUMENT607=(Token)input.LT(1);
            match(input,DOCUMENT,FOLLOW_DOCUMENT_in_compDocConstructor8629); if (failed) return retval;
            if ( backtracking==0 ) {
            DOCUMENT607_tree = (XQFTTree)adaptor.create(DOCUMENT607);
            adaptor.addChild(root_0, DOCUMENT607_tree);
            }
            LBRACESi608=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compDocConstructor8631); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_compDocConstructor8634);
            expr609=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr609.getTree());
            RBRACSi610=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compDocConstructor8636); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compDocConstructor

    public static class compElemConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compElemConstructor
    // etc/XQFT.g:751:17: compElemConstructor : ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi ;
    public final compElemConstructor_return compElemConstructor() throws RecognitionException {
        compElemConstructor_return retval = new compElemConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ELEMENT611=null;
        Token LBRACESi613=null;
        Token RBRACSi615=null;
        Token LBRACESi616=null;
        Token RBRACSi618=null;
        qName_return qName612 = null;

        expr_return expr614 = null;

        contentExpr_return contentExpr617 = null;


        XQFTTree ELEMENT611_tree=null;
        XQFTTree LBRACESi613_tree=null;
        XQFTTree RBRACSi615_tree=null;
        XQFTTree LBRACESi616_tree=null;
        XQFTTree RBRACSi618_tree=null;

        try {
            // etc/XQFT.g:751:37: ( ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi )
            // etc/XQFT.g:752:21: ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ELEMENT611=(Token)input.LT(1);
            match(input,ELEMENT,FOLLOW_ELEMENT_in_compElemConstructor8682); if (failed) return retval;
            if ( backtracking==0 ) {
            ELEMENT611_tree = (XQFTTree)adaptor.create(ELEMENT611);
            adaptor.addChild(root_0, ELEMENT611_tree);
            }
            // etc/XQFT.g:752:29: ( qName | LBRACESi expr RBRACSi )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( ((LA145_0>=XQUERY && LA145_0<=VERSION)||LA145_0==ENCODING||(LA145_0>=MODULE && LA145_0<=NAMESPACE)||(LA145_0>=DECLARE && LA145_0<=VARIABLE)||(LA145_0>=EXTERNAL && LA145_0<=AS)||(LA145_0>=OPTION && LA145_0<=DOCUMENT_NODE)||(LA145_0>=SCHEMA_ELEMENT && LA145_0<=NODE)||(LA145_0>=RETURN && LA145_0<=TO)||(LA145_0>=DIV && LA145_0<=UNION)||(LA145_0>=INTERSECT && LA145_0<=GE)||LA145_0==IS||(LA145_0>=WEIGHT && LA145_0<=FTNOT)||(LA145_0>=ANY && LA145_0<=FROM)||(LA145_0>=WINDOW && LA145_0<=STRICT)||(LA145_0>=PARENT && LA145_0<=ANCESTOR_OR_SELF)||(LA145_0>=CHILD && LA145_0<=FOLLOWING)||(LA145_0>=DOCUMENT && LA145_0<=NCName)) ) {
                alt145=1;
            }
            else if ( (LA145_0==LBRACESi) ) {
                alt145=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("752:29: ( qName | LBRACESi expr RBRACSi )", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // etc/XQFT.g:752:30: qName
                    {
                    pushFollow(FOLLOW_qName_in_compElemConstructor8685);
                    qName612=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName612.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:752:38: LBRACESi expr RBRACSi
                    {
                    LBRACESi613=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor8689); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LBRACESi613_tree = (XQFTTree)adaptor.create(LBRACESi613);
                    adaptor.addChild(root_0, LBRACESi613_tree);
                    }
                    pushFollow(FOLLOW_expr_in_compElemConstructor8691);
                    expr614=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr614.getTree());
                    RBRACSi615=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor8693); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RBRACSi615_tree = (XQFTTree)adaptor.create(RBRACSi615);
                    adaptor.addChild(root_0, RBRACSi615_tree);
                    }

                    }
                    break;

            }

            LBRACESi616=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor8717); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi616_tree = (XQFTTree)adaptor.create(LBRACESi616);
            adaptor.addChild(root_0, LBRACESi616_tree);
            }
            // etc/XQFT.g:753:30: ( contentExpr )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=XQUERY && LA146_0<=ENCODING)||(LA146_0>=MODULE && LA146_0<=NAMESPACE)||(LA146_0>=DECLARE && LA146_0<=DOLLARSi)||(LA146_0>=EXTERNAL && LA146_0<=LPARSi)||(LA146_0>=OPTION && LA146_0<=DOCUMENT_NODE)||(LA146_0>=STARSi && LA146_0<=UNION)||(LA146_0>=INTERSECT && LA146_0<=GE)||LA146_0==LTSi||LA146_0==IS||(LA146_0>=WEIGHT && LA146_0<=LPRAGSi)||(LA146_0>=WINDOW && LA146_0<=ANCESTOR_OR_SELF)||(LA146_0>=DOTDOTSi && LA146_0<=ATSi)||LA146_0==LCOMMENTSi||LA146_0==LPISi||(LA146_0>=DOCUMENT && LA146_0<=NCName)) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // etc/XQFT.g:753:30: contentExpr
                    {
                    pushFollow(FOLLOW_contentExpr_in_compElemConstructor8719);
                    contentExpr617=contentExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, contentExpr617.getTree());

                    }
                    break;

            }

            RBRACSi618=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor8722); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi618_tree = (XQFTTree)adaptor.create(RBRACSi618);
            adaptor.addChild(root_0, RBRACSi618_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compElemConstructor

    public static class contentExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start contentExpr
    // etc/XQFT.g:755:21: contentExpr : expr ;
    public final contentExpr_return contentExpr() throws RecognitionException {
        contentExpr_return retval = new contentExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        expr_return expr619 = null;



        try {
            // etc/XQFT.g:755:33: ( expr )
            // etc/XQFT.g:755:35: expr
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_contentExpr8766);
            expr619=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr619.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end contentExpr

    public static class compAttrConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compAttrConstructor
    // etc/XQFT.g:757:17: compAttrConstructor : ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
    public final compAttrConstructor_return compAttrConstructor() throws RecognitionException {
        compAttrConstructor_return retval = new compAttrConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ATTRIBUTE620=null;
        Token LBRACESi622=null;
        Token RBRACSi624=null;
        Token LBRACESi625=null;
        Token RBRACSi627=null;
        qName_return qName621 = null;

        expr_return expr623 = null;

        expr_return expr626 = null;


        XQFTTree ATTRIBUTE620_tree=null;
        XQFTTree LBRACESi622_tree=null;
        XQFTTree RBRACSi624_tree=null;
        XQFTTree LBRACESi625_tree=null;
        XQFTTree RBRACSi627_tree=null;

        try {
            // etc/XQFT.g:757:37: ( ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:758:21: ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ATTRIBUTE620=(Token)input.LT(1);
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_compAttrConstructor8811); if (failed) return retval;
            if ( backtracking==0 ) {
            ATTRIBUTE620_tree = (XQFTTree)adaptor.create(ATTRIBUTE620);
            adaptor.addChild(root_0, ATTRIBUTE620_tree);
            }
            // etc/XQFT.g:758:31: ( qName | ( LBRACESi expr RBRACSi ) )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( ((LA147_0>=XQUERY && LA147_0<=VERSION)||LA147_0==ENCODING||(LA147_0>=MODULE && LA147_0<=NAMESPACE)||(LA147_0>=DECLARE && LA147_0<=VARIABLE)||(LA147_0>=EXTERNAL && LA147_0<=AS)||(LA147_0>=OPTION && LA147_0<=DOCUMENT_NODE)||(LA147_0>=SCHEMA_ELEMENT && LA147_0<=NODE)||(LA147_0>=RETURN && LA147_0<=TO)||(LA147_0>=DIV && LA147_0<=UNION)||(LA147_0>=INTERSECT && LA147_0<=GE)||LA147_0==IS||(LA147_0>=WEIGHT && LA147_0<=FTNOT)||(LA147_0>=ANY && LA147_0<=FROM)||(LA147_0>=WINDOW && LA147_0<=STRICT)||(LA147_0>=PARENT && LA147_0<=ANCESTOR_OR_SELF)||(LA147_0>=CHILD && LA147_0<=FOLLOWING)||(LA147_0>=DOCUMENT && LA147_0<=NCName)) ) {
                alt147=1;
            }
            else if ( (LA147_0==LBRACESi) ) {
                alt147=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("758:31: ( qName | ( LBRACESi expr RBRACSi ) )", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // etc/XQFT.g:758:32: qName
                    {
                    pushFollow(FOLLOW_qName_in_compAttrConstructor8814);
                    qName621=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName621.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:758:40: ( LBRACESi expr RBRACSi )
                    {
                    // etc/XQFT.g:758:40: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:758:41: LBRACESi expr RBRACSi
                    {
                    LBRACESi622=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor8819); if (failed) return retval;
                    pushFollow(FOLLOW_expr_in_compAttrConstructor8822);
                    expr623=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr623.getTree());
                    RBRACSi624=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor8824); if (failed) return retval;

                    }


                    }
                    break;

            }

            LBRACESi625=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor8850); if (failed) return retval;
            // etc/XQFT.g:759:31: ( expr )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=XQUERY && LA148_0<=ENCODING)||(LA148_0>=MODULE && LA148_0<=NAMESPACE)||(LA148_0>=DECLARE && LA148_0<=DOLLARSi)||(LA148_0>=EXTERNAL && LA148_0<=LPARSi)||(LA148_0>=OPTION && LA148_0<=DOCUMENT_NODE)||(LA148_0>=STARSi && LA148_0<=UNION)||(LA148_0>=INTERSECT && LA148_0<=GE)||LA148_0==LTSi||LA148_0==IS||(LA148_0>=WEIGHT && LA148_0<=LPRAGSi)||(LA148_0>=WINDOW && LA148_0<=ANCESTOR_OR_SELF)||(LA148_0>=DOTDOTSi && LA148_0<=ATSi)||LA148_0==LCOMMENTSi||LA148_0==LPISi||(LA148_0>=DOCUMENT && LA148_0<=NCName)) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // etc/XQFT.g:759:31: expr
                    {
                    pushFollow(FOLLOW_expr_in_compAttrConstructor8853);
                    expr626=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr626.getTree());

                    }
                    break;

            }

            RBRACSi627=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor8856); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compAttrConstructor

    public static class compTextConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compTextConstructor
    // etc/XQFT.g:762:17: compTextConstructor : TEXT LBRACESi expr RBRACSi ;
    public final compTextConstructor_return compTextConstructor() throws RecognitionException {
        compTextConstructor_return retval = new compTextConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TEXT628=null;
        Token LBRACESi629=null;
        Token RBRACSi631=null;
        expr_return expr630 = null;


        XQFTTree TEXT628_tree=null;
        XQFTTree LBRACESi629_tree=null;
        XQFTTree RBRACSi631_tree=null;

        try {
            // etc/XQFT.g:762:37: ( TEXT LBRACESi expr RBRACSi )
            // etc/XQFT.g:762:39: TEXT LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            TEXT628=(Token)input.LT(1);
            match(input,TEXT,FOLLOW_TEXT_in_compTextConstructor8899); if (failed) return retval;
            if ( backtracking==0 ) {
            TEXT628_tree = (XQFTTree)adaptor.create(TEXT628);
            adaptor.addChild(root_0, TEXT628_tree);
            }
            LBRACESi629=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compTextConstructor8901); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_compTextConstructor8904);
            expr630=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr630.getTree());
            RBRACSi631=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compTextConstructor8906); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compTextConstructor

    public static class compCommentConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compCommentConstructor
    // etc/XQFT.g:764:17: compCommentConstructor : COMMENT LBRACESi expr RBRACSi ;
    public final compCommentConstructor_return compCommentConstructor() throws RecognitionException {
        compCommentConstructor_return retval = new compCommentConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMENT632=null;
        Token LBRACESi633=null;
        Token RBRACSi635=null;
        expr_return expr634 = null;


        XQFTTree COMMENT632_tree=null;
        XQFTTree LBRACESi633_tree=null;
        XQFTTree RBRACSi635_tree=null;

        try {
            // etc/XQFT.g:764:40: ( COMMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:764:42: COMMENT LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            COMMENT632=(Token)input.LT(1);
            match(input,COMMENT,FOLLOW_COMMENT_in_compCommentConstructor8931); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMENT632_tree = (XQFTTree)adaptor.create(COMMENT632);
            adaptor.addChild(root_0, COMMENT632_tree);
            }
            LBRACESi633=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compCommentConstructor8933); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_compCommentConstructor8936);
            expr634=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr634.getTree());
            RBRACSi635=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compCommentConstructor8938); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compCommentConstructor

    public static class compPIConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compPIConstructor
    // etc/XQFT.g:766:17: compPIConstructor : PROCESSING_INSTRUCTION ( ncNameorKeyword | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
    public final compPIConstructor_return compPIConstructor() throws RecognitionException {
        compPIConstructor_return retval = new compPIConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token PROCESSING_INSTRUCTION636=null;
        Token LBRACESi638=null;
        Token RBRACSi640=null;
        Token LBRACESi641=null;
        Token RBRACSi643=null;
        ncNameorKeyword_return ncNameorKeyword637 = null;

        expr_return expr639 = null;

        expr_return expr642 = null;


        XQFTTree PROCESSING_INSTRUCTION636_tree=null;
        XQFTTree LBRACESi638_tree=null;
        XQFTTree RBRACSi640_tree=null;
        XQFTTree LBRACESi641_tree=null;
        XQFTTree RBRACSi643_tree=null;

        try {
            // etc/XQFT.g:766:35: ( PROCESSING_INSTRUCTION ( ncNameorKeyword | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:767:21: PROCESSING_INSTRUCTION ( ncNameorKeyword | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            PROCESSING_INSTRUCTION636=(Token)input.LT(1);
            match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor8984); if (failed) return retval;
            if ( backtracking==0 ) {
            PROCESSING_INSTRUCTION636_tree = (XQFTTree)adaptor.create(PROCESSING_INSTRUCTION636);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION636_tree);
            }
            // etc/XQFT.g:768:25: ( ncNameorKeyword | ( LBRACESi expr RBRACSi ) )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( ((LA149_0>=XQUERY && LA149_0<=VERSION)||LA149_0==ENCODING||(LA149_0>=MODULE && LA149_0<=NAMESPACE)||(LA149_0>=DECLARE && LA149_0<=VARIABLE)||LA149_0==EXTERNAL||LA149_0==AS||(LA149_0>=OPTION && LA149_0<=DOCUMENT_NODE)||(LA149_0>=SCHEMA_ELEMENT && LA149_0<=NODE)||(LA149_0>=RETURN && LA149_0<=TO)||(LA149_0>=DIV && LA149_0<=UNION)||(LA149_0>=INTERSECT && LA149_0<=GE)||LA149_0==IS||(LA149_0>=WEIGHT && LA149_0<=FTNOT)||(LA149_0>=ANY && LA149_0<=FROM)||(LA149_0>=WINDOW && LA149_0<=STRICT)||(LA149_0>=PARENT && LA149_0<=ANCESTOR_OR_SELF)||(LA149_0>=CHILD && LA149_0<=FOLLOWING)||(LA149_0>=DOCUMENT && LA149_0<=NCName)) ) {
                alt149=1;
            }
            else if ( (LA149_0==LBRACESi) ) {
                alt149=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("768:25: ( ncNameorKeyword | ( LBRACESi expr RBRACSi ) )", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // etc/XQFT.g:768:26: ncNameorKeyword
                    {
                    pushFollow(FOLLOW_ncNameorKeyword_in_compPIConstructor9012);
                    ncNameorKeyword637=ncNameorKeyword();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ncNameorKeyword637.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:768:44: ( LBRACESi expr RBRACSi )
                    {
                    // etc/XQFT.g:768:44: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:768:45: LBRACESi expr RBRACSi
                    {
                    LBRACESi638=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor9017); if (failed) return retval;
                    pushFollow(FOLLOW_expr_in_compPIConstructor9020);
                    expr639=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr639.getTree());
                    RBRACSi640=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor9022); if (failed) return retval;

                    }


                    }
                    break;

            }

            LBRACESi641=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor9048); if (failed) return retval;
            // etc/XQFT.g:769:31: ( expr )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0>=XQUERY && LA150_0<=ENCODING)||(LA150_0>=MODULE && LA150_0<=NAMESPACE)||(LA150_0>=DECLARE && LA150_0<=DOLLARSi)||(LA150_0>=EXTERNAL && LA150_0<=LPARSi)||(LA150_0>=OPTION && LA150_0<=DOCUMENT_NODE)||(LA150_0>=STARSi && LA150_0<=UNION)||(LA150_0>=INTERSECT && LA150_0<=GE)||LA150_0==LTSi||LA150_0==IS||(LA150_0>=WEIGHT && LA150_0<=LPRAGSi)||(LA150_0>=WINDOW && LA150_0<=ANCESTOR_OR_SELF)||(LA150_0>=DOTDOTSi && LA150_0<=ATSi)||LA150_0==LCOMMENTSi||LA150_0==LPISi||(LA150_0>=DOCUMENT && LA150_0<=NCName)) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // etc/XQFT.g:769:31: expr
                    {
                    pushFollow(FOLLOW_expr_in_compPIConstructor9051);
                    expr642=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr642.getTree());

                    }
                    break;

            }

            RBRACSi643=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor9054); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compPIConstructor

    public static class ncNameorKeyword_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ncNameorKeyword
    // etc/XQFT.g:774:1: ncNameorKeyword : (a= NCName | a= ALL | a= ANY | a= ANCESTOR | a= ANCESTOR_OR_SELF | a= AND | a= AS | a= ASCENDING | a= AT | a= ATTRIBUTE | a= BASE_URI | a= BY | a= BOUNDARYSPACE | a= CASE | a= CAST | a= CASTABLE | a= CHILD | a= COLLATION | a= COMMENT | a= CONSTRUCTION | a= CONTENT | a= COPY_NAMESPACES | a= DECLARE | a= DEFAULT | a= DESCENDANT | a= DESCENDANT_OR_SELF | a= DESCENDING | a= DIACRITICS | a= DIFFERENT | a= DISTANCE | a= DIV | a= DOCUMENT | a= DOCUMENT_NODE | a= ELEMENT | a= ELSE | a= ENCODING | a= END | a= ENTIRE | a= EMPTY | a= EMPTY_SEQUENCE | a= EQ | a= EVERY | a= EXACTLY | a= EXCEPT | a= EXTERNAL | a= FOLLOWING | a= FOLLOWING_SIBLING | a= FOR | a= FROM | a= FTAND | a= FTCONTAINS | a= FTNOT | a= FTOPTION | a= FTOR | a= FUNCTION | a= GE | a= GREATEST | a= GT | a= IDIV | a= IF | a= IMPORT | a= IN | a= INHERIT | a= INSENSITIVE | a= INSTANCE | a= INTERSECT | a= IS | a= ITEM | a= LANGUAGE | a= LAX | a= LE | a= LEAST | a= LET | a= LEVELS | a= LOWERCASE | a= LT | a= MOD | a= MODULE | a= MOST | a= NAMESPACE | a= NE | a= NODE | a= NOINHERIT | a= NOPRESERVE | a= NOT | a= OCCURS | a= OF | a= OPTION | a= OR | a= ORDER | a= ORDERED | a= ORDERING | a= PARAGRAPH | a= PARAGRAPHS | a= PARENT | a= PHRASE | a= PRECEDING | a= PRECEDING_SIBLING | a= PRESERVE | a= PROCESSING_INSTRUCTION | a= RELATIONSHIP | a= RETURN | a= SAME | a= SATISFIES | a= SCHEMA | a= SCHEMA_ATTRIBUTE | a= SCHEMA_ELEMENT | a= SCORE | a= SELF | a= SENSITIVE | a= SENTENCES | a= SENTENCE | a= SOME | a= STABLE | a= START | a= STEMMING | a= STOP | a= STRICT | a= STRIP | a= TEXT | a= THESAURUS | a= THEN | a= TIMES | a= TO | a= TREAT | a= TYPESWITCH | a= UNION | a= UNORDERED | a= UPPERCASE | a= VALIDATE | a= VARIABLE | a= VERSION | a= WEIGHT | a= WHERE | a= WILDCARDS | a= WINDOW | a= WITH | a= WITHOUT | a= WORD | a= WORDS | a= XQUERY ) -> NCName[$a] ;
    public final ncNameorKeyword_return ncNameorKeyword() throws RecognitionException {
        ncNameorKeyword_return retval = new ncNameorKeyword_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token a=null;

        XQFTTree a_tree=null;
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_INSENSITIVE=new RewriteRuleTokenStream(adaptor,"token INSENSITIVE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_DOCUMENT=new RewriteRuleTokenStream(adaptor,"token DOCUMENT");
        RewriteRuleTokenStream stream_ENCODING=new RewriteRuleTokenStream(adaptor,"token ENCODING");
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_BOUNDARYSPACE=new RewriteRuleTokenStream(adaptor,"token BOUNDARYSPACE");
        RewriteRuleTokenStream stream_TREAT=new RewriteRuleTokenStream(adaptor,"token TREAT");
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_NOINHERIT=new RewriteRuleTokenStream(adaptor,"token NOINHERIT");
        RewriteRuleTokenStream stream_LEAST=new RewriteRuleTokenStream(adaptor,"token LEAST");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_WORDS=new RewriteRuleTokenStream(adaptor,"token WORDS");
        RewriteRuleTokenStream stream_INSTANCE=new RewriteRuleTokenStream(adaptor,"token INSTANCE");
        RewriteRuleTokenStream stream_CONTENT=new RewriteRuleTokenStream(adaptor,"token CONTENT");
        RewriteRuleTokenStream stream_STOP=new RewriteRuleTokenStream(adaptor,"token STOP");
        RewriteRuleTokenStream stream_LAX=new RewriteRuleTokenStream(adaptor,"token LAX");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_PARAGRAPHS=new RewriteRuleTokenStream(adaptor,"token PARAGRAPHS");
        RewriteRuleTokenStream stream_DIACRITICS=new RewriteRuleTokenStream(adaptor,"token DIACRITICS");
        RewriteRuleTokenStream stream_CASTABLE=new RewriteRuleTokenStream(adaptor,"token CASTABLE");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_TO=new RewriteRuleTokenStream(adaptor,"token TO");
        RewriteRuleTokenStream stream_BASE_URI=new RewriteRuleTokenStream(adaptor,"token BASE_URI");
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_LANGUAGE=new RewriteRuleTokenStream(adaptor,"token LANGUAGE");
        RewriteRuleTokenStream stream_TYPESWITCH=new RewriteRuleTokenStream(adaptor,"token TYPESWITCH");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_LOWERCASE=new RewriteRuleTokenStream(adaptor,"token LOWERCASE");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_VERSION=new RewriteRuleTokenStream(adaptor,"token VERSION");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_CONSTRUCTION=new RewriteRuleTokenStream(adaptor,"token CONSTRUCTION");
        RewriteRuleTokenStream stream_WILDCARDS=new RewriteRuleTokenStream(adaptor,"token WILDCARDS");
        RewriteRuleTokenStream stream_EXACTLY=new RewriteRuleTokenStream(adaptor,"token EXACTLY");
        RewriteRuleTokenStream stream_FTNOT=new RewriteRuleTokenStream(adaptor,"token FTNOT");
        RewriteRuleTokenStream stream_DIFFERENT=new RewriteRuleTokenStream(adaptor,"token DIFFERENT");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_INTERSECT=new RewriteRuleTokenStream(adaptor,"token INTERSECT");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_OCCURS=new RewriteRuleTokenStream(adaptor,"token OCCURS");
        RewriteRuleTokenStream stream_UNION=new RewriteRuleTokenStream(adaptor,"token UNION");
        RewriteRuleTokenStream stream_STRIP=new RewriteRuleTokenStream(adaptor,"token STRIP");
        RewriteRuleTokenStream stream_GREATEST=new RewriteRuleTokenStream(adaptor,"token GREATEST");
        RewriteRuleTokenStream stream_SAME=new RewriteRuleTokenStream(adaptor,"token SAME");
        RewriteRuleTokenStream stream_FTCONTAINS=new RewriteRuleTokenStream(adaptor,"token FTCONTAINS");
        RewriteRuleTokenStream stream_DESCENDING=new RewriteRuleTokenStream(adaptor,"token DESCENDING");
        RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
        RewriteRuleTokenStream stream_FTOPTION=new RewriteRuleTokenStream(adaptor,"token FTOPTION");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_DOCUMENT_NODE=new RewriteRuleTokenStream(adaptor,"token DOCUMENT_NODE");
        RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
        RewriteRuleTokenStream stream_ANCESTOR_OR_SELF=new RewriteRuleTokenStream(adaptor,"token ANCESTOR_OR_SELF");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RELATIONSHIP=new RewriteRuleTokenStream(adaptor,"token RELATIONSHIP");
        RewriteRuleTokenStream stream_FOLLOWING=new RewriteRuleTokenStream(adaptor,"token FOLLOWING");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_DESCENDANT_OR_SELF=new RewriteRuleTokenStream(adaptor,"token DESCENDANT_OR_SELF");
        RewriteRuleTokenStream stream_WORD=new RewriteRuleTokenStream(adaptor,"token WORD");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_SENSITIVE=new RewriteRuleTokenStream(adaptor,"token SENSITIVE");
        RewriteRuleTokenStream stream_SELF=new RewriteRuleTokenStream(adaptor,"token SELF");
        RewriteRuleTokenStream stream_THESAURUS=new RewriteRuleTokenStream(adaptor,"token THESAURUS");
        RewriteRuleTokenStream stream_DISTANCE=new RewriteRuleTokenStream(adaptor,"token DISTANCE");
        RewriteRuleTokenStream stream_FTAND=new RewriteRuleTokenStream(adaptor,"token FTAND");
        RewriteRuleTokenStream stream_TEXT=new RewriteRuleTokenStream(adaptor,"token TEXT");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleTokenStream stream_PARAGRAPH=new RewriteRuleTokenStream(adaptor,"token PARAGRAPH");
        RewriteRuleTokenStream stream_PARENT=new RewriteRuleTokenStream(adaptor,"token PARENT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_NCName=new RewriteRuleTokenStream(adaptor,"token NCName");
        RewriteRuleTokenStream stream_SCORE=new RewriteRuleTokenStream(adaptor,"token SCORE");
        RewriteRuleTokenStream stream_FTOR=new RewriteRuleTokenStream(adaptor,"token FTOR");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WITHOUT=new RewriteRuleTokenStream(adaptor,"token WITHOUT");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_EMPTY_SEQUENCE=new RewriteRuleTokenStream(adaptor,"token EMPTY_SEQUENCE");
        RewriteRuleTokenStream stream_SCHEMA_ATTRIBUTE=new RewriteRuleTokenStream(adaptor,"token SCHEMA_ATTRIBUTE");
        RewriteRuleTokenStream stream_EVERY=new RewriteRuleTokenStream(adaptor,"token EVERY");
        RewriteRuleTokenStream stream_XQUERY=new RewriteRuleTokenStream(adaptor,"token XQUERY");
        RewriteRuleTokenStream stream_CAST=new RewriteRuleTokenStream(adaptor,"token CAST");
        RewriteRuleTokenStream stream_IDIV=new RewriteRuleTokenStream(adaptor,"token IDIV");
        RewriteRuleTokenStream stream_SATISFIES=new RewriteRuleTokenStream(adaptor,"token SATISFIES");
        RewriteRuleTokenStream stream_MOD=new RewriteRuleTokenStream(adaptor,"token MOD");
        RewriteRuleTokenStream stream_EXCEPT=new RewriteRuleTokenStream(adaptor,"token EXCEPT");
        RewriteRuleTokenStream stream_DESCENDANT=new RewriteRuleTokenStream(adaptor,"token DESCENDANT");
        RewriteRuleTokenStream stream_STRICT=new RewriteRuleTokenStream(adaptor,"token STRICT");
        RewriteRuleTokenStream stream_NOPRESERVE=new RewriteRuleTokenStream(adaptor,"token NOPRESERVE");
        RewriteRuleTokenStream stream_OR=new RewriteRuleTokenStream(adaptor,"token OR");
        RewriteRuleTokenStream stream_FOLLOWING_SIBLING=new RewriteRuleTokenStream(adaptor,"token FOLLOWING_SIBLING");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_STABLE=new RewriteRuleTokenStream(adaptor,"token STABLE");
        RewriteRuleTokenStream stream_START=new RewriteRuleTokenStream(adaptor,"token START");
        RewriteRuleTokenStream stream_SCHEMA_ELEMENT=new RewriteRuleTokenStream(adaptor,"token SCHEMA_ELEMENT");
        RewriteRuleTokenStream stream_VALIDATE=new RewriteRuleTokenStream(adaptor,"token VALIDATE");
        RewriteRuleTokenStream stream_WEIGHT=new RewriteRuleTokenStream(adaptor,"token WEIGHT");
        RewriteRuleTokenStream stream_PRECEDING=new RewriteRuleTokenStream(adaptor,"token PRECEDING");
        RewriteRuleTokenStream stream_PRECEDING_SIBLING=new RewriteRuleTokenStream(adaptor,"token PRECEDING_SIBLING");
        RewriteRuleTokenStream stream_UPPERCASE=new RewriteRuleTokenStream(adaptor,"token UPPERCASE");
        RewriteRuleTokenStream stream_ORDERING=new RewriteRuleTokenStream(adaptor,"token ORDERING");
        RewriteRuleTokenStream stream_COPY_NAMESPACES=new RewriteRuleTokenStream(adaptor,"token COPY_NAMESPACES");
        RewriteRuleTokenStream stream_UNORDERED=new RewriteRuleTokenStream(adaptor,"token UNORDERED");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_STEMMING=new RewriteRuleTokenStream(adaptor,"token STEMMING");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleTokenStream stream_SENTENCE=new RewriteRuleTokenStream(adaptor,"token SENTENCE");
        RewriteRuleTokenStream stream_EMPTY=new RewriteRuleTokenStream(adaptor,"token EMPTY");
        RewriteRuleTokenStream stream_INHERIT=new RewriteRuleTokenStream(adaptor,"token INHERIT");
        RewriteRuleTokenStream stream_ASCENDING=new RewriteRuleTokenStream(adaptor,"token ASCENDING");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SENTENCES=new RewriteRuleTokenStream(adaptor,"token SENTENCES");
        RewriteRuleTokenStream stream_NE=new RewriteRuleTokenStream(adaptor,"token NE");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_PHRASE=new RewriteRuleTokenStream(adaptor,"token PHRASE");
        RewriteRuleTokenStream stream_COMMENT=new RewriteRuleTokenStream(adaptor,"token COMMENT");
        RewriteRuleTokenStream stream_ITEM=new RewriteRuleTokenStream(adaptor,"token ITEM");
        RewriteRuleTokenStream stream_ORDERED=new RewriteRuleTokenStream(adaptor,"token ORDERED");
        RewriteRuleTokenStream stream_ENTIRE=new RewriteRuleTokenStream(adaptor,"token ENTIRE");
        RewriteRuleTokenStream stream_WITH=new RewriteRuleTokenStream(adaptor,"token WITH");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_PROCESSING_INSTRUCTION=new RewriteRuleTokenStream(adaptor,"token PROCESSING_INSTRUCTION");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_MOST=new RewriteRuleTokenStream(adaptor,"token MOST");
        RewriteRuleTokenStream stream_COLLATION=new RewriteRuleTokenStream(adaptor,"token COLLATION");
        RewriteRuleTokenStream stream_ANCESTOR=new RewriteRuleTokenStream(adaptor,"token ANCESTOR");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleTokenStream stream_LET=new RewriteRuleTokenStream(adaptor,"token LET");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleTokenStream stream_NODE=new RewriteRuleTokenStream(adaptor,"token NODE");
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_PRESERVE=new RewriteRuleTokenStream(adaptor,"token PRESERVE");
        RewriteRuleTokenStream stream_LEVELS=new RewriteRuleTokenStream(adaptor,"token LEVELS");
        RewriteRuleTokenStream stream_ATTRIBUTE=new RewriteRuleTokenStream(adaptor,"token ATTRIBUTE");
        RewriteRuleTokenStream stream_CHILD=new RewriteRuleTokenStream(adaptor,"token CHILD");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_OPTION=new RewriteRuleTokenStream(adaptor,"token OPTION");

        try {
            // etc/XQFT.g:774:16: ( (a= NCName | a= ALL | a= ANY | a= ANCESTOR | a= ANCESTOR_OR_SELF | a= AND | a= AS | a= ASCENDING | a= AT | a= ATTRIBUTE | a= BASE_URI | a= BY | a= BOUNDARYSPACE | a= CASE | a= CAST | a= CASTABLE | a= CHILD | a= COLLATION | a= COMMENT | a= CONSTRUCTION | a= CONTENT | a= COPY_NAMESPACES | a= DECLARE | a= DEFAULT | a= DESCENDANT | a= DESCENDANT_OR_SELF | a= DESCENDING | a= DIACRITICS | a= DIFFERENT | a= DISTANCE | a= DIV | a= DOCUMENT | a= DOCUMENT_NODE | a= ELEMENT | a= ELSE | a= ENCODING | a= END | a= ENTIRE | a= EMPTY | a= EMPTY_SEQUENCE | a= EQ | a= EVERY | a= EXACTLY | a= EXCEPT | a= EXTERNAL | a= FOLLOWING | a= FOLLOWING_SIBLING | a= FOR | a= FROM | a= FTAND | a= FTCONTAINS | a= FTNOT | a= FTOPTION | a= FTOR | a= FUNCTION | a= GE | a= GREATEST | a= GT | a= IDIV | a= IF | a= IMPORT | a= IN | a= INHERIT | a= INSENSITIVE | a= INSTANCE | a= INTERSECT | a= IS | a= ITEM | a= LANGUAGE | a= LAX | a= LE | a= LEAST | a= LET | a= LEVELS | a= LOWERCASE | a= LT | a= MOD | a= MODULE | a= MOST | a= NAMESPACE | a= NE | a= NODE | a= NOINHERIT | a= NOPRESERVE | a= NOT | a= OCCURS | a= OF | a= OPTION | a= OR | a= ORDER | a= ORDERED | a= ORDERING | a= PARAGRAPH | a= PARAGRAPHS | a= PARENT | a= PHRASE | a= PRECEDING | a= PRECEDING_SIBLING | a= PRESERVE | a= PROCESSING_INSTRUCTION | a= RELATIONSHIP | a= RETURN | a= SAME | a= SATISFIES | a= SCHEMA | a= SCHEMA_ATTRIBUTE | a= SCHEMA_ELEMENT | a= SCORE | a= SELF | a= SENSITIVE | a= SENTENCES | a= SENTENCE | a= SOME | a= STABLE | a= START | a= STEMMING | a= STOP | a= STRICT | a= STRIP | a= TEXT | a= THESAURUS | a= THEN | a= TIMES | a= TO | a= TREAT | a= TYPESWITCH | a= UNION | a= UNORDERED | a= UPPERCASE | a= VALIDATE | a= VARIABLE | a= VERSION | a= WEIGHT | a= WHERE | a= WILDCARDS | a= WINDOW | a= WITH | a= WITHOUT | a= WORD | a= WORDS | a= XQUERY ) -> NCName[$a] )
            // etc/XQFT.g:775:5: (a= NCName | a= ALL | a= ANY | a= ANCESTOR | a= ANCESTOR_OR_SELF | a= AND | a= AS | a= ASCENDING | a= AT | a= ATTRIBUTE | a= BASE_URI | a= BY | a= BOUNDARYSPACE | a= CASE | a= CAST | a= CASTABLE | a= CHILD | a= COLLATION | a= COMMENT | a= CONSTRUCTION | a= CONTENT | a= COPY_NAMESPACES | a= DECLARE | a= DEFAULT | a= DESCENDANT | a= DESCENDANT_OR_SELF | a= DESCENDING | a= DIACRITICS | a= DIFFERENT | a= DISTANCE | a= DIV | a= DOCUMENT | a= DOCUMENT_NODE | a= ELEMENT | a= ELSE | a= ENCODING | a= END | a= ENTIRE | a= EMPTY | a= EMPTY_SEQUENCE | a= EQ | a= EVERY | a= EXACTLY | a= EXCEPT | a= EXTERNAL | a= FOLLOWING | a= FOLLOWING_SIBLING | a= FOR | a= FROM | a= FTAND | a= FTCONTAINS | a= FTNOT | a= FTOPTION | a= FTOR | a= FUNCTION | a= GE | a= GREATEST | a= GT | a= IDIV | a= IF | a= IMPORT | a= IN | a= INHERIT | a= INSENSITIVE | a= INSTANCE | a= INTERSECT | a= IS | a= ITEM | a= LANGUAGE | a= LAX | a= LE | a= LEAST | a= LET | a= LEVELS | a= LOWERCASE | a= LT | a= MOD | a= MODULE | a= MOST | a= NAMESPACE | a= NE | a= NODE | a= NOINHERIT | a= NOPRESERVE | a= NOT | a= OCCURS | a= OF | a= OPTION | a= OR | a= ORDER | a= ORDERED | a= ORDERING | a= PARAGRAPH | a= PARAGRAPHS | a= PARENT | a= PHRASE | a= PRECEDING | a= PRECEDING_SIBLING | a= PRESERVE | a= PROCESSING_INSTRUCTION | a= RELATIONSHIP | a= RETURN | a= SAME | a= SATISFIES | a= SCHEMA | a= SCHEMA_ATTRIBUTE | a= SCHEMA_ELEMENT | a= SCORE | a= SELF | a= SENSITIVE | a= SENTENCES | a= SENTENCE | a= SOME | a= STABLE | a= START | a= STEMMING | a= STOP | a= STRICT | a= STRIP | a= TEXT | a= THESAURUS | a= THEN | a= TIMES | a= TO | a= TREAT | a= TYPESWITCH | a= UNION | a= UNORDERED | a= UPPERCASE | a= VALIDATE | a= VARIABLE | a= VERSION | a= WEIGHT | a= WHERE | a= WILDCARDS | a= WINDOW | a= WITH | a= WITHOUT | a= WORD | a= WORDS | a= XQUERY )
            {
            // etc/XQFT.g:775:5: (a= NCName | a= ALL | a= ANY | a= ANCESTOR | a= ANCESTOR_OR_SELF | a= AND | a= AS | a= ASCENDING | a= AT | a= ATTRIBUTE | a= BASE_URI | a= BY | a= BOUNDARYSPACE | a= CASE | a= CAST | a= CASTABLE | a= CHILD | a= COLLATION | a= COMMENT | a= CONSTRUCTION | a= CONTENT | a= COPY_NAMESPACES | a= DECLARE | a= DEFAULT | a= DESCENDANT | a= DESCENDANT_OR_SELF | a= DESCENDING | a= DIACRITICS | a= DIFFERENT | a= DISTANCE | a= DIV | a= DOCUMENT | a= DOCUMENT_NODE | a= ELEMENT | a= ELSE | a= ENCODING | a= END | a= ENTIRE | a= EMPTY | a= EMPTY_SEQUENCE | a= EQ | a= EVERY | a= EXACTLY | a= EXCEPT | a= EXTERNAL | a= FOLLOWING | a= FOLLOWING_SIBLING | a= FOR | a= FROM | a= FTAND | a= FTCONTAINS | a= FTNOT | a= FTOPTION | a= FTOR | a= FUNCTION | a= GE | a= GREATEST | a= GT | a= IDIV | a= IF | a= IMPORT | a= IN | a= INHERIT | a= INSENSITIVE | a= INSTANCE | a= INTERSECT | a= IS | a= ITEM | a= LANGUAGE | a= LAX | a= LE | a= LEAST | a= LET | a= LEVELS | a= LOWERCASE | a= LT | a= MOD | a= MODULE | a= MOST | a= NAMESPACE | a= NE | a= NODE | a= NOINHERIT | a= NOPRESERVE | a= NOT | a= OCCURS | a= OF | a= OPTION | a= OR | a= ORDER | a= ORDERED | a= ORDERING | a= PARAGRAPH | a= PARAGRAPHS | a= PARENT | a= PHRASE | a= PRECEDING | a= PRECEDING_SIBLING | a= PRESERVE | a= PROCESSING_INSTRUCTION | a= RELATIONSHIP | a= RETURN | a= SAME | a= SATISFIES | a= SCHEMA | a= SCHEMA_ATTRIBUTE | a= SCHEMA_ELEMENT | a= SCORE | a= SELF | a= SENSITIVE | a= SENTENCES | a= SENTENCE | a= SOME | a= STABLE | a= START | a= STEMMING | a= STOP | a= STRICT | a= STRIP | a= TEXT | a= THESAURUS | a= THEN | a= TIMES | a= TO | a= TREAT | a= TYPESWITCH | a= UNION | a= UNORDERED | a= UPPERCASE | a= VALIDATE | a= VARIABLE | a= VERSION | a= WEIGHT | a= WHERE | a= WILDCARDS | a= WINDOW | a= WITH | a= WITHOUT | a= WORD | a= WORDS | a= XQUERY )
            int alt151=141;
            switch ( input.LA(1) ) {
            case NCName:
                {
                alt151=1;
                }
                break;
            case ALL:
                {
                alt151=2;
                }
                break;
            case ANY:
                {
                alt151=3;
                }
                break;
            case ANCESTOR:
                {
                alt151=4;
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                alt151=5;
                }
                break;
            case AND:
                {
                alt151=6;
                }
                break;
            case AS:
                {
                alt151=7;
                }
                break;
            case ASCENDING:
                {
                alt151=8;
                }
                break;
            case AT:
                {
                alt151=9;
                }
                break;
            case ATTRIBUTE:
                {
                alt151=10;
                }
                break;
            case BASE_URI:
                {
                alt151=11;
                }
                break;
            case BY:
                {
                alt151=12;
                }
                break;
            case BOUNDARYSPACE:
                {
                alt151=13;
                }
                break;
            case CASE:
                {
                alt151=14;
                }
                break;
            case CAST:
                {
                alt151=15;
                }
                break;
            case CASTABLE:
                {
                alt151=16;
                }
                break;
            case CHILD:
                {
                alt151=17;
                }
                break;
            case COLLATION:
                {
                alt151=18;
                }
                break;
            case COMMENT:
                {
                alt151=19;
                }
                break;
            case CONSTRUCTION:
                {
                alt151=20;
                }
                break;
            case CONTENT:
                {
                alt151=21;
                }
                break;
            case COPY_NAMESPACES:
                {
                alt151=22;
                }
                break;
            case DECLARE:
                {
                alt151=23;
                }
                break;
            case DEFAULT:
                {
                alt151=24;
                }
                break;
            case DESCENDANT:
                {
                alt151=25;
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                alt151=26;
                }
                break;
            case DESCENDING:
                {
                alt151=27;
                }
                break;
            case DIACRITICS:
                {
                alt151=28;
                }
                break;
            case DIFFERENT:
                {
                alt151=29;
                }
                break;
            case DISTANCE:
                {
                alt151=30;
                }
                break;
            case DIV:
                {
                alt151=31;
                }
                break;
            case DOCUMENT:
                {
                alt151=32;
                }
                break;
            case DOCUMENT_NODE:
                {
                alt151=33;
                }
                break;
            case ELEMENT:
                {
                alt151=34;
                }
                break;
            case ELSE:
                {
                alt151=35;
                }
                break;
            case ENCODING:
                {
                alt151=36;
                }
                break;
            case END:
                {
                alt151=37;
                }
                break;
            case ENTIRE:
                {
                alt151=38;
                }
                break;
            case EMPTY:
                {
                alt151=39;
                }
                break;
            case EMPTY_SEQUENCE:
                {
                alt151=40;
                }
                break;
            case EQ:
                {
                alt151=41;
                }
                break;
            case EVERY:
                {
                alt151=42;
                }
                break;
            case EXACTLY:
                {
                alt151=43;
                }
                break;
            case EXCEPT:
                {
                alt151=44;
                }
                break;
            case EXTERNAL:
                {
                alt151=45;
                }
                break;
            case FOLLOWING:
                {
                alt151=46;
                }
                break;
            case FOLLOWING_SIBLING:
                {
                alt151=47;
                }
                break;
            case FOR:
                {
                alt151=48;
                }
                break;
            case FROM:
                {
                alt151=49;
                }
                break;
            case FTAND:
                {
                alt151=50;
                }
                break;
            case FTCONTAINS:
                {
                alt151=51;
                }
                break;
            case FTNOT:
                {
                alt151=52;
                }
                break;
            case FTOPTION:
                {
                alt151=53;
                }
                break;
            case FTOR:
                {
                alt151=54;
                }
                break;
            case FUNCTION:
                {
                alt151=55;
                }
                break;
            case GE:
                {
                alt151=56;
                }
                break;
            case GREATEST:
                {
                alt151=57;
                }
                break;
            case GT:
                {
                alt151=58;
                }
                break;
            case IDIV:
                {
                alt151=59;
                }
                break;
            case IF:
                {
                alt151=60;
                }
                break;
            case IMPORT:
                {
                alt151=61;
                }
                break;
            case IN:
                {
                alt151=62;
                }
                break;
            case INHERIT:
                {
                alt151=63;
                }
                break;
            case INSENSITIVE:
                {
                alt151=64;
                }
                break;
            case INSTANCE:
                {
                alt151=65;
                }
                break;
            case INTERSECT:
                {
                alt151=66;
                }
                break;
            case IS:
                {
                alt151=67;
                }
                break;
            case ITEM:
                {
                alt151=68;
                }
                break;
            case LANGUAGE:
                {
                alt151=69;
                }
                break;
            case LAX:
                {
                alt151=70;
                }
                break;
            case LE:
                {
                alt151=71;
                }
                break;
            case LEAST:
                {
                alt151=72;
                }
                break;
            case LET:
                {
                alt151=73;
                }
                break;
            case LEVELS:
                {
                alt151=74;
                }
                break;
            case LOWERCASE:
                {
                alt151=75;
                }
                break;
            case LT:
                {
                alt151=76;
                }
                break;
            case MOD:
                {
                alt151=77;
                }
                break;
            case MODULE:
                {
                alt151=78;
                }
                break;
            case MOST:
                {
                alt151=79;
                }
                break;
            case NAMESPACE:
                {
                alt151=80;
                }
                break;
            case NE:
                {
                alt151=81;
                }
                break;
            case NODE:
                {
                alt151=82;
                }
                break;
            case NOINHERIT:
                {
                alt151=83;
                }
                break;
            case NOPRESERVE:
                {
                alt151=84;
                }
                break;
            case NOT:
                {
                alt151=85;
                }
                break;
            case OCCURS:
                {
                alt151=86;
                }
                break;
            case OF:
                {
                alt151=87;
                }
                break;
            case OPTION:
                {
                alt151=88;
                }
                break;
            case OR:
                {
                alt151=89;
                }
                break;
            case ORDER:
                {
                alt151=90;
                }
                break;
            case ORDERED:
                {
                alt151=91;
                }
                break;
            case ORDERING:
                {
                alt151=92;
                }
                break;
            case PARAGRAPH:
                {
                alt151=93;
                }
                break;
            case PARAGRAPHS:
                {
                alt151=94;
                }
                break;
            case PARENT:
                {
                alt151=95;
                }
                break;
            case PHRASE:
                {
                alt151=96;
                }
                break;
            case PRECEDING:
                {
                alt151=97;
                }
                break;
            case PRECEDING_SIBLING:
                {
                alt151=98;
                }
                break;
            case PRESERVE:
                {
                alt151=99;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt151=100;
                }
                break;
            case RELATIONSHIP:
                {
                alt151=101;
                }
                break;
            case RETURN:
                {
                alt151=102;
                }
                break;
            case SAME:
                {
                alt151=103;
                }
                break;
            case SATISFIES:
                {
                alt151=104;
                }
                break;
            case SCHEMA:
                {
                alt151=105;
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                alt151=106;
                }
                break;
            case SCHEMA_ELEMENT:
                {
                alt151=107;
                }
                break;
            case SCORE:
                {
                alt151=108;
                }
                break;
            case SELF:
                {
                alt151=109;
                }
                break;
            case SENSITIVE:
                {
                alt151=110;
                }
                break;
            case SENTENCES:
                {
                alt151=111;
                }
                break;
            case SENTENCE:
                {
                alt151=112;
                }
                break;
            case SOME:
                {
                alt151=113;
                }
                break;
            case STABLE:
                {
                alt151=114;
                }
                break;
            case START:
                {
                alt151=115;
                }
                break;
            case STEMMING:
                {
                alt151=116;
                }
                break;
            case STOP:
                {
                alt151=117;
                }
                break;
            case STRICT:
                {
                alt151=118;
                }
                break;
            case STRIP:
                {
                alt151=119;
                }
                break;
            case TEXT:
                {
                alt151=120;
                }
                break;
            case THESAURUS:
                {
                alt151=121;
                }
                break;
            case THEN:
                {
                alt151=122;
                }
                break;
            case TIMES:
                {
                alt151=123;
                }
                break;
            case TO:
                {
                alt151=124;
                }
                break;
            case TREAT:
                {
                alt151=125;
                }
                break;
            case TYPESWITCH:
                {
                alt151=126;
                }
                break;
            case UNION:
                {
                alt151=127;
                }
                break;
            case UNORDERED:
                {
                alt151=128;
                }
                break;
            case UPPERCASE:
                {
                alt151=129;
                }
                break;
            case VALIDATE:
                {
                alt151=130;
                }
                break;
            case VARIABLE:
                {
                alt151=131;
                }
                break;
            case VERSION:
                {
                alt151=132;
                }
                break;
            case WEIGHT:
                {
                alt151=133;
                }
                break;
            case WHERE:
                {
                alt151=134;
                }
                break;
            case WILDCARDS:
                {
                alt151=135;
                }
                break;
            case WINDOW:
                {
                alt151=136;
                }
                break;
            case WITH:
                {
                alt151=137;
                }
                break;
            case WITHOUT:
                {
                alt151=138;
                }
                break;
            case WORD:
                {
                alt151=139;
                }
                break;
            case WORDS:
                {
                alt151=140;
                }
                break;
            case XQUERY:
                {
                alt151=141;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("775:5: (a= NCName | a= ALL | a= ANY | a= ANCESTOR | a= ANCESTOR_OR_SELF | a= AND | a= AS | a= ASCENDING | a= AT | a= ATTRIBUTE | a= BASE_URI | a= BY | a= BOUNDARYSPACE | a= CASE | a= CAST | a= CASTABLE | a= CHILD | a= COLLATION | a= COMMENT | a= CONSTRUCTION | a= CONTENT | a= COPY_NAMESPACES | a= DECLARE | a= DEFAULT | a= DESCENDANT | a= DESCENDANT_OR_SELF | a= DESCENDING | a= DIACRITICS | a= DIFFERENT | a= DISTANCE | a= DIV | a= DOCUMENT | a= DOCUMENT_NODE | a= ELEMENT | a= ELSE | a= ENCODING | a= END | a= ENTIRE | a= EMPTY | a= EMPTY_SEQUENCE | a= EQ | a= EVERY | a= EXACTLY | a= EXCEPT | a= EXTERNAL | a= FOLLOWING | a= FOLLOWING_SIBLING | a= FOR | a= FROM | a= FTAND | a= FTCONTAINS | a= FTNOT | a= FTOPTION | a= FTOR | a= FUNCTION | a= GE | a= GREATEST | a= GT | a= IDIV | a= IF | a= IMPORT | a= IN | a= INHERIT | a= INSENSITIVE | a= INSTANCE | a= INTERSECT | a= IS | a= ITEM | a= LANGUAGE | a= LAX | a= LE | a= LEAST | a= LET | a= LEVELS | a= LOWERCASE | a= LT | a= MOD | a= MODULE | a= MOST | a= NAMESPACE | a= NE | a= NODE | a= NOINHERIT | a= NOPRESERVE | a= NOT | a= OCCURS | a= OF | a= OPTION | a= OR | a= ORDER | a= ORDERED | a= ORDERING | a= PARAGRAPH | a= PARAGRAPHS | a= PARENT | a= PHRASE | a= PRECEDING | a= PRECEDING_SIBLING | a= PRESERVE | a= PROCESSING_INSTRUCTION | a= RELATIONSHIP | a= RETURN | a= SAME | a= SATISFIES | a= SCHEMA | a= SCHEMA_ATTRIBUTE | a= SCHEMA_ELEMENT | a= SCORE | a= SELF | a= SENSITIVE | a= SENTENCES | a= SENTENCE | a= SOME | a= STABLE | a= START | a= STEMMING | a= STOP | a= STRICT | a= STRIP | a= TEXT | a= THESAURUS | a= THEN | a= TIMES | a= TO | a= TREAT | a= TYPESWITCH | a= UNION | a= UNORDERED | a= UPPERCASE | a= VALIDATE | a= VARIABLE | a= VERSION | a= WEIGHT | a= WHERE | a= WILDCARDS | a= WINDOW | a= WITH | a= WITHOUT | a= WORD | a= WORDS | a= XQUERY )", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // etc/XQFT.g:775:6: a= NCName
                    {
                    a=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_ncNameorKeyword9089); if (failed) return retval;
                    if ( backtracking==0 ) stream_NCName.add(a);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:776:7: a= ALL
                    {
                    a=(Token)input.LT(1);
                    match(input,ALL,FOLLOW_ALL_in_ncNameorKeyword9099); if (failed) return retval;
                    if ( backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:777:7: a= ANY
                    {
                    a=(Token)input.LT(1);
                    match(input,ANY,FOLLOW_ANY_in_ncNameorKeyword9110); if (failed) return retval;
                    if ( backtracking==0 ) stream_ANY.add(a);


                    }
                    break;
                case 4 :
                    // etc/XQFT.g:778:7: a= ANCESTOR
                    {
                    a=(Token)input.LT(1);
                    match(input,ANCESTOR,FOLLOW_ANCESTOR_in_ncNameorKeyword9120); if (failed) return retval;
                    if ( backtracking==0 ) stream_ANCESTOR.add(a);


                    }
                    break;
                case 5 :
                    // etc/XQFT.g:779:7: a= ANCESTOR_OR_SELF
                    {
                    a=(Token)input.LT(1);
                    match(input,ANCESTOR_OR_SELF,FOLLOW_ANCESTOR_OR_SELF_in_ncNameorKeyword9130); if (failed) return retval;
                    if ( backtracking==0 ) stream_ANCESTOR_OR_SELF.add(a);


                    }
                    break;
                case 6 :
                    // etc/XQFT.g:780:7: a= AND
                    {
                    a=(Token)input.LT(1);
                    match(input,AND,FOLLOW_AND_in_ncNameorKeyword9140); if (failed) return retval;
                    if ( backtracking==0 ) stream_AND.add(a);


                    }
                    break;
                case 7 :
                    // etc/XQFT.g:781:7: a= AS
                    {
                    a=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_ncNameorKeyword9150); if (failed) return retval;
                    if ( backtracking==0 ) stream_AS.add(a);


                    }
                    break;
                case 8 :
                    // etc/XQFT.g:782:7: a= ASCENDING
                    {
                    a=(Token)input.LT(1);
                    match(input,ASCENDING,FOLLOW_ASCENDING_in_ncNameorKeyword9160); if (failed) return retval;
                    if ( backtracking==0 ) stream_ASCENDING.add(a);


                    }
                    break;
                case 9 :
                    // etc/XQFT.g:783:7: a= AT
                    {
                    a=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ncNameorKeyword9170); if (failed) return retval;
                    if ( backtracking==0 ) stream_AT.add(a);


                    }
                    break;
                case 10 :
                    // etc/XQFT.g:784:7: a= ATTRIBUTE
                    {
                    a=(Token)input.LT(1);
                    match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_ncNameorKeyword9180); if (failed) return retval;
                    if ( backtracking==0 ) stream_ATTRIBUTE.add(a);


                    }
                    break;
                case 11 :
                    // etc/XQFT.g:785:7: a= BASE_URI
                    {
                    a=(Token)input.LT(1);
                    match(input,BASE_URI,FOLLOW_BASE_URI_in_ncNameorKeyword9190); if (failed) return retval;
                    if ( backtracking==0 ) stream_BASE_URI.add(a);


                    }
                    break;
                case 12 :
                    // etc/XQFT.g:786:7: a= BY
                    {
                    a=(Token)input.LT(1);
                    match(input,BY,FOLLOW_BY_in_ncNameorKeyword9200); if (failed) return retval;
                    if ( backtracking==0 ) stream_BY.add(a);


                    }
                    break;
                case 13 :
                    // etc/XQFT.g:787:7: a= BOUNDARYSPACE
                    {
                    a=(Token)input.LT(1);
                    match(input,BOUNDARYSPACE,FOLLOW_BOUNDARYSPACE_in_ncNameorKeyword9210); if (failed) return retval;
                    if ( backtracking==0 ) stream_BOUNDARYSPACE.add(a);


                    }
                    break;
                case 14 :
                    // etc/XQFT.g:788:7: a= CASE
                    {
                    a=(Token)input.LT(1);
                    match(input,CASE,FOLLOW_CASE_in_ncNameorKeyword9220); if (failed) return retval;
                    if ( backtracking==0 ) stream_CASE.add(a);


                    }
                    break;
                case 15 :
                    // etc/XQFT.g:789:7: a= CAST
                    {
                    a=(Token)input.LT(1);
                    match(input,CAST,FOLLOW_CAST_in_ncNameorKeyword9230); if (failed) return retval;
                    if ( backtracking==0 ) stream_CAST.add(a);


                    }
                    break;
                case 16 :
                    // etc/XQFT.g:790:7: a= CASTABLE
                    {
                    a=(Token)input.LT(1);
                    match(input,CASTABLE,FOLLOW_CASTABLE_in_ncNameorKeyword9240); if (failed) return retval;
                    if ( backtracking==0 ) stream_CASTABLE.add(a);


                    }
                    break;
                case 17 :
                    // etc/XQFT.g:791:7: a= CHILD
                    {
                    a=(Token)input.LT(1);
                    match(input,CHILD,FOLLOW_CHILD_in_ncNameorKeyword9250); if (failed) return retval;
                    if ( backtracking==0 ) stream_CHILD.add(a);


                    }
                    break;
                case 18 :
                    // etc/XQFT.g:792:7: a= COLLATION
                    {
                    a=(Token)input.LT(1);
                    match(input,COLLATION,FOLLOW_COLLATION_in_ncNameorKeyword9260); if (failed) return retval;
                    if ( backtracking==0 ) stream_COLLATION.add(a);


                    }
                    break;
                case 19 :
                    // etc/XQFT.g:793:7: a= COMMENT
                    {
                    a=(Token)input.LT(1);
                    match(input,COMMENT,FOLLOW_COMMENT_in_ncNameorKeyword9270); if (failed) return retval;
                    if ( backtracking==0 ) stream_COMMENT.add(a);


                    }
                    break;
                case 20 :
                    // etc/XQFT.g:794:7: a= CONSTRUCTION
                    {
                    a=(Token)input.LT(1);
                    match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_ncNameorKeyword9280); if (failed) return retval;
                    if ( backtracking==0 ) stream_CONSTRUCTION.add(a);


                    }
                    break;
                case 21 :
                    // etc/XQFT.g:795:7: a= CONTENT
                    {
                    a=(Token)input.LT(1);
                    match(input,CONTENT,FOLLOW_CONTENT_in_ncNameorKeyword9290); if (failed) return retval;
                    if ( backtracking==0 ) stream_CONTENT.add(a);


                    }
                    break;
                case 22 :
                    // etc/XQFT.g:796:7: a= COPY_NAMESPACES
                    {
                    a=(Token)input.LT(1);
                    match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_ncNameorKeyword9300); if (failed) return retval;
                    if ( backtracking==0 ) stream_COPY_NAMESPACES.add(a);


                    }
                    break;
                case 23 :
                    // etc/XQFT.g:797:7: a= DECLARE
                    {
                    a=(Token)input.LT(1);
                    match(input,DECLARE,FOLLOW_DECLARE_in_ncNameorKeyword9310); if (failed) return retval;
                    if ( backtracking==0 ) stream_DECLARE.add(a);


                    }
                    break;
                case 24 :
                    // etc/XQFT.g:798:7: a= DEFAULT
                    {
                    a=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_ncNameorKeyword9320); if (failed) return retval;
                    if ( backtracking==0 ) stream_DEFAULT.add(a);


                    }
                    break;
                case 25 :
                    // etc/XQFT.g:799:7: a= DESCENDANT
                    {
                    a=(Token)input.LT(1);
                    match(input,DESCENDANT,FOLLOW_DESCENDANT_in_ncNameorKeyword9330); if (failed) return retval;
                    if ( backtracking==0 ) stream_DESCENDANT.add(a);


                    }
                    break;
                case 26 :
                    // etc/XQFT.g:800:7: a= DESCENDANT_OR_SELF
                    {
                    a=(Token)input.LT(1);
                    match(input,DESCENDANT_OR_SELF,FOLLOW_DESCENDANT_OR_SELF_in_ncNameorKeyword9340); if (failed) return retval;
                    if ( backtracking==0 ) stream_DESCENDANT_OR_SELF.add(a);


                    }
                    break;
                case 27 :
                    // etc/XQFT.g:801:7: a= DESCENDING
                    {
                    a=(Token)input.LT(1);
                    match(input,DESCENDING,FOLLOW_DESCENDING_in_ncNameorKeyword9350); if (failed) return retval;
                    if ( backtracking==0 ) stream_DESCENDING.add(a);


                    }
                    break;
                case 28 :
                    // etc/XQFT.g:802:7: a= DIACRITICS
                    {
                    a=(Token)input.LT(1);
                    match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ncNameorKeyword9360); if (failed) return retval;
                    if ( backtracking==0 ) stream_DIACRITICS.add(a);


                    }
                    break;
                case 29 :
                    // etc/XQFT.g:803:7: a= DIFFERENT
                    {
                    a=(Token)input.LT(1);
                    match(input,DIFFERENT,FOLLOW_DIFFERENT_in_ncNameorKeyword9370); if (failed) return retval;
                    if ( backtracking==0 ) stream_DIFFERENT.add(a);


                    }
                    break;
                case 30 :
                    // etc/XQFT.g:804:7: a= DISTANCE
                    {
                    a=(Token)input.LT(1);
                    match(input,DISTANCE,FOLLOW_DISTANCE_in_ncNameorKeyword9380); if (failed) return retval;
                    if ( backtracking==0 ) stream_DISTANCE.add(a);


                    }
                    break;
                case 31 :
                    // etc/XQFT.g:805:7: a= DIV
                    {
                    a=(Token)input.LT(1);
                    match(input,DIV,FOLLOW_DIV_in_ncNameorKeyword9390); if (failed) return retval;
                    if ( backtracking==0 ) stream_DIV.add(a);


                    }
                    break;
                case 32 :
                    // etc/XQFT.g:806:7: a= DOCUMENT
                    {
                    a=(Token)input.LT(1);
                    match(input,DOCUMENT,FOLLOW_DOCUMENT_in_ncNameorKeyword9400); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOCUMENT.add(a);


                    }
                    break;
                case 33 :
                    // etc/XQFT.g:807:7: a= DOCUMENT_NODE
                    {
                    a=(Token)input.LT(1);
                    match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_ncNameorKeyword9410); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOCUMENT_NODE.add(a);


                    }
                    break;
                case 34 :
                    // etc/XQFT.g:808:7: a= ELEMENT
                    {
                    a=(Token)input.LT(1);
                    match(input,ELEMENT,FOLLOW_ELEMENT_in_ncNameorKeyword9420); if (failed) return retval;
                    if ( backtracking==0 ) stream_ELEMENT.add(a);


                    }
                    break;
                case 35 :
                    // etc/XQFT.g:809:7: a= ELSE
                    {
                    a=(Token)input.LT(1);
                    match(input,ELSE,FOLLOW_ELSE_in_ncNameorKeyword9430); if (failed) return retval;
                    if ( backtracking==0 ) stream_ELSE.add(a);


                    }
                    break;
                case 36 :
                    // etc/XQFT.g:810:7: a= ENCODING
                    {
                    a=(Token)input.LT(1);
                    match(input,ENCODING,FOLLOW_ENCODING_in_ncNameorKeyword9440); if (failed) return retval;
                    if ( backtracking==0 ) stream_ENCODING.add(a);


                    }
                    break;
                case 37 :
                    // etc/XQFT.g:811:7: a= END
                    {
                    a=(Token)input.LT(1);
                    match(input,END,FOLLOW_END_in_ncNameorKeyword9450); if (failed) return retval;
                    if ( backtracking==0 ) stream_END.add(a);


                    }
                    break;
                case 38 :
                    // etc/XQFT.g:812:7: a= ENTIRE
                    {
                    a=(Token)input.LT(1);
                    match(input,ENTIRE,FOLLOW_ENTIRE_in_ncNameorKeyword9460); if (failed) return retval;
                    if ( backtracking==0 ) stream_ENTIRE.add(a);


                    }
                    break;
                case 39 :
                    // etc/XQFT.g:813:7: a= EMPTY
                    {
                    a=(Token)input.LT(1);
                    match(input,EMPTY,FOLLOW_EMPTY_in_ncNameorKeyword9470); if (failed) return retval;
                    if ( backtracking==0 ) stream_EMPTY.add(a);


                    }
                    break;
                case 40 :
                    // etc/XQFT.g:814:7: a= EMPTY_SEQUENCE
                    {
                    a=(Token)input.LT(1);
                    match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_ncNameorKeyword9480); if (failed) return retval;
                    if ( backtracking==0 ) stream_EMPTY_SEQUENCE.add(a);


                    }
                    break;
                case 41 :
                    // etc/XQFT.g:815:7: a= EQ
                    {
                    a=(Token)input.LT(1);
                    match(input,EQ,FOLLOW_EQ_in_ncNameorKeyword9490); if (failed) return retval;
                    if ( backtracking==0 ) stream_EQ.add(a);


                    }
                    break;
                case 42 :
                    // etc/XQFT.g:816:7: a= EVERY
                    {
                    a=(Token)input.LT(1);
                    match(input,EVERY,FOLLOW_EVERY_in_ncNameorKeyword9500); if (failed) return retval;
                    if ( backtracking==0 ) stream_EVERY.add(a);


                    }
                    break;
                case 43 :
                    // etc/XQFT.g:817:7: a= EXACTLY
                    {
                    a=(Token)input.LT(1);
                    match(input,EXACTLY,FOLLOW_EXACTLY_in_ncNameorKeyword9510); if (failed) return retval;
                    if ( backtracking==0 ) stream_EXACTLY.add(a);


                    }
                    break;
                case 44 :
                    // etc/XQFT.g:818:7: a= EXCEPT
                    {
                    a=(Token)input.LT(1);
                    match(input,EXCEPT,FOLLOW_EXCEPT_in_ncNameorKeyword9520); if (failed) return retval;
                    if ( backtracking==0 ) stream_EXCEPT.add(a);


                    }
                    break;
                case 45 :
                    // etc/XQFT.g:819:7: a= EXTERNAL
                    {
                    a=(Token)input.LT(1);
                    match(input,EXTERNAL,FOLLOW_EXTERNAL_in_ncNameorKeyword9530); if (failed) return retval;
                    if ( backtracking==0 ) stream_EXTERNAL.add(a);


                    }
                    break;
                case 46 :
                    // etc/XQFT.g:820:7: a= FOLLOWING
                    {
                    a=(Token)input.LT(1);
                    match(input,FOLLOWING,FOLLOW_FOLLOWING_in_ncNameorKeyword9540); if (failed) return retval;
                    if ( backtracking==0 ) stream_FOLLOWING.add(a);


                    }
                    break;
                case 47 :
                    // etc/XQFT.g:821:7: a= FOLLOWING_SIBLING
                    {
                    a=(Token)input.LT(1);
                    match(input,FOLLOWING_SIBLING,FOLLOW_FOLLOWING_SIBLING_in_ncNameorKeyword9550); if (failed) return retval;
                    if ( backtracking==0 ) stream_FOLLOWING_SIBLING.add(a);


                    }
                    break;
                case 48 :
                    // etc/XQFT.g:822:7: a= FOR
                    {
                    a=(Token)input.LT(1);
                    match(input,FOR,FOLLOW_FOR_in_ncNameorKeyword9560); if (failed) return retval;
                    if ( backtracking==0 ) stream_FOR.add(a);


                    }
                    break;
                case 49 :
                    // etc/XQFT.g:823:7: a= FROM
                    {
                    a=(Token)input.LT(1);
                    match(input,FROM,FOLLOW_FROM_in_ncNameorKeyword9570); if (failed) return retval;
                    if ( backtracking==0 ) stream_FROM.add(a);


                    }
                    break;
                case 50 :
                    // etc/XQFT.g:824:7: a= FTAND
                    {
                    a=(Token)input.LT(1);
                    match(input,FTAND,FOLLOW_FTAND_in_ncNameorKeyword9580); if (failed) return retval;
                    if ( backtracking==0 ) stream_FTAND.add(a);


                    }
                    break;
                case 51 :
                    // etc/XQFT.g:825:7: a= FTCONTAINS
                    {
                    a=(Token)input.LT(1);
                    match(input,FTCONTAINS,FOLLOW_FTCONTAINS_in_ncNameorKeyword9590); if (failed) return retval;
                    if ( backtracking==0 ) stream_FTCONTAINS.add(a);


                    }
                    break;
                case 52 :
                    // etc/XQFT.g:826:7: a= FTNOT
                    {
                    a=(Token)input.LT(1);
                    match(input,FTNOT,FOLLOW_FTNOT_in_ncNameorKeyword9600); if (failed) return retval;
                    if ( backtracking==0 ) stream_FTNOT.add(a);


                    }
                    break;
                case 53 :
                    // etc/XQFT.g:827:7: a= FTOPTION
                    {
                    a=(Token)input.LT(1);
                    match(input,FTOPTION,FOLLOW_FTOPTION_in_ncNameorKeyword9610); if (failed) return retval;
                    if ( backtracking==0 ) stream_FTOPTION.add(a);


                    }
                    break;
                case 54 :
                    // etc/XQFT.g:828:7: a= FTOR
                    {
                    a=(Token)input.LT(1);
                    match(input,FTOR,FOLLOW_FTOR_in_ncNameorKeyword9620); if (failed) return retval;
                    if ( backtracking==0 ) stream_FTOR.add(a);


                    }
                    break;
                case 55 :
                    // etc/XQFT.g:829:7: a= FUNCTION
                    {
                    a=(Token)input.LT(1);
                    match(input,FUNCTION,FOLLOW_FUNCTION_in_ncNameorKeyword9630); if (failed) return retval;
                    if ( backtracking==0 ) stream_FUNCTION.add(a);


                    }
                    break;
                case 56 :
                    // etc/XQFT.g:830:7: a= GE
                    {
                    a=(Token)input.LT(1);
                    match(input,GE,FOLLOW_GE_in_ncNameorKeyword9640); if (failed) return retval;
                    if ( backtracking==0 ) stream_GE.add(a);


                    }
                    break;
                case 57 :
                    // etc/XQFT.g:831:7: a= GREATEST
                    {
                    a=(Token)input.LT(1);
                    match(input,GREATEST,FOLLOW_GREATEST_in_ncNameorKeyword9650); if (failed) return retval;
                    if ( backtracking==0 ) stream_GREATEST.add(a);


                    }
                    break;
                case 58 :
                    // etc/XQFT.g:832:7: a= GT
                    {
                    a=(Token)input.LT(1);
                    match(input,GT,FOLLOW_GT_in_ncNameorKeyword9660); if (failed) return retval;
                    if ( backtracking==0 ) stream_GT.add(a);


                    }
                    break;
                case 59 :
                    // etc/XQFT.g:833:7: a= IDIV
                    {
                    a=(Token)input.LT(1);
                    match(input,IDIV,FOLLOW_IDIV_in_ncNameorKeyword9670); if (failed) return retval;
                    if ( backtracking==0 ) stream_IDIV.add(a);


                    }
                    break;
                case 60 :
                    // etc/XQFT.g:834:7: a= IF
                    {
                    a=(Token)input.LT(1);
                    match(input,IF,FOLLOW_IF_in_ncNameorKeyword9680); if (failed) return retval;
                    if ( backtracking==0 ) stream_IF.add(a);


                    }
                    break;
                case 61 :
                    // etc/XQFT.g:835:7: a= IMPORT
                    {
                    a=(Token)input.LT(1);
                    match(input,IMPORT,FOLLOW_IMPORT_in_ncNameorKeyword9690); if (failed) return retval;
                    if ( backtracking==0 ) stream_IMPORT.add(a);


                    }
                    break;
                case 62 :
                    // etc/XQFT.g:836:7: a= IN
                    {
                    a=(Token)input.LT(1);
                    match(input,IN,FOLLOW_IN_in_ncNameorKeyword9700); if (failed) return retval;
                    if ( backtracking==0 ) stream_IN.add(a);


                    }
                    break;
                case 63 :
                    // etc/XQFT.g:837:7: a= INHERIT
                    {
                    a=(Token)input.LT(1);
                    match(input,INHERIT,FOLLOW_INHERIT_in_ncNameorKeyword9710); if (failed) return retval;
                    if ( backtracking==0 ) stream_INHERIT.add(a);


                    }
                    break;
                case 64 :
                    // etc/XQFT.g:838:7: a= INSENSITIVE
                    {
                    a=(Token)input.LT(1);
                    match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_ncNameorKeyword9720); if (failed) return retval;
                    if ( backtracking==0 ) stream_INSENSITIVE.add(a);


                    }
                    break;
                case 65 :
                    // etc/XQFT.g:839:7: a= INSTANCE
                    {
                    a=(Token)input.LT(1);
                    match(input,INSTANCE,FOLLOW_INSTANCE_in_ncNameorKeyword9730); if (failed) return retval;
                    if ( backtracking==0 ) stream_INSTANCE.add(a);


                    }
                    break;
                case 66 :
                    // etc/XQFT.g:840:7: a= INTERSECT
                    {
                    a=(Token)input.LT(1);
                    match(input,INTERSECT,FOLLOW_INTERSECT_in_ncNameorKeyword9740); if (failed) return retval;
                    if ( backtracking==0 ) stream_INTERSECT.add(a);


                    }
                    break;
                case 67 :
                    // etc/XQFT.g:841:7: a= IS
                    {
                    a=(Token)input.LT(1);
                    match(input,IS,FOLLOW_IS_in_ncNameorKeyword9750); if (failed) return retval;
                    if ( backtracking==0 ) stream_IS.add(a);


                    }
                    break;
                case 68 :
                    // etc/XQFT.g:842:7: a= ITEM
                    {
                    a=(Token)input.LT(1);
                    match(input,ITEM,FOLLOW_ITEM_in_ncNameorKeyword9760); if (failed) return retval;
                    if ( backtracking==0 ) stream_ITEM.add(a);


                    }
                    break;
                case 69 :
                    // etc/XQFT.g:843:7: a= LANGUAGE
                    {
                    a=(Token)input.LT(1);
                    match(input,LANGUAGE,FOLLOW_LANGUAGE_in_ncNameorKeyword9770); if (failed) return retval;
                    if ( backtracking==0 ) stream_LANGUAGE.add(a);


                    }
                    break;
                case 70 :
                    // etc/XQFT.g:844:7: a= LAX
                    {
                    a=(Token)input.LT(1);
                    match(input,LAX,FOLLOW_LAX_in_ncNameorKeyword9780); if (failed) return retval;
                    if ( backtracking==0 ) stream_LAX.add(a);


                    }
                    break;
                case 71 :
                    // etc/XQFT.g:845:7: a= LE
                    {
                    a=(Token)input.LT(1);
                    match(input,LE,FOLLOW_LE_in_ncNameorKeyword9790); if (failed) return retval;
                    if ( backtracking==0 ) stream_LE.add(a);


                    }
                    break;
                case 72 :
                    // etc/XQFT.g:846:7: a= LEAST
                    {
                    a=(Token)input.LT(1);
                    match(input,LEAST,FOLLOW_LEAST_in_ncNameorKeyword9800); if (failed) return retval;
                    if ( backtracking==0 ) stream_LEAST.add(a);


                    }
                    break;
                case 73 :
                    // etc/XQFT.g:847:7: a= LET
                    {
                    a=(Token)input.LT(1);
                    match(input,LET,FOLLOW_LET_in_ncNameorKeyword9810); if (failed) return retval;
                    if ( backtracking==0 ) stream_LET.add(a);


                    }
                    break;
                case 74 :
                    // etc/XQFT.g:848:7: a= LEVELS
                    {
                    a=(Token)input.LT(1);
                    match(input,LEVELS,FOLLOW_LEVELS_in_ncNameorKeyword9820); if (failed) return retval;
                    if ( backtracking==0 ) stream_LEVELS.add(a);


                    }
                    break;
                case 75 :
                    // etc/XQFT.g:849:7: a= LOWERCASE
                    {
                    a=(Token)input.LT(1);
                    match(input,LOWERCASE,FOLLOW_LOWERCASE_in_ncNameorKeyword9830); if (failed) return retval;
                    if ( backtracking==0 ) stream_LOWERCASE.add(a);


                    }
                    break;
                case 76 :
                    // etc/XQFT.g:850:7: a= LT
                    {
                    a=(Token)input.LT(1);
                    match(input,LT,FOLLOW_LT_in_ncNameorKeyword9840); if (failed) return retval;
                    if ( backtracking==0 ) stream_LT.add(a);


                    }
                    break;
                case 77 :
                    // etc/XQFT.g:851:7: a= MOD
                    {
                    a=(Token)input.LT(1);
                    match(input,MOD,FOLLOW_MOD_in_ncNameorKeyword9850); if (failed) return retval;
                    if ( backtracking==0 ) stream_MOD.add(a);


                    }
                    break;
                case 78 :
                    // etc/XQFT.g:852:7: a= MODULE
                    {
                    a=(Token)input.LT(1);
                    match(input,MODULE,FOLLOW_MODULE_in_ncNameorKeyword9860); if (failed) return retval;
                    if ( backtracking==0 ) stream_MODULE.add(a);


                    }
                    break;
                case 79 :
                    // etc/XQFT.g:853:7: a= MOST
                    {
                    a=(Token)input.LT(1);
                    match(input,MOST,FOLLOW_MOST_in_ncNameorKeyword9870); if (failed) return retval;
                    if ( backtracking==0 ) stream_MOST.add(a);


                    }
                    break;
                case 80 :
                    // etc/XQFT.g:854:7: a= NAMESPACE
                    {
                    a=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_ncNameorKeyword9880); if (failed) return retval;
                    if ( backtracking==0 ) stream_NAMESPACE.add(a);


                    }
                    break;
                case 81 :
                    // etc/XQFT.g:855:7: a= NE
                    {
                    a=(Token)input.LT(1);
                    match(input,NE,FOLLOW_NE_in_ncNameorKeyword9890); if (failed) return retval;
                    if ( backtracking==0 ) stream_NE.add(a);


                    }
                    break;
                case 82 :
                    // etc/XQFT.g:856:7: a= NODE
                    {
                    a=(Token)input.LT(1);
                    match(input,NODE,FOLLOW_NODE_in_ncNameorKeyword9900); if (failed) return retval;
                    if ( backtracking==0 ) stream_NODE.add(a);


                    }
                    break;
                case 83 :
                    // etc/XQFT.g:857:7: a= NOINHERIT
                    {
                    a=(Token)input.LT(1);
                    match(input,NOINHERIT,FOLLOW_NOINHERIT_in_ncNameorKeyword9910); if (failed) return retval;
                    if ( backtracking==0 ) stream_NOINHERIT.add(a);


                    }
                    break;
                case 84 :
                    // etc/XQFT.g:858:7: a= NOPRESERVE
                    {
                    a=(Token)input.LT(1);
                    match(input,NOPRESERVE,FOLLOW_NOPRESERVE_in_ncNameorKeyword9920); if (failed) return retval;
                    if ( backtracking==0 ) stream_NOPRESERVE.add(a);


                    }
                    break;
                case 85 :
                    // etc/XQFT.g:859:7: a= NOT
                    {
                    a=(Token)input.LT(1);
                    match(input,NOT,FOLLOW_NOT_in_ncNameorKeyword9930); if (failed) return retval;
                    if ( backtracking==0 ) stream_NOT.add(a);


                    }
                    break;
                case 86 :
                    // etc/XQFT.g:860:7: a= OCCURS
                    {
                    a=(Token)input.LT(1);
                    match(input,OCCURS,FOLLOW_OCCURS_in_ncNameorKeyword9940); if (failed) return retval;
                    if ( backtracking==0 ) stream_OCCURS.add(a);


                    }
                    break;
                case 87 :
                    // etc/XQFT.g:861:7: a= OF
                    {
                    a=(Token)input.LT(1);
                    match(input,OF,FOLLOW_OF_in_ncNameorKeyword9950); if (failed) return retval;
                    if ( backtracking==0 ) stream_OF.add(a);


                    }
                    break;
                case 88 :
                    // etc/XQFT.g:862:7: a= OPTION
                    {
                    a=(Token)input.LT(1);
                    match(input,OPTION,FOLLOW_OPTION_in_ncNameorKeyword9960); if (failed) return retval;
                    if ( backtracking==0 ) stream_OPTION.add(a);


                    }
                    break;
                case 89 :
                    // etc/XQFT.g:863:7: a= OR
                    {
                    a=(Token)input.LT(1);
                    match(input,OR,FOLLOW_OR_in_ncNameorKeyword9970); if (failed) return retval;
                    if ( backtracking==0 ) stream_OR.add(a);


                    }
                    break;
                case 90 :
                    // etc/XQFT.g:864:7: a= ORDER
                    {
                    a=(Token)input.LT(1);
                    match(input,ORDER,FOLLOW_ORDER_in_ncNameorKeyword9980); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDER.add(a);


                    }
                    break;
                case 91 :
                    // etc/XQFT.g:865:7: a= ORDERED
                    {
                    a=(Token)input.LT(1);
                    match(input,ORDERED,FOLLOW_ORDERED_in_ncNameorKeyword9990); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDERED.add(a);


                    }
                    break;
                case 92 :
                    // etc/XQFT.g:866:7: a= ORDERING
                    {
                    a=(Token)input.LT(1);
                    match(input,ORDERING,FOLLOW_ORDERING_in_ncNameorKeyword10000); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDERING.add(a);


                    }
                    break;
                case 93 :
                    // etc/XQFT.g:867:7: a= PARAGRAPH
                    {
                    a=(Token)input.LT(1);
                    match(input,PARAGRAPH,FOLLOW_PARAGRAPH_in_ncNameorKeyword10010); if (failed) return retval;
                    if ( backtracking==0 ) stream_PARAGRAPH.add(a);


                    }
                    break;
                case 94 :
                    // etc/XQFT.g:868:7: a= PARAGRAPHS
                    {
                    a=(Token)input.LT(1);
                    match(input,PARAGRAPHS,FOLLOW_PARAGRAPHS_in_ncNameorKeyword10020); if (failed) return retval;
                    if ( backtracking==0 ) stream_PARAGRAPHS.add(a);


                    }
                    break;
                case 95 :
                    // etc/XQFT.g:869:7: a= PARENT
                    {
                    a=(Token)input.LT(1);
                    match(input,PARENT,FOLLOW_PARENT_in_ncNameorKeyword10030); if (failed) return retval;
                    if ( backtracking==0 ) stream_PARENT.add(a);


                    }
                    break;
                case 96 :
                    // etc/XQFT.g:870:7: a= PHRASE
                    {
                    a=(Token)input.LT(1);
                    match(input,PHRASE,FOLLOW_PHRASE_in_ncNameorKeyword10040); if (failed) return retval;
                    if ( backtracking==0 ) stream_PHRASE.add(a);


                    }
                    break;
                case 97 :
                    // etc/XQFT.g:871:7: a= PRECEDING
                    {
                    a=(Token)input.LT(1);
                    match(input,PRECEDING,FOLLOW_PRECEDING_in_ncNameorKeyword10050); if (failed) return retval;
                    if ( backtracking==0 ) stream_PRECEDING.add(a);


                    }
                    break;
                case 98 :
                    // etc/XQFT.g:872:7: a= PRECEDING_SIBLING
                    {
                    a=(Token)input.LT(1);
                    match(input,PRECEDING_SIBLING,FOLLOW_PRECEDING_SIBLING_in_ncNameorKeyword10060); if (failed) return retval;
                    if ( backtracking==0 ) stream_PRECEDING_SIBLING.add(a);


                    }
                    break;
                case 99 :
                    // etc/XQFT.g:873:7: a= PRESERVE
                    {
                    a=(Token)input.LT(1);
                    match(input,PRESERVE,FOLLOW_PRESERVE_in_ncNameorKeyword10070); if (failed) return retval;
                    if ( backtracking==0 ) stream_PRESERVE.add(a);


                    }
                    break;
                case 100 :
                    // etc/XQFT.g:874:7: a= PROCESSING_INSTRUCTION
                    {
                    a=(Token)input.LT(1);
                    match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_ncNameorKeyword10080); if (failed) return retval;
                    if ( backtracking==0 ) stream_PROCESSING_INSTRUCTION.add(a);


                    }
                    break;
                case 101 :
                    // etc/XQFT.g:875:7: a= RELATIONSHIP
                    {
                    a=(Token)input.LT(1);
                    match(input,RELATIONSHIP,FOLLOW_RELATIONSHIP_in_ncNameorKeyword10090); if (failed) return retval;
                    if ( backtracking==0 ) stream_RELATIONSHIP.add(a);


                    }
                    break;
                case 102 :
                    // etc/XQFT.g:876:7: a= RETURN
                    {
                    a=(Token)input.LT(1);
                    match(input,RETURN,FOLLOW_RETURN_in_ncNameorKeyword10100); if (failed) return retval;
                    if ( backtracking==0 ) stream_RETURN.add(a);


                    }
                    break;
                case 103 :
                    // etc/XQFT.g:877:7: a= SAME
                    {
                    a=(Token)input.LT(1);
                    match(input,SAME,FOLLOW_SAME_in_ncNameorKeyword10110); if (failed) return retval;
                    if ( backtracking==0 ) stream_SAME.add(a);


                    }
                    break;
                case 104 :
                    // etc/XQFT.g:878:7: a= SATISFIES
                    {
                    a=(Token)input.LT(1);
                    match(input,SATISFIES,FOLLOW_SATISFIES_in_ncNameorKeyword10120); if (failed) return retval;
                    if ( backtracking==0 ) stream_SATISFIES.add(a);


                    }
                    break;
                case 105 :
                    // etc/XQFT.g:879:7: a= SCHEMA
                    {
                    a=(Token)input.LT(1);
                    match(input,SCHEMA,FOLLOW_SCHEMA_in_ncNameorKeyword10130); if (failed) return retval;
                    if ( backtracking==0 ) stream_SCHEMA.add(a);


                    }
                    break;
                case 106 :
                    // etc/XQFT.g:880:7: a= SCHEMA_ATTRIBUTE
                    {
                    a=(Token)input.LT(1);
                    match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_ncNameorKeyword10140); if (failed) return retval;
                    if ( backtracking==0 ) stream_SCHEMA_ATTRIBUTE.add(a);


                    }
                    break;
                case 107 :
                    // etc/XQFT.g:881:7: a= SCHEMA_ELEMENT
                    {
                    a=(Token)input.LT(1);
                    match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_ncNameorKeyword10150); if (failed) return retval;
                    if ( backtracking==0 ) stream_SCHEMA_ELEMENT.add(a);


                    }
                    break;
                case 108 :
                    // etc/XQFT.g:882:7: a= SCORE
                    {
                    a=(Token)input.LT(1);
                    match(input,SCORE,FOLLOW_SCORE_in_ncNameorKeyword10160); if (failed) return retval;
                    if ( backtracking==0 ) stream_SCORE.add(a);


                    }
                    break;
                case 109 :
                    // etc/XQFT.g:883:7: a= SELF
                    {
                    a=(Token)input.LT(1);
                    match(input,SELF,FOLLOW_SELF_in_ncNameorKeyword10170); if (failed) return retval;
                    if ( backtracking==0 ) stream_SELF.add(a);


                    }
                    break;
                case 110 :
                    // etc/XQFT.g:884:7: a= SENSITIVE
                    {
                    a=(Token)input.LT(1);
                    match(input,SENSITIVE,FOLLOW_SENSITIVE_in_ncNameorKeyword10180); if (failed) return retval;
                    if ( backtracking==0 ) stream_SENSITIVE.add(a);


                    }
                    break;
                case 111 :
                    // etc/XQFT.g:885:7: a= SENTENCES
                    {
                    a=(Token)input.LT(1);
                    match(input,SENTENCES,FOLLOW_SENTENCES_in_ncNameorKeyword10190); if (failed) return retval;
                    if ( backtracking==0 ) stream_SENTENCES.add(a);


                    }
                    break;
                case 112 :
                    // etc/XQFT.g:886:7: a= SENTENCE
                    {
                    a=(Token)input.LT(1);
                    match(input,SENTENCE,FOLLOW_SENTENCE_in_ncNameorKeyword10200); if (failed) return retval;
                    if ( backtracking==0 ) stream_SENTENCE.add(a);


                    }
                    break;
                case 113 :
                    // etc/XQFT.g:887:7: a= SOME
                    {
                    a=(Token)input.LT(1);
                    match(input,SOME,FOLLOW_SOME_in_ncNameorKeyword10210); if (failed) return retval;
                    if ( backtracking==0 ) stream_SOME.add(a);


                    }
                    break;
                case 114 :
                    // etc/XQFT.g:888:7: a= STABLE
                    {
                    a=(Token)input.LT(1);
                    match(input,STABLE,FOLLOW_STABLE_in_ncNameorKeyword10220); if (failed) return retval;
                    if ( backtracking==0 ) stream_STABLE.add(a);


                    }
                    break;
                case 115 :
                    // etc/XQFT.g:889:7: a= START
                    {
                    a=(Token)input.LT(1);
                    match(input,START,FOLLOW_START_in_ncNameorKeyword10230); if (failed) return retval;
                    if ( backtracking==0 ) stream_START.add(a);


                    }
                    break;
                case 116 :
                    // etc/XQFT.g:890:7: a= STEMMING
                    {
                    a=(Token)input.LT(1);
                    match(input,STEMMING,FOLLOW_STEMMING_in_ncNameorKeyword10240); if (failed) return retval;
                    if ( backtracking==0 ) stream_STEMMING.add(a);


                    }
                    break;
                case 117 :
                    // etc/XQFT.g:891:7: a= STOP
                    {
                    a=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ncNameorKeyword10250); if (failed) return retval;
                    if ( backtracking==0 ) stream_STOP.add(a);


                    }
                    break;
                case 118 :
                    // etc/XQFT.g:892:7: a= STRICT
                    {
                    a=(Token)input.LT(1);
                    match(input,STRICT,FOLLOW_STRICT_in_ncNameorKeyword10260); if (failed) return retval;
                    if ( backtracking==0 ) stream_STRICT.add(a);


                    }
                    break;
                case 119 :
                    // etc/XQFT.g:893:7: a= STRIP
                    {
                    a=(Token)input.LT(1);
                    match(input,STRIP,FOLLOW_STRIP_in_ncNameorKeyword10270); if (failed) return retval;
                    if ( backtracking==0 ) stream_STRIP.add(a);


                    }
                    break;
                case 120 :
                    // etc/XQFT.g:894:7: a= TEXT
                    {
                    a=(Token)input.LT(1);
                    match(input,TEXT,FOLLOW_TEXT_in_ncNameorKeyword10280); if (failed) return retval;
                    if ( backtracking==0 ) stream_TEXT.add(a);


                    }
                    break;
                case 121 :
                    // etc/XQFT.g:895:7: a= THESAURUS
                    {
                    a=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ncNameorKeyword10290); if (failed) return retval;
                    if ( backtracking==0 ) stream_THESAURUS.add(a);


                    }
                    break;
                case 122 :
                    // etc/XQFT.g:896:7: a= THEN
                    {
                    a=(Token)input.LT(1);
                    match(input,THEN,FOLLOW_THEN_in_ncNameorKeyword10300); if (failed) return retval;
                    if ( backtracking==0 ) stream_THEN.add(a);


                    }
                    break;
                case 123 :
                    // etc/XQFT.g:897:7: a= TIMES
                    {
                    a=(Token)input.LT(1);
                    match(input,TIMES,FOLLOW_TIMES_in_ncNameorKeyword10310); if (failed) return retval;
                    if ( backtracking==0 ) stream_TIMES.add(a);


                    }
                    break;
                case 124 :
                    // etc/XQFT.g:898:7: a= TO
                    {
                    a=(Token)input.LT(1);
                    match(input,TO,FOLLOW_TO_in_ncNameorKeyword10320); if (failed) return retval;
                    if ( backtracking==0 ) stream_TO.add(a);


                    }
                    break;
                case 125 :
                    // etc/XQFT.g:899:7: a= TREAT
                    {
                    a=(Token)input.LT(1);
                    match(input,TREAT,FOLLOW_TREAT_in_ncNameorKeyword10330); if (failed) return retval;
                    if ( backtracking==0 ) stream_TREAT.add(a);


                    }
                    break;
                case 126 :
                    // etc/XQFT.g:900:7: a= TYPESWITCH
                    {
                    a=(Token)input.LT(1);
                    match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_ncNameorKeyword10340); if (failed) return retval;
                    if ( backtracking==0 ) stream_TYPESWITCH.add(a);


                    }
                    break;
                case 127 :
                    // etc/XQFT.g:901:7: a= UNION
                    {
                    a=(Token)input.LT(1);
                    match(input,UNION,FOLLOW_UNION_in_ncNameorKeyword10350); if (failed) return retval;
                    if ( backtracking==0 ) stream_UNION.add(a);


                    }
                    break;
                case 128 :
                    // etc/XQFT.g:902:7: a= UNORDERED
                    {
                    a=(Token)input.LT(1);
                    match(input,UNORDERED,FOLLOW_UNORDERED_in_ncNameorKeyword10360); if (failed) return retval;
                    if ( backtracking==0 ) stream_UNORDERED.add(a);


                    }
                    break;
                case 129 :
                    // etc/XQFT.g:903:7: a= UPPERCASE
                    {
                    a=(Token)input.LT(1);
                    match(input,UPPERCASE,FOLLOW_UPPERCASE_in_ncNameorKeyword10370); if (failed) return retval;
                    if ( backtracking==0 ) stream_UPPERCASE.add(a);


                    }
                    break;
                case 130 :
                    // etc/XQFT.g:904:7: a= VALIDATE
                    {
                    a=(Token)input.LT(1);
                    match(input,VALIDATE,FOLLOW_VALIDATE_in_ncNameorKeyword10380); if (failed) return retval;
                    if ( backtracking==0 ) stream_VALIDATE.add(a);


                    }
                    break;
                case 131 :
                    // etc/XQFT.g:905:7: a= VARIABLE
                    {
                    a=(Token)input.LT(1);
                    match(input,VARIABLE,FOLLOW_VARIABLE_in_ncNameorKeyword10390); if (failed) return retval;
                    if ( backtracking==0 ) stream_VARIABLE.add(a);


                    }
                    break;
                case 132 :
                    // etc/XQFT.g:906:7: a= VERSION
                    {
                    a=(Token)input.LT(1);
                    match(input,VERSION,FOLLOW_VERSION_in_ncNameorKeyword10400); if (failed) return retval;
                    if ( backtracking==0 ) stream_VERSION.add(a);


                    }
                    break;
                case 133 :
                    // etc/XQFT.g:907:7: a= WEIGHT
                    {
                    a=(Token)input.LT(1);
                    match(input,WEIGHT,FOLLOW_WEIGHT_in_ncNameorKeyword10410); if (failed) return retval;
                    if ( backtracking==0 ) stream_WEIGHT.add(a);


                    }
                    break;
                case 134 :
                    // etc/XQFT.g:908:7: a= WHERE
                    {
                    a=(Token)input.LT(1);
                    match(input,WHERE,FOLLOW_WHERE_in_ncNameorKeyword10420); if (failed) return retval;
                    if ( backtracking==0 ) stream_WHERE.add(a);


                    }
                    break;
                case 135 :
                    // etc/XQFT.g:909:7: a= WILDCARDS
                    {
                    a=(Token)input.LT(1);
                    match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ncNameorKeyword10430); if (failed) return retval;
                    if ( backtracking==0 ) stream_WILDCARDS.add(a);


                    }
                    break;
                case 136 :
                    // etc/XQFT.g:910:7: a= WINDOW
                    {
                    a=(Token)input.LT(1);
                    match(input,WINDOW,FOLLOW_WINDOW_in_ncNameorKeyword10440); if (failed) return retval;
                    if ( backtracking==0 ) stream_WINDOW.add(a);


                    }
                    break;
                case 137 :
                    // etc/XQFT.g:911:7: a= WITH
                    {
                    a=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ncNameorKeyword10450); if (failed) return retval;
                    if ( backtracking==0 ) stream_WITH.add(a);


                    }
                    break;
                case 138 :
                    // etc/XQFT.g:912:7: a= WITHOUT
                    {
                    a=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ncNameorKeyword10460); if (failed) return retval;
                    if ( backtracking==0 ) stream_WITHOUT.add(a);


                    }
                    break;
                case 139 :
                    // etc/XQFT.g:913:7: a= WORD
                    {
                    a=(Token)input.LT(1);
                    match(input,WORD,FOLLOW_WORD_in_ncNameorKeyword10470); if (failed) return retval;
                    if ( backtracking==0 ) stream_WORD.add(a);


                    }
                    break;
                case 140 :
                    // etc/XQFT.g:914:7: a= WORDS
                    {
                    a=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ncNameorKeyword10480); if (failed) return retval;
                    if ( backtracking==0 ) stream_WORDS.add(a);


                    }
                    break;
                case 141 :
                    // etc/XQFT.g:915:7: a= XQUERY
                    {
                    a=(Token)input.LT(1);
                    match(input,XQUERY,FOLLOW_XQUERY_in_ncNameorKeyword10490); if (failed) return retval;
                    if ( backtracking==0 ) stream_XQUERY.add(a);


                    }
                    break;

            }


            // AST REWRITE
            // elements: NCName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 915:17: -> NCName[$a]
            {
                adaptor.addChild(root_0, adaptor.create(NCName,a));

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ncNameorKeyword

    // $ANTLR start synpred1
    public final void synpred1_fragment() throws RecognitionException {   
        // etc/XQFT.g:328:7: ( IMPORT ( SCHEMA | MODULE ) )
        // etc/XQFT.g:328:8: IMPORT ( SCHEMA | MODULE )
        {
        match(input,IMPORT,FOLLOW_IMPORT_in_synpred1441); if (failed) return ;
        if ( input.LA(1)==MODULE||input.LA(1)==SCHEMA ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred1443);    throw mse;
        }


        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred2
    public final void synpred2_fragment() throws RecognitionException {   
        // etc/XQFT.g:403:6: ( EMPTY_SEQUENCE LPARSi )
        // etc/XQFT.g:403:7: EMPTY_SEQUENCE LPARSi
        {
        match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_synpred21364); if (failed) return ;
        match(input,LPARSi,FOLLOW_LPARSi_in_synpred21366); if (failed) return ;

        }
    }
    // $ANTLR end synpred2

    // $ANTLR start synpred3
    public final void synpred3_fragment() throws RecognitionException {   
        // etc/XQFT.g:404:6: ( itemType occurrenceIndicator )
        // etc/XQFT.g:404:7: itemType occurrenceIndicator
        {
        pushFollow(FOLLOW_itemType_in_synpred31383);
        itemType();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_occurrenceIndicator_in_synpred31385);
        occurrenceIndicator();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred3

    // $ANTLR start synpred4
    public final void synpred4_fragment() throws RecognitionException {   
        // etc/XQFT.g:438:5: ( IF LPARSi )
        // etc/XQFT.g:438:6: IF LPARSi
        {
        match(input,IF,FOLLOW_IF_in_synpred42093); if (failed) return ;
        match(input,LPARSi,FOLLOW_LPARSi_in_synpred42095); if (failed) return ;

        }
    }
    // $ANTLR end synpred4

    // $ANTLR start synpred5
    public final void synpred5_fragment() throws RecognitionException {   
        // etc/XQFT.g:439:7: ( TYPESWITCH LPARSi )
        // etc/XQFT.g:439:8: TYPESWITCH LPARSi
        {
        match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_synpred52108); if (failed) return ;
        match(input,LPARSi,FOLLOW_LPARSi_in_synpred52110); if (failed) return ;

        }
    }
    // $ANTLR end synpred5

    // $ANTLR start synpred6
    public final void synpred6_fragment() throws RecognitionException {   
        // etc/XQFT.g:613:10: ( SLASHSi relativePathExpr )
        // etc/XQFT.g:613:11: SLASHSi relativePathExpr
        {
        match(input,SLASHSi,FOLLOW_SLASHSi_in_synpred65614); if (failed) return ;
        pushFollow(FOLLOW_relativePathExpr_in_synpred65616);
        relativePathExpr();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred6

    // $ANTLR start synpred7
    public final void synpred7_fragment() throws RecognitionException {   
        // etc/XQFT.g:629:17: ( ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi )
        // etc/XQFT.g:629:18: ( DOCUMENT_NODE | ELEMENT | ATTRIBUTE | SCHEMA_ELEMENT | SCHEMA_ATTRIBUTE | PROCESSING_INSTRUCTION | COMMENT | TEXT | NODE ) LPARSi
        {
        if ( input.LA(1)==ELEMENT||input.LA(1)==DOCUMENT_NODE||(input.LA(1)>=SCHEMA_ELEMENT && input.LA(1)<=NODE) ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred75787);    throw mse;
        }

        match(input,LPARSi,FOLLOW_LPARSi_in_synpred75865); if (failed) return ;

        }
    }
    // $ANTLR end synpred7

    // $ANTLR start synpred8
    public final void synpred8_fragment() throws RecognitionException {   
        // etc/XQFT.g:643:29: ( STARSi | ncNameorKeyword COLONSi STARSi )
        int alt152=2;
        int LA152_0 = input.LA(1);

        if ( (LA152_0==STARSi) ) {
            alt152=1;
        }
        else if ( ((LA152_0>=XQUERY && LA152_0<=VERSION)||LA152_0==ENCODING||(LA152_0>=MODULE && LA152_0<=NAMESPACE)||(LA152_0>=DECLARE && LA152_0<=VARIABLE)||LA152_0==EXTERNAL||LA152_0==AS||(LA152_0>=OPTION && LA152_0<=DOCUMENT_NODE)||(LA152_0>=SCHEMA_ELEMENT && LA152_0<=NODE)||(LA152_0>=RETURN && LA152_0<=TO)||(LA152_0>=DIV && LA152_0<=UNION)||(LA152_0>=INTERSECT && LA152_0<=GE)||LA152_0==IS||(LA152_0>=WEIGHT && LA152_0<=FTNOT)||(LA152_0>=ANY && LA152_0<=FROM)||(LA152_0>=WINDOW && LA152_0<=STRICT)||(LA152_0>=PARENT && LA152_0<=ANCESTOR_OR_SELF)||(LA152_0>=CHILD && LA152_0<=FOLLOWING)||(LA152_0>=DOCUMENT && LA152_0<=NCName)) ) {
            alt152=2;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("643:29: synpred8 : ( STARSi | ncNameorKeyword COLONSi STARSi );", 152, 0, input);

            throw nvae;
        }
        switch (alt152) {
            case 1 :
                // etc/XQFT.g:643:30: STARSi
                {
                match(input,STARSi,FOLLOW_STARSi_in_synpred86195); if (failed) return ;

                }
                break;
            case 2 :
                // etc/XQFT.g:643:39: ncNameorKeyword COLONSi STARSi
                {
                pushFollow(FOLLOW_ncNameorKeyword_in_synpred86199);
                ncNameorKeyword();
                _fsp--;
                if (failed) return ;
                match(input,COLONSi,FOLLOW_COLONSi_in_synpred86201); if (failed) return ;
                match(input,STARSi,FOLLOW_STARSi_in_synpred86203); if (failed) return ;

                }
                break;

        }}
    // $ANTLR end synpred8

    // $ANTLR start synpred9
    public final void synpred9_fragment() throws RecognitionException {   
        // etc/XQFT.g:647:33: ( STARSi COLONSi )
        // etc/XQFT.g:647:34: STARSi COLONSi
        {
        match(input,STARSi,FOLLOW_STARSi_in_synpred96335); if (failed) return ;
        match(input,COLONSi,FOLLOW_COLONSi_in_synpred96337); if (failed) return ;

        }
    }
    // $ANTLR end synpred9

    public final boolean synpred4() {
        backtracking++;
        int start = input.mark();
        try {
            synpred4_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred9() {
        backtracking++;
        int start = input.mark();
        try {
            synpred9_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred7() {
        backtracking++;
        int start = input.mark();
        try {
            synpred7_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred2() {
        backtracking++;
        int start = input.mark();
        try {
            synpred2_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred3() {
        backtracking++;
        int start = input.mark();
        try {
            synpred3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred1() {
        backtracking++;
        int start = input.mark();
        try {
            synpred1_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred5() {
        backtracking++;
        int start = input.mark();
        try {
            synpred5_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred6() {
        backtracking++;
        int start = input.mark();
        try {
            synpred6_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred8() {
        backtracking++;
        int start = input.mark();
        try {
            synpred8_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_versionDecl_in_module181 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_libraryModule_in_module191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mainModule_in_module195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_versionDecl228 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_VERSION_in_versionDecl230 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_StringLiteral_in_versionDecl232 = new BitSet(new long[]{0x00000000C0000000L});
    public static final BitSet FOLLOW_ENCODING_in_versionDecl235 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_StringLiteral_in_versionDecl237 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLONSi_in_versionDecl241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleDecl_in_libraryModule252 = new BitSet(new long[]{0x0200001000000002L});
    public static final BitSet FOLLOW_prolog_in_libraryModule254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_moduleDecl269 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleDecl271 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C2L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_moduleDecl273 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_moduleDecl275 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleDecl277 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLONSi_in_moduleDecl279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_uriLiteral298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prolog_in_mainModule310 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_queryBody_in_mainModule312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_queryBody327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_expr346 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_COMMASi_in_expr349 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_expr351 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_importStmt_in_prolog450 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_DECLARE_in_prolog461 = new BitSet(new long[]{0x102720A200000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_setter_in_prolog473 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_varDecl_in_prolog486 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_functionDecl_in_prolog499 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_optionDecl_in_prolog512 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_ftOptionDecl_in_prolog525 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_SEMICOLONSi_in_prolog547 = new BitSet(new long[]{0x0200001000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_setter569 = new BitSet(new long[]{0x000003C000000002L});
    public static final BitSet FOLLOW_defaultNamespaceDecl_in_setter587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defaultCollationDecl_in_setter603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emptyOrderDecl_in_setter619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespaceDecl_in_setter645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boundarySpaceDecl_in_setter657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseURIDecl_in_setter669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructionDecl_in_setter682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderingModeDecl_in_setter695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copyNamespacesDecl_in_setter708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_defaultNamespaceDecl717 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_defaultNamespaceDecl725 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_defaultNamespaceDecl727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLATION_in_defaultCollationDecl734 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_defaultCollationDecl736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_emptyOrderDecl749 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_EMPTY_in_emptyOrderDecl751 = new BitSet(new long[]{0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_emptyOrderDecl753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespaceDecl774 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C2L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_namespaceDecl776 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_namespaceDecl778 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_namespaceDecl780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOUNDARYSPACE_in_boundarySpaceDecl789 = new BitSet(new long[]{0x0000C00000000000L});
    public static final BitSet FOLLOW_set_in_boundarySpaceDecl791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_URI_in_baseURIDecl812 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_baseURIDecl814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_constructionDecl824 = new BitSet(new long[]{0x0000C00000000000L});
    public static final BitSet FOLLOW_set_in_constructionDecl826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERING_in_orderingModeDecl842 = new BitSet(new long[]{0x0018000000000000L});
    public static final BitSet FOLLOW_set_in_orderingModeDecl844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl858 = new BitSet(new long[]{0x0040400000000000L});
    public static final BitSet FOLLOW_preserveMode_in_copyNamespacesDecl860 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_COMMASi_in_copyNamespacesDecl862 = new BitSet(new long[]{0x0180000000000000L});
    public static final BitSet FOLLOW_inheritMode_in_copyNamespacesDecl864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_preserveMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_inheritMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_importStmt926 = new BitSet(new long[]{0x0400000100000000L});
    public static final BitSet FOLLOW_schemaImport_in_importStmt929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleImport_in_importStmt933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_in_schemaImport952 = new BitSet(new long[]{0x0000002220000000L});
    public static final BitSet FOLLOW_schemaPrefix_in_schemaImport954 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport957 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_AT_in_schemaImport960 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport962 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_COMMASi_in_schemaImport965 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport967 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix990 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C2L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_schemaPrefix992 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_schemaPrefix994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_schemaPrefix1000 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_schemaPrefix1002 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix1004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_moduleImport1023 = new BitSet(new long[]{0x0000000220000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleImport1026 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C2L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_moduleImport1028 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_moduleImport1030 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1034 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_AT_in_moduleImport1037 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1039 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_COMMASi_in_moduleImport1042 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1044 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_VARIABLE_in_varDecl1060 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varDecl1062 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_varDecl1064 = new BitSet(new long[]{0xC000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_varDecl1066 = new BitSet(new long[]{0xC000000000000000L});
    public static final BitSet FOLLOW_ASSIGNSi_in_varDecl1071 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_varDecl1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_varDecl1078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QName_in_qName1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_qName1118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_typeDeclaration1134 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_sequenceType_in_typeDeclaration1136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDecl1153 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_functionDecl1155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_functionDecl1157 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_paramList_in_functionDecl1159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_functionDecl1162 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_AS_in_functionDecl1174 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_sequenceType_in_functionDecl1176 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_enclosedExpr_in_functionDecl1181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_functionDecl1185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_paramList1226 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_COMMASi_in_paramList1229 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_param_in_paramList1231 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_param1251 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_param1253 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_param1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_enclosedExpr1276 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_enclosedExpr1288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_enclosedExpr1299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTION_in_optionDecl1313 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_optionDecl1315 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_StringLiteral_in_optionDecl1317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTOPTION_in_ftOptionDecl1325 = new BitSet(new long[]{0x0000000000000000L,0x0100000800000040L,0x0007210000000000L});
    public static final BitSet FOLLOW_ftMatchOptions_in_ftOptionDecl1327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftMatchOption_in_ftMatchOptions1338 = new BitSet(new long[]{0x0000000000000002L,0x0100000800000040L,0x0007210000000000L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_sequenceType1369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_sequenceType1371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_sequenceType1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_sequenceType1390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000101800L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_sequenceType1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_sequenceType1400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_itemType1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_itemType1422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_itemType1424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_itemType1427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_itemType1433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_documentTest_in_kindTest1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementTest_in_kindTest1465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeTest_in_kindTest1481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaElementTest_in_kindTest1497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaAttributeTest_in_kindTest1513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_piTest_in_kindTest1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commentTest_in_kindTest1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_textTest_in_kindTest1561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anyKindTest_in_kindTest1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_documentTest1596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_documentTest1598 = new BitSet(new long[]{0x0000004000000000L,0x0000000000002008L});
    public static final BitSet FOLLOW_elementTest_in_documentTest1602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_schemaElementTest_in_documentTest1606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_documentTest1610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_elementTest1634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_elementTest1636 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFF7CBL,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_elementNameOrWildcard_in_elementTest1640 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMASi_in_elementTest1643 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_typeName_in_elementTest1645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_QUESTIONSi_in_elementTest1647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_elementTest1654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementNameOrWildcard1682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_elementNameOrWildcard1686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_elementName1717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_typeName1744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_schemaElementTest1767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_schemaElementTest1769 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_elementDeclaration_in_schemaElementTest1772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_schemaElementTest1774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementDeclaration1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_attributeTest1821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_attributeTest1823 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFF7CBL,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_attribNameOrWildcard_in_attributeTest1827 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMASi_in_attributeTest1830 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_typeName_in_attributeTest1832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_attributeTest1838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attribNameOrWildcard1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_attribNameOrWildcard1866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_attributeName1893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_schemaAttributeTest1912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_schemaAttributeTest1914 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_attributeDeclaration_in_schemaAttributeTest1917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_schemaAttributeTest1919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attributeDeclaration1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_piTest1962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_piTest1964 = new BitSet(new long[]{0x9FFFFFF378000000L,0xFFFEF7FFFFEFE7CAL,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_piTest1968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_StringLiteral_in_piTest1972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_piTest1976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_commentTest1996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_commentTest1998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_commentTest2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_textTest2021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_textTest2023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_textTest2026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_anyKindTest2046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_anyKindTest2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_anyKindTest2051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_occurrenceIndicator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifExpr_in_exprSingle2099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeswitchExpr_in_exprSingle2115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fLWORExpr_in_exprSingle2123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantifiedExpr_in_exprSingle2131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpr_in_exprSingle2139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forClause_in_fLWORExpr2154 = new BitSet(new long[]{0x0000020000000000L,0x0000000016600000L});
    public static final BitSet FOLLOW_letClause_in_fLWORExpr2160 = new BitSet(new long[]{0x0000020000000000L,0x0000000016600000L});
    public static final BitSet FOLLOW_whereClause_in_fLWORExpr2164 = new BitSet(new long[]{0x0000020000000000L,0x0000000010200000L});
    public static final BitSet FOLLOW_orderByClause_in_fLWORExpr2167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RETURN_in_fLWORExpr2170 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_fLWORExpr2172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forClause2222 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_forClauseTupletDef_in_forClause2224 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_COMMASi_in_forClause2227 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_forClauseTupletDef_in_forClause2229 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_forClauseTupletDef2272 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_varName_in_forClauseTupletDef2275 = new BitSet(new long[]{0x0800000000000000L,0x0000000001800002L});
    public static final BitSet FOLLOW_typeDeclaration_in_forClauseTupletDef2277 = new BitSet(new long[]{0x0800000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_positionalVar_in_forClauseTupletDef2280 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_ftScoreVar_in_forClauseTupletDef2283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_IN_in_forClauseTupletDef2286 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_forClauseTupletDef2289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_varName2315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_positionalVar2336 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_positionalVar2338 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_varName_in_positionalVar2340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCORE_in_ftScoreVar2359 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_ftScoreVar2361 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_varName_in_ftScoreVar2363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_letClause2391 = new BitSet(new long[]{0x2000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_varBinding_in_letClause2393 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_COMMASi_in_letClause2396 = new BitSet(new long[]{0x2000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_varBinding_in_letClause2398 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_varBinding2450 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_varName_in_varBinding2454 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeDeclaration_in_varBinding2456 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCORE_in_varBinding2461 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varBinding2463 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_varName_in_varBinding2467 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_ASSIGNSi_in_varBinding2483 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_varBinding2485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_whereClause2535 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_whereClause2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause2586 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_BY_in_orderByClause2588 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_STABLE_in_orderByClause2592 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause2594 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_BY_in_orderByClause2596 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_orderSpecList_in_orderByClause2599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList2642 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_COMMASi_in_orderSpecList2645 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList2647 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_exprSingle_in_orderSpec2694 = new BitSet(new long[]{0x0000050000000002L,0x0000000060000000L});
    public static final BitSet FOLLOW_orderModifier_in_orderSpec2696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_orderModifier2723 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_EMPTY_in_orderModifier2733 = new BitSet(new long[]{0x0000180000000000L});
    public static final BitSet FOLLOW_set_in_orderModifier2735 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_COLLATION_in_orderModifier2746 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_orderModifier2748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_quantifiedExpr2774 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_EVERY_in_quantifiedExpr2780 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr2783 = new BitSet(new long[]{0x0000000800000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_COMMASi_in_quantifiedExpr2794 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr2796 = new BitSet(new long[]{0x0000000800000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SATISFIES_in_quantifiedExpr2800 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExpr2802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_quantifiedExprTupleDef2858 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_varName_in_quantifiedExprTupleDef2860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800002L});
    public static final BitSet FOLLOW_typeDeclaration_in_quantifiedExprTupleDef2862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_IN_in_quantifiedExprTupleDef2865 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExprTupleDef2867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_typeswitchExpr2902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_typeswitchExpr2904 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_typeswitchExpr2906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_typeswitchExpr2908 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_caseClause_in_typeswitchExpr2910 = new BitSet(new long[]{0x0000002000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_typeswitchExpr2922 = new BitSet(new long[]{0x2000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOLLARSi_in_typeswitchExpr2925 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_varName_in_typeswitchExpr2927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RETURN_in_typeswitchExpr2931 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_typeswitchExpr2933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseClause2973 = new BitSet(new long[]{0xBFFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_DOLLARSi_in_caseClause2976 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_varName_in_caseClause2978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_caseClause2980 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_sequenceType_in_caseClause2984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RETURN_in_caseClause2986 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_caseClause2988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifExpr3034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_ifExpr3036 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_ifExpr3038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_ifExpr3040 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_THEN_in_ifExpr3042 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr3044 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ELSE_in_ifExpr3046 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpr_in_orExpr3088 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_OR_in_orExpr3092 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_andExpr_in_orExpr3095 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr3113 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_AND_in_andExpr3117 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr3120 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr3133 = new BitSet(new long[]{0x0000000400000002L,0xFC00000000000000L,0x00000000000000FFL});
    public static final BitSet FOLLOW_valueComp_in_comparisonExpr3138 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_generalComp_in_comparisonExpr3143 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_nodeComp_in_comparisonExpr3148 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr3152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeExpr_in_ftContainsExpr3166 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_FTCONTAINS_in_ftContainsExpr3170 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000014L,0x000000000400F000L});
    public static final BitSet FOLLOW_ftSelection_in_ftContainsExpr3173 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_ftIgnoreOption_in_ftContainsExpr3175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr3198 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_TO_in_rangeExpr3202 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr3205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr3227 = new BitSet(new long[]{0x0000000000000002L,0x0000080000100000L});
    public static final BitSet FOLLOW_set_in_additiveExpr3231 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr3240 = new BitSet(new long[]{0x0000000000000002L,0x0000080000100000L});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr3266 = new BitSet(new long[]{0x0000000000000002L,0x0000700000001000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpr3270 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr3287 = new BitSet(new long[]{0x0000000000000002L,0x0000700000001000L});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr3317 = new BitSet(new long[]{0x0000000000000002L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_unionExpr3321 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr3330 = new BitSet(new long[]{0x0000000000000002L,0x0001800000000000L});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr3364 = new BitSet(new long[]{0x0000000000000002L,0x0006000000000000L});
    public static final BitSet FOLLOW_set_in_intersectExceptExpr3368 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr3377 = new BitSet(new long[]{0x0000000000000002L,0x0006000000000000L});
    public static final BitSet FOLLOW_treatExpr_in_instanceofExpr3415 = new BitSet(new long[]{0x0000000000000002L,0x0008000000000000L});
    public static final BitSet FOLLOW_INSTANCE_in_instanceofExpr3419 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_OF_in_instanceofExpr3422 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_sequenceType_in_instanceofExpr3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castableExpr_in_treatExpr3467 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_TREAT_in_treatExpr3471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_treatExpr3474 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_sequenceType_in_treatExpr3477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpr_in_castableExpr3523 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_CASTABLE_in_castableExpr3527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_castableExpr3530 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_singleType_in_castableExpr3533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpr_in_castExpr3583 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_CAST_in_castExpr3587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_castExpr3590 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_singleType_in_castExpr3593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryExpr3648 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_valueExpr_in_unaryExpr3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_singleType3710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_QUESTIONSi_in_singleType3712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_atomicType3768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftIgnoreOption3800 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_CONTENT_in_ftIgnoreOption3803 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_unionExpr_in_ftIgnoreOption3805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_valueComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_generalComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_nodeComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOr_in_ftSelection3902 = new BitSet(new long[]{0x0808000000000002L,0x0000000000000000L,0x0000008720000100L});
    public static final BitSet FOLLOW_ftPosFilter_in_ftSelection3904 = new BitSet(new long[]{0x0808000000000002L,0x0000000000000000L,0x0000008720000100L});
    public static final BitSet FOLLOW_WEIGHT_in_ftSelection3908 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_rangeExpr_in_ftSelection3910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr3923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_FTOR_in_ftOr3927 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000014L,0x000000000400F000L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr3930 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd3948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FTAND_in_ftAnd3952 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000014L,0x000000000400F000L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd3955 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot3977 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_NOT_in_ftMildNot3981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_IN_in_ftMildNot3984 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000014L,0x000000000400F000L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot3987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_FTNOT_in_ftUnaryNot4014 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000014L,0x000000000400E000L});
    public static final BitSet FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot4019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftPrimary_in_ftPrimaryWithOptions4042 = new BitSet(new long[]{0x0000000000000002L,0x0100000800000040L,0x0007210000000000L});
    public static final BitSet FOLLOW_ftMatchOption_in_ftPrimaryWithOptions4046 = new BitSet(new long[]{0x0000000000000002L,0x0100000800000040L,0x0007210000000000L});
    public static final BitSet FOLLOW_ftWords_in_ftPrimary4075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ftTimes_in_ftPrimary4078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_ftPrimary4116 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000014L,0x000000000400F000L});
    public static final BitSet FOLLOW_ftSelection_in_ftPrimary4119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_ftPrimary4121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionSelection_in_ftPrimary4159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWordsValue_in_ftWords4219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000150000L});
    public static final BitSet FOLLOW_ftAnyallOption_in_ftWords4222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_ftWordsValue4258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_ftWordsValue4263 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_ftWordsValue4266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_ftWordsValue4268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_literal4309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal4313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_numericLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANY_in_ftAnyallOption4400 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_WORD_in_ftAnyallOption4402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_ftAnyallOption4409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_WORDS_in_ftAnyallOption4411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PHRASE_in_ftAnyallOption4417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCCURS_in_ftTimes4448 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_ftRange_in_ftTimes4451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_TIMES_in_ftTimes4453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXACTLY_in_ftRange4490 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange4492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRange4536 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_ftRange4538 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange4544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_ftRange4588 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange4590 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_TO_in_ftRange4592 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange4594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_in_ftExtensionSelection4626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000004000000L});
    public static final BitSet FOLLOW_LBRACESi_in_ftExtensionSelection4629 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000034L,0x000000000400F000L});
    public static final BitSet FOLLOW_ftSelection_in_ftExtensionSelection4632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_ftExtensionSelection4635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPRAGSi_in_pragma4671 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_pragma4674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_PragmaContents_in_pragma4676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_RPRAGSi_in_pragma4679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOrder_in_ftPosFilter4720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWindow_in_ftPosFilter4724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDistance_in_ftPosFilter4728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftScope_in_ftPosFilter4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftContent_in_ftPosFilter4736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_ftOrder4751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_ftWindow4766 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_additiveExpr_in_ftWindow4768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000C0080000L});
    public static final BitSet FOLLOW_ftUnit_in_ftWindow4770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTANCE_in_ftDistance4816 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_ftRange_in_ftDistance4818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000C0080000L});
    public static final BitSet FOLLOW_ftUnit_in_ftDistance4820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftScope4835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
    public static final BitSet FOLLOW_ftBigUnit_in_ftScope4843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftBigUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftContent4885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_set_in_ftContent4887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENTIRE_in_ftContent4897 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_CONTENT_in_ftContent4899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftLanguageOption_in_ftMatchOption4922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftCaseOption_in_ftMatchOption4930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDiacriticsOption_in_ftMatchOption4938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionOption_in_ftMatchOption4946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftMatchOption4954 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000000L,0x00001E0000000000L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftMatchOption4958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftThesaurusOption_in_ftMatchOption4973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STEMMING_in_ftMatchOption4988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftStopwordOption_in_ftMatchOption5003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftMatchOption5025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00001E0000000000L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftMatchOption5030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THESAURUS_in_ftMatchOption5049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STEMMING_in_ftMatchOption5068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STOP_in_ftMatchOption5087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_WORDS_in_ftMatchOption5089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGUAGE_in_ftLanguageOption5120 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftLanguageOption5123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ftCaseOption5144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L});
    public static final BitSet FOLLOW_set_in_ftCaseOption5147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOWERCASE_in_ftCaseOption5165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPPERCASE_in_ftCaseOption5178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ftDiacriticsOption5204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L});
    public static final BitSet FOLLOW_set_in_ftDiacriticsOption5207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTION_in_ftExtensionOption5225 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_ftExtensionOption5228 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftExtensionOption5230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption5259 = new BitSet(new long[]{0x0800002000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption5277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_ftThesaurusOption5298 = new BitSet(new long[]{0x0800002000000000L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption5302 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption5306 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMASi_in_ftThesaurusOption5310 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption5312 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_ftThesaurusOption5316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftThesaurusID5348 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_ftThesaurusID5350 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0008000002800000L});
    public static final BitSet FOLLOW_RELATIONSHIP_in_ftThesaurusID5353 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftThesaurusID5355 = new BitSet(new long[]{0x0800000000000002L,0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_ftRange_in_ftThesaurusID5360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LEVELS_in_ftThesaurusID5362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption5385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption5387 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ftRefOrList_in_ftStopwordOption5389 = new BitSet(new long[]{0x0000000000000002L,0x0004800000000000L});
    public static final BitSet FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption5391 = new BitSet(new long[]{0x0000000000000002L,0x0004800000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_ftStopwordOption5404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption5406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption5408 = new BitSet(new long[]{0x0000000000000002L,0x0004800000000000L});
    public static final BitSet FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption5410 = new BitSet(new long[]{0x0000000000000002L,0x0004800000000000L});
    public static final BitSet FOLLOW_AT_in_ftRefOrList5445 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_uriLiteral_in_ftRefOrList5447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_ftRefOrList5464 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftRefOrList5467 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMASi_in_ftRefOrList5470 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftRefOrList5472 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_ftRefOrList5476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftInclExclStringLiteral5501 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ftRefOrList_in_ftInclExclStringLiteral5509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_validateExpr_in_valueExpr5531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathExpr_in_valueExpr5535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extensionExpr_in_valueExpr5539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_validateExpr5550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x00C0000000000000L});
    public static final BitSet FOLLOW_validationMode_in_validateExpr5552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_validateExpr5555 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_validateExpr5558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_validateExpr5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_validationMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr5622 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEF7FFFFEFF7C7L,0xFCFFFFFFE3FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr5624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr5646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DBLSLASHSi_in_pathExpr5664 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEF7FFFFEFF7C7L,0xFCFFFFFFE3FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr5666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr5687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr5735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0300000000000000L});
    public static final BitSet FOLLOW_SLASHSi_in_relativePathExpr5739 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEF7FFFFEFF7C7L,0xFCFFFFFFE3FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_DBLSLASHSi_in_relativePathExpr5744 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEF7FFFFEFF7C7L,0xFCFFFFFFE3FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr5748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0300000000000000L});
    public static final BitSet FOLLOW_axisStep_in_stepExpr5894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_axisStep_in_stepExpr5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filterExpr_in_stepExpr5950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseStep_in_axisStep5985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_forwardStep_in_axisStep5989 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_contextItemExpr_in_axisStep5993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_predicateList_in_axisStep5997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTSi_in_contextItemExpr6020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseAxis_in_reverseStep6043 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFF7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_nodeTest_in_reverseStep6045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevReverseStep_in_reverseStep6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_reverseAxis6076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_reverseAxis6096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_nodeTest6123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameTest_in_nodeTest6127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wildcard_in_nameTest6208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_nameTest6240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard6342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard6344 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C2L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_wildcard6346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard6384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_wildcard6420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard6422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_STARSi_in_wildcard6424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTDOTSi_in_abbrevReverseStep6481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forwardAxis_in_forwardStep6525 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFF7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_nodeTest_in_forwardStep6528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevForwardStep_in_forwardStep6532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_forwardAxis6588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_forwardAxis6695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATSi_in_abbrevForwardStep6744 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFF7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_nodeTest_in_abbrevForwardStep6748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predicate_in_predicateList6810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LBRACKSi_in_predicate6838 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_predicate6840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RBRACKSi_in_predicate6842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_in_extensionExpr6914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000004000000L});
    public static final BitSet FOLLOW_LBRACESi_in_extensionExpr6917 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7E7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_extensionExpr6920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_extensionExpr6923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpr_in_filterExpr6935 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_predicateList_in_filterExpr6937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpr6957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varRef_in_primaryExpr6970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpr_in_primaryExpr6983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_primaryExpr6996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderedExpr_in_primaryExpr7009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unorderedExpr_in_primaryExpr7022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_in_primaryExpr7035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_varRef7055 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_varName_in_varRef7058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_parenthesizedExpr7073 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7CFL,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_parenthesizedExpr7076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_parenthesizedExpr7079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_functionCall7108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_functionCall7110 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7CFL,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_functionCall7127 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMASi_in_functionCall7130 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_exprSingle_in_functionCall7132 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPARSi_in_functionCall7151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_orderedExpr7194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_orderedExpr7196 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_orderedExpr7199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_orderedExpr7201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_unorderedExpr7217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_unorderedExpr7219 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_unorderedExpr7222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_unorderedExpr7224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_constructor7244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_computedConstructor_in_constructor7248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirElemConstructor_in_directConstructor7288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirCommentConstructor_in_directConstructor7308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirPIConstructor_in_directConstructor7328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTSi_in_dirElemConstructor7386 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor7412 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F28L,0x00000000600011F8L});
    public static final BitSet FOLLOW_dirAttributeList_in_dirElemConstructor7414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000001000L});
    public static final BitSet FOLLOW_RSELFTERMSi_in_dirElemConstructor7437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor7488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000002L,0x00000000024C2000L});
    public static final BitSet FOLLOW_dirElemContent_in_dirElemConstructor7542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000002L,0x00000000024C2000L});
    public static final BitSet FOLLOW_LENDTAGSi_in_dirElemConstructor7570 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor7602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor7633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_dirAttributeList7732 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_EQSi_in_dirAttributeList7734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000014000L});
    public static final BitSet FOLLOW_dirAttributeValue_in_dirAttributeList7736 = new BitSet(new long[]{0x9FFFFFF358000002L,0xFFFEF7FFFFEFE7C3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue7799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_QuotAttributeContent_in_dirAttributeValue7833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue7837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue7870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue7905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_AposAttributeContent_in_dirAttributeValue7939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue7943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue7976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_xmlEnclosedExpr8065 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_xmlEnclosedExpr8103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_xmlEnclosedExpr8134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_dirElemContent8217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cDataSection_in_dirElemContent8255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ElementContent_in_dirElemContent8294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirElemContent8333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCDATASi_in_cDataSection8391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_CDataContents_in_cDataSection8393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_RCDATASi_in_cDataSection8395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCOMMENTSi_in_dirCommentConstructor8419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DirCommentContent_in_dirCommentConstructor8421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_RCOMMENTSi_in_dirCommentConstructor8423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPISi_in_dirPIConstructor8447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_PiTarget_in_dirPIConstructor8449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_DirPiContents_in_dirPIConstructor8451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_RPISi_in_dirPIConstructor8454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compDocConstructor_in_computedConstructor8491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compElemConstructor_in_computedConstructor8511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compAttrConstructor_in_computedConstructor8531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compTextConstructor_in_computedConstructor8551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compCommentConstructor_in_computedConstructor8571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compPIConstructor_in_computedConstructor8591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_compDocConstructor8629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_compDocConstructor8631 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_compDocConstructor8634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_compDocConstructor8636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_compElemConstructor8682 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7D3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_compElemConstructor8685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor8689 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_compElemConstructor8691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor8693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor8717 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7E7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_contentExpr_in_compElemConstructor8719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor8722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_contentExpr8766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_compAttrConstructor8811 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7D3L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_qName_in_compAttrConstructor8814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor8819 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor8822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor8824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor8850 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7E7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor8853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor8856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_compTextConstructor8899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_compTextConstructor8901 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_compTextConstructor8904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_compTextConstructor8906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_compCommentConstructor8931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_compCommentConstructor8933 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_compCommentConstructor8936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_compCommentConstructor8938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor8984 = new BitSet(new long[]{0x9FFFFFF358000000L,0xFFFEF7FFFFEFE7D2L,0xF8FFFFFFE3FF1F20L,0x00000000600001F8L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_compPIConstructor9012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor9017 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7C7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_compPIConstructor9020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor9022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor9048 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEFFFFFFFFF7E7L,0xFFFFFFFFE7FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_expr_in_compPIConstructor9051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor9054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCName_in_ncNameorKeyword9089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_ncNameorKeyword9099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANY_in_ncNameorKeyword9110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_in_ncNameorKeyword9120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_OR_SELF_in_ncNameorKeyword9130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_ncNameorKeyword9140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_ncNameorKeyword9150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASCENDING_in_ncNameorKeyword9160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ncNameorKeyword9170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_ncNameorKeyword9180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BASE_URI_in_ncNameorKeyword9190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BY_in_ncNameorKeyword9200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOUNDARYSPACE_in_ncNameorKeyword9210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ncNameorKeyword9220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_ncNameorKeyword9230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASTABLE_in_ncNameorKeyword9240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHILD_in_ncNameorKeyword9250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLATION_in_ncNameorKeyword9260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_ncNameorKeyword9270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_ncNameorKeyword9280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTENT_in_ncNameorKeyword9290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_ncNameorKeyword9300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_ncNameorKeyword9310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_ncNameorKeyword9320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_in_ncNameorKeyword9330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_OR_SELF_in_ncNameorKeyword9340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDING_in_ncNameorKeyword9350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ncNameorKeyword9360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIFFERENT_in_ncNameorKeyword9370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTANCE_in_ncNameorKeyword9380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_ncNameorKeyword9390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_ncNameorKeyword9400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_ncNameorKeyword9410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_ncNameorKeyword9420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_ncNameorKeyword9430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENCODING_in_ncNameorKeyword9440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_END_in_ncNameorKeyword9450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENTIRE_in_ncNameorKeyword9460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_in_ncNameorKeyword9470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_ncNameorKeyword9480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQ_in_ncNameorKeyword9490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_in_ncNameorKeyword9500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXACTLY_in_ncNameorKeyword9510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCEPT_in_ncNameorKeyword9520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_ncNameorKeyword9530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_in_ncNameorKeyword9540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_SIBLING_in_ncNameorKeyword9550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_ncNameorKeyword9560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_ncNameorKeyword9570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTAND_in_ncNameorKeyword9580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTCONTAINS_in_ncNameorKeyword9590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTNOT_in_ncNameorKeyword9600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTOPTION_in_ncNameorKeyword9610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTOR_in_ncNameorKeyword9620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_ncNameorKeyword9630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_ncNameorKeyword9640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATEST_in_ncNameorKeyword9650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_ncNameorKeyword9660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDIV_in_ncNameorKeyword9670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ncNameorKeyword9680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_ncNameorKeyword9690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_ncNameorKeyword9700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INHERIT_in_ncNameorKeyword9710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSENSITIVE_in_ncNameorKeyword9720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_in_ncNameorKeyword9730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTERSECT_in_ncNameorKeyword9740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_ncNameorKeyword9750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_ncNameorKeyword9760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGUAGE_in_ncNameorKeyword9770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_ncNameorKeyword9780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_ncNameorKeyword9790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEAST_in_ncNameorKeyword9800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_ncNameorKeyword9810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEVELS_in_ncNameorKeyword9820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOWERCASE_in_ncNameorKeyword9830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_ncNameorKeyword9840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_ncNameorKeyword9850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_ncNameorKeyword9860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOST_in_ncNameorKeyword9870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_ncNameorKeyword9880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NE_in_ncNameorKeyword9890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_ncNameorKeyword9900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOINHERIT_in_ncNameorKeyword9910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOPRESERVE_in_ncNameorKeyword9920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_ncNameorKeyword9930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCCURS_in_ncNameorKeyword9940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OF_in_ncNameorKeyword9950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTION_in_ncNameorKeyword9960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_ncNameorKeyword9970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_ncNameorKeyword9980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_ncNameorKeyword9990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERING_in_ncNameorKeyword10000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAGRAPH_in_ncNameorKeyword10010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAGRAPHS_in_ncNameorKeyword10020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARENT_in_ncNameorKeyword10030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PHRASE_in_ncNameorKeyword10040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_in_ncNameorKeyword10050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_SIBLING_in_ncNameorKeyword10060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRESERVE_in_ncNameorKeyword10070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_ncNameorKeyword10080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RELATIONSHIP_in_ncNameorKeyword10090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_ncNameorKeyword10100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SAME_in_ncNameorKeyword10110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SATISFIES_in_ncNameorKeyword10120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_in_ncNameorKeyword10130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_ncNameorKeyword10140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_ncNameorKeyword10150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCORE_in_ncNameorKeyword10160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELF_in_ncNameorKeyword10170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SENSITIVE_in_ncNameorKeyword10180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SENTENCES_in_ncNameorKeyword10190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SENTENCE_in_ncNameorKeyword10200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_ncNameorKeyword10210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STABLE_in_ncNameorKeyword10220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_ncNameorKeyword10230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STEMMING_in_ncNameorKeyword10240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STOP_in_ncNameorKeyword10250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICT_in_ncNameorKeyword10260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRIP_in_ncNameorKeyword10270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_ncNameorKeyword10280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THESAURUS_in_ncNameorKeyword10290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_THEN_in_ncNameorKeyword10300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_ncNameorKeyword10310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TO_in_ncNameorKeyword10320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TREAT_in_ncNameorKeyword10330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_ncNameorKeyword10340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNION_in_ncNameorKeyword10350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_ncNameorKeyword10360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPPERCASE_in_ncNameorKeyword10370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_ncNameorKeyword10380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_ncNameorKeyword10390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VERSION_in_ncNameorKeyword10400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEIGHT_in_ncNameorKeyword10410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_ncNameorKeyword10420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WILDCARDS_in_ncNameorKeyword10430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_ncNameorKeyword10440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ncNameorKeyword10450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ncNameorKeyword10460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WORD_in_ncNameorKeyword10470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WORDS_in_ncNameorKeyword10480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_ncNameorKeyword10490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_synpred1441 = new BitSet(new long[]{0x0400000100000000L});
    public static final BitSet FOLLOW_set_in_synpred1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_synpred21364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_synpred21366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_synpred31383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000101800L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_synpred31385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_synpred42093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_synpred42095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_synpred52108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_synpred52110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_synpred65614 = new BitSet(new long[]{0xBFFFFFF378000000L,0xFFFEF7FFFFEFF7C7L,0xFCFFFFFFE3FFFF22L,0x00000000624003FCL});
    public static final BitSet FOLLOW_relativePathExpr_in_synpred65616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred75787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPARSi_in_synpred75865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_synpred86195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ncNameorKeyword_in_synpred86199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COLONSi_in_synpred86201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_STARSi_in_synpred86203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_synpred96335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COLONSi_in_synpred96337 = new BitSet(new long[]{0x0000000000000002L});

}