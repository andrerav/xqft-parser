1.
(expr1, expr2, .. , exprN)  -->

or(
    expr1
    expr2
    ....
    exprN


2.
/a/b/.../z -->

scope(/a/b....; lookup($z))


3.
expr1/expr2 ->

mergeInScope(
    expr2
    expr1


4.
expr1[expr2] ->

select(ifThenElse(isNumber(pred), scopeIndex(scope, pred), isAnyThing(pred)), 
    cross(
        expr2
        expr1



5.
## expr € {"hei" | 1 | <a\> }

expr -->

make(name = ["value"], expr)


6.
ref ("for variable")
$x  ->

project([xnumb = count(), documentId, pos, scope, value],
    scope.get(x)


7.
ref (("declare" | "let") variable

$x ->

scope.get(x)

8.
for $x in expr1 where expr2 return expr3  -->

scope.put(expr1)

project(~xnumb, ~number
    select(isNull(xnumb), true, eq(number, xnumb))             //only if $x is used in expr3
    select(isNull(w.xnumb), true, eq(number, w.xnumb))         // only if $x is used in expr2 
        cross(                                                 // alt fra venstre, varrefs venstre og høyre. (ikke velge value fra høyre(
            cross(                                             //  når den bare har value) gir ennå ordentlig kryss?
                project(number= count(), 
                    expr1)
                expr3
        select(isAnyThing(value),                                  
            expr2
9.
##op € {< | > | = | <= | >= | !=}

expr1 op expr2


"varRefs" |v op               |v = pil ned = childof

project_distict(1+ #"varRefs")                                      // fordi det kan være $i > (1,2,3,4,5,6) ergo: kan droppes om det er enkeltelement på en av sidene
    project(pred = "op"(l.val, r.val, [evt #numb kolonner]         //hvorfor ikke select?
        cross(
            expr1
            expr2


"varRefs" !|v op

project(value = ifThenElse(eq(value, 0), 0, 1);
    group(value = count();                                          //kan droppes om det er enkeltelement på begge sidene
        select("op"(l.val, r.val);
            cross(
                expr1
                expr2


10.

