// $ANTLR 3.0.1 etc/XQFT.g 2007-12-09 19:49:04

	package no.ntnu.xqft.parse;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class XQFTParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALL", "ANY", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BY", "BOUNDARYSPACE", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "CONTENT", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIACRITICS", "DIFFERENT", "DISTANCE", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "ENCODING", "END", "ENTIRE", "EMPTY", "EMPTY_SEQUENCE", "EQ", "EVERY", "EXACTLY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FROM", "FTAND", "FTCONTAINS", "FTNOT", "FTOPTION", "FTOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSENSITIVE", "INSTANCE", "INTERSECT", "IS", "ITEM", "LANGUAGE", "LAX", "LE", "LEAST", "LET", "LEVELS", "LOWERCASE", "LT", "MOD", "MODULE", "MOST", "NAMESPACE", "NE", "NODE", "NOINHERIT", "NOPRESERVE", "NOT", "OCCURS", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARAGRAPH", "PARAGRAPHS", "PARENT", "PHRASE", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RELATIONSHIP", "RETURN", "SAME", "SATISFIES", "SCHEMA", "SCHEMAATTRIBUTE", "SCHEMAELEMENT", "SCORE", "SELF", "SENSITIVE", "SENTENCES", "SENTENCE", "SOME", "STABLE", "START", "STEMMING", "STOP", "STRICT", "STRIP", "TEXT", "THESAURUS", "THEN", "TIMES", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "UPPERCASE", "VALIDATE", "VARIABLE", "VERSION", "WEIGHT", "WHERE", "WILDCARDS", "WINDOW", "WITH", "WITHOUT", "WORD", "WORDS", "XQUERY", "AST_FLWOR", "AST_FORCLAUSE", "AST_LETCLAUSE", "AST_ORDERBYCLAUSE", "AST_WHERECLAUSE", "AST_RETURNCLAUSE", "AST_QUANTIFIEDEXPR", "AST_TYPESWITCHEXPR", "AST_CASECLAUSE", "AST_IFEXPR", "AST_PATHEXPR", "AST_FTSELECTION", "AST_FTPOSFILTER", "AST_FUNCTIONCALL", "AST_FUNCTIONDECL", "AST_DIRELEMCONSTRUCTOR", "AST_DIRELEMCONTENT", "StringLiteral", "SEMICOLONSi", "NCName", "EQSi", "COMMASi", "DOLLARSi", "ASSIGNSi", "COLONSi", "LPARSi", "RPARSi", "LBRACESi", "RBRACSi", "QUESTIONSi", "STARSi", "PLUSSi", "MINUSSi", "PIPESi", "NEQSi", "LTSi", "LTOREQSi", "GTSi", "GTOREQSi", "NODEBEFORESi", "NODEAFTERSi", "IntegerLiteral", "DecimalLiteral", "DoubleLiteral", "LPRAGSi", "PragmaContents", "RPRAGSi", "DBLSLASHSi", "SLASHSi", "DBLCOLONSi", "DOTDOTSi", "ATSi", "LBRACKSi", "RBRACKSi", "DOTSi", "RSELFTERMSi", "LENDTAGSi", "QUOTSi", "QuotAttributeContent", "APOSSi", "AposAttributeContent", "ElementContent", "LCDATASi", "CDataContents", "RCDATASi", "LCOMMENTSi", "DirCommentContent", "RCOMMENTSi", "LPISi", "PiTarget", "DirPiContents", "RPISi", "CDataSectionLEX", "DirPIConstructor", "DirCommentConstLEX", "PragmaLEX", "Comment", "NumberLEX", "LexSigns", "S", "LexLiterals", "TOKENSWITCH", "PredefinedEntityRef", "CharRef", "NotChar", "AMPERSi", "QuotAttrContentChar", "AposAttrContentChar", "ElementContentChar", "CREFDECSi", "CREFHEXSi", "Name", "Letter", "UNDERSCORESi", "NameChar", "Digit", "CombiningChar", "Extender", "SHARPSi", "LXQCOMMENTSi", "RXQCOMMENTSi", "Digits", "NCNameStartChar", "NCNameChar", "EXCLSi", "BACKSLASHSi", "ExtraChar", "BaseChar", "Ideographic", "CleanChar", "Char"
    };
    public static final int FUNCTION=57;
    public static final int AST_FORCLAUSE=145;
    public static final int AST_PATHEXPR=154;
    public static final int MOD=79;
    public static final int LPISi=212;
    public static final int CREFHEXSi=234;
    public static final int NOT=87;
    public static final int EXCEPT=46;
    public static final int EOF=-1;
    public static final int PragmaContents=189;
    public static final int AST_IFEXPR=153;
    public static final int BaseChar=251;
    public static final int Ideographic=252;
    public static final int DISTANCE=32;
    public static final int IMPORT=63;
    public static final int AST_FUNCTIONDECL=158;
    public static final int ASSIGNSi=167;
    public static final int CREFDECSi=233;
    public static final int SENTENCE=114;
    public static final int PRECEDING=99;
    public static final int WORDS=142;
    public static final int NumberLEX=221;
    public static final int RETURN=104;
    public static final int ELEMENT=36;
    public static final int RPARSi=170;
    public static final int EQ=43;
    public static final int AST_CASECLAUSE=152;
    public static final int DOLLARSi=166;
    public static final int DIACRITICS=30;
    public static final int DBLCOLONSi=193;
    public static final int CHILD=19;
    public static final int GE=58;
    public static final int STRICT=120;
    public static final int PRESERVE=101;
    public static final int UNDERSCORESi=237;
    public static final int ELSE=37;
    public static final int RCDATASi=208;
    public static final int TYPESWITCH=128;
    public static final int STOP=119;
    public static final int CONTENT=23;
    public static final int S=223;
    public static final int FTOR=56;
    public static final int EMPTY=41;
    public static final int INTERSECT=68;
    public static final int MINUSSi=176;
    public static final int FTAND=52;
    public static final int LANGUAGE=71;
    public static final int LOWERCASE=77;
    public static final int LPRAGSi=188;
    public static final int INSENSITIVE=66;
    public static final int APOSSi=203;
    public static final int AST_TYPESWITCHEXPR=151;
    public static final int RSELFTERMSi=199;
    public static final int LBRACKSi=196;
    public static final int GT=60;
    public static final int END=39;
    public static final int DoubleLiteral=187;
    public static final int QUOTSi=201;
    public static final int LexLiterals=224;
    public static final int DirCommentContent=210;
    public static final int CharRef=227;
    public static final int OPTION=90;
    public static final int Extender=241;
    public static final int OCCURS=88;
    public static final int THESAURUS=123;
    public static final int SATISFIES=106;
    public static final int VERSION=134;
    public static final int RXQCOMMENTSi=244;
    public static final int IDIV=61;
    public static final int ASCENDING=10;
    public static final int ExtraChar=250;
    public static final int AT=11;
    public static final int AS=9;
    public static final int EMPTY_SEQUENCE=42;
    public static final int PARENT=97;
    public static final int CONSTRUCTION=22;
    public static final int ATSi=195;
    public static final int THEN=124;
    public static final int DBLSLASHSi=191;
    public static final int DOCUMENT=34;
    public static final int COLLATION=20;
    public static final int LCOMMENTSi=209;
    public static final int ANCESTOR=6;
    public static final int AMPERSi=229;
    public static final int CleanChar=253;
    public static final int ElementContent=205;
    public static final int CASTABLE=18;
    public static final int MOST=81;
    public static final int EQSi=164;
    public static final int BY=14;
    public static final int NODEBEFORESi=183;
    public static final int DOTSi=198;
    public static final int NCNameChar=247;
    public static final int ITEM=70;
    public static final int TO=126;
    public static final int INHERIT=65;
    public static final int ANCESTOR_OR_SELF=7;
    public static final int DOTDOTSi=194;
    public static final int STEMMING=118;
    public static final int AST_WHERECLAUSE=148;
    public static final int LTOREQSi=180;
    public static final int NotChar=228;
    public static final int DirPIConstructor=217;
    public static final int TEXT=122;
    public static final int MODULE=80;
    public static final int FTNOT=54;
    public static final int ORDERED=93;
    public static final int SAME=105;
    public static final int UNION=129;
    public static final int FOLLOWING_SIBLING=49;
    public static final int StringLiteral=161;
    public static final int SCHEMA=107;
    public static final int COLONSi=168;
    public static final int PiTarget=213;
    public static final int ENTIRE=40;
    public static final int INSTANCE=67;
    public static final int VALIDATE=132;
    public static final int WILDCARDS=137;
    public static final int NOINHERIT=85;
    public static final int AST_FUNCTIONCALL=157;
    public static final int DECLARE=25;
    public static final int START=117;
    public static final int IntegerLiteral=185;
    public static final int DIV=33;
    public static final int CombiningChar=240;
    public static final int DESCENDING=29;
    public static final int SELF=111;
    public static final int RPRAGSi=190;
    public static final int NEQSi=178;
    public static final int CAST=17;
    public static final int SENTENCES=113;
    public static final int EXTERNAL=47;
    public static final int LT=78;
    public static final int RBRACKSi=197;
    public static final int QUESTIONSi=173;
    public static final int BACKSLASHSi=249;
    public static final int AST_LETCLAUSE=146;
    public static final int CASE=16;
    public static final int ENCODING=38;
    public static final int RCOMMENTSi=211;
    public static final int DIFFERENT=31;
    public static final int PLUSSi=175;
    public static final int PragmaLEX=219;
    public static final int DOCUMENT_NODE=35;
    public static final int SCHEMAATTRIBUTE=108;
    public static final int LXQCOMMENTSi=243;
    public static final int SEMICOLONSi=162;
    public static final int WORD=141;
    public static final int SHARPSi=242;
    public static final int UPPERCASE=131;
    public static final int Comment=220;
    public static final int Char=254;
    public static final int Digits=245;
    public static final int QuotAttrContentChar=230;
    public static final int AST_FLWOR=144;
    public static final int FTOPTION=55;
    public static final int AposAttributeContent=204;
    public static final int COMMENT=21;
    public static final int NE=83;
    public static final int CDataSectionLEX=216;
    public static final int BOUNDARYSPACE=15;
    public static final int NODE=84;
    public static final int AST_FTPOSFILTER=156;
    public static final int CDataContents=207;
    public static final int AST_QUANTIFIEDEXPR=150;
    public static final int AposAttrContentChar=231;
    public static final int GREATEST=59;
    public static final int WITHOUT=140;
    public static final int EVERY=44;
    public static final int SENSITIVE=112;
    public static final int PROCESSING_INSTRUCTION=102;
    public static final int WEIGHT=135;
    public static final int AST_DIRELEMCONSTRUCTOR=159;
    public static final int OF=89;
    public static final int LTSi=179;
    public static final int NODEAFTERSi=184;
    public static final int RELATIONSHIP=103;
    public static final int NAMESPACE=82;
    public static final int LCDATASi=206;
    public static final int LBRACESi=171;
    public static final int VARIABLE=133;
    public static final int DESCENDANT_OR_SELF=28;
    public static final int BASE_URI=13;
    public static final int NOPRESERVE=86;
    public static final int DirPiContents=214;
    public static final int OR=91;
    public static final int LPARSi=169;
    public static final int STARSi=174;
    public static final int QuotAttributeContent=202;
    public static final int RPISi=215;
    public static final int FROM=51;
    public static final int PRECEDING_SIBLING=100;
    public static final int Letter=236;
    public static final int NCName=163;
    public static final int WHERE=136;
    public static final int LAX=72;
    public static final int AST_ORDERBYCLAUSE=147;
    public static final int ORDER=92;
    public static final int ATTRIBUTE=12;
    public static final int FOR=50;
    public static final int AST_FTSELECTION=155;
    public static final int EXCLSi=248;
    public static final int FOLLOWING=48;
    public static final int AND=8;
    public static final int FTCONTAINS=53;
    public static final int IF=62;
    public static final int SCHEMAELEMENT=109;
    public static final int IN=64;
    public static final int PARAGRAPH=95;
    public static final int COPY_NAMESPACES=24;
    public static final int IS=69;
    public static final int SOME=115;
    public static final int ALL=4;
    public static final int STRIP=121;
    public static final int STABLE=116;
    public static final int PIPESi=177;
    public static final int WITH=139;
    public static final int NCNameStartChar=246;
    public static final int LENDTAGSi=200;
    public static final int RBRACSi=172;
    public static final int GTSi=181;
    public static final int XQUERY=143;
    public static final int EXACTLY=45;
    public static final int DEFAULT=26;
    public static final int DESCENDANT=27;
    public static final int NameChar=238;
    public static final int COMMASi=165;
    public static final int SLASHSi=192;
    public static final int Digit=239;
    public static final int DecimalLiteral=186;
    public static final int GTOREQSi=182;
    public static final int UNORDERED=130;
    public static final int AST_DIRELEMCONTENT=160;
    public static final int PHRASE=98;
    public static final int TOKENSWITCH=225;
    public static final int ElementContentChar=232;
    public static final int ANY=5;
    public static final int SCORE=110;
    public static final int AST_RETURNCLAUSE=149;
    public static final int LexSigns=222;
    public static final int ORDERING=94;
    public static final int PredefinedEntityRef=226;
    public static final int Name=235;
    public static final int LEAST=74;
    public static final int WINDOW=138;
    public static final int LEVELS=76;
    public static final int PARAGRAPHS=96;
    public static final int TIMES=125;
    public static final int DirCommentConstLEX=218;
    public static final int LET=75;
    public static final int LE=73;
    public static final int TREAT=127;

        public XQFTParser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[178+1];
         }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "etc/XQFT.g"; }


    	
    	/* Root scope */
    	//Scope currentScope = new Scope();	   // @init-ting her ogsaa
    	XQFTLexer lexer;
    /*
    	public void setTokenStream(TokenStream input) {
    				String inputz =  "<html> \n" +                                                   //1
                            "{ \n"+                                                         //2
                            "for $act in doc(\"hamlet.xml\")//ACT\n" +                      //3
                            "let $speakers := distinct-values($act//SPEAKER)\n"+            //4
                            "return\n"+                                                     //5
                            "<span>\n"+                                                     //6
                            "<h1>{ $act/TITLE/text() }</h1>\n"+                             //7
                            "<ul>\n"+                                                       //8
                            "{\n"+                                                          //9
                            "for $speaker in $speakers\n"+                                  //10
                            "return <li>{ $speaker }</li>\n"+                               //11
                            "}\n"+                                                          //12
                            "</ul>\n"+                                                      //13
                            "</span>\n"+                                                    //14
                            "}\n"+                                                          //15
                            "</html>\n";                                                    //16
                            	CharStream cs = new ANTLRStringStream(inputz);
    		lexer = (XQFTLexer)input.getTokenSource();
    		lexer.setCharStream(cs);
    		UnbufferedCommonTokenStream tokenz = new UnbufferedCommonTokenStream();
    		tokenz.setTokenSource(lexer);
    		super.setTokenStream(tokenz);
     	
    	}*/
    	public void setLexer(XQFTLexer lex)
    	{
    		this.lexer=lex;
    	}

        protected void mismatch(IntStream input, int ttype, BitSet follow)
            throws RecognitionException
        {
            throw new MismatchedTokenException(ttype, input);
        }

        public void recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow)
            throws RecognitionException
        {
            throw e;
        }



    public static class module_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start module
    // etc/XQFT.g:293:1: module : ( versionDecl )? ( libraryModule | mainModule ) ;
    public final module_return module() throws RecognitionException {
        module_return retval = new module_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        versionDecl_return versionDecl1 = null;

        libraryModule_return libraryModule2 = null;

        mainModule_return mainModule3 = null;



        try {
            // etc/XQFT.g:293:32: ( ( versionDecl )? ( libraryModule | mainModule ) )
            // etc/XQFT.g:293:34: ( versionDecl )? ( libraryModule | mainModule )
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:293:34: ( versionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // etc/XQFT.g:293:34: versionDecl
                    {
                    pushFollow(FOLLOW_versionDecl_in_module588);
                    versionDecl1=versionDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, versionDecl1.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:293:47: ( libraryModule | mainModule )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                alt2=1;
            }
            else if ( ((LA2_0>=ANCESTOR && LA2_0<=ANCESTOR_OR_SELF)||LA2_0==ATTRIBUTE||LA2_0==CHILD||LA2_0==COMMENT||LA2_0==DECLARE||(LA2_0>=DESCENDANT && LA2_0<=DESCENDANT_OR_SELF)||(LA2_0>=DOCUMENT && LA2_0<=ELEMENT)||LA2_0==EVERY||(LA2_0>=FOLLOWING && LA2_0<=FOR)||(LA2_0>=IF && LA2_0<=IMPORT)||LA2_0==LET||LA2_0==NODE||LA2_0==ORDERED||LA2_0==PARENT||(LA2_0>=PRECEDING && LA2_0<=PRECEDING_SIBLING)||LA2_0==PROCESSING_INSTRUCTION||(LA2_0>=SCHEMAATTRIBUTE && LA2_0<=SCHEMAELEMENT)||LA2_0==SELF||LA2_0==SOME||LA2_0==TEXT||LA2_0==TYPESWITCH||LA2_0==UNORDERED||LA2_0==VALIDATE||LA2_0==StringLiteral||LA2_0==NCName||LA2_0==DOLLARSi||LA2_0==LPARSi||(LA2_0>=STARSi && LA2_0<=MINUSSi)||LA2_0==LTSi||(LA2_0>=IntegerLiteral && LA2_0<=LPRAGSi)||(LA2_0>=DBLSLASHSi && LA2_0<=SLASHSi)||(LA2_0>=DOTDOTSi && LA2_0<=ATSi)||LA2_0==DOTSi||LA2_0==LCOMMENTSi||LA2_0==LPISi) ) {
                alt2=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("293:47: ( libraryModule | mainModule )", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // etc/XQFT.g:293:48: libraryModule
                    {
                    pushFollow(FOLLOW_libraryModule_in_module592);
                    libraryModule2=libraryModule();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, libraryModule2.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:293:64: mainModule
                    {
                    pushFollow(FOLLOW_mainModule_in_module596);
                    mainModule3=mainModule();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, mainModule3.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end module

    public static class versionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start versionDecl
    // etc/XQFT.g:295:2: versionDecl : XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? separator ;
    public final versionDecl_return versionDecl() throws RecognitionException {
        versionDecl_return retval = new versionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token XQUERY4=null;
        Token VERSION5=null;
        Token StringLiteral6=null;
        Token ENCODING7=null;
        Token StringLiteral8=null;
        separator_return separator9 = null;


        XQFTTree XQUERY4_tree=null;
        XQFTTree VERSION5_tree=null;
        XQFTTree StringLiteral6_tree=null;
        XQFTTree ENCODING7_tree=null;
        XQFTTree StringLiteral8_tree=null;

        try {
            // etc/XQFT.g:295:33: ( XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? separator )
            // etc/XQFT.g:295:35: XQUERY VERSION StringLiteral ( ENCODING StringLiteral )? separator
            {
            root_0 = (XQFTTree)adaptor.nil();

            XQUERY4=(Token)input.LT(1);
            match(input,XQUERY,FOLLOW_XQUERY_in_versionDecl625); if (failed) return retval;
            if ( backtracking==0 ) {
            XQUERY4_tree = (XQFTTree)adaptor.create(XQUERY4);
            adaptor.addChild(root_0, XQUERY4_tree);
            }
            VERSION5=(Token)input.LT(1);
            match(input,VERSION,FOLLOW_VERSION_in_versionDecl627); if (failed) return retval;
            if ( backtracking==0 ) {
            VERSION5_tree = (XQFTTree)adaptor.create(VERSION5);
            adaptor.addChild(root_0, VERSION5_tree);
            }
            StringLiteral6=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_versionDecl629); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral6_tree = (XQFTTree)adaptor.create(StringLiteral6);
            adaptor.addChild(root_0, StringLiteral6_tree);
            }
            // etc/XQFT.g:295:64: ( ENCODING StringLiteral )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==ENCODING) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // etc/XQFT.g:295:65: ENCODING StringLiteral
                    {
                    ENCODING7=(Token)input.LT(1);
                    match(input,ENCODING,FOLLOW_ENCODING_in_versionDecl632); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ENCODING7_tree = (XQFTTree)adaptor.create(ENCODING7);
                    adaptor.addChild(root_0, ENCODING7_tree);
                    }
                    StringLiteral8=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_versionDecl634); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral8_tree = (XQFTTree)adaptor.create(StringLiteral8);
                    adaptor.addChild(root_0, StringLiteral8_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_separator_in_versionDecl638);
            separator9=separator();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, separator9.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end versionDecl

    public static class separator_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start separator
    // etc/XQFT.g:296:3: separator : SEMICOLONSi ;
    public final separator_return separator() throws RecognitionException {
        separator_return retval = new separator_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SEMICOLONSi10=null;

        XQFTTree SEMICOLONSi10_tree=null;

        try {
            // etc/XQFT.g:296:34: ( SEMICOLONSi )
            // etc/XQFT.g:296:36: SEMICOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            SEMICOLONSi10=(Token)input.LT(1);
            match(input,SEMICOLONSi,FOLLOW_SEMICOLONSi_in_separator668); if (failed) return retval;
            if ( backtracking==0 ) {
            SEMICOLONSi10_tree = (XQFTTree)adaptor.create(SEMICOLONSi10);
            adaptor.addChild(root_0, SEMICOLONSi10_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end separator

    public static class libraryModule_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start libraryModule
    // etc/XQFT.g:298:2: libraryModule : moduleDecl prolog ;
    public final libraryModule_return libraryModule() throws RecognitionException {
        libraryModule_return retval = new libraryModule_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        moduleDecl_return moduleDecl11 = null;

        prolog_return prolog12 = null;



        try {
            // etc/XQFT.g:298:33: ( moduleDecl prolog )
            // etc/XQFT.g:298:35: moduleDecl prolog
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_moduleDecl_in_libraryModule696);
            moduleDecl11=moduleDecl();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, moduleDecl11.getTree());
            pushFollow(FOLLOW_prolog_in_libraryModule698);
            prolog12=prolog();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, prolog12.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end libraryModule

    public static class moduleDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start moduleDecl
    // etc/XQFT.g:299:3: moduleDecl : MODULE NAMESPACE NCName EQSi uriLiteral separator ;
    public final moduleDecl_return moduleDecl() throws RecognitionException {
        moduleDecl_return retval = new moduleDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token MODULE13=null;
        Token NAMESPACE14=null;
        Token NCName15=null;
        Token EQSi16=null;
        uriLiteral_return uriLiteral17 = null;

        separator_return separator18 = null;


        XQFTTree MODULE13_tree=null;
        XQFTTree NAMESPACE14_tree=null;
        XQFTTree NCName15_tree=null;
        XQFTTree EQSi16_tree=null;

        try {
            // etc/XQFT.g:299:34: ( MODULE NAMESPACE NCName EQSi uriLiteral separator )
            // etc/XQFT.g:299:36: MODULE NAMESPACE NCName EQSi uriLiteral separator
            {
            root_0 = (XQFTTree)adaptor.nil();

            MODULE13=(Token)input.LT(1);
            match(input,MODULE,FOLLOW_MODULE_in_moduleDecl727); if (failed) return retval;
            if ( backtracking==0 ) {
            MODULE13_tree = (XQFTTree)adaptor.create(MODULE13);
            adaptor.addChild(root_0, MODULE13_tree);
            }
            NAMESPACE14=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleDecl729); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE14_tree = (XQFTTree)adaptor.create(NAMESPACE14);
            adaptor.addChild(root_0, NAMESPACE14_tree);
            }
            NCName15=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_moduleDecl731); if (failed) return retval;
            if ( backtracking==0 ) {
            NCName15_tree = (XQFTTree)adaptor.create(NCName15);
            adaptor.addChild(root_0, NCName15_tree);
            }
            EQSi16=(Token)input.LT(1);
            match(input,EQSi,FOLLOW_EQSi_in_moduleDecl733); if (failed) return retval;
            if ( backtracking==0 ) {
            EQSi16_tree = (XQFTTree)adaptor.create(EQSi16);
            adaptor.addChild(root_0, EQSi16_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_moduleDecl735);
            uriLiteral17=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral17.getTree());
            pushFollow(FOLLOW_separator_in_moduleDecl737);
            separator18=separator();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, separator18.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end moduleDecl

    public static class uriLiteral_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uriLiteral
    // etc/XQFT.g:300:4: uriLiteral : StringLiteral ;
    public final uriLiteral_return uriLiteral() throws RecognitionException {
        uriLiteral_return retval = new uriLiteral_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token StringLiteral19=null;

        XQFTTree StringLiteral19_tree=null;

        try {
            // etc/XQFT.g:300:35: ( StringLiteral )
            // etc/XQFT.g:300:37: StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            StringLiteral19=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_uriLiteral767); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral19_tree = (XQFTTree)adaptor.create(StringLiteral19);
            adaptor.addChild(root_0, StringLiteral19_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end uriLiteral

    public static class mainModule_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start mainModule
    // etc/XQFT.g:303:2: mainModule : prolog queryBody ;
    public final mainModule_return mainModule() throws RecognitionException {
        mainModule_return retval = new mainModule_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        prolog_return prolog20 = null;

        queryBody_return queryBody21 = null;



        try {
            // etc/XQFT.g:303:33: ( prolog queryBody )
            // etc/XQFT.g:303:35: prolog queryBody
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_prolog_in_mainModule799);
            prolog20=prolog();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, prolog20.getTree());
            pushFollow(FOLLOW_queryBody_in_mainModule801);
            queryBody21=queryBody();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, queryBody21.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end mainModule

    public static class queryBody_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryBody
    // etc/XQFT.g:305:3: queryBody : expr ;
    public final queryBody_return queryBody() throws RecognitionException {
        queryBody_return retval = new queryBody_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        expr_return expr22 = null;



        try {
            // etc/XQFT.g:305:34: ( expr )
            // etc/XQFT.g:305:36: expr
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_queryBody832);
            expr22=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr22.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryBody

    public static class expr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expr
    // etc/XQFT.g:306:4: expr : exprSingle ( COMMASi exprSingle )* -> ( exprSingle )+ ;
    public final expr_return expr() throws RecognitionException {
        expr_return retval = new expr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMASi24=null;
        exprSingle_return exprSingle23 = null;

        exprSingle_return exprSingle25 = null;


        XQFTTree COMMASi24_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:306:35: ( exprSingle ( COMMASi exprSingle )* -> ( exprSingle )+ )
            // etc/XQFT.g:306:37: exprSingle ( COMMASi exprSingle )*
            {
            pushFollow(FOLLOW_exprSingle_in_expr868);
            exprSingle23=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle23.getTree());
            // etc/XQFT.g:306:48: ( COMMASi exprSingle )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==COMMASi) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // etc/XQFT.g:306:49: COMMASi exprSingle
            	    {
            	    COMMASi24=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_expr871); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi24);

            	    pushFollow(FOLLOW_exprSingle_in_expr873);
            	    exprSingle25=exprSingle();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_exprSingle.add(exprSingle25.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 307:57: -> ( exprSingle )+
            {
                if ( !(stream_exprSingle.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_exprSingle.hasNext() ) {
                    adaptor.addChild(root_0, stream_exprSingle.next());

                }
                stream_exprSingle.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end expr

    public static class prolog_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start prolog
    // etc/XQFT.g:313:1: prolog : ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )* ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )* ;
    public final prolog_return prolog() throws RecognitionException {
        prolog_return retval = new prolog_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        defaultNamespaceDecl_return defaultNamespaceDecl26 = null;

        setter_return setter27 = null;

        namespaceDecl_return namespaceDecl28 = null;

        importStmt_return importStmt29 = null;

        separator_return separator30 = null;

        varDecl_return varDecl31 = null;

        functionDecl_return functionDecl32 = null;

        optionDecl_return optionDecl33 = null;

        ftOptionDecl_return ftOptionDecl34 = null;

        separator_return separator35 = null;



        try {
            // etc/XQFT.g:313:32: ( ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )* ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )* )
            // etc/XQFT.g:313:35: ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )* ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:313:35: ( ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==DECLARE) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==BASE_URI||LA6_1==BOUNDARYSPACE||LA6_1==CONSTRUCTION||LA6_1==COPY_NAMESPACES||LA6_1==DEFAULT||LA6_1==NAMESPACE||LA6_1==ORDERING) ) {
                        alt6=1;
                    }


                }
                else if ( (LA6_0==IMPORT) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // etc/XQFT.g:314:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt ) separator
            	    {
            	    // etc/XQFT.g:314:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )
            	    int alt5=4;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0==DECLARE) ) {
            	        switch ( input.LA(2) ) {
            	        case DEFAULT:
            	            {
            	            int LA5_3 = input.LA(3);

            	            if ( (LA5_3==COLLATION||LA5_3==ORDER) ) {
            	                alt5=2;
            	            }
            	            else if ( (LA5_3==ELEMENT||LA5_3==FUNCTION) ) {
            	                alt5=1;
            	            }
            	            else {
            	                if (backtracking>0) {failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("314:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 3, input);

            	                throw nvae;
            	            }
            	            }
            	            break;
            	        case BASE_URI:
            	        case BOUNDARYSPACE:
            	        case CONSTRUCTION:
            	        case COPY_NAMESPACES:
            	        case ORDERING:
            	            {
            	            alt5=2;
            	            }
            	            break;
            	        case NAMESPACE:
            	            {
            	            alt5=3;
            	            }
            	            break;
            	        default:
            	            if (backtracking>0) {failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("314:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 1, input);

            	            throw nvae;
            	        }

            	    }
            	    else if ( (LA5_0==IMPORT) ) {
            	        alt5=4;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("314:12: ( defaultNamespaceDecl | setter | namespaceDecl | importStmt )", 5, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt5) {
            	        case 1 :
            	            // etc/XQFT.g:314:13: defaultNamespaceDecl
            	            {
            	            pushFollow(FOLLOW_defaultNamespaceDecl_in_prolog1000);
            	            defaultNamespaceDecl26=defaultNamespaceDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, defaultNamespaceDecl26.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // etc/XQFT.g:314:36: setter
            	            {
            	            pushFollow(FOLLOW_setter_in_prolog1004);
            	            setter27=setter();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, setter27.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // etc/XQFT.g:314:45: namespaceDecl
            	            {
            	            pushFollow(FOLLOW_namespaceDecl_in_prolog1008);
            	            namespaceDecl28=namespaceDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, namespaceDecl28.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // etc/XQFT.g:314:61: importStmt
            	            {
            	            pushFollow(FOLLOW_importStmt_in_prolog1012);
            	            importStmt29=importStmt();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, importStmt29.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_separator_in_prolog1027);
            	    separator30=separator();
            	    _fsp--;
            	    if (failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // etc/XQFT.g:317:12: ( ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==DECLARE) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // etc/XQFT.g:318:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl ) separator
            	    {
            	    // etc/XQFT.g:318:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl )
            	    int alt7=4;
            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0==DECLARE) ) {
            	        switch ( input.LA(2) ) {
            	        case FTOPTION:
            	            {
            	            alt7=4;
            	            }
            	            break;
            	        case VARIABLE:
            	            {
            	            alt7=1;
            	            }
            	            break;
            	        case FUNCTION:
            	            {
            	            alt7=2;
            	            }
            	            break;
            	        case OPTION:
            	            {
            	            alt7=3;
            	            }
            	            break;
            	        default:
            	            if (backtracking>0) {failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("318:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl )", 7, 1, input);

            	            throw nvae;
            	        }

            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("318:12: ( varDecl | functionDecl | optionDecl | ftOptionDecl )", 7, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt7) {
            	        case 1 :
            	            // etc/XQFT.g:318:13: varDecl
            	            {
            	            pushFollow(FOLLOW_varDecl_in_prolog1070);
            	            varDecl31=varDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, varDecl31.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // etc/XQFT.g:318:23: functionDecl
            	            {
            	            pushFollow(FOLLOW_functionDecl_in_prolog1074);
            	            functionDecl32=functionDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, functionDecl32.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // etc/XQFT.g:318:38: optionDecl
            	            {
            	            pushFollow(FOLLOW_optionDecl_in_prolog1078);
            	            optionDecl33=optionDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, optionDecl33.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // etc/XQFT.g:318:51: ftOptionDecl
            	            {
            	            pushFollow(FOLLOW_ftOptionDecl_in_prolog1082);
            	            ftOptionDecl34=ftOptionDecl();
            	            _fsp--;
            	            if (failed) return retval;
            	            if ( backtracking==0 ) adaptor.addChild(root_0, ftOptionDecl34.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_separator_in_prolog1096);
            	    separator35=separator();
            	    _fsp--;
            	    if (failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end prolog

    public static class defaultNamespaceDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defaultNamespaceDecl
    // etc/XQFT.g:323:1: defaultNamespaceDecl : DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral ;
    public final defaultNamespaceDecl_return defaultNamespaceDecl() throws RecognitionException {
        defaultNamespaceDecl_return retval = new defaultNamespaceDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE36=null;
        Token DEFAULT37=null;
        Token set38=null;
        Token NAMESPACE39=null;
        uriLiteral_return uriLiteral40 = null;


        XQFTTree DECLARE36_tree=null;
        XQFTTree DEFAULT37_tree=null;
        XQFTTree set38_tree=null;
        XQFTTree NAMESPACE39_tree=null;

        try {
            // etc/XQFT.g:323:32: ( DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral )
            // etc/XQFT.g:323:34: DECLARE DEFAULT ( ELEMENT | FUNCTION ) NAMESPACE uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE36=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_defaultNamespaceDecl1130); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE36_tree = (XQFTTree)adaptor.create(DECLARE36);
            adaptor.addChild(root_0, DECLARE36_tree);
            }
            DEFAULT37=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultNamespaceDecl1132); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT37_tree = (XQFTTree)adaptor.create(DEFAULT37);
            adaptor.addChild(root_0, DEFAULT37_tree);
            }
            set38=(Token)input.LT(1);
            if ( input.LA(1)==ELEMENT||input.LA(1)==FUNCTION ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set38));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_defaultNamespaceDecl1134);    throw mse;
            }

            NAMESPACE39=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_defaultNamespaceDecl1142); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE39_tree = (XQFTTree)adaptor.create(NAMESPACE39);
            adaptor.addChild(root_0, NAMESPACE39_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_defaultNamespaceDecl1144);
            uriLiteral40=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral40.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end defaultNamespaceDecl

    public static class setter_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start setter
    // etc/XQFT.g:325:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );
    public final setter_return setter() throws RecognitionException {
        setter_return retval = new setter_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        boundarySpaceDecl_return boundarySpaceDecl41 = null;

        defaultCollationDecl_return defaultCollationDecl42 = null;

        baseURIDecl_return baseURIDecl43 = null;

        constructionDecl_return constructionDecl44 = null;

        orderingModeDecl_return orderingModeDecl45 = null;

        emptyOrderDecl_return emptyOrderDecl46 = null;

        copyNamespacesDecl_return copyNamespacesDecl47 = null;



        try {
            // etc/XQFT.g:325:32: ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl )
            int alt9=7;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==DECLARE) ) {
                switch ( input.LA(2) ) {
                case ORDERING:
                    {
                    alt9=5;
                    }
                    break;
                case CONSTRUCTION:
                    {
                    alt9=4;
                    }
                    break;
                case BASE_URI:
                    {
                    alt9=3;
                    }
                    break;
                case DEFAULT:
                    {
                    int LA9_5 = input.LA(3);

                    if ( (LA9_5==COLLATION) ) {
                        alt9=2;
                    }
                    else if ( (LA9_5==ORDER) ) {
                        alt9=6;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("325:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case BOUNDARYSPACE:
                    {
                    alt9=1;
                    }
                    break;
                case COPY_NAMESPACES:
                    {
                    alt9=7;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("325:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 1, input);

                    throw nvae;
                }

            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("325:1: setter : ( boundarySpaceDecl | defaultCollationDecl | baseURIDecl | constructionDecl | orderingModeDecl | emptyOrderDecl | copyNamespacesDecl );", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // etc/XQFT.g:325:34: boundarySpaceDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_boundarySpaceDecl_in_setter1176);
                    boundarySpaceDecl41=boundarySpaceDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, boundarySpaceDecl41.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:326:13: defaultCollationDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_defaultCollationDecl_in_setter1191);
                    defaultCollationDecl42=defaultCollationDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, defaultCollationDecl42.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:327:13: baseURIDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_baseURIDecl_in_setter1206);
                    baseURIDecl43=baseURIDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, baseURIDecl43.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:328:13: constructionDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_constructionDecl_in_setter1221);
                    constructionDecl44=constructionDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, constructionDecl44.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:329:13: orderingModeDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_orderingModeDecl_in_setter1236);
                    orderingModeDecl45=orderingModeDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orderingModeDecl45.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:330:13: emptyOrderDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_emptyOrderDecl_in_setter1251);
                    emptyOrderDecl46=emptyOrderDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, emptyOrderDecl46.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:331:13: copyNamespacesDecl
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_copyNamespacesDecl_in_setter1266);
                    copyNamespacesDecl47=copyNamespacesDecl();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, copyNamespacesDecl47.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end setter

    public static class boundarySpaceDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start boundarySpaceDecl
    // etc/XQFT.g:332:2: boundarySpaceDecl : DECLARE BOUNDARYSPACE ( PRESERVE | STRIP ) ;
    public final boundarySpaceDecl_return boundarySpaceDecl() throws RecognitionException {
        boundarySpaceDecl_return retval = new boundarySpaceDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE48=null;
        Token BOUNDARYSPACE49=null;
        Token set50=null;

        XQFTTree DECLARE48_tree=null;
        XQFTTree BOUNDARYSPACE49_tree=null;
        XQFTTree set50_tree=null;

        try {
            // etc/XQFT.g:332:33: ( DECLARE BOUNDARYSPACE ( PRESERVE | STRIP ) )
            // etc/XQFT.g:332:35: DECLARE BOUNDARYSPACE ( PRESERVE | STRIP )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE48=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_boundarySpaceDecl1287); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE48_tree = (XQFTTree)adaptor.create(DECLARE48);
            adaptor.addChild(root_0, DECLARE48_tree);
            }
            BOUNDARYSPACE49=(Token)input.LT(1);
            match(input,BOUNDARYSPACE,FOLLOW_BOUNDARYSPACE_in_boundarySpaceDecl1289); if (failed) return retval;
            if ( backtracking==0 ) {
            BOUNDARYSPACE49_tree = (XQFTTree)adaptor.create(BOUNDARYSPACE49);
            adaptor.addChild(root_0, BOUNDARYSPACE49_tree);
            }
            set50=(Token)input.LT(1);
            if ( input.LA(1)==PRESERVE||input.LA(1)==STRIP ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set50));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_boundarySpaceDecl1291);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end boundarySpaceDecl

    public static class defaultCollationDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start defaultCollationDecl
    // etc/XQFT.g:333:2: defaultCollationDecl : DECLARE DEFAULT COLLATION uriLiteral ;
    public final defaultCollationDecl_return defaultCollationDecl() throws RecognitionException {
        defaultCollationDecl_return retval = new defaultCollationDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE51=null;
        Token DEFAULT52=null;
        Token COLLATION53=null;
        uriLiteral_return uriLiteral54 = null;


        XQFTTree DECLARE51_tree=null;
        XQFTTree DEFAULT52_tree=null;
        XQFTTree COLLATION53_tree=null;

        try {
            // etc/XQFT.g:333:33: ( DECLARE DEFAULT COLLATION uriLiteral )
            // etc/XQFT.g:333:35: DECLARE DEFAULT COLLATION uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE51=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_defaultCollationDecl1315); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE51_tree = (XQFTTree)adaptor.create(DECLARE51);
            adaptor.addChild(root_0, DECLARE51_tree);
            }
            DEFAULT52=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultCollationDecl1317); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT52_tree = (XQFTTree)adaptor.create(DEFAULT52);
            adaptor.addChild(root_0, DEFAULT52_tree);
            }
            COLLATION53=(Token)input.LT(1);
            match(input,COLLATION,FOLLOW_COLLATION_in_defaultCollationDecl1319); if (failed) return retval;
            if ( backtracking==0 ) {
            COLLATION53_tree = (XQFTTree)adaptor.create(COLLATION53);
            adaptor.addChild(root_0, COLLATION53_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_defaultCollationDecl1321);
            uriLiteral54=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral54.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end defaultCollationDecl

    public static class baseURIDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start baseURIDecl
    // etc/XQFT.g:334:2: baseURIDecl : DECLARE BASE_URI uriLiteral ;
    public final baseURIDecl_return baseURIDecl() throws RecognitionException {
        baseURIDecl_return retval = new baseURIDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE55=null;
        Token BASE_URI56=null;
        uriLiteral_return uriLiteral57 = null;


        XQFTTree DECLARE55_tree=null;
        XQFTTree BASE_URI56_tree=null;

        try {
            // etc/XQFT.g:334:33: ( DECLARE BASE_URI uriLiteral )
            // etc/XQFT.g:334:35: DECLARE BASE_URI uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE55=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_baseURIDecl1348); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE55_tree = (XQFTTree)adaptor.create(DECLARE55);
            adaptor.addChild(root_0, DECLARE55_tree);
            }
            BASE_URI56=(Token)input.LT(1);
            match(input,BASE_URI,FOLLOW_BASE_URI_in_baseURIDecl1350); if (failed) return retval;
            if ( backtracking==0 ) {
            BASE_URI56_tree = (XQFTTree)adaptor.create(BASE_URI56);
            adaptor.addChild(root_0, BASE_URI56_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_baseURIDecl1352);
            uriLiteral57=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral57.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end baseURIDecl

    public static class constructionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constructionDecl
    // etc/XQFT.g:335:2: constructionDecl : DECLARE CONSTRUCTION ( STRIP | PRESERVE ) ;
    public final constructionDecl_return constructionDecl() throws RecognitionException {
        constructionDecl_return retval = new constructionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE58=null;
        Token CONSTRUCTION59=null;
        Token set60=null;

        XQFTTree DECLARE58_tree=null;
        XQFTTree CONSTRUCTION59_tree=null;
        XQFTTree set60_tree=null;

        try {
            // etc/XQFT.g:335:33: ( DECLARE CONSTRUCTION ( STRIP | PRESERVE ) )
            // etc/XQFT.g:335:35: DECLARE CONSTRUCTION ( STRIP | PRESERVE )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE58=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_constructionDecl1374); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE58_tree = (XQFTTree)adaptor.create(DECLARE58);
            adaptor.addChild(root_0, DECLARE58_tree);
            }
            CONSTRUCTION59=(Token)input.LT(1);
            match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_constructionDecl1376); if (failed) return retval;
            if ( backtracking==0 ) {
            CONSTRUCTION59_tree = (XQFTTree)adaptor.create(CONSTRUCTION59);
            adaptor.addChild(root_0, CONSTRUCTION59_tree);
            }
            set60=(Token)input.LT(1);
            if ( input.LA(1)==PRESERVE||input.LA(1)==STRIP ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set60));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_constructionDecl1378);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end constructionDecl

    public static class orderingModeDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderingModeDecl
    // etc/XQFT.g:336:2: orderingModeDecl : DECLARE ORDERING ( ORDERED | UNORDERED ) ;
    public final orderingModeDecl_return orderingModeDecl() throws RecognitionException {
        orderingModeDecl_return retval = new orderingModeDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE61=null;
        Token ORDERING62=null;
        Token set63=null;

        XQFTTree DECLARE61_tree=null;
        XQFTTree ORDERING62_tree=null;
        XQFTTree set63_tree=null;

        try {
            // etc/XQFT.g:336:33: ( DECLARE ORDERING ( ORDERED | UNORDERED ) )
            // etc/XQFT.g:336:35: DECLARE ORDERING ( ORDERED | UNORDERED )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE61=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_orderingModeDecl1406); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE61_tree = (XQFTTree)adaptor.create(DECLARE61);
            adaptor.addChild(root_0, DECLARE61_tree);
            }
            ORDERING62=(Token)input.LT(1);
            match(input,ORDERING,FOLLOW_ORDERING_in_orderingModeDecl1408); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERING62_tree = (XQFTTree)adaptor.create(ORDERING62);
            adaptor.addChild(root_0, ORDERING62_tree);
            }
            set63=(Token)input.LT(1);
            if ( input.LA(1)==ORDERED||input.LA(1)==UNORDERED ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set63));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderingModeDecl1410);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderingModeDecl

    public static class emptyOrderDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start emptyOrderDecl
    // etc/XQFT.g:337:2: emptyOrderDecl : DECLARE DEFAULT ORDER EMPTY ( GREATEST | LEAST ) ;
    public final emptyOrderDecl_return emptyOrderDecl() throws RecognitionException {
        emptyOrderDecl_return retval = new emptyOrderDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE64=null;
        Token DEFAULT65=null;
        Token ORDER66=null;
        Token EMPTY67=null;
        Token set68=null;

        XQFTTree DECLARE64_tree=null;
        XQFTTree DEFAULT65_tree=null;
        XQFTTree ORDER66_tree=null;
        XQFTTree EMPTY67_tree=null;
        XQFTTree set68_tree=null;

        try {
            // etc/XQFT.g:337:33: ( DECLARE DEFAULT ORDER EMPTY ( GREATEST | LEAST ) )
            // etc/XQFT.g:337:35: DECLARE DEFAULT ORDER EMPTY ( GREATEST | LEAST )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE64=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_emptyOrderDecl1440); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE64_tree = (XQFTTree)adaptor.create(DECLARE64);
            adaptor.addChild(root_0, DECLARE64_tree);
            }
            DEFAULT65=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_emptyOrderDecl1442); if (failed) return retval;
            if ( backtracking==0 ) {
            DEFAULT65_tree = (XQFTTree)adaptor.create(DEFAULT65);
            adaptor.addChild(root_0, DEFAULT65_tree);
            }
            ORDER66=(Token)input.LT(1);
            match(input,ORDER,FOLLOW_ORDER_in_emptyOrderDecl1444); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDER66_tree = (XQFTTree)adaptor.create(ORDER66);
            adaptor.addChild(root_0, ORDER66_tree);
            }
            EMPTY67=(Token)input.LT(1);
            match(input,EMPTY,FOLLOW_EMPTY_in_emptyOrderDecl1446); if (failed) return retval;
            if ( backtracking==0 ) {
            EMPTY67_tree = (XQFTTree)adaptor.create(EMPTY67);
            adaptor.addChild(root_0, EMPTY67_tree);
            }
            set68=(Token)input.LT(1);
            if ( input.LA(1)==GREATEST||input.LA(1)==LEAST ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set68));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_emptyOrderDecl1448);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end emptyOrderDecl

    public static class copyNamespacesDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start copyNamespacesDecl
    // etc/XQFT.g:338:2: copyNamespacesDecl : DECLARE COPY_NAMESPACES preserveMode COMMASi inheritMode ;
    public final copyNamespacesDecl_return copyNamespacesDecl() throws RecognitionException {
        copyNamespacesDecl_return retval = new copyNamespacesDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE69=null;
        Token COPY_NAMESPACES70=null;
        Token COMMASi72=null;
        preserveMode_return preserveMode71 = null;

        inheritMode_return inheritMode73 = null;


        XQFTTree DECLARE69_tree=null;
        XQFTTree COPY_NAMESPACES70_tree=null;
        XQFTTree COMMASi72_tree=null;

        try {
            // etc/XQFT.g:338:33: ( DECLARE COPY_NAMESPACES preserveMode COMMASi inheritMode )
            // etc/XQFT.g:338:35: DECLARE COPY_NAMESPACES preserveMode COMMASi inheritMode
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE69=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_copyNamespacesDecl1474); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE69_tree = (XQFTTree)adaptor.create(DECLARE69);
            adaptor.addChild(root_0, DECLARE69_tree);
            }
            COPY_NAMESPACES70=(Token)input.LT(1);
            match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl1476); if (failed) return retval;
            if ( backtracking==0 ) {
            COPY_NAMESPACES70_tree = (XQFTTree)adaptor.create(COPY_NAMESPACES70);
            adaptor.addChild(root_0, COPY_NAMESPACES70_tree);
            }
            pushFollow(FOLLOW_preserveMode_in_copyNamespacesDecl1478);
            preserveMode71=preserveMode();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, preserveMode71.getTree());
            COMMASi72=(Token)input.LT(1);
            match(input,COMMASi,FOLLOW_COMMASi_in_copyNamespacesDecl1480); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMASi72_tree = (XQFTTree)adaptor.create(COMMASi72);
            adaptor.addChild(root_0, COMMASi72_tree);
            }
            pushFollow(FOLLOW_inheritMode_in_copyNamespacesDecl1482);
            inheritMode73=inheritMode();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, inheritMode73.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end copyNamespacesDecl

    public static class preserveMode_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start preserveMode
    // etc/XQFT.g:339:3: preserveMode : ( PRESERVE | NOPRESERVE );
    public final preserveMode_return preserveMode() throws RecognitionException {
        preserveMode_return retval = new preserveMode_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set74=null;

        XQFTTree set74_tree=null;

        try {
            // etc/XQFT.g:339:34: ( PRESERVE | NOPRESERVE )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set74=(Token)input.LT(1);
            if ( input.LA(1)==NOPRESERVE||input.LA(1)==PRESERVE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set74));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_preserveMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end preserveMode

    public static class inheritMode_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start inheritMode
    // etc/XQFT.g:340:3: inheritMode : ( INHERIT | NOINHERIT );
    public final inheritMode_return inheritMode() throws RecognitionException {
        inheritMode_return retval = new inheritMode_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set75=null;

        XQFTTree set75_tree=null;

        try {
            // etc/XQFT.g:340:34: ( INHERIT | NOINHERIT )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set75=(Token)input.LT(1);
            if ( input.LA(1)==INHERIT||input.LA(1)==NOINHERIT ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set75));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_inheritMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end inheritMode

    public static class namespaceDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start namespaceDecl
    // etc/XQFT.g:342:1: namespaceDecl : DECLARE NAMESPACE NCName EQSi uriLiteral ;
    public final namespaceDecl_return namespaceDecl() throws RecognitionException {
        namespaceDecl_return retval = new namespaceDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE76=null;
        Token NAMESPACE77=null;
        Token NCName78=null;
        Token EQSi79=null;
        uriLiteral_return uriLiteral80 = null;


        XQFTTree DECLARE76_tree=null;
        XQFTTree NAMESPACE77_tree=null;
        XQFTTree NCName78_tree=null;
        XQFTTree EQSi79_tree=null;

        try {
            // etc/XQFT.g:342:32: ( DECLARE NAMESPACE NCName EQSi uriLiteral )
            // etc/XQFT.g:342:34: DECLARE NAMESPACE NCName EQSi uriLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE76=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_namespaceDecl1573); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE76_tree = (XQFTTree)adaptor.create(DECLARE76);
            adaptor.addChild(root_0, DECLARE76_tree);
            }
            NAMESPACE77=(Token)input.LT(1);
            match(input,NAMESPACE,FOLLOW_NAMESPACE_in_namespaceDecl1575); if (failed) return retval;
            if ( backtracking==0 ) {
            NAMESPACE77_tree = (XQFTTree)adaptor.create(NAMESPACE77);
            adaptor.addChild(root_0, NAMESPACE77_tree);
            }
            NCName78=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_namespaceDecl1577); if (failed) return retval;
            if ( backtracking==0 ) {
            NCName78_tree = (XQFTTree)adaptor.create(NCName78);
            adaptor.addChild(root_0, NCName78_tree);
            }
            EQSi79=(Token)input.LT(1);
            match(input,EQSi,FOLLOW_EQSi_in_namespaceDecl1579); if (failed) return retval;
            if ( backtracking==0 ) {
            EQSi79_tree = (XQFTTree)adaptor.create(EQSi79);
            adaptor.addChild(root_0, EQSi79_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_namespaceDecl1581);
            uriLiteral80=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral80.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end namespaceDecl

    public static class importStmt_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start importStmt
    // etc/XQFT.g:344:1: importStmt : ( schemaImport | moduleImport );
    public final importStmt_return importStmt() throws RecognitionException {
        importStmt_return retval = new importStmt_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        schemaImport_return schemaImport81 = null;

        moduleImport_return moduleImport82 = null;



        try {
            // etc/XQFT.g:344:32: ( schemaImport | moduleImport )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==IMPORT) ) {
                int LA10_1 = input.LA(2);

                if ( (LA10_1==MODULE) ) {
                    alt10=2;
                }
                else if ( (LA10_1==SCHEMA) ) {
                    alt10=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("344:1: importStmt : ( schemaImport | moduleImport );", 10, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("344:1: importStmt : ( schemaImport | moduleImport );", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // etc/XQFT.g:344:34: schemaImport
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaImport_in_importStmt1609);
                    schemaImport81=schemaImport();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaImport81.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:344:49: moduleImport
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_moduleImport_in_importStmt1613);
                    moduleImport82=moduleImport();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, moduleImport82.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end importStmt

    public static class schemaImport_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaImport
    // etc/XQFT.g:345:2: schemaImport : IMPORT SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? ;
    public final schemaImport_return schemaImport() throws RecognitionException {
        schemaImport_return retval = new schemaImport_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token IMPORT83=null;
        Token SCHEMA84=null;
        Token AT87=null;
        Token COMMASi89=null;
        schemaPrefix_return schemaPrefix85 = null;

        uriLiteral_return uriLiteral86 = null;

        uriLiteral_return uriLiteral88 = null;

        uriLiteral_return uriLiteral90 = null;


        XQFTTree IMPORT83_tree=null;
        XQFTTree SCHEMA84_tree=null;
        XQFTTree AT87_tree=null;
        XQFTTree COMMASi89_tree=null;

        try {
            // etc/XQFT.g:345:33: ( IMPORT SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? )
            // etc/XQFT.g:345:35: IMPORT SCHEMA ( schemaPrefix )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            IMPORT83=(Token)input.LT(1);
            match(input,IMPORT,FOLLOW_IMPORT_in_schemaImport1639); if (failed) return retval;
            if ( backtracking==0 ) {
            IMPORT83_tree = (XQFTTree)adaptor.create(IMPORT83);
            adaptor.addChild(root_0, IMPORT83_tree);
            }
            SCHEMA84=(Token)input.LT(1);
            match(input,SCHEMA,FOLLOW_SCHEMA_in_schemaImport1641); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMA84_tree = (XQFTTree)adaptor.create(SCHEMA84);
            adaptor.addChild(root_0, SCHEMA84_tree);
            }
            // etc/XQFT.g:345:49: ( schemaPrefix )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==DEFAULT||LA11_0==NAMESPACE) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // etc/XQFT.g:345:49: schemaPrefix
                    {
                    pushFollow(FOLLOW_schemaPrefix_in_schemaImport1643);
                    schemaPrefix85=schemaPrefix();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaPrefix85.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_schemaImport1646);
            uriLiteral86=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral86.getTree());
            // etc/XQFT.g:345:74: ( AT uriLiteral ( COMMASi uriLiteral )* )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==AT) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // etc/XQFT.g:345:75: AT uriLiteral ( COMMASi uriLiteral )*
                    {
                    AT87=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_schemaImport1649); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT87_tree = (XQFTTree)adaptor.create(AT87);
                    adaptor.addChild(root_0, AT87_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_schemaImport1651);
                    uriLiteral88=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral88.getTree());
                    // etc/XQFT.g:345:89: ( COMMASi uriLiteral )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==COMMASi) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // etc/XQFT.g:345:90: COMMASi uriLiteral
                    	    {
                    	    COMMASi89=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_schemaImport1654); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi89_tree = (XQFTTree)adaptor.create(COMMASi89);
                    	    adaptor.addChild(root_0, COMMASi89_tree);
                    	    }
                    	    pushFollow(FOLLOW_uriLiteral_in_schemaImport1656);
                    	    uriLiteral90=uriLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral90.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaImport

    public static class schemaPrefix_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaPrefix
    // etc/XQFT.g:346:3: schemaPrefix : ( ( NAMESPACE NCName EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) );
    public final schemaPrefix_return schemaPrefix() throws RecognitionException {
        schemaPrefix_return retval = new schemaPrefix_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NAMESPACE91=null;
        Token NCName92=null;
        Token EQSi93=null;
        Token DEFAULT94=null;
        Token ELEMENT95=null;
        Token NAMESPACE96=null;

        XQFTTree NAMESPACE91_tree=null;
        XQFTTree NCName92_tree=null;
        XQFTTree EQSi93_tree=null;
        XQFTTree DEFAULT94_tree=null;
        XQFTTree ELEMENT95_tree=null;
        XQFTTree NAMESPACE96_tree=null;

        try {
            // etc/XQFT.g:346:34: ( ( NAMESPACE NCName EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==NAMESPACE) ) {
                alt14=1;
            }
            else if ( (LA14_0==DEFAULT) ) {
                alt14=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("346:3: schemaPrefix : ( ( NAMESPACE NCName EQSi ) | ( DEFAULT ELEMENT NAMESPACE ) );", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // etc/XQFT.g:346:36: ( NAMESPACE NCName EQSi )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:346:36: ( NAMESPACE NCName EQSi )
                    // etc/XQFT.g:346:37: NAMESPACE NCName EQSi
                    {
                    NAMESPACE91=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix1688); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE91_tree = (XQFTTree)adaptor.create(NAMESPACE91);
                    adaptor.addChild(root_0, NAMESPACE91_tree);
                    }
                    NCName92=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_schemaPrefix1690); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName92_tree = (XQFTTree)adaptor.create(NCName92);
                    adaptor.addChild(root_0, NCName92_tree);
                    }
                    EQSi93=(Token)input.LT(1);
                    match(input,EQSi,FOLLOW_EQSi_in_schemaPrefix1692); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQSi93_tree = (XQFTTree)adaptor.create(EQSi93);
                    adaptor.addChild(root_0, EQSi93_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:346:62: ( DEFAULT ELEMENT NAMESPACE )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:346:62: ( DEFAULT ELEMENT NAMESPACE )
                    // etc/XQFT.g:346:63: DEFAULT ELEMENT NAMESPACE
                    {
                    DEFAULT94=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_schemaPrefix1698); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEFAULT94_tree = (XQFTTree)adaptor.create(DEFAULT94);
                    adaptor.addChild(root_0, DEFAULT94_tree);
                    }
                    ELEMENT95=(Token)input.LT(1);
                    match(input,ELEMENT,FOLLOW_ELEMENT_in_schemaPrefix1700); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ELEMENT95_tree = (XQFTTree)adaptor.create(ELEMENT95);
                    adaptor.addChild(root_0, ELEMENT95_tree);
                    }
                    NAMESPACE96=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_schemaPrefix1702); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE96_tree = (XQFTTree)adaptor.create(NAMESPACE96);
                    adaptor.addChild(root_0, NAMESPACE96_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaPrefix

    public static class moduleImport_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start moduleImport
    // etc/XQFT.g:347:2: moduleImport : IMPORT MODULE ( NAMESPACE NCName EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? ;
    public final moduleImport_return moduleImport() throws RecognitionException {
        moduleImport_return retval = new moduleImport_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token IMPORT97=null;
        Token MODULE98=null;
        Token NAMESPACE99=null;
        Token NCName100=null;
        Token EQSi101=null;
        Token AT103=null;
        Token COMMASi105=null;
        uriLiteral_return uriLiteral102 = null;

        uriLiteral_return uriLiteral104 = null;

        uriLiteral_return uriLiteral106 = null;


        XQFTTree IMPORT97_tree=null;
        XQFTTree MODULE98_tree=null;
        XQFTTree NAMESPACE99_tree=null;
        XQFTTree NCName100_tree=null;
        XQFTTree EQSi101_tree=null;
        XQFTTree AT103_tree=null;
        XQFTTree COMMASi105_tree=null;

        try {
            // etc/XQFT.g:347:33: ( IMPORT MODULE ( NAMESPACE NCName EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )? )
            // etc/XQFT.g:347:35: IMPORT MODULE ( NAMESPACE NCName EQSi )? uriLiteral ( AT uriLiteral ( COMMASi uriLiteral )* )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            IMPORT97=(Token)input.LT(1);
            match(input,IMPORT,FOLLOW_IMPORT_in_moduleImport1729); if (failed) return retval;
            if ( backtracking==0 ) {
            IMPORT97_tree = (XQFTTree)adaptor.create(IMPORT97);
            adaptor.addChild(root_0, IMPORT97_tree);
            }
            MODULE98=(Token)input.LT(1);
            match(input,MODULE,FOLLOW_MODULE_in_moduleImport1731); if (failed) return retval;
            if ( backtracking==0 ) {
            MODULE98_tree = (XQFTTree)adaptor.create(MODULE98);
            adaptor.addChild(root_0, MODULE98_tree);
            }
            // etc/XQFT.g:347:49: ( NAMESPACE NCName EQSi )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==NAMESPACE) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // etc/XQFT.g:347:50: NAMESPACE NCName EQSi
                    {
                    NAMESPACE99=(Token)input.LT(1);
                    match(input,NAMESPACE,FOLLOW_NAMESPACE_in_moduleImport1734); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NAMESPACE99_tree = (XQFTTree)adaptor.create(NAMESPACE99);
                    adaptor.addChild(root_0, NAMESPACE99_tree);
                    }
                    NCName100=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_moduleImport1736); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName100_tree = (XQFTTree)adaptor.create(NCName100);
                    adaptor.addChild(root_0, NCName100_tree);
                    }
                    EQSi101=(Token)input.LT(1);
                    match(input,EQSi,FOLLOW_EQSi_in_moduleImport1738); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EQSi101_tree = (XQFTTree)adaptor.create(EQSi101);
                    adaptor.addChild(root_0, EQSi101_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_uriLiteral_in_moduleImport1742);
            uriLiteral102=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral102.getTree());
            // etc/XQFT.g:347:85: ( AT uriLiteral ( COMMASi uriLiteral )* )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==AT) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // etc/XQFT.g:347:86: AT uriLiteral ( COMMASi uriLiteral )*
                    {
                    AT103=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_moduleImport1745); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT103_tree = (XQFTTree)adaptor.create(AT103);
                    adaptor.addChild(root_0, AT103_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_moduleImport1747);
                    uriLiteral104=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral104.getTree());
                    // etc/XQFT.g:347:100: ( COMMASi uriLiteral )*
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==COMMASi) ) {
                            alt16=1;
                        }


                        switch (alt16) {
                    	case 1 :
                    	    // etc/XQFT.g:347:101: COMMASi uriLiteral
                    	    {
                    	    COMMASi105=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_moduleImport1750); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi105_tree = (XQFTTree)adaptor.create(COMMASi105);
                    	    adaptor.addChild(root_0, COMMASi105_tree);
                    	    }
                    	    pushFollow(FOLLOW_uriLiteral_in_moduleImport1752);
                    	    uriLiteral106=uriLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral106.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop16;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end moduleImport

    public static class varDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varDecl
    // etc/XQFT.g:349:1: varDecl : DECLARE VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL ) ;
    public final varDecl_return varDecl() throws RecognitionException {
        varDecl_return retval = new varDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE107=null;
        Token VARIABLE108=null;
        Token DOLLARSi109=null;
        Token ASSIGNSi112=null;
        Token EXTERNAL114=null;
        qName_return qName110 = null;

        typeDeclaration_return typeDeclaration111 = null;

        exprSingle_return exprSingle113 = null;


        XQFTTree DECLARE107_tree=null;
        XQFTTree VARIABLE108_tree=null;
        XQFTTree DOLLARSi109_tree=null;
        XQFTTree ASSIGNSi112_tree=null;
        XQFTTree EXTERNAL114_tree=null;

        try {
            // etc/XQFT.g:349:32: ( DECLARE VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL ) )
            // etc/XQFT.g:349:34: DECLARE VARIABLE DOLLARSi qName ( typeDeclaration )? ( ( ASSIGNSi exprSingle ) | EXTERNAL )
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE107=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_varDecl1788); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE107_tree = (XQFTTree)adaptor.create(DECLARE107);
            adaptor.addChild(root_0, DECLARE107_tree);
            }
            VARIABLE108=(Token)input.LT(1);
            match(input,VARIABLE,FOLLOW_VARIABLE_in_varDecl1790); if (failed) return retval;
            if ( backtracking==0 ) {
            VARIABLE108_tree = (XQFTTree)adaptor.create(VARIABLE108);
            adaptor.addChild(root_0, VARIABLE108_tree);
            }
            DOLLARSi109=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varDecl1792); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi109_tree = (XQFTTree)adaptor.create(DOLLARSi109);
            adaptor.addChild(root_0, DOLLARSi109_tree);
            }
            pushFollow(FOLLOW_qName_in_varDecl1794);
            qName110=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName110.getTree());
            // etc/XQFT.g:349:66: ( typeDeclaration )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==AS) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // etc/XQFT.g:349:66: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_varDecl1796);
                    typeDeclaration111=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration111.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:349:83: ( ( ASSIGNSi exprSingle ) | EXTERNAL )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==ASSIGNSi) ) {
                alt19=1;
            }
            else if ( (LA19_0==EXTERNAL) ) {
                alt19=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("349:83: ( ( ASSIGNSi exprSingle ) | EXTERNAL )", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // etc/XQFT.g:349:84: ( ASSIGNSi exprSingle )
                    {
                    // etc/XQFT.g:349:84: ( ASSIGNSi exprSingle )
                    // etc/XQFT.g:349:85: ASSIGNSi exprSingle
                    {
                    ASSIGNSi112=(Token)input.LT(1);
                    match(input,ASSIGNSi,FOLLOW_ASSIGNSi_in_varDecl1801); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ASSIGNSi112_tree = (XQFTTree)adaptor.create(ASSIGNSi112);
                    adaptor.addChild(root_0, ASSIGNSi112_tree);
                    }
                    pushFollow(FOLLOW_exprSingle_in_varDecl1803);
                    exprSingle113=exprSingle();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle113.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:349:108: EXTERNAL
                    {
                    EXTERNAL114=(Token)input.LT(1);
                    match(input,EXTERNAL,FOLLOW_EXTERNAL_in_varDecl1808); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXTERNAL114_tree = (XQFTTree)adaptor.create(EXTERNAL114);
                    adaptor.addChild(root_0, EXTERNAL114_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varDecl

    public static class qName_return extends ParserRuleReturnScope {
        public String text;
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start qName
    // etc/XQFT.g:350:2: qName returns [String text] : nc1= NCName (c= COLONSi nc2= NCName )? ;
    public final qName_return qName() throws RecognitionException {
        qName_return retval = new qName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token nc1=null;
        Token c=null;
        Token nc2=null;

        XQFTTree nc1_tree=null;
        XQFTTree c_tree=null;
        XQFTTree nc2_tree=null;

        try {
            // etc/XQFT.g:350:46: (nc1= NCName (c= COLONSi nc2= NCName )? )
            // etc/XQFT.g:350:48: nc1= NCName (c= COLONSi nc2= NCName )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            nc1=(Token)input.LT(1);
            match(input,NCName,FOLLOW_NCName_in_qName1839); if (failed) return retval;
            if ( backtracking==0 ) {
            nc1_tree = (XQFTTree)adaptor.create(nc1);
            adaptor.addChild(root_0, nc1_tree);
            }
            // etc/XQFT.g:350:59: (c= COLONSi nc2= NCName )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==COLONSi) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // etc/XQFT.g:350:60: c= COLONSi nc2= NCName
                    {
                    c=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_qName1844); if (failed) return retval;
                    if ( backtracking==0 ) {
                    c_tree = (XQFTTree)adaptor.create(c);
                    adaptor.addChild(root_0, c_tree);
                    }
                    nc2=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_qName1848); if (failed) return retval;
                    if ( backtracking==0 ) {
                    nc2_tree = (XQFTTree)adaptor.create(nc2);
                    adaptor.addChild(root_0, nc2_tree);
                    }

                    }
                    break;

            }

            if ( backtracking==0 ) {
               retval.text = nc1.getText() + (c != null ? c.getText() + nc2.getText() : ""); 
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end qName

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeDeclaration
    // etc/XQFT.g:352:5: typeDeclaration : AS sequenceType ;
    public final typeDeclaration_return typeDeclaration() throws RecognitionException {
        typeDeclaration_return retval = new typeDeclaration_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AS115=null;
        sequenceType_return sequenceType116 = null;


        XQFTTree AS115_tree=null;

        try {
            // etc/XQFT.g:352:36: ( AS sequenceType )
            // etc/XQFT.g:352:38: AS sequenceType
            {
            root_0 = (XQFTTree)adaptor.nil();

            AS115=(Token)input.LT(1);
            match(input,AS,FOLLOW_AS_in_typeDeclaration1879); if (failed) return retval;
            if ( backtracking==0 ) {
            AS115_tree = (XQFTTree)adaptor.create(AS115);
            adaptor.addChild(root_0, AS115_tree);
            }
            pushFollow(FOLLOW_sequenceType_in_typeDeclaration1881);
            sequenceType116=sequenceType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType116.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeDeclaration

    public static class functionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionDecl
    // etc/XQFT.g:356:1: functionDecl : DECLARE FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL ) -> ^( AST_FUNCTIONDECL qName ( paramList )? ( sequenceType )? ( enclosedExpr )? ( EXTERNAL )? ) ;
    public final functionDecl_return functionDecl() throws RecognitionException {
        functionDecl_return retval = new functionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE117=null;
        Token FUNCTION118=null;
        Token LPARSi120=null;
        Token RPARSi122=null;
        Token AS123=null;
        Token EXTERNAL126=null;
        qName_return qName119 = null;

        paramList_return paramList121 = null;

        sequenceType_return sequenceType124 = null;

        enclosedExpr_return enclosedExpr125 = null;


        XQFTTree DECLARE117_tree=null;
        XQFTTree FUNCTION118_tree=null;
        XQFTTree LPARSi120_tree=null;
        XQFTTree RPARSi122_tree=null;
        XQFTTree AS123_tree=null;
        XQFTTree EXTERNAL126_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleSubtreeStream stream_paramList=new RewriteRuleSubtreeStream(adaptor,"rule paramList");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_enclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule enclosedExpr");
        try {
            // etc/XQFT.g:356:32: ( DECLARE FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL ) -> ^( AST_FUNCTIONDECL qName ( paramList )? ( sequenceType )? ( enclosedExpr )? ( EXTERNAL )? ) )
            // etc/XQFT.g:356:34: DECLARE FUNCTION qName LPARSi ( paramList )? RPARSi ( AS sequenceType )? ( enclosedExpr | EXTERNAL )
            {
            DECLARE117=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_functionDecl1910); if (failed) return retval;
            if ( backtracking==0 ) stream_DECLARE.add(DECLARE117);

            FUNCTION118=(Token)input.LT(1);
            match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDecl1912); if (failed) return retval;
            if ( backtracking==0 ) stream_FUNCTION.add(FUNCTION118);

            pushFollow(FOLLOW_qName_in_functionDecl1914);
            qName119=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qName.add(qName119.getTree());
            LPARSi120=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_functionDecl1916); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi120);

            // etc/XQFT.g:356:64: ( paramList )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==DOLLARSi) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // etc/XQFT.g:356:64: paramList
                    {
                    pushFollow(FOLLOW_paramList_in_functionDecl1918);
                    paramList121=paramList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_paramList.add(paramList121.getTree());

                    }
                    break;

            }

            RPARSi122=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_functionDecl1921); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi122);

            // etc/XQFT.g:357:12: ( AS sequenceType )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==AS) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // etc/XQFT.g:357:13: AS sequenceType
                    {
                    AS123=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_functionDecl1936); if (failed) return retval;
                    if ( backtracking==0 ) stream_AS.add(AS123);

                    pushFollow(FOLLOW_sequenceType_in_functionDecl1938);
                    sequenceType124=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_sequenceType.add(sequenceType124.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:357:31: ( enclosedExpr | EXTERNAL )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==LBRACESi) ) {
                alt23=1;
            }
            else if ( (LA23_0==EXTERNAL) ) {
                alt23=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("357:31: ( enclosedExpr | EXTERNAL )", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // etc/XQFT.g:357:32: enclosedExpr
                    {
                    pushFollow(FOLLOW_enclosedExpr_in_functionDecl1943);
                    enclosedExpr125=enclosedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_enclosedExpr.add(enclosedExpr125.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:357:47: EXTERNAL
                    {
                    EXTERNAL126=(Token)input.LT(1);
                    match(input,EXTERNAL,FOLLOW_EXTERNAL_in_functionDecl1947); if (failed) return retval;
                    if ( backtracking==0 ) stream_EXTERNAL.add(EXTERNAL126);


                    }
                    break;

            }


            // AST REWRITE
            // elements: enclosedExpr, qName, EXTERNAL, sequenceType, paramList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 358:45: -> ^( AST_FUNCTIONDECL qName ( paramList )? ( sequenceType )? ( enclosedExpr )? ( EXTERNAL )? )
            {
                // etc/XQFT.g:358:48: ^( AST_FUNCTIONDECL qName ( paramList )? ( sequenceType )? ( enclosedExpr )? ( EXTERNAL )? )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FUNCTIONDECL, "AST_FUNCTIONDECL"), root_1);

                adaptor.addChild(root_1, stream_qName.next());
                // etc/XQFT.g:358:73: ( paramList )?
                if ( stream_paramList.hasNext() ) {
                    adaptor.addChild(root_1, stream_paramList.next());

                }
                stream_paramList.reset();
                // etc/XQFT.g:358:84: ( sequenceType )?
                if ( stream_sequenceType.hasNext() ) {
                    adaptor.addChild(root_1, stream_sequenceType.next());

                }
                stream_sequenceType.reset();
                // etc/XQFT.g:358:98: ( enclosedExpr )?
                if ( stream_enclosedExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_enclosedExpr.next());

                }
                stream_enclosedExpr.reset();
                // etc/XQFT.g:358:112: ( EXTERNAL )?
                if ( stream_EXTERNAL.hasNext() ) {
                    adaptor.addChild(root_1, stream_EXTERNAL.next());

                }
                stream_EXTERNAL.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionDecl

    public static class paramList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start paramList
    // etc/XQFT.g:361:2: paramList : param ( COMMASi param )* ;
    public final paramList_return paramList() throws RecognitionException {
        paramList_return retval = new paramList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMASi128=null;
        param_return param127 = null;

        param_return param129 = null;


        XQFTTree COMMASi128_tree=null;

        try {
            // etc/XQFT.g:361:33: ( param ( COMMASi param )* )
            // etc/XQFT.g:361:35: param ( COMMASi param )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_param_in_paramList2043);
            param127=param();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, param127.getTree());
            // etc/XQFT.g:361:41: ( COMMASi param )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMASi) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // etc/XQFT.g:361:42: COMMASi param
            	    {
            	    COMMASi128=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_paramList2046); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    COMMASi128_tree = (XQFTTree)adaptor.create(COMMASi128);
            	    adaptor.addChild(root_0, COMMASi128_tree);
            	    }
            	    pushFollow(FOLLOW_param_in_paramList2048);
            	    param129=param();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, param129.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end paramList

    public static class param_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start param
    // etc/XQFT.g:362:3: param : DOLLARSi qName ( typeDeclaration )? ;
    public final param_return param() throws RecognitionException {
        param_return retval = new param_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi130=null;
        qName_return qName131 = null;

        typeDeclaration_return typeDeclaration132 = null;


        XQFTTree DOLLARSi130_tree=null;

        try {
            // etc/XQFT.g:362:34: ( DOLLARSi qName ( typeDeclaration )? )
            // etc/XQFT.g:362:36: DOLLARSi qName ( typeDeclaration )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOLLARSi130=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_param2084); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi130_tree = (XQFTTree)adaptor.create(DOLLARSi130);
            adaptor.addChild(root_0, DOLLARSi130_tree);
            }
            pushFollow(FOLLOW_qName_in_param2086);
            qName131=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName131.getTree());
            // etc/XQFT.g:362:51: ( typeDeclaration )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // etc/XQFT.g:362:51: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_param2088);
                    typeDeclaration132=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration132.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end param

    public static class enclosedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start enclosedExpr
    // etc/XQFT.g:368:2: enclosedExpr : LBRACESi expr RBRACSi ;
    public final enclosedExpr_return enclosedExpr() throws RecognitionException {
        enclosedExpr_return retval = new enclosedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi133=null;
        Token RBRACSi135=null;
        expr_return expr134 = null;


        XQFTTree LBRACESi133_tree=null;
        XQFTTree RBRACSi135_tree=null;

        try {
            // etc/XQFT.g:368:33: ( LBRACESi expr RBRACSi )
            // etc/XQFT.g:369:13: LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LBRACESi133=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_enclosedExpr2133); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_enclosedExpr2149);
            expr134=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr134.getTree());
            RBRACSi135=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_enclosedExpr2164); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end enclosedExpr

    public static class optionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start optionDecl
    // etc/XQFT.g:377:1: optionDecl : DECLARE OPTION qName StringLiteral ;
    public final optionDecl_return optionDecl() throws RecognitionException {
        optionDecl_return retval = new optionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE136=null;
        Token OPTION137=null;
        Token StringLiteral139=null;
        qName_return qName138 = null;


        XQFTTree DECLARE136_tree=null;
        XQFTTree OPTION137_tree=null;
        XQFTTree StringLiteral139_tree=null;

        try {
            // etc/XQFT.g:377:32: ( DECLARE OPTION qName StringLiteral )
            // etc/XQFT.g:377:34: DECLARE OPTION qName StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE136=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_optionDecl2212); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE136_tree = (XQFTTree)adaptor.create(DECLARE136);
            adaptor.addChild(root_0, DECLARE136_tree);
            }
            OPTION137=(Token)input.LT(1);
            match(input,OPTION,FOLLOW_OPTION_in_optionDecl2214); if (failed) return retval;
            if ( backtracking==0 ) {
            OPTION137_tree = (XQFTTree)adaptor.create(OPTION137);
            adaptor.addChild(root_0, OPTION137_tree);
            }
            pushFollow(FOLLOW_qName_in_optionDecl2216);
            qName138=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName138.getTree());
            StringLiteral139=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_optionDecl2218); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral139_tree = (XQFTTree)adaptor.create(StringLiteral139);
            adaptor.addChild(root_0, StringLiteral139_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end optionDecl

    public static class ftOptionDecl_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOptionDecl
    // etc/XQFT.g:379:1: ftOptionDecl : DECLARE FTOPTION ftMatchOptions ;
    public final ftOptionDecl_return ftOptionDecl() throws RecognitionException {
        ftOptionDecl_return retval = new ftOptionDecl_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DECLARE140=null;
        Token FTOPTION141=null;
        ftMatchOptions_return ftMatchOptions142 = null;


        XQFTTree DECLARE140_tree=null;
        XQFTTree FTOPTION141_tree=null;

        try {
            // etc/XQFT.g:379:32: ( DECLARE FTOPTION ftMatchOptions )
            // etc/XQFT.g:379:34: DECLARE FTOPTION ftMatchOptions
            {
            root_0 = (XQFTTree)adaptor.nil();

            DECLARE140=(Token)input.LT(1);
            match(input,DECLARE,FOLLOW_DECLARE_in_ftOptionDecl2244); if (failed) return retval;
            if ( backtracking==0 ) {
            DECLARE140_tree = (XQFTTree)adaptor.create(DECLARE140);
            adaptor.addChild(root_0, DECLARE140_tree);
            }
            FTOPTION141=(Token)input.LT(1);
            match(input,FTOPTION,FOLLOW_FTOPTION_in_ftOptionDecl2246); if (failed) return retval;
            if ( backtracking==0 ) {
            FTOPTION141_tree = (XQFTTree)adaptor.create(FTOPTION141);
            adaptor.addChild(root_0, FTOPTION141_tree);
            }
            pushFollow(FOLLOW_ftMatchOptions_in_ftOptionDecl2248);
            ftMatchOptions142=ftMatchOptions();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOptions142.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOptionDecl

    public static class ftMatchOptions_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMatchOptions
    // etc/XQFT.g:380:2: ftMatchOptions : ( ftMatchOption )+ ;
    public final ftMatchOptions_return ftMatchOptions() throws RecognitionException {
        ftMatchOptions_return retval = new ftMatchOptions_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftMatchOption_return ftMatchOption143 = null;



        try {
            // etc/XQFT.g:380:33: ( ( ftMatchOption )+ )
            // etc/XQFT.g:380:35: ( ftMatchOption )+
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:380:35: ( ftMatchOption )+
            int cnt26=0;
            loop26:
            do {
                int alt26=2;
                switch ( input.LA(1) ) {
                case WITHOUT:
                    {
                    int LA26_2 = input.LA(2);

                    if ( ((LA26_2>=STEMMING && LA26_2<=STOP)||LA26_2==THESAURUS||LA26_2==WILDCARDS) ) {
                        alt26=1;
                    }


                    }
                    break;
                case CASE:
                    {
                    int LA26_3 = input.LA(2);

                    if ( (LA26_3==INSENSITIVE||LA26_3==SENSITIVE) ) {
                        alt26=1;
                    }


                    }
                    break;
                case DIACRITICS:
                case LANGUAGE:
                case LOWERCASE:
                case OPTION:
                case UPPERCASE:
                case WITH:
                    {
                    alt26=1;
                    }
                    break;

                }

                switch (alt26) {
            	case 1 :
            	    // etc/XQFT.g:380:35: ftMatchOption
            	    {
            	    pushFollow(FOLLOW_ftMatchOption_in_ftMatchOptions2272);
            	    ftMatchOption143=ftMatchOption();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOption143.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt26 >= 1 ) break loop26;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(26, input);
                        throw eee;
                }
                cnt26++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMatchOptions

    public static class sequenceType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sequenceType
    // etc/XQFT.g:386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );
    public final sequenceType_return sequenceType() throws RecognitionException {
        sequenceType_return retval = new sequenceType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token EMPTY_SEQUENCE147=null;
        Token LPARSi148=null;
        Token RPARSi149=null;
        itemType_return itemType144 = null;

        occurrenceIndicator_return occurrenceIndicator145 = null;

        itemType_return itemType146 = null;


        XQFTTree EMPTY_SEQUENCE147_tree=null;
        XQFTTree LPARSi148_tree=null;
        XQFTTree RPARSi149_tree=null;

        try {
            // etc/XQFT.g:386:32: ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi )
            int alt27=3;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                int LA27_1 = input.LA(2);

                if ( (LA27_1==LPARSi) ) {
                    switch ( input.LA(3) ) {
                    case ELEMENT:
                        {
                        int LA27_28 = input.LA(4);

                        if ( (LA27_28==LPARSi) ) {
                            switch ( input.LA(5) ) {
                            case NCName:
                                {
                                switch ( input.LA(6) ) {
                                case COLONSi:
                                    {
                                    int LA27_66 = input.LA(7);

                                    if ( (LA27_66==NCName) ) {
                                        int LA27_73 = input.LA(8);

                                        if ( (LA27_73==COMMASi) ) {
                                            int LA27_67 = input.LA(9);

                                            if ( (LA27_67==NCName) ) {
                                                switch ( input.LA(10) ) {
                                                case COLONSi:
                                                    {
                                                    int LA27_78 = input.LA(11);

                                                    if ( (LA27_78==NCName) ) {
                                                        int LA27_80 = input.LA(12);

                                                        if ( (LA27_80==QUESTIONSi) ) {
                                                            int LA27_79 = input.LA(13);

                                                            if ( (LA27_79==RPARSi) ) {
                                                                int LA27_58 = input.LA(14);

                                                                if ( (LA27_58==RPARSi) ) {
                                                                    int LA27_30 = input.LA(15);

                                                                    if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                        alt27=2;
                                                                    }
                                                                    else if ( (LA27_30==PLUSSi) ) {
                                                                        int LA27_25 = input.LA(16);

                                                                        if ( (synpred1()) ) {
                                                                            alt27=1;
                                                                        }
                                                                        else if ( (true) ) {
                                                                            alt27=2;
                                                                        }
                                                                        else {
                                                                            if (backtracking>0) {failed=true; return retval;}
                                                                            NoViableAltException nvae =
                                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                            throw nvae;
                                                                        }
                                                                    }
                                                                    else if ( (LA27_30==STARSi) ) {
                                                                        int LA27_26 = input.LA(16);

                                                                        if ( (synpred1()) ) {
                                                                            alt27=1;
                                                                        }
                                                                        else if ( (true) ) {
                                                                            alt27=2;
                                                                        }
                                                                        else {
                                                                            if (backtracking>0) {failed=true; return retval;}
                                                                            NoViableAltException nvae =
                                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                            throw nvae;
                                                                        }
                                                                    }
                                                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                        alt27=1;
                                                                    }
                                                                    else {
                                                                        if (backtracking>0) {failed=true; return retval;}
                                                                        NoViableAltException nvae =
                                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                        throw nvae;
                                                                    }
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_80==RPARSi) ) {
                                                            int LA27_58 = input.LA(13);

                                                            if ( (LA27_58==RPARSi) ) {
                                                                int LA27_30 = input.LA(14);

                                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                    alt27=2;
                                                                }
                                                                else if ( (LA27_30==PLUSSi) ) {
                                                                    int LA27_25 = input.LA(15);

                                                                    if ( (synpred1()) ) {
                                                                        alt27=1;
                                                                    }
                                                                    else if ( (true) ) {
                                                                        alt27=2;
                                                                    }
                                                                    else {
                                                                        if (backtracking>0) {failed=true; return retval;}
                                                                        NoViableAltException nvae =
                                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                        throw nvae;
                                                                    }
                                                                }
                                                                else if ( (LA27_30==STARSi) ) {
                                                                    int LA27_26 = input.LA(15);

                                                                    if ( (synpred1()) ) {
                                                                        alt27=1;
                                                                    }
                                                                    else if ( (true) ) {
                                                                        alt27=2;
                                                                    }
                                                                    else {
                                                                        if (backtracking>0) {failed=true; return retval;}
                                                                        NoViableAltException nvae =
                                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                        throw nvae;
                                                                    }
                                                                }
                                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                    alt27=1;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 80, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 78, input);

                                                        throw nvae;
                                                    }
                                                    }
                                                    break;
                                                case QUESTIONSi:
                                                    {
                                                    int LA27_79 = input.LA(11);

                                                    if ( (LA27_79==RPARSi) ) {
                                                        int LA27_58 = input.LA(12);

                                                        if ( (LA27_58==RPARSi) ) {
                                                            int LA27_30 = input.LA(13);

                                                            if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                alt27=2;
                                                            }
                                                            else if ( (LA27_30==PLUSSi) ) {
                                                                int LA27_25 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==STARSi) ) {
                                                                int LA27_26 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                alt27=1;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                        throw nvae;
                                                    }
                                                    }
                                                    break;
                                                case RPARSi:
                                                    {
                                                    int LA27_58 = input.LA(11);

                                                    if ( (LA27_58==RPARSi) ) {
                                                        int LA27_30 = input.LA(12);

                                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_30==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                        throw nvae;
                                                    }
                                                    }
                                                    break;
                                                default:
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 74, input);

                                                    throw nvae;
                                                }

                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 67, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_73==RPARSi) ) {
                                            int LA27_58 = input.LA(9);

                                            if ( (LA27_58==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 73, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 66, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case COMMASi:
                                    {
                                    int LA27_67 = input.LA(7);

                                    if ( (LA27_67==NCName) ) {
                                        switch ( input.LA(8) ) {
                                        case COLONSi:
                                            {
                                            int LA27_78 = input.LA(9);

                                            if ( (LA27_78==NCName) ) {
                                                int LA27_80 = input.LA(10);

                                                if ( (LA27_80==QUESTIONSi) ) {
                                                    int LA27_79 = input.LA(11);

                                                    if ( (LA27_79==RPARSi) ) {
                                                        int LA27_58 = input.LA(12);

                                                        if ( (LA27_58==RPARSi) ) {
                                                            int LA27_30 = input.LA(13);

                                                            if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                alt27=2;
                                                            }
                                                            else if ( (LA27_30==PLUSSi) ) {
                                                                int LA27_25 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==STARSi) ) {
                                                                int LA27_26 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                alt27=1;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_80==RPARSi) ) {
                                                    int LA27_58 = input.LA(11);

                                                    if ( (LA27_58==RPARSi) ) {
                                                        int LA27_30 = input.LA(12);

                                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_30==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 80, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 78, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case QUESTIONSi:
                                            {
                                            int LA27_79 = input.LA(9);

                                            if ( (LA27_79==RPARSi) ) {
                                                int LA27_58 = input.LA(10);

                                                if ( (LA27_58==RPARSi) ) {
                                                    int LA27_30 = input.LA(11);

                                                    if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_30==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case RPARSi:
                                            {
                                            int LA27_58 = input.LA(9);

                                            if ( (LA27_58==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 74, input);

                                            throw nvae;
                                        }

                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 67, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case RPARSi:
                                    {
                                    int LA27_58 = input.LA(7);

                                    if ( (LA27_58==RPARSi) ) {
                                        int LA27_30 = input.LA(8);

                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_30==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 56, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case STARSi:
                                {
                                int LA27_57 = input.LA(6);

                                if ( (LA27_57==COMMASi) ) {
                                    int LA27_67 = input.LA(7);

                                    if ( (LA27_67==NCName) ) {
                                        switch ( input.LA(8) ) {
                                        case COLONSi:
                                            {
                                            int LA27_78 = input.LA(9);

                                            if ( (LA27_78==NCName) ) {
                                                int LA27_80 = input.LA(10);

                                                if ( (LA27_80==QUESTIONSi) ) {
                                                    int LA27_79 = input.LA(11);

                                                    if ( (LA27_79==RPARSi) ) {
                                                        int LA27_58 = input.LA(12);

                                                        if ( (LA27_58==RPARSi) ) {
                                                            int LA27_30 = input.LA(13);

                                                            if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                                alt27=2;
                                                            }
                                                            else if ( (LA27_30==PLUSSi) ) {
                                                                int LA27_25 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==STARSi) ) {
                                                                int LA27_26 = input.LA(14);

                                                                if ( (synpred1()) ) {
                                                                    alt27=1;
                                                                }
                                                                else if ( (true) ) {
                                                                    alt27=2;
                                                                }
                                                                else {
                                                                    if (backtracking>0) {failed=true; return retval;}
                                                                    NoViableAltException nvae =
                                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                    throw nvae;
                                                                }
                                                            }
                                                            else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                                alt27=1;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_80==RPARSi) ) {
                                                    int LA27_58 = input.LA(11);

                                                    if ( (LA27_58==RPARSi) ) {
                                                        int LA27_30 = input.LA(12);

                                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_30==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 80, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 78, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case QUESTIONSi:
                                            {
                                            int LA27_79 = input.LA(9);

                                            if ( (LA27_79==RPARSi) ) {
                                                int LA27_58 = input.LA(10);

                                                if ( (LA27_58==RPARSi) ) {
                                                    int LA27_30 = input.LA(11);

                                                    if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_30==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 79, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case RPARSi:
                                            {
                                            int LA27_58 = input.LA(9);

                                            if ( (LA27_58==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 74, input);

                                            throw nvae;
                                        }

                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 67, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_57==RPARSi) ) {
                                    int LA27_58 = input.LA(7);

                                    if ( (LA27_58==RPARSi) ) {
                                        int LA27_30 = input.LA(8);

                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_30==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 57, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case RPARSi:
                                {
                                int LA27_58 = input.LA(6);

                                if ( (LA27_58==RPARSi) ) {
                                    int LA27_30 = input.LA(7);

                                    if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_30==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_30==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 58, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 46, input);

                                throw nvae;
                            }

                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 28, input);

                            throw nvae;
                        }
                        }
                        break;
                    case SCHEMAELEMENT:
                        {
                        int LA27_29 = input.LA(4);

                        if ( (LA27_29==LPARSi) ) {
                            int LA27_47 = input.LA(5);

                            if ( (LA27_47==NCName) ) {
                                int LA27_59 = input.LA(6);

                                if ( (LA27_59==COLONSi) ) {
                                    int LA27_68 = input.LA(7);

                                    if ( (LA27_68==NCName) ) {
                                        int LA27_75 = input.LA(8);

                                        if ( (LA27_75==RPARSi) ) {
                                            int LA27_69 = input.LA(9);

                                            if ( (LA27_69==RPARSi) ) {
                                                int LA27_30 = input.LA(10);

                                                if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_30==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 69, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 75, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 68, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_59==RPARSi) ) {
                                    int LA27_69 = input.LA(7);

                                    if ( (LA27_69==RPARSi) ) {
                                        int LA27_30 = input.LA(8);

                                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_30==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 69, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 59, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 47, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 29, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RPARSi:
                        {
                        int LA27_30 = input.LA(4);

                        if ( (LA27_30==EOF||(LA27_30>=ANCESTOR && LA27_30<=AND)||(LA27_30>=ASCENDING && LA27_30<=ATTRIBUTE)||LA27_30==CASE||(LA27_30>=CHILD && LA27_30<=COMMENT)||(LA27_30>=DEFAULT && LA27_30<=DESCENDING)||(LA27_30>=DIV && LA27_30<=ELSE)||LA27_30==EMPTY||(LA27_30>=EQ && LA27_30<=EVERY)||(LA27_30>=EXCEPT && LA27_30<=FOR)||LA27_30==FTCONTAINS||LA27_30==GE||(LA27_30>=GT && LA27_30<=IF)||LA27_30==IN||(LA27_30>=INSTANCE && LA27_30<=IS)||LA27_30==LE||(LA27_30>=LET && LA27_30<=LEVELS)||(LA27_30>=LT && LA27_30<=MOD)||(LA27_30>=NE && LA27_30<=NODE)||(LA27_30>=OR && LA27_30<=ORDERED)||(LA27_30>=PARAGRAPHS && LA27_30<=PARENT)||(LA27_30>=PRECEDING && LA27_30<=PRECEDING_SIBLING)||LA27_30==PROCESSING_INSTRUCTION||LA27_30==RETURN||LA27_30==SATISFIES||(LA27_30>=SCHEMAATTRIBUTE && LA27_30<=SELF)||LA27_30==SENTENCES||(LA27_30>=SOME && LA27_30<=STABLE)||LA27_30==TEXT||(LA27_30>=TIMES && LA27_30<=TO)||(LA27_30>=TYPESWITCH && LA27_30<=UNORDERED)||LA27_30==VALIDATE||LA27_30==WHERE||LA27_30==WITHOUT||LA27_30==WORDS||(LA27_30>=StringLiteral && LA27_30<=ASSIGNSi)||(LA27_30>=LPARSi && LA27_30<=RBRACSi)||(LA27_30>=MINUSSi && LA27_30<=LPRAGSi)||(LA27_30>=DBLSLASHSi && LA27_30<=SLASHSi)||(LA27_30>=DOTDOTSi && LA27_30<=ATSi)||(LA27_30>=RBRACKSi && LA27_30<=DOTSi)||LA27_30==LCOMMENTSi||LA27_30==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_30==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_30==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_30==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 30, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 13, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 1, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA27_2 = input.LA(2);

                if ( (LA27_2==LPARSi) ) {
                    switch ( input.LA(3) ) {
                    case NCName:
                        {
                        switch ( input.LA(4) ) {
                        case COLONSi:
                            {
                            int LA27_48 = input.LA(5);

                            if ( (LA27_48==NCName) ) {
                                int LA27_60 = input.LA(6);

                                if ( (LA27_60==COMMASi) ) {
                                    int LA27_49 = input.LA(7);

                                    if ( (LA27_49==NCName) ) {
                                        switch ( input.LA(8) ) {
                                        case COLONSi:
                                            {
                                            int LA27_70 = input.LA(9);

                                            if ( (LA27_70==NCName) ) {
                                                int LA27_76 = input.LA(10);

                                                if ( (LA27_76==QUESTIONSi) ) {
                                                    int LA27_71 = input.LA(11);

                                                    if ( (LA27_71==RPARSi) ) {
                                                        int LA27_33 = input.LA(12);

                                                        if ( (LA27_33==PLUSSi) ) {
                                                            int LA27_25 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                            alt27=2;
                                                        }
                                                        else if ( (LA27_33==STARSi) ) {
                                                            int LA27_26 = input.LA(13);

                                                            if ( (synpred1()) ) {
                                                                alt27=1;
                                                            }
                                                            else if ( (true) ) {
                                                                alt27=2;
                                                            }
                                                            else {
                                                                if (backtracking>0) {failed=true; return retval;}
                                                                NoViableAltException nvae =
                                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                                throw nvae;
                                                            }
                                                        }
                                                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                            alt27=1;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_76==RPARSi) ) {
                                                    int LA27_33 = input.LA(11);

                                                    if ( (LA27_33==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_33==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 76, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 70, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case QUESTIONSi:
                                            {
                                            int LA27_71 = input.LA(9);

                                            if ( (LA27_71==RPARSi) ) {
                                                int LA27_33 = input.LA(10);

                                                if ( (LA27_33==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_33==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        case RPARSi:
                                            {
                                            int LA27_33 = input.LA(9);

                                            if ( (LA27_33==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_33==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                throw nvae;
                                            }
                                            }
                                            break;
                                        default:
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 61, input);

                                            throw nvae;
                                        }

                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 49, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_60==RPARSi) ) {
                                    int LA27_33 = input.LA(7);

                                    if ( (LA27_33==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_33==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 60, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 48, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMMASi:
                            {
                            int LA27_49 = input.LA(5);

                            if ( (LA27_49==NCName) ) {
                                switch ( input.LA(6) ) {
                                case COLONSi:
                                    {
                                    int LA27_70 = input.LA(7);

                                    if ( (LA27_70==NCName) ) {
                                        int LA27_76 = input.LA(8);

                                        if ( (LA27_76==QUESTIONSi) ) {
                                            int LA27_71 = input.LA(9);

                                            if ( (LA27_71==RPARSi) ) {
                                                int LA27_33 = input.LA(10);

                                                if ( (LA27_33==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_33==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_76==RPARSi) ) {
                                            int LA27_33 = input.LA(9);

                                            if ( (LA27_33==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_33==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 76, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 70, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case QUESTIONSi:
                                    {
                                    int LA27_71 = input.LA(7);

                                    if ( (LA27_71==RPARSi) ) {
                                        int LA27_33 = input.LA(8);

                                        if ( (LA27_33==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_33==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case RPARSi:
                                    {
                                    int LA27_33 = input.LA(7);

                                    if ( (LA27_33==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_33==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 61, input);

                                    throw nvae;
                                }

                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 49, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RPARSi:
                            {
                            int LA27_33 = input.LA(5);

                            if ( (LA27_33==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_33==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 31, input);

                            throw nvae;
                        }

                        }
                        break;
                    case STARSi:
                        {
                        int LA27_32 = input.LA(4);

                        if ( (LA27_32==COMMASi) ) {
                            int LA27_49 = input.LA(5);

                            if ( (LA27_49==NCName) ) {
                                switch ( input.LA(6) ) {
                                case COLONSi:
                                    {
                                    int LA27_70 = input.LA(7);

                                    if ( (LA27_70==NCName) ) {
                                        int LA27_76 = input.LA(8);

                                        if ( (LA27_76==QUESTIONSi) ) {
                                            int LA27_71 = input.LA(9);

                                            if ( (LA27_71==RPARSi) ) {
                                                int LA27_33 = input.LA(10);

                                                if ( (LA27_33==PLUSSi) ) {
                                                    int LA27_25 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                    alt27=2;
                                                }
                                                else if ( (LA27_33==STARSi) ) {
                                                    int LA27_26 = input.LA(11);

                                                    if ( (synpred1()) ) {
                                                        alt27=1;
                                                    }
                                                    else if ( (true) ) {
                                                        alt27=2;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                    alt27=1;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_76==RPARSi) ) {
                                            int LA27_33 = input.LA(9);

                                            if ( (LA27_33==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_33==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 76, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 70, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case QUESTIONSi:
                                    {
                                    int LA27_71 = input.LA(7);

                                    if ( (LA27_71==RPARSi) ) {
                                        int LA27_33 = input.LA(8);

                                        if ( (LA27_33==PLUSSi) ) {
                                            int LA27_25 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                            alt27=2;
                                        }
                                        else if ( (LA27_33==STARSi) ) {
                                            int LA27_26 = input.LA(9);

                                            if ( (synpred1()) ) {
                                                alt27=1;
                                            }
                                            else if ( (true) ) {
                                                alt27=2;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                            alt27=1;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 71, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case RPARSi:
                                    {
                                    int LA27_33 = input.LA(7);

                                    if ( (LA27_33==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_33==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 61, input);

                                    throw nvae;
                                }

                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 49, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_32==RPARSi) ) {
                            int LA27_33 = input.LA(5);

                            if ( (LA27_33==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_33==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 32, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RPARSi:
                        {
                        int LA27_33 = input.LA(4);

                        if ( (LA27_33==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_33==EOF||(LA27_33>=ANCESTOR && LA27_33<=AND)||(LA27_33>=ASCENDING && LA27_33<=ATTRIBUTE)||LA27_33==CASE||(LA27_33>=CHILD && LA27_33<=COMMENT)||(LA27_33>=DEFAULT && LA27_33<=DESCENDING)||(LA27_33>=DIV && LA27_33<=ELSE)||LA27_33==EMPTY||(LA27_33>=EQ && LA27_33<=EVERY)||(LA27_33>=EXCEPT && LA27_33<=FOR)||LA27_33==FTCONTAINS||LA27_33==GE||(LA27_33>=GT && LA27_33<=IF)||LA27_33==IN||(LA27_33>=INSTANCE && LA27_33<=IS)||LA27_33==LE||(LA27_33>=LET && LA27_33<=LEVELS)||(LA27_33>=LT && LA27_33<=MOD)||(LA27_33>=NE && LA27_33<=NODE)||(LA27_33>=OR && LA27_33<=ORDERED)||(LA27_33>=PARAGRAPHS && LA27_33<=PARENT)||(LA27_33>=PRECEDING && LA27_33<=PRECEDING_SIBLING)||LA27_33==PROCESSING_INSTRUCTION||LA27_33==RETURN||LA27_33==SATISFIES||(LA27_33>=SCHEMAATTRIBUTE && LA27_33<=SELF)||LA27_33==SENTENCES||(LA27_33>=SOME && LA27_33<=STABLE)||LA27_33==TEXT||(LA27_33>=TIMES && LA27_33<=TO)||(LA27_33>=TYPESWITCH && LA27_33<=UNORDERED)||LA27_33==VALIDATE||LA27_33==WHERE||LA27_33==WITHOUT||LA27_33==WORDS||(LA27_33>=StringLiteral && LA27_33<=ASSIGNSi)||(LA27_33>=LPARSi && LA27_33<=RBRACSi)||(LA27_33>=MINUSSi && LA27_33<=LPRAGSi)||(LA27_33>=DBLSLASHSi && LA27_33<=SLASHSi)||(LA27_33>=DOTDOTSi && LA27_33<=ATSi)||(LA27_33>=RBRACKSi && LA27_33<=DOTSi)||LA27_33==LCOMMENTSi||LA27_33==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_33==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_33==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 33, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 14, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 2, input);

                    throw nvae;
                }
                }
                break;
            case ATTRIBUTE:
                {
                int LA27_3 = input.LA(2);

                if ( (LA27_3==LPARSi) ) {
                    switch ( input.LA(3) ) {
                    case NCName:
                        {
                        switch ( input.LA(4) ) {
                        case COLONSi:
                            {
                            int LA27_50 = input.LA(5);

                            if ( (LA27_50==NCName) ) {
                                int LA27_62 = input.LA(6);

                                if ( (LA27_62==COMMASi) ) {
                                    int LA27_51 = input.LA(7);

                                    if ( (LA27_51==NCName) ) {
                                        int LA27_63 = input.LA(8);

                                        if ( (LA27_63==COLONSi) ) {
                                            int LA27_72 = input.LA(9);

                                            if ( (LA27_72==NCName) ) {
                                                int LA27_77 = input.LA(10);

                                                if ( (LA27_77==RPARSi) ) {
                                                    int LA27_36 = input.LA(11);

                                                    if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                        alt27=2;
                                                    }
                                                    else if ( (LA27_36==PLUSSi) ) {
                                                        int LA27_25 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_36==STARSi) ) {
                                                        int LA27_26 = input.LA(12);

                                                        if ( (synpred1()) ) {
                                                            alt27=1;
                                                        }
                                                        else if ( (true) ) {
                                                            alt27=2;
                                                        }
                                                        else {
                                                            if (backtracking>0) {failed=true; return retval;}
                                                            NoViableAltException nvae =
                                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                            throw nvae;
                                                        }
                                                    }
                                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                        alt27=1;
                                                    }
                                                    else {
                                                        if (backtracking>0) {failed=true; return retval;}
                                                        NoViableAltException nvae =
                                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                        throw nvae;
                                                    }
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 77, input);

                                                    throw nvae;
                                                }
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 72, input);

                                                throw nvae;
                                            }
                                        }
                                        else if ( (LA27_63==RPARSi) ) {
                                            int LA27_36 = input.LA(9);

                                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_36==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 63, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 51, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_62==RPARSi) ) {
                                    int LA27_36 = input.LA(7);

                                    if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_36==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 62, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 50, input);

                                throw nvae;
                            }
                            }
                            break;
                        case COMMASi:
                            {
                            int LA27_51 = input.LA(5);

                            if ( (LA27_51==NCName) ) {
                                int LA27_63 = input.LA(6);

                                if ( (LA27_63==COLONSi) ) {
                                    int LA27_72 = input.LA(7);

                                    if ( (LA27_72==NCName) ) {
                                        int LA27_77 = input.LA(8);

                                        if ( (LA27_77==RPARSi) ) {
                                            int LA27_36 = input.LA(9);

                                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_36==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 77, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 72, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_63==RPARSi) ) {
                                    int LA27_36 = input.LA(7);

                                    if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_36==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 63, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 51, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RPARSi:
                            {
                            int LA27_36 = input.LA(5);

                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_36==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 34, input);

                            throw nvae;
                        }

                        }
                        break;
                    case STARSi:
                        {
                        int LA27_35 = input.LA(4);

                        if ( (LA27_35==COMMASi) ) {
                            int LA27_51 = input.LA(5);

                            if ( (LA27_51==NCName) ) {
                                int LA27_63 = input.LA(6);

                                if ( (LA27_63==COLONSi) ) {
                                    int LA27_72 = input.LA(7);

                                    if ( (LA27_72==NCName) ) {
                                        int LA27_77 = input.LA(8);

                                        if ( (LA27_77==RPARSi) ) {
                                            int LA27_36 = input.LA(9);

                                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                                alt27=2;
                                            }
                                            else if ( (LA27_36==PLUSSi) ) {
                                                int LA27_25 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==STARSi) ) {
                                                int LA27_26 = input.LA(10);

                                                if ( (synpred1()) ) {
                                                    alt27=1;
                                                }
                                                else if ( (true) ) {
                                                    alt27=2;
                                                }
                                                else {
                                                    if (backtracking>0) {failed=true; return retval;}
                                                    NoViableAltException nvae =
                                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                                    throw nvae;
                                                }
                                            }
                                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                                alt27=1;
                                            }
                                            else {
                                                if (backtracking>0) {failed=true; return retval;}
                                                NoViableAltException nvae =
                                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                                throw nvae;
                                            }
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 77, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 72, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA27_63==RPARSi) ) {
                                    int LA27_36 = input.LA(7);

                                    if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_36==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 63, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 51, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_35==RPARSi) ) {
                            int LA27_36 = input.LA(5);

                            if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_36==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 35, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RPARSi:
                        {
                        int LA27_36 = input.LA(4);

                        if ( (LA27_36==EOF||(LA27_36>=ANCESTOR && LA27_36<=AND)||(LA27_36>=ASCENDING && LA27_36<=ATTRIBUTE)||LA27_36==CASE||(LA27_36>=CHILD && LA27_36<=COMMENT)||(LA27_36>=DEFAULT && LA27_36<=DESCENDING)||(LA27_36>=DIV && LA27_36<=ELSE)||LA27_36==EMPTY||(LA27_36>=EQ && LA27_36<=EVERY)||(LA27_36>=EXCEPT && LA27_36<=FOR)||LA27_36==FTCONTAINS||LA27_36==GE||(LA27_36>=GT && LA27_36<=IF)||LA27_36==IN||(LA27_36>=INSTANCE && LA27_36<=IS)||LA27_36==LE||(LA27_36>=LET && LA27_36<=LEVELS)||(LA27_36>=LT && LA27_36<=MOD)||(LA27_36>=NE && LA27_36<=NODE)||(LA27_36>=OR && LA27_36<=ORDERED)||(LA27_36>=PARAGRAPHS && LA27_36<=PARENT)||(LA27_36>=PRECEDING && LA27_36<=PRECEDING_SIBLING)||LA27_36==PROCESSING_INSTRUCTION||LA27_36==RETURN||LA27_36==SATISFIES||(LA27_36>=SCHEMAATTRIBUTE && LA27_36<=SELF)||LA27_36==SENTENCES||(LA27_36>=SOME && LA27_36<=STABLE)||LA27_36==TEXT||(LA27_36>=TIMES && LA27_36<=TO)||(LA27_36>=TYPESWITCH && LA27_36<=UNORDERED)||LA27_36==VALIDATE||LA27_36==WHERE||LA27_36==WITHOUT||LA27_36==WORDS||(LA27_36>=StringLiteral && LA27_36<=ASSIGNSi)||(LA27_36>=LPARSi && LA27_36<=RBRACSi)||(LA27_36>=MINUSSi && LA27_36<=LPRAGSi)||(LA27_36>=DBLSLASHSi && LA27_36<=SLASHSi)||(LA27_36>=DOTDOTSi && LA27_36<=ATSi)||(LA27_36>=RBRACKSi && LA27_36<=DOTSi)||LA27_36==LCOMMENTSi||LA27_36==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_36==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_36==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_36==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 36, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 15, input);

                        throw nvae;
                    }

                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 3, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMAELEMENT:
                {
                int LA27_4 = input.LA(2);

                if ( (LA27_4==LPARSi) ) {
                    int LA27_16 = input.LA(3);

                    if ( (LA27_16==NCName) ) {
                        int LA27_37 = input.LA(4);

                        if ( (LA27_37==COLONSi) ) {
                            int LA27_52 = input.LA(5);

                            if ( (LA27_52==NCName) ) {
                                int LA27_64 = input.LA(6);

                                if ( (LA27_64==RPARSi) ) {
                                    int LA27_53 = input.LA(7);

                                    if ( (LA27_53==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_53==EOF||(LA27_53>=ANCESTOR && LA27_53<=AND)||(LA27_53>=ASCENDING && LA27_53<=ATTRIBUTE)||LA27_53==CASE||(LA27_53>=CHILD && LA27_53<=COMMENT)||(LA27_53>=DEFAULT && LA27_53<=DESCENDING)||(LA27_53>=DIV && LA27_53<=ELSE)||LA27_53==EMPTY||(LA27_53>=EQ && LA27_53<=EVERY)||(LA27_53>=EXCEPT && LA27_53<=FOR)||LA27_53==FTCONTAINS||LA27_53==GE||(LA27_53>=GT && LA27_53<=IF)||LA27_53==IN||(LA27_53>=INSTANCE && LA27_53<=IS)||LA27_53==LE||(LA27_53>=LET && LA27_53<=LEVELS)||(LA27_53>=LT && LA27_53<=MOD)||(LA27_53>=NE && LA27_53<=NODE)||(LA27_53>=OR && LA27_53<=ORDERED)||(LA27_53>=PARAGRAPHS && LA27_53<=PARENT)||(LA27_53>=PRECEDING && LA27_53<=PRECEDING_SIBLING)||LA27_53==PROCESSING_INSTRUCTION||LA27_53==RETURN||LA27_53==SATISFIES||(LA27_53>=SCHEMAATTRIBUTE && LA27_53<=SELF)||LA27_53==SENTENCES||(LA27_53>=SOME && LA27_53<=STABLE)||LA27_53==TEXT||(LA27_53>=TIMES && LA27_53<=TO)||(LA27_53>=TYPESWITCH && LA27_53<=UNORDERED)||LA27_53==VALIDATE||LA27_53==WHERE||LA27_53==WITHOUT||LA27_53==WORDS||(LA27_53>=StringLiteral && LA27_53<=ASSIGNSi)||(LA27_53>=LPARSi && LA27_53<=RBRACSi)||(LA27_53>=MINUSSi && LA27_53<=LPRAGSi)||(LA27_53>=DBLSLASHSi && LA27_53<=SLASHSi)||(LA27_53>=DOTDOTSi && LA27_53<=ATSi)||(LA27_53>=RBRACKSi && LA27_53<=DOTSi)||LA27_53==LCOMMENTSi||LA27_53==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_53==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_53==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 53, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 64, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 52, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_37==RPARSi) ) {
                            int LA27_53 = input.LA(5);

                            if ( (LA27_53==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_53==EOF||(LA27_53>=ANCESTOR && LA27_53<=AND)||(LA27_53>=ASCENDING && LA27_53<=ATTRIBUTE)||LA27_53==CASE||(LA27_53>=CHILD && LA27_53<=COMMENT)||(LA27_53>=DEFAULT && LA27_53<=DESCENDING)||(LA27_53>=DIV && LA27_53<=ELSE)||LA27_53==EMPTY||(LA27_53>=EQ && LA27_53<=EVERY)||(LA27_53>=EXCEPT && LA27_53<=FOR)||LA27_53==FTCONTAINS||LA27_53==GE||(LA27_53>=GT && LA27_53<=IF)||LA27_53==IN||(LA27_53>=INSTANCE && LA27_53<=IS)||LA27_53==LE||(LA27_53>=LET && LA27_53<=LEVELS)||(LA27_53>=LT && LA27_53<=MOD)||(LA27_53>=NE && LA27_53<=NODE)||(LA27_53>=OR && LA27_53<=ORDERED)||(LA27_53>=PARAGRAPHS && LA27_53<=PARENT)||(LA27_53>=PRECEDING && LA27_53<=PRECEDING_SIBLING)||LA27_53==PROCESSING_INSTRUCTION||LA27_53==RETURN||LA27_53==SATISFIES||(LA27_53>=SCHEMAATTRIBUTE && LA27_53<=SELF)||LA27_53==SENTENCES||(LA27_53>=SOME && LA27_53<=STABLE)||LA27_53==TEXT||(LA27_53>=TIMES && LA27_53<=TO)||(LA27_53>=TYPESWITCH && LA27_53<=UNORDERED)||LA27_53==VALIDATE||LA27_53==WHERE||LA27_53==WITHOUT||LA27_53==WORDS||(LA27_53>=StringLiteral && LA27_53<=ASSIGNSi)||(LA27_53>=LPARSi && LA27_53<=RBRACSi)||(LA27_53>=MINUSSi && LA27_53<=LPRAGSi)||(LA27_53>=DBLSLASHSi && LA27_53<=SLASHSi)||(LA27_53>=DOTDOTSi && LA27_53<=ATSi)||(LA27_53>=RBRACKSi && LA27_53<=DOTSi)||LA27_53==LCOMMENTSi||LA27_53==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_53==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_53==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 53, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 37, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 16, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 4, input);

                    throw nvae;
                }
                }
                break;
            case SCHEMAATTRIBUTE:
                {
                int LA27_5 = input.LA(2);

                if ( (LA27_5==LPARSi) ) {
                    int LA27_17 = input.LA(3);

                    if ( (LA27_17==NCName) ) {
                        int LA27_38 = input.LA(4);

                        if ( (LA27_38==COLONSi) ) {
                            int LA27_54 = input.LA(5);

                            if ( (LA27_54==NCName) ) {
                                int LA27_65 = input.LA(6);

                                if ( (LA27_65==RPARSi) ) {
                                    int LA27_55 = input.LA(7);

                                    if ( (LA27_55==PLUSSi) ) {
                                        int LA27_25 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_55==EOF||(LA27_55>=ANCESTOR && LA27_55<=AND)||(LA27_55>=ASCENDING && LA27_55<=ATTRIBUTE)||LA27_55==CASE||(LA27_55>=CHILD && LA27_55<=COMMENT)||(LA27_55>=DEFAULT && LA27_55<=DESCENDING)||(LA27_55>=DIV && LA27_55<=ELSE)||LA27_55==EMPTY||(LA27_55>=EQ && LA27_55<=EVERY)||(LA27_55>=EXCEPT && LA27_55<=FOR)||LA27_55==FTCONTAINS||LA27_55==GE||(LA27_55>=GT && LA27_55<=IF)||LA27_55==IN||(LA27_55>=INSTANCE && LA27_55<=IS)||LA27_55==LE||(LA27_55>=LET && LA27_55<=LEVELS)||(LA27_55>=LT && LA27_55<=MOD)||(LA27_55>=NE && LA27_55<=NODE)||(LA27_55>=OR && LA27_55<=ORDERED)||(LA27_55>=PARAGRAPHS && LA27_55<=PARENT)||(LA27_55>=PRECEDING && LA27_55<=PRECEDING_SIBLING)||LA27_55==PROCESSING_INSTRUCTION||LA27_55==RETURN||LA27_55==SATISFIES||(LA27_55>=SCHEMAATTRIBUTE && LA27_55<=SELF)||LA27_55==SENTENCES||(LA27_55>=SOME && LA27_55<=STABLE)||LA27_55==TEXT||(LA27_55>=TIMES && LA27_55<=TO)||(LA27_55>=TYPESWITCH && LA27_55<=UNORDERED)||LA27_55==VALIDATE||LA27_55==WHERE||LA27_55==WITHOUT||LA27_55==WORDS||(LA27_55>=StringLiteral && LA27_55<=ASSIGNSi)||(LA27_55>=LPARSi && LA27_55<=RBRACSi)||(LA27_55>=MINUSSi && LA27_55<=LPRAGSi)||(LA27_55>=DBLSLASHSi && LA27_55<=SLASHSi)||(LA27_55>=DOTDOTSi && LA27_55<=ATSi)||(LA27_55>=RBRACKSi && LA27_55<=DOTSi)||LA27_55==LCOMMENTSi||LA27_55==LPISi) ) {
                                        alt27=2;
                                    }
                                    else if ( (LA27_55==STARSi) ) {
                                        int LA27_26 = input.LA(8);

                                        if ( (synpred1()) ) {
                                            alt27=1;
                                        }
                                        else if ( (true) ) {
                                            alt27=2;
                                        }
                                        else {
                                            if (backtracking>0) {failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                            throw nvae;
                                        }
                                    }
                                    else if ( (LA27_55==QUESTIONSi) && (synpred1())) {
                                        alt27=1;
                                    }
                                    else {
                                        if (backtracking>0) {failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 55, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 65, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 54, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_38==RPARSi) ) {
                            int LA27_55 = input.LA(5);

                            if ( (LA27_55==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_55==EOF||(LA27_55>=ANCESTOR && LA27_55<=AND)||(LA27_55>=ASCENDING && LA27_55<=ATTRIBUTE)||LA27_55==CASE||(LA27_55>=CHILD && LA27_55<=COMMENT)||(LA27_55>=DEFAULT && LA27_55<=DESCENDING)||(LA27_55>=DIV && LA27_55<=ELSE)||LA27_55==EMPTY||(LA27_55>=EQ && LA27_55<=EVERY)||(LA27_55>=EXCEPT && LA27_55<=FOR)||LA27_55==FTCONTAINS||LA27_55==GE||(LA27_55>=GT && LA27_55<=IF)||LA27_55==IN||(LA27_55>=INSTANCE && LA27_55<=IS)||LA27_55==LE||(LA27_55>=LET && LA27_55<=LEVELS)||(LA27_55>=LT && LA27_55<=MOD)||(LA27_55>=NE && LA27_55<=NODE)||(LA27_55>=OR && LA27_55<=ORDERED)||(LA27_55>=PARAGRAPHS && LA27_55<=PARENT)||(LA27_55>=PRECEDING && LA27_55<=PRECEDING_SIBLING)||LA27_55==PROCESSING_INSTRUCTION||LA27_55==RETURN||LA27_55==SATISFIES||(LA27_55>=SCHEMAATTRIBUTE && LA27_55<=SELF)||LA27_55==SENTENCES||(LA27_55>=SOME && LA27_55<=STABLE)||LA27_55==TEXT||(LA27_55>=TIMES && LA27_55<=TO)||(LA27_55>=TYPESWITCH && LA27_55<=UNORDERED)||LA27_55==VALIDATE||LA27_55==WHERE||LA27_55==WITHOUT||LA27_55==WORDS||(LA27_55>=StringLiteral && LA27_55<=ASSIGNSi)||(LA27_55>=LPARSi && LA27_55<=RBRACSi)||(LA27_55>=MINUSSi && LA27_55<=LPRAGSi)||(LA27_55>=DBLSLASHSi && LA27_55<=SLASHSi)||(LA27_55>=DOTDOTSi && LA27_55<=ATSi)||(LA27_55>=RBRACKSi && LA27_55<=DOTSi)||LA27_55==LCOMMENTSi||LA27_55==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_55==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_55==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 55, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 38, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 17, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 5, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA27_6 = input.LA(2);

                if ( (LA27_6==LPARSi) ) {
                    int LA27_18 = input.LA(3);

                    if ( (LA27_18==StringLiteral||LA27_18==NCName) ) {
                        int LA27_39 = input.LA(4);

                        if ( (LA27_39==RPARSi) ) {
                            int LA27_40 = input.LA(5);

                            if ( (LA27_40==EOF||(LA27_40>=ANCESTOR && LA27_40<=AND)||(LA27_40>=ASCENDING && LA27_40<=ATTRIBUTE)||LA27_40==CASE||(LA27_40>=CHILD && LA27_40<=COMMENT)||(LA27_40>=DEFAULT && LA27_40<=DESCENDING)||(LA27_40>=DIV && LA27_40<=ELSE)||LA27_40==EMPTY||(LA27_40>=EQ && LA27_40<=EVERY)||(LA27_40>=EXCEPT && LA27_40<=FOR)||LA27_40==FTCONTAINS||LA27_40==GE||(LA27_40>=GT && LA27_40<=IF)||LA27_40==IN||(LA27_40>=INSTANCE && LA27_40<=IS)||LA27_40==LE||(LA27_40>=LET && LA27_40<=LEVELS)||(LA27_40>=LT && LA27_40<=MOD)||(LA27_40>=NE && LA27_40<=NODE)||(LA27_40>=OR && LA27_40<=ORDERED)||(LA27_40>=PARAGRAPHS && LA27_40<=PARENT)||(LA27_40>=PRECEDING && LA27_40<=PRECEDING_SIBLING)||LA27_40==PROCESSING_INSTRUCTION||LA27_40==RETURN||LA27_40==SATISFIES||(LA27_40>=SCHEMAATTRIBUTE && LA27_40<=SELF)||LA27_40==SENTENCES||(LA27_40>=SOME && LA27_40<=STABLE)||LA27_40==TEXT||(LA27_40>=TIMES && LA27_40<=TO)||(LA27_40>=TYPESWITCH && LA27_40<=UNORDERED)||LA27_40==VALIDATE||LA27_40==WHERE||LA27_40==WITHOUT||LA27_40==WORDS||(LA27_40>=StringLiteral && LA27_40<=ASSIGNSi)||(LA27_40>=LPARSi && LA27_40<=RBRACSi)||(LA27_40>=MINUSSi && LA27_40<=LPRAGSi)||(LA27_40>=DBLSLASHSi && LA27_40<=SLASHSi)||(LA27_40>=DOTDOTSi && LA27_40<=ATSi)||(LA27_40>=RBRACKSi && LA27_40<=DOTSi)||LA27_40==LCOMMENTSi||LA27_40==LPISi) ) {
                                alt27=2;
                            }
                            else if ( (LA27_40==PLUSSi) ) {
                                int LA27_25 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_40==STARSi) ) {
                                int LA27_26 = input.LA(6);

                                if ( (synpred1()) ) {
                                    alt27=1;
                                }
                                else if ( (true) ) {
                                    alt27=2;
                                }
                                else {
                                    if (backtracking>0) {failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA27_40==QUESTIONSi) && (synpred1())) {
                                alt27=1;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 40, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 39, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA27_18==RPARSi) ) {
                        int LA27_40 = input.LA(4);

                        if ( (LA27_40==EOF||(LA27_40>=ANCESTOR && LA27_40<=AND)||(LA27_40>=ASCENDING && LA27_40<=ATTRIBUTE)||LA27_40==CASE||(LA27_40>=CHILD && LA27_40<=COMMENT)||(LA27_40>=DEFAULT && LA27_40<=DESCENDING)||(LA27_40>=DIV && LA27_40<=ELSE)||LA27_40==EMPTY||(LA27_40>=EQ && LA27_40<=EVERY)||(LA27_40>=EXCEPT && LA27_40<=FOR)||LA27_40==FTCONTAINS||LA27_40==GE||(LA27_40>=GT && LA27_40<=IF)||LA27_40==IN||(LA27_40>=INSTANCE && LA27_40<=IS)||LA27_40==LE||(LA27_40>=LET && LA27_40<=LEVELS)||(LA27_40>=LT && LA27_40<=MOD)||(LA27_40>=NE && LA27_40<=NODE)||(LA27_40>=OR && LA27_40<=ORDERED)||(LA27_40>=PARAGRAPHS && LA27_40<=PARENT)||(LA27_40>=PRECEDING && LA27_40<=PRECEDING_SIBLING)||LA27_40==PROCESSING_INSTRUCTION||LA27_40==RETURN||LA27_40==SATISFIES||(LA27_40>=SCHEMAATTRIBUTE && LA27_40<=SELF)||LA27_40==SENTENCES||(LA27_40>=SOME && LA27_40<=STABLE)||LA27_40==TEXT||(LA27_40>=TIMES && LA27_40<=TO)||(LA27_40>=TYPESWITCH && LA27_40<=UNORDERED)||LA27_40==VALIDATE||LA27_40==WHERE||LA27_40==WITHOUT||LA27_40==WORDS||(LA27_40>=StringLiteral && LA27_40<=ASSIGNSi)||(LA27_40>=LPARSi && LA27_40<=RBRACSi)||(LA27_40>=MINUSSi && LA27_40<=LPRAGSi)||(LA27_40>=DBLSLASHSi && LA27_40<=SLASHSi)||(LA27_40>=DOTDOTSi && LA27_40<=ATSi)||(LA27_40>=RBRACKSi && LA27_40<=DOTSi)||LA27_40==LCOMMENTSi||LA27_40==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_40==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_40==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_40==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 40, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 18, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 6, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA27_7 = input.LA(2);

                if ( (LA27_7==LPARSi) ) {
                    int LA27_19 = input.LA(3);

                    if ( (LA27_19==RPARSi) ) {
                        int LA27_41 = input.LA(4);

                        if ( (LA27_41==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_41==EOF||(LA27_41>=ANCESTOR && LA27_41<=AND)||(LA27_41>=ASCENDING && LA27_41<=ATTRIBUTE)||LA27_41==CASE||(LA27_41>=CHILD && LA27_41<=COMMENT)||(LA27_41>=DEFAULT && LA27_41<=DESCENDING)||(LA27_41>=DIV && LA27_41<=ELSE)||LA27_41==EMPTY||(LA27_41>=EQ && LA27_41<=EVERY)||(LA27_41>=EXCEPT && LA27_41<=FOR)||LA27_41==FTCONTAINS||LA27_41==GE||(LA27_41>=GT && LA27_41<=IF)||LA27_41==IN||(LA27_41>=INSTANCE && LA27_41<=IS)||LA27_41==LE||(LA27_41>=LET && LA27_41<=LEVELS)||(LA27_41>=LT && LA27_41<=MOD)||(LA27_41>=NE && LA27_41<=NODE)||(LA27_41>=OR && LA27_41<=ORDERED)||(LA27_41>=PARAGRAPHS && LA27_41<=PARENT)||(LA27_41>=PRECEDING && LA27_41<=PRECEDING_SIBLING)||LA27_41==PROCESSING_INSTRUCTION||LA27_41==RETURN||LA27_41==SATISFIES||(LA27_41>=SCHEMAATTRIBUTE && LA27_41<=SELF)||LA27_41==SENTENCES||(LA27_41>=SOME && LA27_41<=STABLE)||LA27_41==TEXT||(LA27_41>=TIMES && LA27_41<=TO)||(LA27_41>=TYPESWITCH && LA27_41<=UNORDERED)||LA27_41==VALIDATE||LA27_41==WHERE||LA27_41==WITHOUT||LA27_41==WORDS||(LA27_41>=StringLiteral && LA27_41<=ASSIGNSi)||(LA27_41>=LPARSi && LA27_41<=RBRACSi)||(LA27_41>=MINUSSi && LA27_41<=LPRAGSi)||(LA27_41>=DBLSLASHSi && LA27_41<=SLASHSi)||(LA27_41>=DOTDOTSi && LA27_41<=ATSi)||(LA27_41>=RBRACKSi && LA27_41<=DOTSi)||LA27_41==LCOMMENTSi||LA27_41==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_41==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_41==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 41, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 19, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 7, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA27_8 = input.LA(2);

                if ( (LA27_8==LPARSi) ) {
                    int LA27_20 = input.LA(3);

                    if ( (LA27_20==RPARSi) ) {
                        int LA27_42 = input.LA(4);

                        if ( (LA27_42==EOF||(LA27_42>=ANCESTOR && LA27_42<=AND)||(LA27_42>=ASCENDING && LA27_42<=ATTRIBUTE)||LA27_42==CASE||(LA27_42>=CHILD && LA27_42<=COMMENT)||(LA27_42>=DEFAULT && LA27_42<=DESCENDING)||(LA27_42>=DIV && LA27_42<=ELSE)||LA27_42==EMPTY||(LA27_42>=EQ && LA27_42<=EVERY)||(LA27_42>=EXCEPT && LA27_42<=FOR)||LA27_42==FTCONTAINS||LA27_42==GE||(LA27_42>=GT && LA27_42<=IF)||LA27_42==IN||(LA27_42>=INSTANCE && LA27_42<=IS)||LA27_42==LE||(LA27_42>=LET && LA27_42<=LEVELS)||(LA27_42>=LT && LA27_42<=MOD)||(LA27_42>=NE && LA27_42<=NODE)||(LA27_42>=OR && LA27_42<=ORDERED)||(LA27_42>=PARAGRAPHS && LA27_42<=PARENT)||(LA27_42>=PRECEDING && LA27_42<=PRECEDING_SIBLING)||LA27_42==PROCESSING_INSTRUCTION||LA27_42==RETURN||LA27_42==SATISFIES||(LA27_42>=SCHEMAATTRIBUTE && LA27_42<=SELF)||LA27_42==SENTENCES||(LA27_42>=SOME && LA27_42<=STABLE)||LA27_42==TEXT||(LA27_42>=TIMES && LA27_42<=TO)||(LA27_42>=TYPESWITCH && LA27_42<=UNORDERED)||LA27_42==VALIDATE||LA27_42==WHERE||LA27_42==WITHOUT||LA27_42==WORDS||(LA27_42>=StringLiteral && LA27_42<=ASSIGNSi)||(LA27_42>=LPARSi && LA27_42<=RBRACSi)||(LA27_42>=MINUSSi && LA27_42<=LPRAGSi)||(LA27_42>=DBLSLASHSi && LA27_42<=SLASHSi)||(LA27_42>=DOTDOTSi && LA27_42<=ATSi)||(LA27_42>=RBRACKSi && LA27_42<=DOTSi)||LA27_42==LCOMMENTSi||LA27_42==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_42==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_42==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_42==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 42, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 20, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 8, input);

                    throw nvae;
                }
                }
                break;
            case NODE:
                {
                int LA27_9 = input.LA(2);

                if ( (LA27_9==LPARSi) ) {
                    int LA27_21 = input.LA(3);

                    if ( (LA27_21==RPARSi) ) {
                        int LA27_43 = input.LA(4);

                        if ( (LA27_43==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_43==EOF||(LA27_43>=ANCESTOR && LA27_43<=AND)||(LA27_43>=ASCENDING && LA27_43<=ATTRIBUTE)||LA27_43==CASE||(LA27_43>=CHILD && LA27_43<=COMMENT)||(LA27_43>=DEFAULT && LA27_43<=DESCENDING)||(LA27_43>=DIV && LA27_43<=ELSE)||LA27_43==EMPTY||(LA27_43>=EQ && LA27_43<=EVERY)||(LA27_43>=EXCEPT && LA27_43<=FOR)||LA27_43==FTCONTAINS||LA27_43==GE||(LA27_43>=GT && LA27_43<=IF)||LA27_43==IN||(LA27_43>=INSTANCE && LA27_43<=IS)||LA27_43==LE||(LA27_43>=LET && LA27_43<=LEVELS)||(LA27_43>=LT && LA27_43<=MOD)||(LA27_43>=NE && LA27_43<=NODE)||(LA27_43>=OR && LA27_43<=ORDERED)||(LA27_43>=PARAGRAPHS && LA27_43<=PARENT)||(LA27_43>=PRECEDING && LA27_43<=PRECEDING_SIBLING)||LA27_43==PROCESSING_INSTRUCTION||LA27_43==RETURN||LA27_43==SATISFIES||(LA27_43>=SCHEMAATTRIBUTE && LA27_43<=SELF)||LA27_43==SENTENCES||(LA27_43>=SOME && LA27_43<=STABLE)||LA27_43==TEXT||(LA27_43>=TIMES && LA27_43<=TO)||(LA27_43>=TYPESWITCH && LA27_43<=UNORDERED)||LA27_43==VALIDATE||LA27_43==WHERE||LA27_43==WITHOUT||LA27_43==WORDS||(LA27_43>=StringLiteral && LA27_43<=ASSIGNSi)||(LA27_43>=LPARSi && LA27_43<=RBRACSi)||(LA27_43>=MINUSSi && LA27_43<=LPRAGSi)||(LA27_43>=DBLSLASHSi && LA27_43<=SLASHSi)||(LA27_43>=DOTDOTSi && LA27_43<=ATSi)||(LA27_43>=RBRACKSi && LA27_43<=DOTSi)||LA27_43==LCOMMENTSi||LA27_43==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_43==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_43==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 43, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 21, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 9, input);

                    throw nvae;
                }
                }
                break;
            case ITEM:
                {
                int LA27_10 = input.LA(2);

                if ( (LA27_10==LPARSi) ) {
                    int LA27_22 = input.LA(3);

                    if ( (LA27_22==RPARSi) ) {
                        int LA27_44 = input.LA(4);

                        if ( (LA27_44==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_44==EOF||(LA27_44>=ANCESTOR && LA27_44<=AND)||(LA27_44>=ASCENDING && LA27_44<=ATTRIBUTE)||LA27_44==CASE||(LA27_44>=CHILD && LA27_44<=COMMENT)||(LA27_44>=DEFAULT && LA27_44<=DESCENDING)||(LA27_44>=DIV && LA27_44<=ELSE)||LA27_44==EMPTY||(LA27_44>=EQ && LA27_44<=EVERY)||(LA27_44>=EXCEPT && LA27_44<=FOR)||LA27_44==FTCONTAINS||LA27_44==GE||(LA27_44>=GT && LA27_44<=IF)||LA27_44==IN||(LA27_44>=INSTANCE && LA27_44<=IS)||LA27_44==LE||(LA27_44>=LET && LA27_44<=LEVELS)||(LA27_44>=LT && LA27_44<=MOD)||(LA27_44>=NE && LA27_44<=NODE)||(LA27_44>=OR && LA27_44<=ORDERED)||(LA27_44>=PARAGRAPHS && LA27_44<=PARENT)||(LA27_44>=PRECEDING && LA27_44<=PRECEDING_SIBLING)||LA27_44==PROCESSING_INSTRUCTION||LA27_44==RETURN||LA27_44==SATISFIES||(LA27_44>=SCHEMAATTRIBUTE && LA27_44<=SELF)||LA27_44==SENTENCES||(LA27_44>=SOME && LA27_44<=STABLE)||LA27_44==TEXT||(LA27_44>=TIMES && LA27_44<=TO)||(LA27_44>=TYPESWITCH && LA27_44<=UNORDERED)||LA27_44==VALIDATE||LA27_44==WHERE||LA27_44==WITHOUT||LA27_44==WORDS||(LA27_44>=StringLiteral && LA27_44<=ASSIGNSi)||(LA27_44>=LPARSi && LA27_44<=RBRACSi)||(LA27_44>=MINUSSi && LA27_44<=LPRAGSi)||(LA27_44>=DBLSLASHSi && LA27_44<=SLASHSi)||(LA27_44>=DOTDOTSi && LA27_44<=ATSi)||(LA27_44>=RBRACKSi && LA27_44<=DOTSi)||LA27_44==LCOMMENTSi||LA27_44==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_44==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_44==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 44, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 22, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 10, input);

                    throw nvae;
                }
                }
                break;
            case NCName:
                {
                int LA27_11 = input.LA(2);

                if ( (LA27_11==COLONSi) ) {
                    int LA27_23 = input.LA(3);

                    if ( (LA27_23==NCName) ) {
                        int LA27_45 = input.LA(4);

                        if ( (LA27_45==EOF||(LA27_45>=ANCESTOR && LA27_45<=AND)||(LA27_45>=ASCENDING && LA27_45<=ATTRIBUTE)||LA27_45==CASE||(LA27_45>=CHILD && LA27_45<=COMMENT)||(LA27_45>=DEFAULT && LA27_45<=DESCENDING)||(LA27_45>=DIV && LA27_45<=ELSE)||LA27_45==EMPTY||(LA27_45>=EQ && LA27_45<=EVERY)||(LA27_45>=EXCEPT && LA27_45<=FOR)||LA27_45==FTCONTAINS||LA27_45==GE||(LA27_45>=GT && LA27_45<=IF)||LA27_45==IN||(LA27_45>=INSTANCE && LA27_45<=IS)||LA27_45==LE||(LA27_45>=LET && LA27_45<=LEVELS)||(LA27_45>=LT && LA27_45<=MOD)||(LA27_45>=NE && LA27_45<=NODE)||(LA27_45>=OR && LA27_45<=ORDERED)||(LA27_45>=PARAGRAPHS && LA27_45<=PARENT)||(LA27_45>=PRECEDING && LA27_45<=PRECEDING_SIBLING)||LA27_45==PROCESSING_INSTRUCTION||LA27_45==RETURN||LA27_45==SATISFIES||(LA27_45>=SCHEMAATTRIBUTE && LA27_45<=SELF)||LA27_45==SENTENCES||(LA27_45>=SOME && LA27_45<=STABLE)||LA27_45==TEXT||(LA27_45>=TIMES && LA27_45<=TO)||(LA27_45>=TYPESWITCH && LA27_45<=UNORDERED)||LA27_45==VALIDATE||LA27_45==WHERE||LA27_45==WITHOUT||LA27_45==WORDS||(LA27_45>=StringLiteral && LA27_45<=ASSIGNSi)||(LA27_45>=LPARSi && LA27_45<=RBRACSi)||(LA27_45>=MINUSSi && LA27_45<=LPRAGSi)||(LA27_45>=DBLSLASHSi && LA27_45<=SLASHSi)||(LA27_45>=DOTDOTSi && LA27_45<=ATSi)||(LA27_45>=RBRACKSi && LA27_45<=DOTSi)||LA27_45==LCOMMENTSi||LA27_45==LPISi) ) {
                            alt27=2;
                        }
                        else if ( (LA27_45==PLUSSi) ) {
                            int LA27_25 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_45==STARSi) ) {
                            int LA27_26 = input.LA(5);

                            if ( (synpred1()) ) {
                                alt27=1;
                            }
                            else if ( (true) ) {
                                alt27=2;
                            }
                            else {
                                if (backtracking>0) {failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA27_45==QUESTIONSi) && (synpred1())) {
                            alt27=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 45, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 23, input);

                        throw nvae;
                    }
                }
                else if ( (LA27_11==EOF||(LA27_11>=ANCESTOR && LA27_11<=AND)||(LA27_11>=ASCENDING && LA27_11<=ATTRIBUTE)||LA27_11==CASE||(LA27_11>=CHILD && LA27_11<=COMMENT)||(LA27_11>=DEFAULT && LA27_11<=DESCENDING)||(LA27_11>=DIV && LA27_11<=ELSE)||LA27_11==EMPTY||(LA27_11>=EQ && LA27_11<=EVERY)||(LA27_11>=EXCEPT && LA27_11<=FOR)||LA27_11==FTCONTAINS||LA27_11==GE||(LA27_11>=GT && LA27_11<=IF)||LA27_11==IN||(LA27_11>=INSTANCE && LA27_11<=IS)||LA27_11==LE||(LA27_11>=LET && LA27_11<=LEVELS)||(LA27_11>=LT && LA27_11<=MOD)||(LA27_11>=NE && LA27_11<=NODE)||(LA27_11>=OR && LA27_11<=ORDERED)||(LA27_11>=PARAGRAPHS && LA27_11<=PARENT)||(LA27_11>=PRECEDING && LA27_11<=PRECEDING_SIBLING)||LA27_11==PROCESSING_INSTRUCTION||LA27_11==RETURN||LA27_11==SATISFIES||(LA27_11>=SCHEMAATTRIBUTE && LA27_11<=SELF)||LA27_11==SENTENCES||(LA27_11>=SOME && LA27_11<=STABLE)||LA27_11==TEXT||(LA27_11>=TIMES && LA27_11<=TO)||(LA27_11>=TYPESWITCH && LA27_11<=UNORDERED)||LA27_11==VALIDATE||LA27_11==WHERE||LA27_11==WITHOUT||LA27_11==WORDS||(LA27_11>=StringLiteral && LA27_11<=ASSIGNSi)||(LA27_11>=LPARSi && LA27_11<=RBRACSi)||(LA27_11>=MINUSSi && LA27_11<=LPRAGSi)||(LA27_11>=DBLSLASHSi && LA27_11<=SLASHSi)||(LA27_11>=DOTDOTSi && LA27_11<=ATSi)||(LA27_11>=RBRACKSi && LA27_11<=DOTSi)||LA27_11==LCOMMENTSi||LA27_11==LPISi) ) {
                    alt27=2;
                }
                else if ( (LA27_11==PLUSSi) ) {
                    int LA27_25 = input.LA(3);

                    if ( (synpred1()) ) {
                        alt27=1;
                    }
                    else if ( (true) ) {
                        alt27=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 25, input);

                        throw nvae;
                    }
                }
                else if ( (LA27_11==STARSi) ) {
                    int LA27_26 = input.LA(3);

                    if ( (synpred1()) ) {
                        alt27=1;
                    }
                    else if ( (true) ) {
                        alt27=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 26, input);

                        throw nvae;
                    }
                }
                else if ( (LA27_11==QUESTIONSi) && (synpred1())) {
                    alt27=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 11, input);

                    throw nvae;
                }
                }
                break;
            case EMPTY_SEQUENCE:
                {
                alt27=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("386:1: sequenceType : ( ( itemType occurrenceIndicator )=> itemType occurrenceIndicator | itemType | EMPTY_SEQUENCE LPARSi RPARSi );", 27, 0, input);

                throw nvae;
            }

            switch (alt27) {
                case 1 :
                    // etc/XQFT.g:386:34: ( itemType occurrenceIndicator )=> itemType occurrenceIndicator
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_itemType_in_sequenceType2324);
                    itemType144=itemType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, itemType144.getTree());
                    pushFollow(FOLLOW_occurrenceIndicator_in_sequenceType2326);
                    occurrenceIndicator145=occurrenceIndicator();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, occurrenceIndicator145.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:387:13: itemType
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_itemType_in_sequenceType2340);
                    itemType146=itemType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, itemType146.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:388:13: EMPTY_SEQUENCE LPARSi RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    EMPTY_SEQUENCE147=(Token)input.LT(1);
                    match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_sequenceType2354); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EMPTY_SEQUENCE147_tree = (XQFTTree)adaptor.create(EMPTY_SEQUENCE147);
                    adaptor.addChild(root_0, EMPTY_SEQUENCE147_tree);
                    }
                    LPARSi148=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_sequenceType2356); if (failed) return retval;
                    RPARSi149=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_sequenceType2359); if (failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end sequenceType

    public static class itemType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start itemType
    // etc/XQFT.g:390:2: itemType : ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType ) ;
    public final itemType_return itemType() throws RecognitionException {
        itemType_return retval = new itemType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ITEM151=null;
        Token LPARSi152=null;
        Token RPARSi153=null;
        kindTest_return kindTest150 = null;

        atomicType_return atomicType154 = null;


        XQFTTree ITEM151_tree=null;
        XQFTTree LPARSi152_tree=null;
        XQFTTree RPARSi153_tree=null;

        try {
            // etc/XQFT.g:390:33: ( ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType ) )
            // etc/XQFT.g:390:35: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:390:35: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )
            int alt28=3;
            switch ( input.LA(1) ) {
            case ATTRIBUTE:
            case COMMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case NODE:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case TEXT:
                {
                alt28=1;
                }
                break;
            case ITEM:
                {
                alt28=2;
                }
                break;
            case NCName:
                {
                alt28=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("390:35: ( kindTest | ( ITEM LPARSi RPARSi ) | atomicType )", 28, 0, input);

                throw nvae;
            }

            switch (alt28) {
                case 1 :
                    // etc/XQFT.g:390:36: kindTest
                    {
                    pushFollow(FOLLOW_kindTest_in_itemType2402);
                    kindTest150=kindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, kindTest150.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:390:47: ( ITEM LPARSi RPARSi )
                    {
                    // etc/XQFT.g:390:47: ( ITEM LPARSi RPARSi )
                    // etc/XQFT.g:390:48: ITEM LPARSi RPARSi
                    {
                    ITEM151=(Token)input.LT(1);
                    match(input,ITEM,FOLLOW_ITEM_in_itemType2407); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ITEM151_tree = (XQFTTree)adaptor.create(ITEM151);
                    adaptor.addChild(root_0, ITEM151_tree);
                    }
                    LPARSi152=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_itemType2409); if (failed) return retval;
                    RPARSi153=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_itemType2412); if (failed) return retval;

                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:390:72: atomicType
                    {
                    pushFollow(FOLLOW_atomicType_in_itemType2418);
                    atomicType154=atomicType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, atomicType154.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end itemType

    public static class kindTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kindTest
    // etc/XQFT.g:391:3: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest );
    public final kindTest_return kindTest() throws RecognitionException {
        kindTest_return retval = new kindTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        documentTest_return documentTest155 = null;

        elementTest_return elementTest156 = null;

        attributeTest_return attributeTest157 = null;

        schemaElementTest_return schemaElementTest158 = null;

        schemaAttributeTest_return schemaAttributeTest159 = null;

        piTest_return piTest160 = null;

        commentTest_return commentTest161 = null;

        textTest_return textTest162 = null;

        anyKindTest_return anyKindTest163 = null;



        try {
            // etc/XQFT.g:391:34: ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest )
            int alt29=9;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                alt29=1;
                }
                break;
            case ELEMENT:
                {
                alt29=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt29=3;
                }
                break;
            case SCHEMAELEMENT:
                {
                alt29=4;
                }
                break;
            case SCHEMAATTRIBUTE:
                {
                alt29=5;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt29=6;
                }
                break;
            case COMMENT:
                {
                alt29=7;
                }
                break;
            case TEXT:
                {
                alt29=8;
                }
                break;
            case NODE:
                {
                alt29=9;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("391:3: kindTest : ( documentTest | elementTest | attributeTest | schemaElementTest | schemaAttributeTest | piTest | commentTest | textTest | anyKindTest );", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // etc/XQFT.g:391:36: documentTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_documentTest_in_kindTest2450);
                    documentTest155=documentTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, documentTest155.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:392:39: elementTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_elementTest_in_kindTest2490);
                    elementTest156=elementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementTest156.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:393:39: attributeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_attributeTest_in_kindTest2530);
                    attributeTest157=attributeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attributeTest157.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:394:39: schemaElementTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaElementTest_in_kindTest2570);
                    schemaElementTest158=schemaElementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaElementTest158.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:395:39: schemaAttributeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_schemaAttributeTest_in_kindTest2610);
                    schemaAttributeTest159=schemaAttributeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaAttributeTest159.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:396:39: piTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_piTest_in_kindTest2650);
                    piTest160=piTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, piTest160.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:397:39: commentTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_commentTest_in_kindTest2690);
                    commentTest161=commentTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, commentTest161.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:398:39: textTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_textTest_in_kindTest2730);
                    textTest162=textTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, textTest162.getTree());

                    }
                    break;
                case 9 :
                    // etc/XQFT.g:399:39: anyKindTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_anyKindTest_in_kindTest2770);
                    anyKindTest163=anyKindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, anyKindTest163.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end kindTest

    public static class documentTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start documentTest
    // etc/XQFT.g:400:4: documentTest : DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi ;
    public final documentTest_return documentTest() throws RecognitionException {
        documentTest_return retval = new documentTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOCUMENT_NODE164=null;
        Token LPARSi165=null;
        Token RPARSi168=null;
        elementTest_return elementTest166 = null;

        schemaElementTest_return schemaElementTest167 = null;


        XQFTTree DOCUMENT_NODE164_tree=null;
        XQFTTree LPARSi165_tree=null;
        XQFTTree RPARSi168_tree=null;

        try {
            // etc/XQFT.g:400:35: ( DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi )
            // etc/XQFT.g:400:37: DOCUMENT_NODE LPARSi ( elementTest | schemaElementTest )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOCUMENT_NODE164=(Token)input.LT(1);
            match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_documentTest2798); if (failed) return retval;
            if ( backtracking==0 ) {
            DOCUMENT_NODE164_tree = (XQFTTree)adaptor.create(DOCUMENT_NODE164);
            adaptor.addChild(root_0, DOCUMENT_NODE164_tree);
            }
            LPARSi165=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_documentTest2800); if (failed) return retval;
            // etc/XQFT.g:400:59: ( elementTest | schemaElementTest )?
            int alt30=3;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ELEMENT) ) {
                alt30=1;
            }
            else if ( (LA30_0==SCHEMAELEMENT) ) {
                alt30=2;
            }
            switch (alt30) {
                case 1 :
                    // etc/XQFT.g:400:60: elementTest
                    {
                    pushFollow(FOLLOW_elementTest_in_documentTest2804);
                    elementTest166=elementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementTest166.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:400:74: schemaElementTest
                    {
                    pushFollow(FOLLOW_schemaElementTest_in_documentTest2808);
                    schemaElementTest167=schemaElementTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, schemaElementTest167.getTree());

                    }
                    break;

            }

            RPARSi168=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_documentTest2812); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end documentTest

    public static class elementTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementTest
    // etc/XQFT.g:401:5: elementTest : ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi ;
    public final elementTest_return elementTest() throws RecognitionException {
        elementTest_return retval = new elementTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ELEMENT169=null;
        Token LPARSi170=null;
        Token COMMASi172=null;
        Token QUESTIONSi174=null;
        Token RPARSi175=null;
        elementNameOrWildcard_return elementNameOrWildcard171 = null;

        typeName_return typeName173 = null;


        XQFTTree ELEMENT169_tree=null;
        XQFTTree LPARSi170_tree=null;
        XQFTTree COMMASi172_tree=null;
        XQFTTree QUESTIONSi174_tree=null;
        XQFTTree RPARSi175_tree=null;

        try {
            // etc/XQFT.g:401:34: ( ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi )
            // etc/XQFT.g:401:36: ELEMENT LPARSi ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ELEMENT169=(Token)input.LT(1);
            match(input,ELEMENT,FOLLOW_ELEMENT_in_elementTest2841); if (failed) return retval;
            if ( backtracking==0 ) {
            ELEMENT169_tree = (XQFTTree)adaptor.create(ELEMENT169);
            adaptor.addChild(root_0, ELEMENT169_tree);
            }
            LPARSi170=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_elementTest2843); if (failed) return retval;
            // etc/XQFT.g:401:52: ( elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )? )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==NCName||LA33_0==STARSi) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // etc/XQFT.g:401:53: elementNameOrWildcard ( COMMASi typeName ( QUESTIONSi )? )?
                    {
                    pushFollow(FOLLOW_elementNameOrWildcard_in_elementTest2847);
                    elementNameOrWildcard171=elementNameOrWildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementNameOrWildcard171.getTree());
                    // etc/XQFT.g:401:75: ( COMMASi typeName ( QUESTIONSi )? )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==COMMASi) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // etc/XQFT.g:401:76: COMMASi typeName ( QUESTIONSi )?
                            {
                            COMMASi172=(Token)input.LT(1);
                            match(input,COMMASi,FOLLOW_COMMASi_in_elementTest2850); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMASi172_tree = (XQFTTree)adaptor.create(COMMASi172);
                            adaptor.addChild(root_0, COMMASi172_tree);
                            }
                            pushFollow(FOLLOW_typeName_in_elementTest2852);
                            typeName173=typeName();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, typeName173.getTree());
                            // etc/XQFT.g:401:93: ( QUESTIONSi )?
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==QUESTIONSi) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    // etc/XQFT.g:401:93: QUESTIONSi
                                    {
                                    QUESTIONSi174=(Token)input.LT(1);
                                    match(input,QUESTIONSi,FOLLOW_QUESTIONSi_in_elementTest2854); if (failed) return retval;
                                    if ( backtracking==0 ) {
                                    QUESTIONSi174_tree = (XQFTTree)adaptor.create(QUESTIONSi174);
                                    adaptor.addChild(root_0, QUESTIONSi174_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            RPARSi175=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_elementTest2861); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementTest

    public static class elementNameOrWildcard_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementNameOrWildcard
    // etc/XQFT.g:402:6: elementNameOrWildcard : ( elementName | STARSi );
    public final elementNameOrWildcard_return elementNameOrWildcard() throws RecognitionException {
        elementNameOrWildcard_return retval = new elementNameOrWildcard_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STARSi177=null;
        elementName_return elementName176 = null;


        XQFTTree STARSi177_tree=null;

        try {
            // etc/XQFT.g:402:37: ( elementName | STARSi )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==NCName) ) {
                alt34=1;
            }
            else if ( (LA34_0==STARSi) ) {
                alt34=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("402:6: elementNameOrWildcard : ( elementName | STARSi );", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // etc/XQFT.g:402:39: elementName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_elementName_in_elementNameOrWildcard2883);
                    elementName176=elementName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, elementName176.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:402:53: STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi177=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_elementNameOrWildcard2887); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi177_tree = (XQFTTree)adaptor.create(STARSi177);
                    adaptor.addChild(root_0, STARSi177_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementNameOrWildcard

    public static class elementName_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementName
    // etc/XQFT.g:403:7: elementName : qName ;
    public final elementName_return elementName() throws RecognitionException {
        elementName_return retval = new elementName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName178 = null;



        try {
            // etc/XQFT.g:403:38: ( qName )
            // etc/XQFT.g:403:40: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_elementName2919);
            qName178=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName178.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementName

    public static class typeName_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeName
    // etc/XQFT.g:404:6: typeName : qName ;
    public final typeName_return typeName() throws RecognitionException {
        typeName_return retval = new typeName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName179 = null;



        try {
            // etc/XQFT.g:404:37: ( qName )
            // etc/XQFT.g:404:39: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_typeName2953);
            qName179=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName179.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeName

    public static class schemaElementTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaElementTest
    // etc/XQFT.g:405:5: schemaElementTest : SCHEMAELEMENT LPARSi elementDeclaration RPARSi ;
    public final schemaElementTest_return schemaElementTest() throws RecognitionException {
        schemaElementTest_return retval = new schemaElementTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCHEMAELEMENT180=null;
        Token LPARSi181=null;
        Token RPARSi183=null;
        elementDeclaration_return elementDeclaration182 = null;


        XQFTTree SCHEMAELEMENT180_tree=null;
        XQFTTree LPARSi181_tree=null;
        XQFTTree RPARSi183_tree=null;

        try {
            // etc/XQFT.g:405:37: ( SCHEMAELEMENT LPARSi elementDeclaration RPARSi )
            // etc/XQFT.g:405:39: SCHEMAELEMENT LPARSi elementDeclaration RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCHEMAELEMENT180=(Token)input.LT(1);
            match(input,SCHEMAELEMENT,FOLLOW_SCHEMAELEMENT_in_schemaElementTest2978); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMAELEMENT180_tree = (XQFTTree)adaptor.create(SCHEMAELEMENT180);
            adaptor.addChild(root_0, SCHEMAELEMENT180_tree);
            }
            LPARSi181=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_schemaElementTest2980); if (failed) return retval;
            pushFollow(FOLLOW_elementDeclaration_in_schemaElementTest2983);
            elementDeclaration182=elementDeclaration();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, elementDeclaration182.getTree());
            RPARSi183=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_schemaElementTest2985); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaElementTest

    public static class elementDeclaration_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start elementDeclaration
    // etc/XQFT.g:406:6: elementDeclaration : elementName ;
    public final elementDeclaration_return elementDeclaration() throws RecognitionException {
        elementDeclaration_return retval = new elementDeclaration_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        elementName_return elementName184 = null;



        try {
            // etc/XQFT.g:406:37: ( elementName )
            // etc/XQFT.g:406:39: elementName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_elementName_in_elementDeclaration3010);
            elementName184=elementName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, elementName184.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end elementDeclaration

    public static class attributeTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeTest
    // etc/XQFT.g:412:4: attributeTest : ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi ;
    public final attributeTest_return attributeTest() throws RecognitionException {
        attributeTest_return retval = new attributeTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ATTRIBUTE185=null;
        Token LPARSi186=null;
        Token COMMASi188=null;
        Token RPARSi190=null;
        attribNameOrWildcard_return attribNameOrWildcard187 = null;

        typeName_return typeName189 = null;


        XQFTTree ATTRIBUTE185_tree=null;
        XQFTTree LPARSi186_tree=null;
        XQFTTree COMMASi188_tree=null;
        XQFTTree RPARSi190_tree=null;

        try {
            // etc/XQFT.g:412:35: ( ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi )
            // etc/XQFT.g:412:37: ATTRIBUTE LPARSi ( attribNameOrWildcard ( COMMASi typeName )? )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ATTRIBUTE185=(Token)input.LT(1);
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attributeTest3042); if (failed) return retval;
            if ( backtracking==0 ) {
            ATTRIBUTE185_tree = (XQFTTree)adaptor.create(ATTRIBUTE185);
            adaptor.addChild(root_0, ATTRIBUTE185_tree);
            }
            LPARSi186=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_attributeTest3044); if (failed) return retval;
            // etc/XQFT.g:412:55: ( attribNameOrWildcard ( COMMASi typeName )? )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==NCName||LA36_0==STARSi) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // etc/XQFT.g:412:56: attribNameOrWildcard ( COMMASi typeName )?
                    {
                    pushFollow(FOLLOW_attribNameOrWildcard_in_attributeTest3048);
                    attribNameOrWildcard187=attribNameOrWildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attribNameOrWildcard187.getTree());
                    // etc/XQFT.g:412:77: ( COMMASi typeName )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==COMMASi) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // etc/XQFT.g:412:78: COMMASi typeName
                            {
                            COMMASi188=(Token)input.LT(1);
                            match(input,COMMASi,FOLLOW_COMMASi_in_attributeTest3051); if (failed) return retval;
                            if ( backtracking==0 ) {
                            COMMASi188_tree = (XQFTTree)adaptor.create(COMMASi188);
                            adaptor.addChild(root_0, COMMASi188_tree);
                            }
                            pushFollow(FOLLOW_typeName_in_attributeTest3053);
                            typeName189=typeName();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, typeName189.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPARSi190=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_attributeTest3059); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeTest

    public static class attribNameOrWildcard_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attribNameOrWildcard
    // etc/XQFT.g:413:5: attribNameOrWildcard : ( attributeName | STARSi );
    public final attribNameOrWildcard_return attribNameOrWildcard() throws RecognitionException {
        attribNameOrWildcard_return retval = new attribNameOrWildcard_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STARSi192=null;
        attributeName_return attributeName191 = null;


        XQFTTree STARSi192_tree=null;

        try {
            // etc/XQFT.g:413:36: ( attributeName | STARSi )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==NCName) ) {
                alt37=1;
            }
            else if ( (LA37_0==STARSi) ) {
                alt37=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("413:5: attribNameOrWildcard : ( attributeName | STARSi );", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // etc/XQFT.g:413:38: attributeName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_attributeName_in_attribNameOrWildcard3081);
                    attributeName191=attributeName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, attributeName191.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:413:54: STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi192=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_attribNameOrWildcard3085); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi192_tree = (XQFTTree)adaptor.create(STARSi192);
                    adaptor.addChild(root_0, STARSi192_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attribNameOrWildcard

    public static class attributeName_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeName
    // etc/XQFT.g:414:6: attributeName : qName ;
    public final attributeName_return attributeName() throws RecognitionException {
        attributeName_return retval = new attributeName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName193 = null;



        try {
            // etc/XQFT.g:414:37: ( qName )
            // etc/XQFT.g:414:39: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_attributeName3114);
            qName193=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName193.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeName

    public static class schemaAttributeTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start schemaAttributeTest
    // etc/XQFT.g:419:4: schemaAttributeTest : SCHEMAATTRIBUTE LPARSi attributeDeclaration RPARSi ;
    public final schemaAttributeTest_return schemaAttributeTest() throws RecognitionException {
        schemaAttributeTest_return retval = new schemaAttributeTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCHEMAATTRIBUTE194=null;
        Token LPARSi195=null;
        Token RPARSi197=null;
        attributeDeclaration_return attributeDeclaration196 = null;


        XQFTTree SCHEMAATTRIBUTE194_tree=null;
        XQFTTree LPARSi195_tree=null;
        XQFTTree RPARSi197_tree=null;

        try {
            // etc/XQFT.g:419:35: ( SCHEMAATTRIBUTE LPARSi attributeDeclaration RPARSi )
            // etc/XQFT.g:419:37: SCHEMAATTRIBUTE LPARSi attributeDeclaration RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCHEMAATTRIBUTE194=(Token)input.LT(1);
            match(input,SCHEMAATTRIBUTE,FOLLOW_SCHEMAATTRIBUTE_in_schemaAttributeTest3139); if (failed) return retval;
            if ( backtracking==0 ) {
            SCHEMAATTRIBUTE194_tree = (XQFTTree)adaptor.create(SCHEMAATTRIBUTE194);
            adaptor.addChild(root_0, SCHEMAATTRIBUTE194_tree);
            }
            LPARSi195=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_schemaAttributeTest3141); if (failed) return retval;
            pushFollow(FOLLOW_attributeDeclaration_in_schemaAttributeTest3144);
            attributeDeclaration196=attributeDeclaration();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, attributeDeclaration196.getTree());
            RPARSi197=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_schemaAttributeTest3146); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end schemaAttributeTest

    public static class attributeDeclaration_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start attributeDeclaration
    // etc/XQFT.g:420:5: attributeDeclaration : attributeName ;
    public final attributeDeclaration_return attributeDeclaration() throws RecognitionException {
        attributeDeclaration_return retval = new attributeDeclaration_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        attributeName_return attributeName198 = null;



        try {
            // etc/XQFT.g:420:36: ( attributeName )
            // etc/XQFT.g:420:38: attributeName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_attributeName_in_attributeDeclaration3168);
            attributeName198=attributeName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, attributeName198.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end attributeDeclaration

    public static class piTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start piTest
    // etc/XQFT.g:422:4: piTest : PROCESSING_INSTRUCTION LPARSi ( NCName | StringLiteral )? RPARSi ;
    public final piTest_return piTest() throws RecognitionException {
        piTest_return retval = new piTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token PROCESSING_INSTRUCTION199=null;
        Token LPARSi200=null;
        Token set201=null;
        Token RPARSi202=null;

        XQFTTree PROCESSING_INSTRUCTION199_tree=null;
        XQFTTree LPARSi200_tree=null;
        XQFTTree set201_tree=null;
        XQFTTree RPARSi202_tree=null;

        try {
            // etc/XQFT.g:422:35: ( PROCESSING_INSTRUCTION LPARSi ( NCName | StringLiteral )? RPARSi )
            // etc/XQFT.g:422:37: PROCESSING_INSTRUCTION LPARSi ( NCName | StringLiteral )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            PROCESSING_INSTRUCTION199=(Token)input.LT(1);
            match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_piTest3203); if (failed) return retval;
            if ( backtracking==0 ) {
            PROCESSING_INSTRUCTION199_tree = (XQFTTree)adaptor.create(PROCESSING_INSTRUCTION199);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION199_tree);
            }
            LPARSi200=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_piTest3205); if (failed) return retval;
            // etc/XQFT.g:422:68: ( NCName | StringLiteral )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==StringLiteral||LA38_0==NCName) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // etc/XQFT.g:
                    {
                    set201=(Token)input.LT(1);
                    if ( input.LA(1)==StringLiteral||input.LA(1)==NCName ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set201));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_piTest3208);    throw mse;
                    }


                    }
                    break;

            }

            RPARSi202=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_piTest3217); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end piTest

    public static class commentTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start commentTest
    // etc/XQFT.g:423:4: commentTest : COMMENT LPARSi RPARSi ;
    public final commentTest_return commentTest() throws RecognitionException {
        commentTest_return retval = new commentTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMENT203=null;
        Token LPARSi204=null;
        Token RPARSi205=null;

        XQFTTree COMMENT203_tree=null;
        XQFTTree LPARSi204_tree=null;
        XQFTTree RPARSi205_tree=null;

        try {
            // etc/XQFT.g:423:35: ( COMMENT LPARSi RPARSi )
            // etc/XQFT.g:423:37: COMMENT LPARSi RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            COMMENT203=(Token)input.LT(1);
            match(input,COMMENT,FOLLOW_COMMENT_in_commentTest3247); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMENT203_tree = (XQFTTree)adaptor.create(COMMENT203);
            adaptor.addChild(root_0, COMMENT203_tree);
            }
            LPARSi204=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_commentTest3249); if (failed) return retval;
            RPARSi205=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_commentTest3252); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end commentTest

    public static class textTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start textTest
    // etc/XQFT.g:424:4: textTest : TEXT LPARSi RPARSi ;
    public final textTest_return textTest() throws RecognitionException {
        textTest_return retval = new textTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TEXT206=null;
        Token LPARSi207=null;
        Token RPARSi208=null;

        XQFTTree TEXT206_tree=null;
        XQFTTree LPARSi207_tree=null;
        XQFTTree RPARSi208_tree=null;

        try {
            // etc/XQFT.g:424:35: ( TEXT LPARSi RPARSi )
            // etc/XQFT.g:424:37: TEXT LPARSi RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            TEXT206=(Token)input.LT(1);
            match(input,TEXT,FOLLOW_TEXT_in_textTest3285); if (failed) return retval;
            if ( backtracking==0 ) {
            TEXT206_tree = (XQFTTree)adaptor.create(TEXT206);
            adaptor.addChild(root_0, TEXT206_tree);
            }
            LPARSi207=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_textTest3287); if (failed) return retval;
            RPARSi208=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_textTest3290); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end textTest

    public static class anyKindTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start anyKindTest
    // etc/XQFT.g:425:4: anyKindTest : NODE LPARSi RPARSi ;
    public final anyKindTest_return anyKindTest() throws RecognitionException {
        anyKindTest_return retval = new anyKindTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NODE209=null;
        Token LPARSi210=null;
        Token RPARSi211=null;

        XQFTTree NODE209_tree=null;
        XQFTTree LPARSi210_tree=null;
        XQFTTree RPARSi211_tree=null;

        try {
            // etc/XQFT.g:425:35: ( NODE LPARSi RPARSi )
            // etc/XQFT.g:425:37: NODE LPARSi RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            NODE209=(Token)input.LT(1);
            match(input,NODE,FOLLOW_NODE_in_anyKindTest3320); if (failed) return retval;
            if ( backtracking==0 ) {
            NODE209_tree = (XQFTTree)adaptor.create(NODE209);
            adaptor.addChild(root_0, NODE209_tree);
            }
            LPARSi210=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_anyKindTest3322); if (failed) return retval;
            RPARSi211=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_anyKindTest3325); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end anyKindTest

    public static class occurrenceIndicator_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start occurrenceIndicator
    // etc/XQFT.g:426:2: occurrenceIndicator : ( QUESTIONSi | STARSi | PLUSSi );
    public final occurrenceIndicator_return occurrenceIndicator() throws RecognitionException {
        occurrenceIndicator_return retval = new occurrenceIndicator_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set212=null;

        XQFTTree set212_tree=null;

        try {
            // etc/XQFT.g:426:33: ( QUESTIONSi | STARSi | PLUSSi )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set212=(Token)input.LT(1);
            if ( (input.LA(1)>=QUESTIONSi && input.LA(1)<=PLUSSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set212));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_occurrenceIndicator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end occurrenceIndicator

    public static class exprSingle_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exprSingle
    // etc/XQFT.g:430:1: exprSingle : ( fLWORExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr );
    public final exprSingle_return exprSingle() throws RecognitionException {
        exprSingle_return retval = new exprSingle_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        fLWORExpr_return fLWORExpr213 = null;

        quantifiedExpr_return quantifiedExpr214 = null;

        typeswitchExpr_return typeswitchExpr215 = null;

        ifExpr_return ifExpr216 = null;

        orExpr_return orExpr217 = null;



        try {
            // etc/XQFT.g:430:32: ( fLWORExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr )
            int alt39=5;
            switch ( input.LA(1) ) {
            case FOR:
            case LET:
                {
                alt39=1;
                }
                break;
            case EVERY:
            case SOME:
                {
                alt39=2;
                }
                break;
            case TYPESWITCH:
                {
                alt39=3;
                }
                break;
            case IF:
                {
                alt39=4;
                }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case ATTRIBUTE:
            case CHILD:
            case COMMENT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case NODE:
            case ORDERED:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case SELF:
            case TEXT:
            case UNORDERED:
            case VALIDATE:
            case StringLiteral:
            case NCName:
            case DOLLARSi:
            case LPARSi:
            case STARSi:
            case PLUSSi:
            case MINUSSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case LPRAGSi:
            case DBLSLASHSi:
            case SLASHSi:
            case DOTDOTSi:
            case ATSi:
            case DOTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt39=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("430:1: exprSingle : ( fLWORExpr | quantifiedExpr | typeswitchExpr | ifExpr | orExpr );", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // etc/XQFT.g:430:34: fLWORExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_fLWORExpr_in_exprSingle3386);
                    fLWORExpr213=fLWORExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, fLWORExpr213.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:431:37: quantifiedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_quantifiedExpr_in_exprSingle3424);
                    quantifiedExpr214=quantifiedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, quantifiedExpr214.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:432:37: typeswitchExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_typeswitchExpr_in_exprSingle3462);
                    typeswitchExpr215=typeswitchExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeswitchExpr215.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:433:37: ifExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ifExpr_in_exprSingle3500);
                    ifExpr216=ifExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ifExpr216.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:434:37: orExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_orExpr_in_exprSingle3538);
                    orExpr217=orExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orExpr217.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end exprSingle

    public static class fLWORExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fLWORExpr
    // etc/XQFT.g:436:2: fLWORExpr : (fc+= forClause | lc+= letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle -> ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle ) ;
    public final fLWORExpr_return fLWORExpr() throws RecognitionException {
        fLWORExpr_return retval = new fLWORExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token RETURN220=null;
        List list_fc=null;
        List list_lc=null;
        whereClause_return whereClause218 = null;

        orderByClause_return orderByClause219 = null;

        exprSingle_return exprSingle221 = null;

        RuleReturnScope fc = null;
        RuleReturnScope lc = null;
        XQFTTree RETURN220_tree=null;
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_letClause=new RewriteRuleSubtreeStream(adaptor,"rule letClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_forClause=new RewriteRuleSubtreeStream(adaptor,"rule forClause");
        try {
            // etc/XQFT.g:436:33: ( (fc+= forClause | lc+= letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle -> ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle ) )
            // etc/XQFT.g:436:35: (fc+= forClause | lc+= letClause )+ ( whereClause )? ( orderByClause )? RETURN exprSingle
            {
            // etc/XQFT.g:436:35: (fc+= forClause | lc+= letClause )+
            int cnt40=0;
            loop40:
            do {
                int alt40=3;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==FOR) ) {
                    alt40=1;
                }
                else if ( (LA40_0==LET) ) {
                    alt40=2;
                }


                switch (alt40) {
            	case 1 :
            	    // etc/XQFT.g:436:36: fc+= forClause
            	    {
            	    pushFollow(FOLLOW_forClause_in_fLWORExpr3605);
            	    fc=forClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_forClause.add(fc.getTree());
            	    if (list_fc==null) list_fc=new ArrayList();
            	    list_fc.add(fc);


            	    }
            	    break;
            	case 2 :
            	    // etc/XQFT.g:436:52: lc+= letClause
            	    {
            	    pushFollow(FOLLOW_letClause_in_fLWORExpr3611);
            	    lc=letClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_letClause.add(lc.getTree());
            	    if (list_lc==null) list_lc=new ArrayList();
            	    list_lc.add(lc);


            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);

            // etc/XQFT.g:436:68: ( whereClause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==WHERE) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // etc/XQFT.g:436:68: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_fLWORExpr3615);
                    whereClause218=whereClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_whereClause.add(whereClause218.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:436:81: ( orderByClause )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ORDER||LA42_0==STABLE) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // etc/XQFT.g:436:81: orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_fLWORExpr3618);
                    orderByClause219=orderByClause();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_orderByClause.add(orderByClause219.getTree());

                    }
                    break;

            }

            RETURN220=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_fLWORExpr3621); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN220);

            pushFollow(FOLLOW_exprSingle_in_fLWORExpr3623);
            exprSingle221=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle221.getTree());

            // AST REWRITE
            // elements: orderByClause, lc, fc, exprSingle, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: lc, fc
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_lc=new RewriteRuleSubtreeStream(adaptor,"token lc",list_lc);
            RewriteRuleSubtreeStream stream_fc=new RewriteRuleSubtreeStream(adaptor,"token fc",list_fc);
            root_0 = (XQFTTree)adaptor.nil();
            // 437:49: -> ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle )
            {
                // etc/XQFT.g:437:52: ^( AST_FLWOR ( $fc)* ( $lc)* ( whereClause )? ( orderByClause )? exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FLWOR, "AST_FLWOR"), root_1);

                // etc/XQFT.g:437:64: ( $fc)*
                while ( stream_fc.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_fc.next()).getTree());

                }
                stream_fc.reset();
                // etc/XQFT.g:437:69: ( $lc)*
                while ( stream_lc.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_lc.next()).getTree());

                }
                stream_lc.reset();
                // etc/XQFT.g:437:74: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.next());

                }
                stream_whereClause.reset();
                // etc/XQFT.g:437:87: ( orderByClause )?
                if ( stream_orderByClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByClause.next());

                }
                stream_orderByClause.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end fLWORExpr

    public static class forClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forClause
    // etc/XQFT.g:439:3: forClause : FOR forClauseTupletDef ( COMMASi forClauseTupletDef )* -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ ) ;
    public final forClause_return forClause() throws RecognitionException {
        forClause_return retval = new forClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FOR222=null;
        Token COMMASi224=null;
        forClauseTupletDef_return forClauseTupletDef223 = null;

        forClauseTupletDef_return forClauseTupletDef225 = null;


        XQFTTree FOR222_tree=null;
        XQFTTree COMMASi224_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_forClauseTupletDef=new RewriteRuleSubtreeStream(adaptor,"rule forClauseTupletDef");
        try {
            // etc/XQFT.g:439:34: ( FOR forClauseTupletDef ( COMMASi forClauseTupletDef )* -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ ) )
            // etc/XQFT.g:439:36: FOR forClauseTupletDef ( COMMASi forClauseTupletDef )*
            {
            FOR222=(Token)input.LT(1);
            match(input,FOR,FOLLOW_FOR_in_forClause3725); if (failed) return retval;
            if ( backtracking==0 ) stream_FOR.add(FOR222);

            pushFollow(FOLLOW_forClauseTupletDef_in_forClause3727);
            forClauseTupletDef223=forClauseTupletDef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_forClauseTupletDef.add(forClauseTupletDef223.getTree());
            // etc/XQFT.g:439:59: ( COMMASi forClauseTupletDef )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==COMMASi) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // etc/XQFT.g:439:60: COMMASi forClauseTupletDef
            	    {
            	    COMMASi224=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_forClause3730); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi224);

            	    pushFollow(FOLLOW_forClauseTupletDef_in_forClause3732);
            	    forClauseTupletDef225=forClauseTupletDef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_forClauseTupletDef.add(forClauseTupletDef225.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            // AST REWRITE
            // elements: forClauseTupletDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 440:53: -> ^( AST_FORCLAUSE ( forClauseTupletDef )+ )
            {
                // etc/XQFT.g:440:56: ^( AST_FORCLAUSE ( forClauseTupletDef )+ )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FORCLAUSE, "AST_FORCLAUSE"), root_1);

                if ( !(stream_forClauseTupletDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_forClauseTupletDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_forClauseTupletDef.next());

                }
                stream_forClauseTupletDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forClause

    public static class forClauseTupletDef_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forClauseTupletDef
    // etc/XQFT.g:441:13: forClauseTupletDef : DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle ;
    public final forClauseTupletDef_return forClauseTupletDef() throws RecognitionException {
        forClauseTupletDef_return retval = new forClauseTupletDef_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi226=null;
        Token IN231=null;
        varName_return varName227 = null;

        typeDeclaration_return typeDeclaration228 = null;

        positionalVar_return positionalVar229 = null;

        ftScoreVar_return ftScoreVar230 = null;

        exprSingle_return exprSingle232 = null;


        XQFTTree DOLLARSi226_tree=null;
        XQFTTree IN231_tree=null;

        try {
            // etc/XQFT.g:441:49: ( DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle )
            // etc/XQFT.g:441:51: DOLLARSi varName ( typeDeclaration )? ( positionalVar )? ( ftScoreVar )? IN exprSingle
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOLLARSi226=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_forClauseTupletDef3831); if (failed) return retval;
            pushFollow(FOLLOW_varName_in_forClauseTupletDef3834);
            varName227=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName227.getTree());
            // etc/XQFT.g:441:69: ( typeDeclaration )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==AS) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // etc/XQFT.g:441:69: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_forClauseTupletDef3836);
                    typeDeclaration228=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, typeDeclaration228.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:441:86: ( positionalVar )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==AT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // etc/XQFT.g:441:86: positionalVar
                    {
                    pushFollow(FOLLOW_positionalVar_in_forClauseTupletDef3839);
                    positionalVar229=positionalVar();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, positionalVar229.getTree());

                    }
                    break;

            }

            // etc/XQFT.g:441:101: ( ftScoreVar )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SCORE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // etc/XQFT.g:441:101: ftScoreVar
                    {
                    pushFollow(FOLLOW_ftScoreVar_in_forClauseTupletDef3842);
                    ftScoreVar230=ftScoreVar();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftScoreVar230.getTree());

                    }
                    break;

            }

            IN231=(Token)input.LT(1);
            match(input,IN,FOLLOW_IN_in_forClauseTupletDef3845); if (failed) return retval;
            pushFollow(FOLLOW_exprSingle_in_forClauseTupletDef3848);
            exprSingle232=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle232.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forClauseTupletDef

    public static class varName_return extends ParserRuleReturnScope {
        public String name;
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varName
    // etc/XQFT.g:443:4: varName returns [String name] : qn= qName ;
    public final varName_return varName() throws RecognitionException {
        varName_return retval = new varName_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qn = null;



        try {
            // etc/XQFT.g:443:43: (qn= qName )
            // etc/XQFT.g:443:45: qn= qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_varName3874);
            qn=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            if ( backtracking==0 ) {
              retval.name = qn.text;
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varName

    public static class positionalVar_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start positionalVar
    // etc/XQFT.g:446:4: positionalVar : AT DOLLARSi varName ;
    public final positionalVar_return positionalVar() throws RecognitionException {
        positionalVar_return retval = new positionalVar_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT233=null;
        Token DOLLARSi234=null;
        varName_return varName235 = null;


        XQFTTree AT233_tree=null;
        XQFTTree DOLLARSi234_tree=null;

        try {
            // etc/XQFT.g:446:35: ( AT DOLLARSi varName )
            // etc/XQFT.g:446:37: AT DOLLARSi varName
            {
            root_0 = (XQFTTree)adaptor.nil();

            AT233=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_positionalVar3905); if (failed) return retval;
            if ( backtracking==0 ) {
            AT233_tree = (XQFTTree)adaptor.create(AT233);
            adaptor.addChild(root_0, AT233_tree);
            }
            DOLLARSi234=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_positionalVar3907); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi234_tree = (XQFTTree)adaptor.create(DOLLARSi234);
            adaptor.addChild(root_0, DOLLARSi234_tree);
            }
            pushFollow(FOLLOW_varName_in_positionalVar3909);
            varName235=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName235.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end positionalVar

    public static class ftScoreVar_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftScoreVar
    // etc/XQFT.g:448:4: ftScoreVar : SCORE DOLLARSi varName ;
    public final ftScoreVar_return ftScoreVar() throws RecognitionException {
        ftScoreVar_return retval = new ftScoreVar_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token SCORE236=null;
        Token DOLLARSi237=null;
        varName_return varName238 = null;


        XQFTTree SCORE236_tree=null;
        XQFTTree DOLLARSi237_tree=null;

        try {
            // etc/XQFT.g:448:35: ( SCORE DOLLARSi varName )
            // etc/XQFT.g:448:37: SCORE DOLLARSi varName
            {
            root_0 = (XQFTTree)adaptor.nil();

            SCORE236=(Token)input.LT(1);
            match(input,SCORE,FOLLOW_SCORE_in_ftScoreVar3940); if (failed) return retval;
            if ( backtracking==0 ) {
            SCORE236_tree = (XQFTTree)adaptor.create(SCORE236);
            adaptor.addChild(root_0, SCORE236_tree);
            }
            DOLLARSi237=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_ftScoreVar3942); if (failed) return retval;
            if ( backtracking==0 ) {
            DOLLARSi237_tree = (XQFTTree)adaptor.create(DOLLARSi237);
            adaptor.addChild(root_0, DOLLARSi237_tree);
            }
            pushFollow(FOLLOW_varName_in_ftScoreVar3944);
            varName238=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName238.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftScoreVar

    public static class letClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start letClause
    // etc/XQFT.g:452:3: letClause : LET varBinding ( COMMASi varBinding )* -> ^( AST_LETCLAUSE ( varBinding )+ ) ;
    public final letClause_return letClause() throws RecognitionException {
        letClause_return retval = new letClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LET239=null;
        Token COMMASi241=null;
        varBinding_return varBinding240 = null;

        varBinding_return varBinding242 = null;


        XQFTTree LET239_tree=null;
        XQFTTree COMMASi241_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_LET=new RewriteRuleTokenStream(adaptor,"token LET");
        RewriteRuleSubtreeStream stream_varBinding=new RewriteRuleSubtreeStream(adaptor,"rule varBinding");
        try {
            // etc/XQFT.g:452:39: ( LET varBinding ( COMMASi varBinding )* -> ^( AST_LETCLAUSE ( varBinding )+ ) )
            // etc/XQFT.g:452:41: LET varBinding ( COMMASi varBinding )*
            {
            LET239=(Token)input.LT(1);
            match(input,LET,FOLLOW_LET_in_letClause3994); if (failed) return retval;
            if ( backtracking==0 ) stream_LET.add(LET239);

            pushFollow(FOLLOW_varBinding_in_letClause3996);
            varBinding240=varBinding();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_varBinding.add(varBinding240.getTree());
            // etc/XQFT.g:452:56: ( COMMASi varBinding )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMASi) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // etc/XQFT.g:452:57: COMMASi varBinding
            	    {
            	    COMMASi241=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_letClause3999); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi241);

            	    pushFollow(FOLLOW_varBinding_in_letClause4001);
            	    varBinding242=varBinding();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_varBinding.add(varBinding242.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            // AST REWRITE
            // elements: varBinding
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 453:53: -> ^( AST_LETCLAUSE ( varBinding )+ )
            {
                // etc/XQFT.g:453:56: ^( AST_LETCLAUSE ( varBinding )+ )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_LETCLAUSE, "AST_LETCLAUSE"), root_1);

                if ( !(stream_varBinding.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_varBinding.hasNext() ) {
                    adaptor.addChild(root_1, stream_varBinding.next());

                }
                stream_varBinding.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end letClause

    public static class varBinding_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varBinding
    // etc/XQFT.g:454:3: varBinding : ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle -> ( SCORE )? $v ( typeDeclaration )? exprSingle ;
    public final varBinding_return varBinding() throws RecognitionException {
        varBinding_return retval = new varBinding_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi243=null;
        Token SCORE245=null;
        Token DOLLARSi246=null;
        Token ASSIGNSi247=null;
        varName_return v = null;

        typeDeclaration_return typeDeclaration244 = null;

        exprSingle_return exprSingle248 = null;


        XQFTTree DOLLARSi243_tree=null;
        XQFTTree SCORE245_tree=null;
        XQFTTree DOLLARSi246_tree=null;
        XQFTTree ASSIGNSi247_tree=null;
        RewriteRuleTokenStream stream_SCORE=new RewriteRuleTokenStream(adaptor,"token SCORE");
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_ASSIGNSi=new RewriteRuleTokenStream(adaptor,"token ASSIGNSi");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // etc/XQFT.g:454:14: ( ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle -> ( SCORE )? $v ( typeDeclaration )? exprSingle )
            // etc/XQFT.g:455:4: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName ) ASSIGNSi exprSingle
            {
            // etc/XQFT.g:455:4: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==DOLLARSi) ) {
                alt49=1;
            }
            else if ( (LA49_0==SCORE) ) {
                alt49=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("455:4: ( DOLLARSi v= varName ( typeDeclaration )? | SCORE DOLLARSi v= varName )", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // etc/XQFT.g:455:5: DOLLARSi v= varName ( typeDeclaration )?
                    {
                    DOLLARSi243=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varBinding4077); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi243);

                    pushFollow(FOLLOW_varName_in_varBinding4081);
                    v=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(v.getTree());
                    // etc/XQFT.g:455:24: ( typeDeclaration )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==AS) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // etc/XQFT.g:455:24: typeDeclaration
                            {
                            pushFollow(FOLLOW_typeDeclaration_in_varBinding4083);
                            typeDeclaration244=typeDeclaration();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) stream_typeDeclaration.add(typeDeclaration244.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:455:43: SCORE DOLLARSi v= varName
                    {
                    SCORE245=(Token)input.LT(1);
                    match(input,SCORE,FOLLOW_SCORE_in_varBinding4088); if (failed) return retval;
                    if ( backtracking==0 ) stream_SCORE.add(SCORE245);

                    DOLLARSi246=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varBinding4090); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi246);

                    pushFollow(FOLLOW_varName_in_varBinding4094);
                    v=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(v.getTree());

                    }
                    break;

            }

            ASSIGNSi247=(Token)input.LT(1);
            match(input,ASSIGNSi,FOLLOW_ASSIGNSi_in_varBinding4110); if (failed) return retval;
            if ( backtracking==0 ) stream_ASSIGNSi.add(ASSIGNSi247);

            pushFollow(FOLLOW_exprSingle_in_varBinding4112);
            exprSingle248=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle248.getTree());

            // AST REWRITE
            // elements: SCORE, typeDeclaration, exprSingle, v
            // token labels: 
            // rule labels: v, retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_v=new RewriteRuleSubtreeStream(adaptor,"token v",v!=null?v.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 457:13: -> ( SCORE )? $v ( typeDeclaration )? exprSingle
            {
                // etc/XQFT.g:457:16: ( SCORE )?
                if ( stream_SCORE.hasNext() ) {
                    adaptor.addChild(root_0, stream_SCORE.next());

                }
                stream_SCORE.reset();
                adaptor.addChild(root_0, stream_v.next());
                // etc/XQFT.g:457:26: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeDeclaration.next());

                }
                stream_typeDeclaration.reset();
                adaptor.addChild(root_0, stream_exprSingle.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varBinding

    public static class whereClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whereClause
    // etc/XQFT.g:467:3: whereClause : WHERE exprSingle -> ^( AST_WHERECLAUSE exprSingle ) ;
    public final whereClause_return whereClause() throws RecognitionException {
        whereClause_return retval = new whereClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WHERE249=null;
        exprSingle_return exprSingle250 = null;


        XQFTTree WHERE249_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:467:33: ( WHERE exprSingle -> ^( AST_WHERECLAUSE exprSingle ) )
            // etc/XQFT.g:467:35: WHERE exprSingle
            {
            WHERE249=(Token)input.LT(1);
            match(input,WHERE,FOLLOW_WHERE_in_whereClause4175); if (failed) return retval;
            if ( backtracking==0 ) stream_WHERE.add(WHERE249);

            pushFollow(FOLLOW_exprSingle_in_whereClause4177);
            exprSingle250=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle250.getTree());

            // AST REWRITE
            // elements: exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 468:49: -> ^( AST_WHERECLAUSE exprSingle )
            {
                // etc/XQFT.g:468:52: ^( AST_WHERECLAUSE exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_WHERECLAUSE, "AST_WHERECLAUSE"), root_1);

                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end whereClause

    public static class orderByClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderByClause
    // etc/XQFT.g:471:3: orderByClause : ( ORDER BY | STABLE ORDER BY ) orderSpecList -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList ) ;
    public final orderByClause_return orderByClause() throws RecognitionException {
        orderByClause_return retval = new orderByClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDER251=null;
        Token BY252=null;
        Token STABLE253=null;
        Token ORDER254=null;
        Token BY255=null;
        orderSpecList_return orderSpecList256 = null;


        XQFTTree ORDER251_tree=null;
        XQFTTree BY252_tree=null;
        XQFTTree STABLE253_tree=null;
        XQFTTree ORDER254_tree=null;
        XQFTTree BY255_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_STABLE=new RewriteRuleTokenStream(adaptor,"token STABLE");
        RewriteRuleSubtreeStream stream_orderSpecList=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecList");
        try {
            // etc/XQFT.g:471:33: ( ( ORDER BY | STABLE ORDER BY ) orderSpecList -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList ) )
            // etc/XQFT.g:471:35: ( ORDER BY | STABLE ORDER BY ) orderSpecList
            {
            // etc/XQFT.g:471:35: ( ORDER BY | STABLE ORDER BY )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ORDER) ) {
                alt50=1;
            }
            else if ( (LA50_0==STABLE) ) {
                alt50=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("471:35: ( ORDER BY | STABLE ORDER BY )", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // etc/XQFT.g:471:36: ORDER BY
                    {
                    ORDER251=(Token)input.LT(1);
                    match(input,ORDER,FOLLOW_ORDER_in_orderByClause4264); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDER.add(ORDER251);

                    BY252=(Token)input.LT(1);
                    match(input,BY,FOLLOW_BY_in_orderByClause4266); if (failed) return retval;
                    if ( backtracking==0 ) stream_BY.add(BY252);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:471:47: STABLE ORDER BY
                    {
                    STABLE253=(Token)input.LT(1);
                    match(input,STABLE,FOLLOW_STABLE_in_orderByClause4270); if (failed) return retval;
                    if ( backtracking==0 ) stream_STABLE.add(STABLE253);

                    ORDER254=(Token)input.LT(1);
                    match(input,ORDER,FOLLOW_ORDER_in_orderByClause4272); if (failed) return retval;
                    if ( backtracking==0 ) stream_ORDER.add(ORDER254);

                    BY255=(Token)input.LT(1);
                    match(input,BY,FOLLOW_BY_in_orderByClause4274); if (failed) return retval;
                    if ( backtracking==0 ) stream_BY.add(BY255);


                    }
                    break;

            }

            pushFollow(FOLLOW_orderSpecList_in_orderByClause4277);
            orderSpecList256=orderSpecList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_orderSpecList.add(orderSpecList256.getTree());

            // AST REWRITE
            // elements: orderSpecList, STABLE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 472:53: -> ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList )
            {
                // etc/XQFT.g:472:56: ^( AST_ORDERBYCLAUSE ( STABLE )? orderSpecList )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_ORDERBYCLAUSE, "AST_ORDERBYCLAUSE"), root_1);

                // etc/XQFT.g:472:76: ( STABLE )?
                if ( stream_STABLE.hasNext() ) {
                    adaptor.addChild(root_1, stream_STABLE.next());

                }
                stream_STABLE.reset();
                adaptor.addChild(root_1, stream_orderSpecList.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderByClause

    public static class orderSpecList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderSpecList
    // etc/XQFT.g:474:4: orderSpecList : orderSpec ( COMMASi orderSpec )* -> ( orderSpec )+ ;
    public final orderSpecList_return orderSpecList() throws RecognitionException {
        orderSpecList_return retval = new orderSpecList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMASi258=null;
        orderSpec_return orderSpec257 = null;

        orderSpec_return orderSpec259 = null;


        XQFTTree COMMASi258_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleSubtreeStream stream_orderSpec=new RewriteRuleSubtreeStream(adaptor,"rule orderSpec");
        try {
            // etc/XQFT.g:474:34: ( orderSpec ( COMMASi orderSpec )* -> ( orderSpec )+ )
            // etc/XQFT.g:474:36: orderSpec ( COMMASi orderSpec )*
            {
            pushFollow(FOLLOW_orderSpec_in_orderSpecList4367);
            orderSpec257=orderSpec();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_orderSpec.add(orderSpec257.getTree());
            // etc/XQFT.g:474:46: ( COMMASi orderSpec )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==COMMASi) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // etc/XQFT.g:474:47: COMMASi orderSpec
            	    {
            	    COMMASi258=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_orderSpecList4370); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi258);

            	    pushFollow(FOLLOW_orderSpec_in_orderSpecList4372);
            	    orderSpec259=orderSpec();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_orderSpec.add(orderSpec259.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            // AST REWRITE
            // elements: orderSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 475:53: -> ( orderSpec )+
            {
                if ( !(stream_orderSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderSpec.hasNext() ) {
                    adaptor.addChild(root_0, stream_orderSpec.next());

                }
                stream_orderSpec.reset();

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderSpecList

    public static class orderSpec_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderSpec
    // etc/XQFT.g:477:5: orderSpec : exprSingle orderModifier ;
    public final orderSpec_return orderSpec() throws RecognitionException {
        orderSpec_return retval = new orderSpec_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        exprSingle_return exprSingle260 = null;

        orderModifier_return orderModifier261 = null;



        try {
            // etc/XQFT.g:477:35: ( exprSingle orderModifier )
            // etc/XQFT.g:477:37: exprSingle orderModifier
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_exprSingle_in_orderSpec4463);
            exprSingle260=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, exprSingle260.getTree());
            pushFollow(FOLLOW_orderModifier_in_orderSpec4465);
            orderModifier261=orderModifier();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, orderModifier261.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderSpec

    public static class orderModifier_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderModifier
    // etc/XQFT.g:479:6: orderModifier : ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? ;
    public final orderModifier_return orderModifier() throws RecognitionException {
        orderModifier_return retval = new orderModifier_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set262=null;
        Token EMPTY263=null;
        Token set264=null;
        Token COLLATION265=null;
        uriLiteral_return uriLiteral266 = null;


        XQFTTree set262_tree=null;
        XQFTTree EMPTY263_tree=null;
        XQFTTree set264_tree=null;
        XQFTTree COLLATION265_tree=null;

        try {
            // etc/XQFT.g:479:36: ( ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )? )
            // etc/XQFT.g:479:38: ( ASCENDING | DESCENDING )? ( EMPTY ( GREATEST | LEAST ) )? ( COLLATION uriLiteral )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:479:38: ( ASCENDING | DESCENDING )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASCENDING||LA52_0==DESCENDING) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // etc/XQFT.g:
                    {
                    set262=(Token)input.LT(1);
                    if ( input.LA(1)==ASCENDING||input.LA(1)==DESCENDING ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set262));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderModifier4494);    throw mse;
                    }


                    }
                    break;

            }

            // etc/XQFT.g:479:64: ( EMPTY ( GREATEST | LEAST ) )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==EMPTY) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // etc/XQFT.g:479:65: EMPTY ( GREATEST | LEAST )
                    {
                    EMPTY263=(Token)input.LT(1);
                    match(input,EMPTY,FOLLOW_EMPTY_in_orderModifier4504); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EMPTY263_tree = (XQFTTree)adaptor.create(EMPTY263);
                    adaptor.addChild(root_0, EMPTY263_tree);
                    }
                    set264=(Token)input.LT(1);
                    if ( input.LA(1)==GREATEST||input.LA(1)==LEAST ) {
                        input.consume();
                        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set264));
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_orderModifier4506);    throw mse;
                    }


                    }
                    break;

            }

            // etc/XQFT.g:479:92: ( COLLATION uriLiteral )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==COLLATION) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // etc/XQFT.g:479:93: COLLATION uriLiteral
                    {
                    COLLATION265=(Token)input.LT(1);
                    match(input,COLLATION,FOLLOW_COLLATION_in_orderModifier4517); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLLATION265_tree = (XQFTTree)adaptor.create(COLLATION265);
                    adaptor.addChild(root_0, COLLATION265_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_orderModifier4519);
                    uriLiteral266=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral266.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderModifier

    public static class quantifiedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start quantifiedExpr
    // etc/XQFT.g:485:2: quantifiedExpr : quant= ( SOME | EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle ) ;
    public final quantifiedExpr_return quantifiedExpr() throws RecognitionException {
        quantifiedExpr_return retval = new quantifiedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token quant=null;
        Token SOME267=null;
        Token EVERY268=null;
        Token COMMASi270=null;
        Token SATISFIES272=null;
        quantifiedExprTupleDef_return quantifiedExprTupleDef269 = null;

        quantifiedExprTupleDef_return quantifiedExprTupleDef271 = null;

        exprSingle_return exprSingle273 = null;


        XQFTTree quant_tree=null;
        XQFTTree SOME267_tree=null;
        XQFTTree EVERY268_tree=null;
        XQFTTree COMMASi270_tree=null;
        XQFTTree SATISFIES272_tree=null;
        RewriteRuleTokenStream stream_EVERY=new RewriteRuleTokenStream(adaptor,"token EVERY");
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_SATISFIES=new RewriteRuleTokenStream(adaptor,"token SATISFIES");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleSubtreeStream stream_quantifiedExprTupleDef=new RewriteRuleSubtreeStream(adaptor,"rule quantifiedExprTupleDef");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:485:33: (quant= ( SOME | EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle ) )
            // etc/XQFT.g:485:35: quant= ( SOME | EVERY ) quantifiedExprTupleDef ( COMMASi quantifiedExprTupleDef )* SATISFIES exprSingle
            {
            // etc/XQFT.g:485:41: ( SOME | EVERY )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==SOME) ) {
                alt55=1;
            }
            else if ( (LA55_0==EVERY) ) {
                alt55=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("485:41: ( SOME | EVERY )", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // etc/XQFT.g:485:42: SOME
                    {
                    SOME267=(Token)input.LT(1);
                    match(input,SOME,FOLLOW_SOME_in_quantifiedExpr4557); if (failed) return retval;
                    if ( backtracking==0 ) stream_SOME.add(SOME267);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:485:49: EVERY
                    {
                    EVERY268=(Token)input.LT(1);
                    match(input,EVERY,FOLLOW_EVERY_in_quantifiedExpr4561); if (failed) return retval;
                    if ( backtracking==0 ) stream_EVERY.add(EVERY268);


                    }
                    break;

            }

            pushFollow(FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4564);
            quantifiedExprTupleDef269=quantifiedExprTupleDef();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_quantifiedExprTupleDef.add(quantifiedExprTupleDef269.getTree());
            // etc/XQFT.g:486:13: ( COMMASi quantifiedExprTupleDef )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMASi) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // etc/XQFT.g:486:14: COMMASi quantifiedExprTupleDef
            	    {
            	    COMMASi270=(Token)input.LT(1);
            	    match(input,COMMASi,FOLLOW_COMMASi_in_quantifiedExpr4579); if (failed) return retval;
            	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi270);

            	    pushFollow(FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4581);
            	    quantifiedExprTupleDef271=quantifiedExprTupleDef();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_quantifiedExprTupleDef.add(quantifiedExprTupleDef271.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            SATISFIES272=(Token)input.LT(1);
            match(input,SATISFIES,FOLLOW_SATISFIES_in_quantifiedExpr4585); if (failed) return retval;
            if ( backtracking==0 ) stream_SATISFIES.add(SATISFIES272);

            pushFollow(FOLLOW_exprSingle_in_quantifiedExpr4587);
            exprSingle273=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle273.getTree());

            // AST REWRITE
            // elements: exprSingle, quantifiedExprTupleDef, quant
            // token labels: quant
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_quant=new RewriteRuleTokenStream(adaptor,"token quant",quant);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 487:49: -> ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle )
            {
                // etc/XQFT.g:487:52: ^( AST_QUANTIFIEDEXPR $quant ( quantifiedExprTupleDef )+ exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_QUANTIFIEDEXPR, "AST_QUANTIFIEDEXPR"), root_1);

                adaptor.addChild(root_1, stream_quant.next());
                if ( !(stream_quantifiedExprTupleDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_quantifiedExprTupleDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantifiedExprTupleDef.next());

                }
                stream_quantifiedExprTupleDef.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end quantifiedExpr

    public static class quantifiedExprTupleDef_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start quantifiedExprTupleDef
    // etc/XQFT.g:489:9: quantifiedExprTupleDef : DOLLARSi varName ( typeDeclaration )? exprSingle -> varName ( typeDeclaration )? exprSingle ;
    public final quantifiedExprTupleDef_return quantifiedExprTupleDef() throws RecognitionException {
        quantifiedExprTupleDef_return retval = new quantifiedExprTupleDef_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi274=null;
        varName_return varName275 = null;

        typeDeclaration_return typeDeclaration276 = null;

        exprSingle_return exprSingle277 = null;


        XQFTTree DOLLARSi274_tree=null;
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            // etc/XQFT.g:489:45: ( DOLLARSi varName ( typeDeclaration )? exprSingle -> varName ( typeDeclaration )? exprSingle )
            // etc/XQFT.g:489:47: DOLLARSi varName ( typeDeclaration )? exprSingle
            {
            DOLLARSi274=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_quantifiedExprTupleDef4678); if (failed) return retval;
            if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi274);

            pushFollow(FOLLOW_varName_in_quantifiedExprTupleDef4680);
            varName275=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_varName.add(varName275.getTree());
            // etc/XQFT.g:489:64: ( typeDeclaration )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==AS) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // etc/XQFT.g:489:64: typeDeclaration
                    {
                    pushFollow(FOLLOW_typeDeclaration_in_quantifiedExprTupleDef4682);
                    typeDeclaration276=typeDeclaration();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_typeDeclaration.add(typeDeclaration276.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_exprSingle_in_quantifiedExprTupleDef4685);
            exprSingle277=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle277.getTree());

            // AST REWRITE
            // elements: typeDeclaration, varName, exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 490:49: -> varName ( typeDeclaration )? exprSingle
            {
                adaptor.addChild(root_0, stream_varName.next());
                // etc/XQFT.g:490:60: ( typeDeclaration )?
                if ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_typeDeclaration.next());

                }
                stream_typeDeclaration.reset();
                adaptor.addChild(root_0, stream_exprSingle.next());

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end quantifiedExprTupleDef

    public static class typeswitchExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start typeswitchExpr
    // etc/XQFT.g:494:2: typeswitchExpr : TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle ) ;
    public final typeswitchExpr_return typeswitchExpr() throws RecognitionException {
        typeswitchExpr_return retval = new typeswitchExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TYPESWITCH278=null;
        Token LPARSi279=null;
        Token RPARSi281=null;
        Token DEFAULT283=null;
        Token DOLLARSi284=null;
        Token RETURN286=null;
        expr_return expr280 = null;

        caseClause_return caseClause282 = null;

        varName_return varName285 = null;

        exprSingle_return exprSingle287 = null;


        XQFTTree TYPESWITCH278_tree=null;
        XQFTTree LPARSi279_tree=null;
        XQFTTree RPARSi281_tree=null;
        XQFTTree DEFAULT283_tree=null;
        XQFTTree DOLLARSi284_tree=null;
        XQFTTree RETURN286_tree=null;
        RewriteRuleTokenStream stream_TYPESWITCH=new RewriteRuleTokenStream(adaptor,"token TYPESWITCH");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_caseClause=new RewriteRuleSubtreeStream(adaptor,"rule caseClause");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:494:33: ( TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle ) )
            // etc/XQFT.g:494:35: TYPESWITCH LPARSi expr RPARSi ( caseClause )+ DEFAULT ( DOLLARSi varName )? RETURN exprSingle
            {
            TYPESWITCH278=(Token)input.LT(1);
            match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_typeswitchExpr4771); if (failed) return retval;
            if ( backtracking==0 ) stream_TYPESWITCH.add(TYPESWITCH278);

            LPARSi279=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_typeswitchExpr4773); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi279);

            pushFollow(FOLLOW_expr_in_typeswitchExpr4775);
            expr280=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr280.getTree());
            RPARSi281=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_typeswitchExpr4777); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi281);

            // etc/XQFT.g:494:65: ( caseClause )+
            int cnt58=0;
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==CASE) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // etc/XQFT.g:494:65: caseClause
            	    {
            	    pushFollow(FOLLOW_caseClause_in_typeswitchExpr4779);
            	    caseClause282=caseClause();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) stream_caseClause.add(caseClause282.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt58 >= 1 ) break loop58;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(58, input);
                        throw eee;
                }
                cnt58++;
            } while (true);

            DEFAULT283=(Token)input.LT(1);
            match(input,DEFAULT,FOLLOW_DEFAULT_in_typeswitchExpr4795); if (failed) return retval;
            if ( backtracking==0 ) stream_DEFAULT.add(DEFAULT283);

            // etc/XQFT.g:495:21: ( DOLLARSi varName )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==DOLLARSi) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // etc/XQFT.g:495:22: DOLLARSi varName
                    {
                    DOLLARSi284=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_typeswitchExpr4798); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi284);

                    pushFollow(FOLLOW_varName_in_typeswitchExpr4800);
                    varName285=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(varName285.getTree());

                    }
                    break;

            }

            RETURN286=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_typeswitchExpr4804); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN286);

            pushFollow(FOLLOW_exprSingle_in_typeswitchExpr4806);
            exprSingle287=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle287.getTree());

            // AST REWRITE
            // elements: varName, exprSingle, caseClause, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 496:49: -> ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle )
            {
                // etc/XQFT.g:496:52: ^( AST_TYPESWITCHEXPR expr ( caseClause )+ ( varName )? exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_TYPESWITCHEXPR, "AST_TYPESWITCHEXPR"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                if ( !(stream_caseClause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_caseClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_caseClause.next());

                }
                stream_caseClause.reset();
                // etc/XQFT.g:496:90: ( varName )?
                if ( stream_varName.hasNext() ) {
                    adaptor.addChild(root_1, stream_varName.next());

                }
                stream_varName.reset();
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end typeswitchExpr

    public static class caseClause_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start caseClause
    // etc/XQFT.g:500:3: caseClause : CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle ) ;
    public final caseClause_return caseClause() throws RecognitionException {
        caseClause_return retval = new caseClause_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CASE288=null;
        Token DOLLARSi289=null;
        Token AS291=null;
        Token RETURN293=null;
        varName_return varName290 = null;

        sequenceType_return sequenceType292 = null;

        exprSingle_return exprSingle294 = null;


        XQFTTree CASE288_tree=null;
        XQFTTree DOLLARSi289_tree=null;
        XQFTTree AS291_tree=null;
        XQFTTree RETURN293_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_DOLLARSi=new RewriteRuleTokenStream(adaptor,"token DOLLARSi");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleTokenStream stream_RETURN=new RewriteRuleTokenStream(adaptor,"token RETURN");
        RewriteRuleSubtreeStream stream_varName=new RewriteRuleSubtreeStream(adaptor,"rule varName");
        RewriteRuleSubtreeStream stream_sequenceType=new RewriteRuleSubtreeStream(adaptor,"rule sequenceType");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:500:34: ( CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle ) )
            // etc/XQFT.g:500:36: CASE ( DOLLARSi varName AS )? sequenceType RETURN exprSingle
            {
            CASE288=(Token)input.LT(1);
            match(input,CASE,FOLLOW_CASE_in_caseClause4902); if (failed) return retval;
            if ( backtracking==0 ) stream_CASE.add(CASE288);

            // etc/XQFT.g:500:41: ( DOLLARSi varName AS )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==DOLLARSi) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // etc/XQFT.g:500:42: DOLLARSi varName AS
                    {
                    DOLLARSi289=(Token)input.LT(1);
                    match(input,DOLLARSi,FOLLOW_DOLLARSi_in_caseClause4905); if (failed) return retval;
                    if ( backtracking==0 ) stream_DOLLARSi.add(DOLLARSi289);

                    pushFollow(FOLLOW_varName_in_caseClause4907);
                    varName290=varName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_varName.add(varName290.getTree());
                    AS291=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_caseClause4909); if (failed) return retval;
                    if ( backtracking==0 ) stream_AS.add(AS291);


                    }
                    break;

            }

            pushFollow(FOLLOW_sequenceType_in_caseClause4913);
            sequenceType292=sequenceType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_sequenceType.add(sequenceType292.getTree());
            RETURN293=(Token)input.LT(1);
            match(input,RETURN,FOLLOW_RETURN_in_caseClause4915); if (failed) return retval;
            if ( backtracking==0 ) stream_RETURN.add(RETURN293);

            pushFollow(FOLLOW_exprSingle_in_caseClause4917);
            exprSingle294=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle294.getTree());

            // AST REWRITE
            // elements: exprSingle, sequenceType, varName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 501:53: -> ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle )
            {
                // etc/XQFT.g:501:56: ^( AST_CASECLAUSE ( varName )? sequenceType exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_CASECLAUSE, "AST_CASECLAUSE"), root_1);

                // etc/XQFT.g:501:73: ( varName )?
                if ( stream_varName.hasNext() ) {
                    adaptor.addChild(root_1, stream_varName.next());

                }
                stream_varName.reset();
                adaptor.addChild(root_1, stream_sequenceType.next());
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end caseClause

    public static class ifExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifExpr
    // etc/XQFT.g:509:2: ifExpr : IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle -> ^( AST_IFEXPR expr exprSingle exprSingle ) ;
    public final ifExpr_return ifExpr() throws RecognitionException {
        ifExpr_return retval = new ifExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token IF295=null;
        Token LPARSi296=null;
        Token RPARSi298=null;
        Token THEN299=null;
        Token ELSE301=null;
        expr_return expr297 = null;

        exprSingle_return exprSingle300 = null;

        exprSingle_return exprSingle302 = null;


        XQFTTree IF295_tree=null;
        XQFTTree LPARSi296_tree=null;
        XQFTTree RPARSi298_tree=null;
        XQFTTree THEN299_tree=null;
        XQFTTree ELSE301_tree=null;
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:509:33: ( IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle -> ^( AST_IFEXPR expr exprSingle exprSingle ) )
            // etc/XQFT.g:509:35: IF LPARSi expr RPARSi THEN exprSingle ELSE exprSingle
            {
            IF295=(Token)input.LT(1);
            match(input,IF,FOLLOW_IF_in_ifExpr5023); if (failed) return retval;
            if ( backtracking==0 ) stream_IF.add(IF295);

            LPARSi296=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_ifExpr5025); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi296);

            pushFollow(FOLLOW_expr_in_ifExpr5027);
            expr297=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_expr.add(expr297.getTree());
            RPARSi298=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_ifExpr5029); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi298);

            THEN299=(Token)input.LT(1);
            match(input,THEN,FOLLOW_THEN_in_ifExpr5031); if (failed) return retval;
            if ( backtracking==0 ) stream_THEN.add(THEN299);

            pushFollow(FOLLOW_exprSingle_in_ifExpr5033);
            exprSingle300=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle300.getTree());
            ELSE301=(Token)input.LT(1);
            match(input,ELSE,FOLLOW_ELSE_in_ifExpr5035); if (failed) return retval;
            if ( backtracking==0 ) stream_ELSE.add(ELSE301);

            pushFollow(FOLLOW_exprSingle_in_ifExpr5037);
            exprSingle302=exprSingle();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_exprSingle.add(exprSingle302.getTree());

            // AST REWRITE
            // elements: exprSingle, expr, exprSingle
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 510:49: -> ^( AST_IFEXPR expr exprSingle exprSingle )
            {
                // etc/XQFT.g:510:52: ^( AST_IFEXPR expr exprSingle exprSingle )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_IFEXPR, "AST_IFEXPR"), root_1);

                adaptor.addChild(root_1, stream_expr.next());
                adaptor.addChild(root_1, stream_exprSingle.next());
                adaptor.addChild(root_1, stream_exprSingle.next());

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifExpr

    public static class orExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orExpr
    // etc/XQFT.g:517:2: orExpr : andExpr ( OR andExpr )* ;
    public final orExpr_return orExpr() throws RecognitionException {
        orExpr_return retval = new orExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OR304=null;
        andExpr_return andExpr303 = null;

        andExpr_return andExpr305 = null;


        XQFTTree OR304_tree=null;

        try {
            // etc/XQFT.g:517:33: ( andExpr ( OR andExpr )* )
            // etc/XQFT.g:517:35: andExpr ( OR andExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_andExpr_in_orExpr5139);
            andExpr303=andExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, andExpr303.getTree());
            // etc/XQFT.g:517:43: ( OR andExpr )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==OR) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // etc/XQFT.g:517:45: OR andExpr
            	    {
            	    OR304=(Token)input.LT(1);
            	    match(input,OR,FOLLOW_OR_in_orExpr5143); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    OR304_tree = (XQFTTree)adaptor.create(OR304);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(OR304_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_andExpr_in_orExpr5146);
            	    andExpr305=andExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, andExpr305.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orExpr

    public static class andExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start andExpr
    // etc/XQFT.g:518:3: andExpr : comparisonExpr ( AND comparisonExpr )* ;
    public final andExpr_return andExpr() throws RecognitionException {
        andExpr_return retval = new andExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AND307=null;
        comparisonExpr_return comparisonExpr306 = null;

        comparisonExpr_return comparisonExpr308 = null;


        XQFTTree AND307_tree=null;

        try {
            // etc/XQFT.g:518:34: ( comparisonExpr ( AND comparisonExpr )* )
            // etc/XQFT.g:518:36: comparisonExpr ( AND comparisonExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_comparisonExpr_in_andExpr5181);
            comparisonExpr306=comparisonExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, comparisonExpr306.getTree());
            // etc/XQFT.g:518:51: ( AND comparisonExpr )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==AND) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // etc/XQFT.g:518:53: AND comparisonExpr
            	    {
            	    AND307=(Token)input.LT(1);
            	    match(input,AND,FOLLOW_AND_in_andExpr5185); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    AND307_tree = (XQFTTree)adaptor.create(AND307);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(AND307_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_comparisonExpr_in_andExpr5188);
            	    comparisonExpr308=comparisonExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, comparisonExpr308.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end andExpr

    public static class comparisonExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start comparisonExpr
    // etc/XQFT.g:524:1: comparisonExpr : ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )? ;
    public final comparisonExpr_return comparisonExpr() throws RecognitionException {
        comparisonExpr_return retval = new comparisonExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftContainsExpr_return ftContainsExpr309 = null;

        valueComp_return valueComp310 = null;

        generalComp_return generalComp311 = null;

        nodeComp_return nodeComp312 = null;

        ftContainsExpr_return ftContainsExpr313 = null;



        try {
            // etc/XQFT.g:524:32: ( ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )? )
            // etc/XQFT.g:524:34: ftContainsExpr ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr5222);
            ftContainsExpr309=ftContainsExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftContainsExpr309.getTree());
            // etc/XQFT.g:524:49: ( ( valueComp | generalComp | nodeComp ) ftContainsExpr )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==EQ||LA64_0==GE||LA64_0==GT||LA64_0==IS||LA64_0==LE||LA64_0==LT||LA64_0==NE||LA64_0==EQSi||(LA64_0>=NEQSi && LA64_0<=NODEAFTERSi)) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // etc/XQFT.g:524:51: ( valueComp | generalComp | nodeComp ) ftContainsExpr
                    {
                    // etc/XQFT.g:524:51: ( valueComp | generalComp | nodeComp )
                    int alt63=3;
                    switch ( input.LA(1) ) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE:
                        {
                        alt63=1;
                        }
                        break;
                    case EQSi:
                    case NEQSi:
                    case LTSi:
                    case LTOREQSi:
                    case GTSi:
                    case GTOREQSi:
                        {
                        alt63=2;
                        }
                        break;
                    case IS:
                    case NODEBEFORESi:
                    case NODEAFTERSi:
                        {
                        alt63=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("524:51: ( valueComp | generalComp | nodeComp )", 63, 0, input);

                        throw nvae;
                    }

                    switch (alt63) {
                        case 1 :
                            // etc/XQFT.g:524:52: valueComp
                            {
                            pushFollow(FOLLOW_valueComp_in_comparisonExpr5227);
                            valueComp310=valueComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, valueComp310.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:524:64: generalComp
                            {
                            pushFollow(FOLLOW_generalComp_in_comparisonExpr5231);
                            generalComp311=generalComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, generalComp311.getTree());

                            }
                            break;
                        case 3 :
                            // etc/XQFT.g:524:78: nodeComp
                            {
                            pushFollow(FOLLOW_nodeComp_in_comparisonExpr5235);
                            nodeComp312=nodeComp();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, nodeComp312.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_ftContainsExpr_in_comparisonExpr5239);
                    ftContainsExpr313=ftContainsExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftContainsExpr313.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end comparisonExpr

    public static class ftContainsExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftContainsExpr
    // etc/XQFT.g:525:2: ftContainsExpr : rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )? ;
    public final ftContainsExpr_return ftContainsExpr() throws RecognitionException {
        ftContainsExpr_return retval = new ftContainsExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTCONTAINS315=null;
        rangeExpr_return rangeExpr314 = null;

        ftSelection_return ftSelection316 = null;

        ftIgnoreOption_return ftIgnoreOption317 = null;


        XQFTTree FTCONTAINS315_tree=null;

        try {
            // etc/XQFT.g:525:33: ( rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )? )
            // etc/XQFT.g:525:35: rangeExpr ( FTCONTAINS ftSelection ( ftIgnoreOption )? )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_rangeExpr_in_ftContainsExpr5266);
            rangeExpr314=rangeExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, rangeExpr314.getTree());
            // etc/XQFT.g:525:45: ( FTCONTAINS ftSelection ( ftIgnoreOption )? )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==FTCONTAINS) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // etc/XQFT.g:525:47: FTCONTAINS ftSelection ( ftIgnoreOption )?
                    {
                    FTCONTAINS315=(Token)input.LT(1);
                    match(input,FTCONTAINS,FOLLOW_FTCONTAINS_in_ftContainsExpr5270); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FTCONTAINS315_tree = (XQFTTree)adaptor.create(FTCONTAINS315);
                    root_0 = (XQFTTree)adaptor.becomeRoot(FTCONTAINS315_tree, root_0);
                    }
                    pushFollow(FOLLOW_ftSelection_in_ftContainsExpr5273);
                    ftSelection316=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection316.getTree());
                    // etc/XQFT.g:525:71: ( ftIgnoreOption )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==WITHOUT) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // etc/XQFT.g:525:71: ftIgnoreOption
                            {
                            pushFollow(FOLLOW_ftIgnoreOption_in_ftContainsExpr5275);
                            ftIgnoreOption317=ftIgnoreOption();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftIgnoreOption317.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftContainsExpr

    public static class rangeExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rangeExpr
    // etc/XQFT.g:526:3: rangeExpr : additiveExpr ( TO additiveExpr )? ;
    public final rangeExpr_return rangeExpr() throws RecognitionException {
        rangeExpr_return retval = new rangeExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TO319=null;
        additiveExpr_return additiveExpr318 = null;

        additiveExpr_return additiveExpr320 = null;


        XQFTTree TO319_tree=null;

        try {
            // etc/XQFT.g:526:34: ( additiveExpr ( TO additiveExpr )? )
            // etc/XQFT.g:526:36: additiveExpr ( TO additiveExpr )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpr_in_rangeExpr5310);
            additiveExpr318=additiveExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr318.getTree());
            // etc/XQFT.g:526:49: ( TO additiveExpr )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==TO) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // etc/XQFT.g:526:51: TO additiveExpr
                    {
                    TO319=(Token)input.LT(1);
                    match(input,TO,FOLLOW_TO_in_rangeExpr5314); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TO319_tree = (XQFTTree)adaptor.create(TO319);
                    root_0 = (XQFTTree)adaptor.becomeRoot(TO319_tree, root_0);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_rangeExpr5317);
                    additiveExpr320=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr320.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end rangeExpr

    public static class additiveExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start additiveExpr
    // etc/XQFT.g:527:4: additiveExpr : multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )* ;
    public final additiveExpr_return additiveExpr() throws RecognitionException {
        additiveExpr_return retval = new additiveExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set322=null;
        multiplicativeExpr_return multiplicativeExpr321 = null;

        multiplicativeExpr_return multiplicativeExpr323 = null;


        XQFTTree set322_tree=null;

        try {
            // etc/XQFT.g:527:35: ( multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )* )
            // etc/XQFT.g:527:37: multiplicativeExpr ( ( PLUSSi | MINUSSi ) multiplicativeExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr5348);
            multiplicativeExpr321=multiplicativeExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpr321.getTree());
            // etc/XQFT.g:527:56: ( ( PLUSSi | MINUSSi ) multiplicativeExpr )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( ((LA68_0>=PLUSSi && LA68_0<=MINUSSi)) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // etc/XQFT.g:527:58: ( PLUSSi | MINUSSi ) multiplicativeExpr
            	    {
            	    set322=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUSSi && input.LA(1)<=MINUSSi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set322), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_additiveExpr5352);    throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpr_in_additiveExpr5361);
            	    multiplicativeExpr323=multiplicativeExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, multiplicativeExpr323.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end additiveExpr

    public static class multiplicativeExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start multiplicativeExpr
    // etc/XQFT.g:528:5: multiplicativeExpr : unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )* ;
    public final multiplicativeExpr_return multiplicativeExpr() throws RecognitionException {
        multiplicativeExpr_return retval = new multiplicativeExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set325=null;
        unionExpr_return unionExpr324 = null;

        unionExpr_return unionExpr326 = null;


        XQFTTree set325_tree=null;

        try {
            // etc/XQFT.g:528:36: ( unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )* )
            // etc/XQFT.g:528:38: unionExpr ( ( STARSi | DIV | IDIV | MOD ) unionExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr5387);
            unionExpr324=unionExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr324.getTree());
            // etc/XQFT.g:528:48: ( ( STARSi | DIV | IDIV | MOD ) unionExpr )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==DIV||LA69_0==IDIV||LA69_0==MOD||LA69_0==STARSi) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // etc/XQFT.g:528:50: ( STARSi | DIV | IDIV | MOD ) unionExpr
            	    {
            	    set325=(Token)input.LT(1);
            	    if ( input.LA(1)==DIV||input.LA(1)==IDIV||input.LA(1)==MOD||input.LA(1)==STARSi ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set325), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_multiplicativeExpr5391);    throw mse;
            	    }

            	    pushFollow(FOLLOW_unionExpr_in_multiplicativeExpr5408);
            	    unionExpr326=unionExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr326.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end multiplicativeExpr

    public static class unionExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unionExpr
    // etc/XQFT.g:529:6: unionExpr : intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )* ;
    public final unionExpr_return unionExpr() throws RecognitionException {
        unionExpr_return retval = new unionExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set328=null;
        intersectExceptExpr_return intersectExceptExpr327 = null;

        intersectExceptExpr_return intersectExceptExpr329 = null;


        XQFTTree set328_tree=null;

        try {
            // etc/XQFT.g:529:37: ( intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )* )
            // etc/XQFT.g:529:39: intersectExceptExpr ( ( UNION | PIPESi ) intersectExceptExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr5444);
            intersectExceptExpr327=intersectExceptExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, intersectExceptExpr327.getTree());
            // etc/XQFT.g:529:59: ( ( UNION | PIPESi ) intersectExceptExpr )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==UNION||LA70_0==PIPESi) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // etc/XQFT.g:529:61: ( UNION | PIPESi ) intersectExceptExpr
            	    {
            	    set328=(Token)input.LT(1);
            	    if ( input.LA(1)==UNION||input.LA(1)==PIPESi ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set328), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_unionExpr5448);    throw mse;
            	    }

            	    pushFollow(FOLLOW_intersectExceptExpr_in_unionExpr5457);
            	    intersectExceptExpr329=intersectExceptExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, intersectExceptExpr329.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unionExpr

    public static class intersectExceptExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start intersectExceptExpr
    // etc/XQFT.g:530:7: intersectExceptExpr : instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )* ;
    public final intersectExceptExpr_return intersectExceptExpr() throws RecognitionException {
        intersectExceptExpr_return retval = new intersectExceptExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set331=null;
        instanceofExpr_return instanceofExpr330 = null;

        instanceofExpr_return instanceofExpr332 = null;


        XQFTTree set331_tree=null;

        try {
            // etc/XQFT.g:530:38: ( instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )* )
            // etc/XQFT.g:530:40: instanceofExpr ( ( INTERSECT | EXCEPT ) instanceofExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr5484);
            instanceofExpr330=instanceofExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, instanceofExpr330.getTree());
            // etc/XQFT.g:530:55: ( ( INTERSECT | EXCEPT ) instanceofExpr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==EXCEPT||LA71_0==INTERSECT) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // etc/XQFT.g:530:57: ( INTERSECT | EXCEPT ) instanceofExpr
            	    {
            	    set331=(Token)input.LT(1);
            	    if ( input.LA(1)==EXCEPT||input.LA(1)==INTERSECT ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set331), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_intersectExceptExpr5488);    throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceofExpr_in_intersectExceptExpr5497);
            	    instanceofExpr332=instanceofExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, instanceofExpr332.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end intersectExceptExpr

    public static class instanceofExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start instanceofExpr
    // etc/XQFT.g:531:8: instanceofExpr : treatExpr ( INSTANCE OF sequenceType )? ;
    public final instanceofExpr_return instanceofExpr() throws RecognitionException {
        instanceofExpr_return retval = new instanceofExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token INSTANCE334=null;
        Token OF335=null;
        treatExpr_return treatExpr333 = null;

        sequenceType_return sequenceType336 = null;


        XQFTTree INSTANCE334_tree=null;
        XQFTTree OF335_tree=null;

        try {
            // etc/XQFT.g:531:39: ( treatExpr ( INSTANCE OF sequenceType )? )
            // etc/XQFT.g:531:41: treatExpr ( INSTANCE OF sequenceType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_treatExpr_in_instanceofExpr5530);
            treatExpr333=treatExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, treatExpr333.getTree());
            // etc/XQFT.g:531:51: ( INSTANCE OF sequenceType )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==INSTANCE) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // etc/XQFT.g:531:53: INSTANCE OF sequenceType
                    {
                    INSTANCE334=(Token)input.LT(1);
                    match(input,INSTANCE,FOLLOW_INSTANCE_in_instanceofExpr5534); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSTANCE334_tree = (XQFTTree)adaptor.create(INSTANCE334);
                    root_0 = (XQFTTree)adaptor.becomeRoot(INSTANCE334_tree, root_0);
                    }
                    OF335=(Token)input.LT(1);
                    match(input,OF,FOLLOW_OF_in_instanceofExpr5537); if (failed) return retval;
                    pushFollow(FOLLOW_sequenceType_in_instanceofExpr5540);
                    sequenceType336=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType336.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end instanceofExpr

    public static class treatExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start treatExpr
    // etc/XQFT.g:532:9: treatExpr : castableExpr ( TREAT AS sequenceType )? ;
    public final treatExpr_return treatExpr() throws RecognitionException {
        treatExpr_return retval = new treatExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TREAT338=null;
        Token AS339=null;
        castableExpr_return castableExpr337 = null;

        sequenceType_return sequenceType340 = null;


        XQFTTree TREAT338_tree=null;
        XQFTTree AS339_tree=null;

        try {
            // etc/XQFT.g:532:40: ( castableExpr ( TREAT AS sequenceType )? )
            // etc/XQFT.g:532:42: castableExpr ( TREAT AS sequenceType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_castableExpr_in_treatExpr5579);
            castableExpr337=castableExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, castableExpr337.getTree());
            // etc/XQFT.g:532:55: ( TREAT AS sequenceType )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==TREAT) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // etc/XQFT.g:532:57: TREAT AS sequenceType
                    {
                    TREAT338=(Token)input.LT(1);
                    match(input,TREAT,FOLLOW_TREAT_in_treatExpr5583); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TREAT338_tree = (XQFTTree)adaptor.create(TREAT338);
                    root_0 = (XQFTTree)adaptor.becomeRoot(TREAT338_tree, root_0);
                    }
                    AS339=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_treatExpr5586); if (failed) return retval;
                    pushFollow(FOLLOW_sequenceType_in_treatExpr5589);
                    sequenceType340=sequenceType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, sequenceType340.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end treatExpr

    public static class castableExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castableExpr
    // etc/XQFT.g:533:10: castableExpr : castExpr ( CASTABLE AS singleType )? ;
    public final castableExpr_return castableExpr() throws RecognitionException {
        castableExpr_return retval = new castableExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CASTABLE342=null;
        Token AS343=null;
        castExpr_return castExpr341 = null;

        singleType_return singleType344 = null;


        XQFTTree CASTABLE342_tree=null;
        XQFTTree AS343_tree=null;

        try {
            // etc/XQFT.g:533:41: ( castExpr ( CASTABLE AS singleType )? )
            // etc/XQFT.g:533:43: castExpr ( CASTABLE AS singleType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_castExpr_in_castableExpr5626);
            castExpr341=castExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, castExpr341.getTree());
            // etc/XQFT.g:533:52: ( CASTABLE AS singleType )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==CASTABLE) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // etc/XQFT.g:533:54: CASTABLE AS singleType
                    {
                    CASTABLE342=(Token)input.LT(1);
                    match(input,CASTABLE,FOLLOW_CASTABLE_in_castableExpr5630); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASTABLE342_tree = (XQFTTree)adaptor.create(CASTABLE342);
                    root_0 = (XQFTTree)adaptor.becomeRoot(CASTABLE342_tree, root_0);
                    }
                    AS343=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_castableExpr5633); if (failed) return retval;
                    pushFollow(FOLLOW_singleType_in_castableExpr5636);
                    singleType344=singleType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, singleType344.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end castableExpr

    public static class castExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castExpr
    // etc/XQFT.g:534:11: castExpr : unaryExpr ( CAST AS singleType )? ;
    public final castExpr_return castExpr() throws RecognitionException {
        castExpr_return retval = new castExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CAST346=null;
        Token AS347=null;
        unaryExpr_return unaryExpr345 = null;

        singleType_return singleType348 = null;


        XQFTTree CAST346_tree=null;
        XQFTTree AS347_tree=null;

        try {
            // etc/XQFT.g:534:42: ( unaryExpr ( CAST AS singleType )? )
            // etc/XQFT.g:534:44: unaryExpr ( CAST AS singleType )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpr_in_castExpr5678);
            unaryExpr345=unaryExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unaryExpr345.getTree());
            // etc/XQFT.g:534:54: ( CAST AS singleType )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==CAST) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // etc/XQFT.g:534:56: CAST AS singleType
                    {
                    CAST346=(Token)input.LT(1);
                    match(input,CAST,FOLLOW_CAST_in_castExpr5682); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CAST346_tree = (XQFTTree)adaptor.create(CAST346);
                    root_0 = (XQFTTree)adaptor.becomeRoot(CAST346_tree, root_0);
                    }
                    AS347=(Token)input.LT(1);
                    match(input,AS,FOLLOW_AS_in_castExpr5685); if (failed) return retval;
                    pushFollow(FOLLOW_singleType_in_castExpr5688);
                    singleType348=singleType();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, singleType348.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end castExpr

    public static class unaryExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unaryExpr
    // etc/XQFT.g:535:12: unaryExpr : ( ( MINUSSi | PLUSSi )* ) valueExpr ;
    public final unaryExpr_return unaryExpr() throws RecognitionException {
        unaryExpr_return retval = new unaryExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set349=null;
        valueExpr_return valueExpr350 = null;


        XQFTTree set349_tree=null;

        try {
            // etc/XQFT.g:535:43: ( ( ( MINUSSi | PLUSSi )* ) valueExpr )
            // etc/XQFT.g:535:45: ( ( MINUSSi | PLUSSi )* ) valueExpr
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:535:45: ( ( MINUSSi | PLUSSi )* )
            // etc/XQFT.g:535:46: ( MINUSSi | PLUSSi )*
            {
            // etc/XQFT.g:535:46: ( MINUSSi | PLUSSi )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( ((LA76_0>=PLUSSi && LA76_0<=MINUSSi)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // etc/XQFT.g:
            	    {
            	    set349=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUSSi && input.LA(1)<=MINUSSi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set349));
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_unaryExpr5731);    throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            pushFollow(FOLLOW_valueExpr_in_unaryExpr5742);
            valueExpr350=valueExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, valueExpr350.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unaryExpr

    public static class singleType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start singleType
    // etc/XQFT.g:537:12: singleType : atomicType ( QUESTIONSi )? ;
    public final singleType_return singleType() throws RecognitionException {
        singleType_return retval = new singleType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token QUESTIONSi352=null;
        atomicType_return atomicType351 = null;


        XQFTTree QUESTIONSi352_tree=null;

        try {
            // etc/XQFT.g:537:43: ( atomicType ( QUESTIONSi )? )
            // etc/XQFT.g:537:45: atomicType ( QUESTIONSi )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_atomicType_in_singleType5781);
            atomicType351=atomicType();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, atomicType351.getTree());
            // etc/XQFT.g:537:56: ( QUESTIONSi )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==QUESTIONSi) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // etc/XQFT.g:537:56: QUESTIONSi
                    {
                    QUESTIONSi352=(Token)input.LT(1);
                    match(input,QUESTIONSi,FOLLOW_QUESTIONSi_in_singleType5783); if (failed) return retval;
                    if ( backtracking==0 ) {
                    QUESTIONSi352_tree = (XQFTTree)adaptor.create(QUESTIONSi352);
                    adaptor.addChild(root_0, QUESTIONSi352_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end singleType

    public static class atomicType_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start atomicType
    // etc/XQFT.g:538:13: atomicType : qName ;
    public final atomicType_return atomicType() throws RecognitionException {
        atomicType_return retval = new atomicType_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName353 = null;



        try {
            // etc/XQFT.g:538:44: ( qName )
            // etc/XQFT.g:538:46: qName
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_qName_in_atomicType5823);
            qName353=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName353.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end atomicType

    public static class ftIgnoreOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftIgnoreOption
    // etc/XQFT.g:546:3: ftIgnoreOption : WITHOUT CONTENT unionExpr ;
    public final ftIgnoreOption_return ftIgnoreOption() throws RecognitionException {
        ftIgnoreOption_return retval = new ftIgnoreOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITHOUT354=null;
        Token CONTENT355=null;
        unionExpr_return unionExpr356 = null;


        XQFTTree WITHOUT354_tree=null;
        XQFTTree CONTENT355_tree=null;

        try {
            // etc/XQFT.g:546:34: ( WITHOUT CONTENT unionExpr )
            // etc/XQFT.g:546:36: WITHOUT CONTENT unionExpr
            {
            root_0 = (XQFTTree)adaptor.nil();

            WITHOUT354=(Token)input.LT(1);
            match(input,WITHOUT,FOLLOW_WITHOUT_in_ftIgnoreOption5859); if (failed) return retval;
            if ( backtracking==0 ) {
            WITHOUT354_tree = (XQFTTree)adaptor.create(WITHOUT354);
            root_0 = (XQFTTree)adaptor.becomeRoot(WITHOUT354_tree, root_0);
            }
            CONTENT355=(Token)input.LT(1);
            match(input,CONTENT,FOLLOW_CONTENT_in_ftIgnoreOption5862); if (failed) return retval;
            if ( backtracking==0 ) {
            CONTENT355_tree = (XQFTTree)adaptor.create(CONTENT355);
            adaptor.addChild(root_0, CONTENT355_tree);
            }
            pushFollow(FOLLOW_unionExpr_in_ftIgnoreOption5864);
            unionExpr356=unionExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, unionExpr356.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftIgnoreOption

    public static class valueComp_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start valueComp
    // etc/XQFT.g:550:2: valueComp : ( EQ | NE | LT | LE | GT | GE );
    public final valueComp_return valueComp() throws RecognitionException {
        valueComp_return retval = new valueComp_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set357=null;

        XQFTTree set357_tree=null;

        try {
            // etc/XQFT.g:550:33: ( EQ | NE | LT | LE | GT | GE )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set357=(Token)input.LT(1);
            if ( input.LA(1)==EQ||input.LA(1)==GE||input.LA(1)==GT||input.LA(1)==LE||input.LA(1)==LT||input.LA(1)==NE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set357));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_valueComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end valueComp

    public static class generalComp_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start generalComp
    // etc/XQFT.g:553:2: generalComp : ( EQSi | NEQSi | LTSi | LTOREQSi | GTSi | GTOREQSi );
    public final generalComp_return generalComp() throws RecognitionException {
        generalComp_return retval = new generalComp_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set358=null;

        XQFTTree set358_tree=null;

        try {
            // etc/XQFT.g:553:33: ( EQSi | NEQSi | LTSi | LTOREQSi | GTSi | GTOREQSi )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set358=(Token)input.LT(1);
            if ( input.LA(1)==EQSi||(input.LA(1)>=NEQSi && input.LA(1)<=GTOREQSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set358));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_generalComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end generalComp

    public static class nodeComp_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nodeComp
    // etc/XQFT.g:556:2: nodeComp : ( IS | NODEBEFORESi | NODEAFTERSi );
    public final nodeComp_return nodeComp() throws RecognitionException {
        nodeComp_return retval = new nodeComp_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set359=null;

        XQFTTree set359_tree=null;

        try {
            // etc/XQFT.g:556:33: ( IS | NODEBEFORESi | NODEAFTERSi )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set359=(Token)input.LT(1);
            if ( input.LA(1)==IS||(input.LA(1)>=NODEBEFORESi && input.LA(1)<=NODEAFTERSi) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set359));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_nodeComp0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nodeComp

    public static class ftSelection_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftSelection
    // etc/XQFT.g:560:1: ftSelection : ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )? ;
    public final ftSelection_return ftSelection() throws RecognitionException {
        ftSelection_return retval = new ftSelection_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WEIGHT362=null;
        ftOr_return ftOr360 = null;

        ftPosFilter_return ftPosFilter361 = null;

        rangeExpr_return rangeExpr363 = null;


        XQFTTree WEIGHT362_tree=null;

        try {
            // etc/XQFT.g:560:32: ( ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )? )
            // etc/XQFT.g:560:34: ftOr ( ftPosFilter )* ( WEIGHT rangeExpr )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftOr_in_ftSelection6034);
            ftOr360=ftOr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftOr360.getTree());
            // etc/XQFT.g:560:39: ( ftPosFilter )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==AT||(LA78_0>=DIFFERENT && LA78_0<=DISTANCE)||LA78_0==ENTIRE||LA78_0==ORDERED||LA78_0==SAME||LA78_0==WINDOW) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // etc/XQFT.g:560:39: ftPosFilter
            	    {
            	    pushFollow(FOLLOW_ftPosFilter_in_ftSelection6036);
            	    ftPosFilter361=ftPosFilter();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftPosFilter361.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            // etc/XQFT.g:560:52: ( WEIGHT rangeExpr )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==WEIGHT) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // etc/XQFT.g:560:53: WEIGHT rangeExpr
                    {
                    WEIGHT362=(Token)input.LT(1);
                    match(input,WEIGHT,FOLLOW_WEIGHT_in_ftSelection6040); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WEIGHT362_tree = (XQFTTree)adaptor.create(WEIGHT362);
                    adaptor.addChild(root_0, WEIGHT362_tree);
                    }
                    pushFollow(FOLLOW_rangeExpr_in_ftSelection6042);
                    rangeExpr363=rangeExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, rangeExpr363.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftSelection

    public static class ftOr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOr
    // etc/XQFT.g:561:2: ftOr : ftAnd ( FTOR ftAnd )* ;
    public final ftOr_return ftOr() throws RecognitionException {
        ftOr_return retval = new ftOr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTOR365=null;
        ftAnd_return ftAnd364 = null;

        ftAnd_return ftAnd366 = null;


        XQFTTree FTOR365_tree=null;

        try {
            // etc/XQFT.g:561:33: ( ftAnd ( FTOR ftAnd )* )
            // etc/XQFT.g:561:35: ftAnd ( FTOR ftAnd )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftAnd_in_ftOr6078);
            ftAnd364=ftAnd();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftAnd364.getTree());
            // etc/XQFT.g:561:41: ( FTOR ftAnd )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==FTOR) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // etc/XQFT.g:561:43: FTOR ftAnd
            	    {
            	    FTOR365=(Token)input.LT(1);
            	    match(input,FTOR,FOLLOW_FTOR_in_ftOr6082); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    FTOR365_tree = (XQFTTree)adaptor.create(FTOR365);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(FTOR365_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_ftAnd_in_ftOr6085);
            	    ftAnd366=ftAnd();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftAnd366.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOr

    public static class ftAnd_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftAnd
    // etc/XQFT.g:562:3: ftAnd : ftMildNot ( FTAND ftMildNot )* ;
    public final ftAnd_return ftAnd() throws RecognitionException {
        ftAnd_return retval = new ftAnd_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTAND368=null;
        ftMildNot_return ftMildNot367 = null;

        ftMildNot_return ftMildNot369 = null;


        XQFTTree FTAND368_tree=null;

        try {
            // etc/XQFT.g:562:34: ( ftMildNot ( FTAND ftMildNot )* )
            // etc/XQFT.g:562:36: ftMildNot ( FTAND ftMildNot )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftMildNot_in_ftAnd6122);
            ftMildNot367=ftMildNot();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftMildNot367.getTree());
            // etc/XQFT.g:562:46: ( FTAND ftMildNot )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==FTAND) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // etc/XQFT.g:562:48: FTAND ftMildNot
            	    {
            	    FTAND368=(Token)input.LT(1);
            	    match(input,FTAND,FOLLOW_FTAND_in_ftAnd6126); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    FTAND368_tree = (XQFTTree)adaptor.create(FTAND368);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(FTAND368_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_ftMildNot_in_ftAnd6129);
            	    ftMildNot369=ftMildNot();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftMildNot369.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftAnd

    public static class ftMildNot_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMildNot
    // etc/XQFT.g:563:4: ftMildNot : ftUnaryNot ( NOT IN ftUnaryNot )* ;
    public final ftMildNot_return ftMildNot() throws RecognitionException {
        ftMildNot_return retval = new ftMildNot_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token NOT371=null;
        Token IN372=null;
        ftUnaryNot_return ftUnaryNot370 = null;

        ftUnaryNot_return ftUnaryNot373 = null;


        XQFTTree NOT371_tree=null;
        XQFTTree IN372_tree=null;

        try {
            // etc/XQFT.g:563:35: ( ftUnaryNot ( NOT IN ftUnaryNot )* )
            // etc/XQFT.g:563:37: ftUnaryNot ( NOT IN ftUnaryNot )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot6163);
            ftUnaryNot370=ftUnaryNot();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot370.getTree());
            // etc/XQFT.g:563:48: ( NOT IN ftUnaryNot )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==NOT) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // etc/XQFT.g:563:50: NOT IN ftUnaryNot
            	    {
            	    NOT371=(Token)input.LT(1);
            	    match(input,NOT,FOLLOW_NOT_in_ftMildNot6167); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    NOT371_tree = (XQFTTree)adaptor.create(NOT371);
            	    root_0 = (XQFTTree)adaptor.becomeRoot(NOT371_tree, root_0);
            	    }
            	    IN372=(Token)input.LT(1);
            	    match(input,IN,FOLLOW_IN_in_ftMildNot6170); if (failed) return retval;
            	    pushFollow(FOLLOW_ftUnaryNot_in_ftMildNot6173);
            	    ftUnaryNot373=ftUnaryNot();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, ftUnaryNot373.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMildNot

    public static class ftUnaryNot_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftUnaryNot
    // etc/XQFT.g:564:5: ftUnaryNot : ( FTNOT )? ftPrimaryWithOptions ;
    public final ftUnaryNot_return ftUnaryNot() throws RecognitionException {
        ftUnaryNot_return retval = new ftUnaryNot_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token FTNOT374=null;
        ftPrimaryWithOptions_return ftPrimaryWithOptions375 = null;


        XQFTTree FTNOT374_tree=null;

        try {
            // etc/XQFT.g:564:36: ( ( FTNOT )? ftPrimaryWithOptions )
            // etc/XQFT.g:564:38: ( FTNOT )? ftPrimaryWithOptions
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:564:38: ( FTNOT )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==FTNOT) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // etc/XQFT.g:564:39: FTNOT
                    {
                    FTNOT374=(Token)input.LT(1);
                    match(input,FTNOT,FOLLOW_FTNOT_in_ftUnaryNot6208); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FTNOT374_tree = (XQFTTree)adaptor.create(FTNOT374);
                    root_0 = (XQFTTree)adaptor.becomeRoot(FTNOT374_tree, root_0);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot6213);
            ftPrimaryWithOptions375=ftPrimaryWithOptions();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftPrimaryWithOptions375.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftUnaryNot

    public static class ftPrimaryWithOptions_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPrimaryWithOptions
    // etc/XQFT.g:565:6: ftPrimaryWithOptions : ftPrimary ( ftMatchOptions )? ;
    public final ftPrimaryWithOptions_return ftPrimaryWithOptions() throws RecognitionException {
        ftPrimaryWithOptions_return retval = new ftPrimaryWithOptions_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftPrimary_return ftPrimary376 = null;

        ftMatchOptions_return ftMatchOptions377 = null;



        try {
            // etc/XQFT.g:565:37: ( ftPrimary ( ftMatchOptions )? )
            // etc/XQFT.g:565:39: ftPrimary ( ftMatchOptions )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftPrimary_in_ftPrimaryWithOptions6235);
            ftPrimary376=ftPrimary();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftPrimary376.getTree());
            // etc/XQFT.g:565:49: ( ftMatchOptions )?
            int alt84=2;
            switch ( input.LA(1) ) {
                case DIACRITICS:
                case LANGUAGE:
                case LOWERCASE:
                case OPTION:
                case UPPERCASE:
                case WITH:
                    {
                    alt84=1;
                    }
                    break;
                case WITHOUT:
                    {
                    int LA84_2 = input.LA(2);

                    if ( ((LA84_2>=STEMMING && LA84_2<=STOP)||LA84_2==THESAURUS||LA84_2==WILDCARDS) ) {
                        alt84=1;
                    }
                    }
                    break;
                case CASE:
                    {
                    int LA84_3 = input.LA(2);

                    if ( (LA84_3==INSENSITIVE||LA84_3==SENSITIVE) ) {
                        alt84=1;
                    }
                    }
                    break;
            }

            switch (alt84) {
                case 1 :
                    // etc/XQFT.g:565:49: ftMatchOptions
                    {
                    pushFollow(FOLLOW_ftMatchOptions_in_ftPrimaryWithOptions6237);
                    ftMatchOptions377=ftMatchOptions();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftMatchOptions377.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPrimaryWithOptions

    public static class ftPrimary_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPrimary
    // etc/XQFT.g:567:7: ftPrimary : ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection );
    public final ftPrimary_return ftPrimary() throws RecognitionException {
        ftPrimary_return retval = new ftPrimary_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPARSi380=null;
        Token RPARSi382=null;
        ftWords_return ftWords378 = null;

        ftTimes_return ftTimes379 = null;

        ftSelection_return ftSelection381 = null;

        ftExtensionSelection_return ftExtensionSelection383 = null;


        XQFTTree LPARSi380_tree=null;
        XQFTTree RPARSi382_tree=null;

        try {
            // etc/XQFT.g:567:38: ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection )
            int alt86=3;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case LBRACESi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
                {
                alt86=1;
                }
                break;
            case LPARSi:
                {
                alt86=2;
                }
                break;
            case LPRAGSi:
                {
                alt86=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("567:7: ftPrimary : ( ftWords ( ftTimes )? | LPARSi ftSelection RPARSi | ftExtensionSelection );", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // etc/XQFT.g:567:40: ftWords ( ftTimes )?
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWords_in_ftPrimary6278);
                    ftWords378=ftWords();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWords378.getTree());
                    // etc/XQFT.g:567:48: ( ftTimes )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==OCCURS) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // etc/XQFT.g:567:48: ftTimes
                            {
                            pushFollow(FOLLOW_ftTimes_in_ftPrimary6280);
                            ftTimes379=ftTimes();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftTimes379.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:568:19: LPARSi ftSelection RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    LPARSi380=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftPrimary6302); if (failed) return retval;
                    pushFollow(FOLLOW_ftSelection_in_ftPrimary6305);
                    ftSelection381=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection381.getTree());
                    RPARSi382=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftPrimary6307); if (failed) return retval;

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:569:19: ftExtensionSelection
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionSelection_in_ftPrimary6329);
                    ftExtensionSelection383=ftExtensionSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftExtensionSelection383.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPrimary

    public static class ftWords_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWords
    // etc/XQFT.g:571:8: ftWords : ftWordsValue ( ftAnyallOption )? ;
    public final ftWords_return ftWords() throws RecognitionException {
        ftWords_return retval = new ftWords_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftWordsValue_return ftWordsValue384 = null;

        ftAnyallOption_return ftAnyallOption385 = null;



        try {
            // etc/XQFT.g:571:39: ( ftWordsValue ( ftAnyallOption )? )
            // etc/XQFT.g:571:41: ftWordsValue ( ftAnyallOption )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_ftWordsValue_in_ftWords6383);
            ftWordsValue384=ftWordsValue();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftWordsValue384.getTree());
            // etc/XQFT.g:571:54: ( ftAnyallOption )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( ((LA87_0>=ALL && LA87_0<=ANY)||LA87_0==PHRASE) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // etc/XQFT.g:571:54: ftAnyallOption
                    {
                    pushFollow(FOLLOW_ftAnyallOption_in_ftWords6385);
                    ftAnyallOption385=ftAnyallOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftAnyallOption385.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWords

    public static class ftWordsValue_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWordsValue
    // etc/XQFT.g:572:9: ftWordsValue : ( literal | ( LBRACESi expr RBRACSi ) );
    public final ftWordsValue_return ftWordsValue() throws RecognitionException {
        ftWordsValue_return retval = new ftWordsValue_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi387=null;
        Token RBRACSi389=null;
        literal_return literal386 = null;

        expr_return expr388 = null;


        XQFTTree LBRACESi387_tree=null;
        XQFTTree RBRACSi389_tree=null;

        try {
            // etc/XQFT.g:572:40: ( literal | ( LBRACESi expr RBRACSi ) )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==StringLiteral||(LA88_0>=IntegerLiteral && LA88_0<=DoubleLiteral)) ) {
                alt88=1;
            }
            else if ( (LA88_0==LBRACESi) ) {
                alt88=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("572:9: ftWordsValue : ( literal | ( LBRACESi expr RBRACSi ) );", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // etc/XQFT.g:572:42: literal
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_ftWordsValue6419);
                    literal386=literal();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal386.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:572:52: ( LBRACESi expr RBRACSi )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:572:52: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:572:53: LBRACESi expr RBRACSi
                    {
                    LBRACESi387=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_ftWordsValue6424); if (failed) return retval;
                    pushFollow(FOLLOW_expr_in_ftWordsValue6427);
                    expr388=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr388.getTree());
                    RBRACSi389=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_ftWordsValue6429); if (failed) return retval;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWordsValue

    public static class literal_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start literal
    // etc/XQFT.g:573:10: literal : ( numericLiteral | StringLiteral );
    public final literal_return literal() throws RecognitionException {
        literal_return retval = new literal_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token StringLiteral391=null;
        numericLiteral_return numericLiteral390 = null;


        XQFTTree StringLiteral391_tree=null;

        try {
            // etc/XQFT.g:573:41: ( numericLiteral | StringLiteral )
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( ((LA89_0>=IntegerLiteral && LA89_0<=DoubleLiteral)) ) {
                alt89=1;
            }
            else if ( (LA89_0==StringLiteral) ) {
                alt89=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("573:10: literal : ( numericLiteral | StringLiteral );", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // etc/XQFT.g:573:43: numericLiteral
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_numericLiteral_in_literal6470);
                    numericLiteral390=numericLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, numericLiteral390.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:573:60: StringLiteral
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    StringLiteral391=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_literal6474); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral391_tree = (XQFTTree)adaptor.create(StringLiteral391);
                    adaptor.addChild(root_0, StringLiteral391_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end literal

    public static class numericLiteral_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start numericLiteral
    // etc/XQFT.g:574:11: numericLiteral : ( IntegerLiteral | DecimalLiteral | DoubleLiteral );
    public final numericLiteral_return numericLiteral() throws RecognitionException {
        numericLiteral_return retval = new numericLiteral_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set392=null;

        XQFTTree set392_tree=null;

        try {
            // etc/XQFT.g:574:42: ( IntegerLiteral | DecimalLiteral | DoubleLiteral )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set392=(Token)input.LT(1);
            if ( (input.LA(1)>=IntegerLiteral && input.LA(1)<=DoubleLiteral) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set392));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_numericLiteral0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end numericLiteral

    public static class ftAnyallOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftAnyallOption
    // etc/XQFT.g:575:9: ftAnyallOption : ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE );
    public final ftAnyallOption_return ftAnyallOption() throws RecognitionException {
        ftAnyallOption_return retval = new ftAnyallOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ANY393=null;
        Token WORD394=null;
        Token ALL395=null;
        Token WORDS396=null;
        Token PHRASE397=null;

        XQFTTree ANY393_tree=null;
        XQFTTree WORD394_tree=null;
        XQFTTree ALL395_tree=null;
        XQFTTree WORDS396_tree=null;
        XQFTTree PHRASE397_tree=null;

        try {
            // etc/XQFT.g:575:40: ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE )
            int alt92=3;
            switch ( input.LA(1) ) {
            case ANY:
                {
                alt92=1;
                }
                break;
            case ALL:
                {
                alt92=2;
                }
                break;
            case PHRASE:
                {
                alt92=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("575:9: ftAnyallOption : ( ( ANY ( WORD )? ) | ( ALL ( WORDS )? ) | PHRASE );", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // etc/XQFT.g:575:42: ( ANY ( WORD )? )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:575:42: ( ANY ( WORD )? )
                    // etc/XQFT.g:575:43: ANY ( WORD )?
                    {
                    ANY393=(Token)input.LT(1);
                    match(input,ANY,FOLLOW_ANY_in_ftAnyallOption6547); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ANY393_tree = (XQFTTree)adaptor.create(ANY393);
                    adaptor.addChild(root_0, ANY393_tree);
                    }
                    // etc/XQFT.g:575:47: ( WORD )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==WORD) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // etc/XQFT.g:575:47: WORD
                            {
                            WORD394=(Token)input.LT(1);
                            match(input,WORD,FOLLOW_WORD_in_ftAnyallOption6549); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WORD394_tree = (XQFTTree)adaptor.create(WORD394);
                            adaptor.addChild(root_0, WORD394_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:575:56: ( ALL ( WORDS )? )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:575:56: ( ALL ( WORDS )? )
                    // etc/XQFT.g:575:57: ALL ( WORDS )?
                    {
                    ALL395=(Token)input.LT(1);
                    match(input,ALL,FOLLOW_ALL_in_ftAnyallOption6556); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ALL395_tree = (XQFTTree)adaptor.create(ALL395);
                    adaptor.addChild(root_0, ALL395_tree);
                    }
                    // etc/XQFT.g:575:61: ( WORDS )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==WORDS) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // etc/XQFT.g:575:61: WORDS
                            {
                            WORDS396=(Token)input.LT(1);
                            match(input,WORDS,FOLLOW_WORDS_in_ftAnyallOption6558); if (failed) return retval;
                            if ( backtracking==0 ) {
                            WORDS396_tree = (XQFTTree)adaptor.create(WORDS396);
                            adaptor.addChild(root_0, WORDS396_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:575:71: PHRASE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    PHRASE397=(Token)input.LT(1);
                    match(input,PHRASE,FOLLOW_PHRASE_in_ftAnyallOption6564); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PHRASE397_tree = (XQFTTree)adaptor.create(PHRASE397);
                    adaptor.addChild(root_0, PHRASE397_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftAnyallOption

    public static class ftTimes_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftTimes
    // etc/XQFT.g:576:8: ftTimes : OCCURS ftRange TIMES ;
    public final ftTimes_return ftTimes() throws RecognitionException {
        ftTimes_return retval = new ftTimes_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OCCURS398=null;
        Token TIMES400=null;
        ftRange_return ftRange399 = null;


        XQFTTree OCCURS398_tree=null;
        XQFTTree TIMES400_tree=null;

        try {
            // etc/XQFT.g:576:39: ( OCCURS ftRange TIMES )
            // etc/XQFT.g:576:41: OCCURS ftRange TIMES
            {
            root_0 = (XQFTTree)adaptor.nil();

            OCCURS398=(Token)input.LT(1);
            match(input,OCCURS,FOLLOW_OCCURS_in_ftTimes6601); if (failed) return retval;
            pushFollow(FOLLOW_ftRange_in_ftTimes6604);
            ftRange399=ftRange();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRange399.getTree());
            TIMES400=(Token)input.LT(1);
            match(input,TIMES,FOLLOW_TIMES_in_ftTimes6606); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftTimes

    public static class ftRange_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftRange
    // etc/XQFT.g:577:9: ftRange : ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );
    public final ftRange_return ftRange() throws RecognitionException {
        ftRange_return retval = new ftRange_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token EXACTLY401=null;
        Token AT403=null;
        Token LEAST404=null;
        Token AT406=null;
        Token MOST407=null;
        Token FROM409=null;
        Token TO411=null;
        additiveExpr_return additiveExpr402 = null;

        additiveExpr_return additiveExpr405 = null;

        additiveExpr_return additiveExpr408 = null;

        additiveExpr_return additiveExpr410 = null;

        additiveExpr_return additiveExpr412 = null;


        XQFTTree EXACTLY401_tree=null;
        XQFTTree AT403_tree=null;
        XQFTTree LEAST404_tree=null;
        XQFTTree AT406_tree=null;
        XQFTTree MOST407_tree=null;
        XQFTTree FROM409_tree=null;
        XQFTTree TO411_tree=null;

        try {
            // etc/XQFT.g:577:40: ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) )
            int alt93=4;
            switch ( input.LA(1) ) {
            case EXACTLY:
                {
                alt93=1;
                }
                break;
            case AT:
                {
                int LA93_2 = input.LA(2);

                if ( (LA93_2==LEAST) ) {
                    alt93=2;
                }
                else if ( (LA93_2==MOST) ) {
                    alt93=3;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("577:9: ftRange : ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );", 93, 2, input);

                    throw nvae;
                }
                }
                break;
            case FROM:
                {
                alt93=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("577:9: ftRange : ( ( EXACTLY additiveExpr ) | ( AT LEAST additiveExpr ) | ( AT MOST additiveExpr ) | ( FROM additiveExpr TO additiveExpr ) );", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // etc/XQFT.g:577:42: ( EXACTLY additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:577:42: ( EXACTLY additiveExpr )
                    // etc/XQFT.g:577:43: EXACTLY additiveExpr
                    {
                    EXACTLY401=(Token)input.LT(1);
                    match(input,EXACTLY,FOLLOW_EXACTLY_in_ftRange6646); if (failed) return retval;
                    if ( backtracking==0 ) {
                    EXACTLY401_tree = (XQFTTree)adaptor.create(EXACTLY401);
                    adaptor.addChild(root_0, EXACTLY401_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6648);
                    additiveExpr402=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr402.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:578:39: ( AT LEAST additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:578:39: ( AT LEAST additiveExpr )
                    // etc/XQFT.g:578:40: AT LEAST additiveExpr
                    {
                    AT403=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRange6690); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT403_tree = (XQFTTree)adaptor.create(AT403);
                    adaptor.addChild(root_0, AT403_tree);
                    }
                    LEAST404=(Token)input.LT(1);
                    match(input,LEAST,FOLLOW_LEAST_in_ftRange6692); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LEAST404_tree = (XQFTTree)adaptor.create(LEAST404);
                    adaptor.addChild(root_0, LEAST404_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6694);
                    additiveExpr405=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr405.getTree());

                    }


                    }
                    break;
                case 3 :
                    // etc/XQFT.g:579:40: ( AT MOST additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:579:40: ( AT MOST additiveExpr )
                    // etc/XQFT.g:579:41: AT MOST additiveExpr
                    {
                    AT406=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRange6737); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT406_tree = (XQFTTree)adaptor.create(AT406);
                    adaptor.addChild(root_0, AT406_tree);
                    }
                    MOST407=(Token)input.LT(1);
                    match(input,MOST,FOLLOW_MOST_in_ftRange6739); if (failed) return retval;
                    if ( backtracking==0 ) {
                    MOST407_tree = (XQFTTree)adaptor.create(MOST407);
                    adaptor.addChild(root_0, MOST407_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6741);
                    additiveExpr408=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr408.getTree());

                    }


                    }
                    break;
                case 4 :
                    // etc/XQFT.g:580:45: ( FROM additiveExpr TO additiveExpr )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:580:45: ( FROM additiveExpr TO additiveExpr )
                    // etc/XQFT.g:580:46: FROM additiveExpr TO additiveExpr
                    {
                    FROM409=(Token)input.LT(1);
                    match(input,FROM,FOLLOW_FROM_in_ftRange6789); if (failed) return retval;
                    if ( backtracking==0 ) {
                    FROM409_tree = (XQFTTree)adaptor.create(FROM409);
                    adaptor.addChild(root_0, FROM409_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6791);
                    additiveExpr410=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr410.getTree());
                    TO411=(Token)input.LT(1);
                    match(input,TO,FOLLOW_TO_in_ftRange6793); if (failed) return retval;
                    if ( backtracking==0 ) {
                    TO411_tree = (XQFTTree)adaptor.create(TO411);
                    adaptor.addChild(root_0, TO411_tree);
                    }
                    pushFollow(FOLLOW_additiveExpr_in_ftRange6795);
                    additiveExpr412=additiveExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr412.getTree());

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftRange

    public static class ftExtensionSelection_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftExtensionSelection
    // etc/XQFT.g:583:8: ftExtensionSelection : ( pragma )+ LBRACESi ( ftSelection )? RBRACSi ;
    public final ftExtensionSelection_return ftExtensionSelection() throws RecognitionException {
        ftExtensionSelection_return retval = new ftExtensionSelection_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi414=null;
        Token RBRACSi416=null;
        pragma_return pragma413 = null;

        ftSelection_return ftSelection415 = null;


        XQFTTree LBRACESi414_tree=null;
        XQFTTree RBRACSi416_tree=null;

        try {
            // etc/XQFT.g:583:39: ( ( pragma )+ LBRACESi ( ftSelection )? RBRACSi )
            // etc/XQFT.g:583:41: ( pragma )+ LBRACESi ( ftSelection )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:583:41: ( pragma )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==LPRAGSi) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // etc/XQFT.g:583:41: pragma
            	    {
            	    pushFollow(FOLLOW_pragma_in_ftExtensionSelection6822);
            	    pragma413=pragma();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, pragma413.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);

            LBRACESi414=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_ftExtensionSelection6825); if (failed) return retval;
            // etc/XQFT.g:583:59: ( ftSelection )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==FTNOT||LA95_0==StringLiteral||LA95_0==LPARSi||LA95_0==LBRACESi||(LA95_0>=IntegerLiteral && LA95_0<=LPRAGSi)) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // etc/XQFT.g:583:59: ftSelection
                    {
                    pushFollow(FOLLOW_ftSelection_in_ftExtensionSelection6828);
                    ftSelection415=ftSelection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftSelection415.getTree());

                    }
                    break;

            }

            RBRACSi416=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_ftExtensionSelection6831); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftExtensionSelection

    public static class pragma_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pragma
    // etc/XQFT.g:584:9: pragma : LPRAGSi qName ( PragmaContents )? RPRAGSi ;
    public final pragma_return pragma() throws RecognitionException {
        pragma_return retval = new pragma_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPRAGSi417=null;
        Token PragmaContents419=null;
        Token RPRAGSi420=null;
        qName_return qName418 = null;


        XQFTTree LPRAGSi417_tree=null;
        XQFTTree PragmaContents419_tree=null;
        XQFTTree RPRAGSi420_tree=null;

        try {
            // etc/XQFT.g:584:40: ( LPRAGSi qName ( PragmaContents )? RPRAGSi )
            // etc/XQFT.g:584:42: LPRAGSi qName ( PragmaContents )? RPRAGSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LPRAGSi417=(Token)input.LT(1);
            match(input,LPRAGSi,FOLLOW_LPRAGSi_in_pragma6871); if (failed) return retval;
            pushFollow(FOLLOW_qName_in_pragma6874);
            qName418=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName418.getTree());
            // etc/XQFT.g:584:57: ( PragmaContents )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==PragmaContents) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // etc/XQFT.g:584:57: PragmaContents
                    {
                    PragmaContents419=(Token)input.LT(1);
                    match(input,PragmaContents,FOLLOW_PragmaContents_in_pragma6876); if (failed) return retval;
                    if ( backtracking==0 ) {
                    PragmaContents419_tree = (XQFTTree)adaptor.create(PragmaContents419);
                    adaptor.addChild(root_0, PragmaContents419_tree);
                    }

                    }
                    break;

            }

            RPRAGSi420=(Token)input.LT(1);
            match(input,RPRAGSi,FOLLOW_RPRAGSi_in_pragma6879); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end pragma

    public static class ftPosFilter_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftPosFilter
    // etc/XQFT.g:591:2: ftPosFilter : ( ftOrder | ftWindow | ftDistance | ftScope | ftContent );
    public final ftPosFilter_return ftPosFilter() throws RecognitionException {
        ftPosFilter_return retval = new ftPosFilter_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftOrder_return ftOrder421 = null;

        ftWindow_return ftWindow422 = null;

        ftDistance_return ftDistance423 = null;

        ftScope_return ftScope424 = null;

        ftContent_return ftContent425 = null;



        try {
            // etc/XQFT.g:591:33: ( ftOrder | ftWindow | ftDistance | ftScope | ftContent )
            int alt97=5;
            switch ( input.LA(1) ) {
            case ORDERED:
                {
                alt97=1;
                }
                break;
            case WINDOW:
                {
                alt97=2;
                }
                break;
            case DISTANCE:
                {
                alt97=3;
                }
                break;
            case DIFFERENT:
            case SAME:
                {
                alt97=4;
                }
                break;
            case AT:
            case ENTIRE:
                {
                alt97=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("591:2: ftPosFilter : ( ftOrder | ftWindow | ftDistance | ftScope | ftContent );", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // etc/XQFT.g:591:35: ftOrder
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftOrder_in_ftPosFilter6935);
                    ftOrder421=ftOrder();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftOrder421.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:591:45: ftWindow
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWindow_in_ftPosFilter6939);
                    ftWindow422=ftWindow();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWindow422.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:591:56: ftDistance
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftDistance_in_ftPosFilter6943);
                    ftDistance423=ftDistance();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftDistance423.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:591:69: ftScope
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftScope_in_ftPosFilter6947);
                    ftScope424=ftScope();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftScope424.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:591:79: ftContent
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftContent_in_ftPosFilter6951);
                    ftContent425=ftContent();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftContent425.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftPosFilter

    public static class ftOrder_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftOrder
    // etc/XQFT.g:592:3: ftOrder : ORDERED ;
    public final ftOrder_return ftOrder() throws RecognitionException {
        ftOrder_return retval = new ftOrder_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDERED426=null;

        XQFTTree ORDERED426_tree=null;

        try {
            // etc/XQFT.g:592:34: ( ORDERED )
            // etc/XQFT.g:592:36: ORDERED
            {
            root_0 = (XQFTTree)adaptor.nil();

            ORDERED426=(Token)input.LT(1);
            match(input,ORDERED,FOLLOW_ORDERED_in_ftOrder6983); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERED426_tree = (XQFTTree)adaptor.create(ORDERED426);
            adaptor.addChild(root_0, ORDERED426_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftOrder

    public static class ftWindow_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWindow
    // etc/XQFT.g:593:3: ftWindow : WINDOW additiveExpr ftUnit ;
    public final ftWindow_return ftWindow() throws RecognitionException {
        ftWindow_return retval = new ftWindow_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WINDOW427=null;
        additiveExpr_return additiveExpr428 = null;

        ftUnit_return ftUnit429 = null;


        XQFTTree WINDOW427_tree=null;

        try {
            // etc/XQFT.g:593:34: ( WINDOW additiveExpr ftUnit )
            // etc/XQFT.g:593:36: WINDOW additiveExpr ftUnit
            {
            root_0 = (XQFTTree)adaptor.nil();

            WINDOW427=(Token)input.LT(1);
            match(input,WINDOW,FOLLOW_WINDOW_in_ftWindow7014); if (failed) return retval;
            if ( backtracking==0 ) {
            WINDOW427_tree = (XQFTTree)adaptor.create(WINDOW427);
            adaptor.addChild(root_0, WINDOW427_tree);
            }
            pushFollow(FOLLOW_additiveExpr_in_ftWindow7016);
            additiveExpr428=additiveExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, additiveExpr428.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftWindow7018);
            ftUnit429=ftUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnit429.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWindow

    public static class ftUnit_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftUnit
    // etc/XQFT.g:595:4: ftUnit : ( WORDS | SENTENCES | PARAGRAPHS );
    public final ftUnit_return ftUnit() throws RecognitionException {
        ftUnit_return retval = new ftUnit_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set430=null;

        XQFTTree set430_tree=null;

        try {
            // etc/XQFT.g:595:35: ( WORDS | SENTENCES | PARAGRAPHS )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set430=(Token)input.LT(1);
            if ( input.LA(1)==PARAGRAPHS||input.LA(1)==SENTENCES||input.LA(1)==WORDS ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set430));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftUnit0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftUnit

    public static class ftDistance_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftDistance
    // etc/XQFT.g:596:3: ftDistance : DISTANCE ftRange ftUnit ;
    public final ftDistance_return ftDistance() throws RecognitionException {
        ftDistance_return retval = new ftDistance_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DISTANCE431=null;
        ftRange_return ftRange432 = null;

        ftUnit_return ftUnit433 = null;


        XQFTTree DISTANCE431_tree=null;

        try {
            // etc/XQFT.g:596:34: ( DISTANCE ftRange ftUnit )
            // etc/XQFT.g:596:36: DISTANCE ftRange ftUnit
            {
            root_0 = (XQFTTree)adaptor.nil();

            DISTANCE431=(Token)input.LT(1);
            match(input,DISTANCE,FOLLOW_DISTANCE_in_ftDistance7091); if (failed) return retval;
            if ( backtracking==0 ) {
            DISTANCE431_tree = (XQFTTree)adaptor.create(DISTANCE431);
            adaptor.addChild(root_0, DISTANCE431_tree);
            }
            pushFollow(FOLLOW_ftRange_in_ftDistance7093);
            ftRange432=ftRange();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRange432.getTree());
            pushFollow(FOLLOW_ftUnit_in_ftDistance7095);
            ftUnit433=ftUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftUnit433.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftDistance

    public static class ftScope_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftScope
    // etc/XQFT.g:603:3: ftScope : ( SAME | DIFFERENT ) ftBigUnit ;
    public final ftScope_return ftScope() throws RecognitionException {
        ftScope_return retval = new ftScope_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set434=null;
        ftBigUnit_return ftBigUnit435 = null;


        XQFTTree set434_tree=null;

        try {
            // etc/XQFT.g:603:34: ( ( SAME | DIFFERENT ) ftBigUnit )
            // etc/XQFT.g:603:36: ( SAME | DIFFERENT ) ftBigUnit
            {
            root_0 = (XQFTTree)adaptor.nil();

            set434=(Token)input.LT(1);
            if ( input.LA(1)==DIFFERENT||input.LA(1)==SAME ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set434));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftScope7133);    throw mse;
            }

            pushFollow(FOLLOW_ftBigUnit_in_ftScope7141);
            ftBigUnit435=ftBigUnit();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftBigUnit435.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftScope

    public static class ftBigUnit_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftBigUnit
    // etc/XQFT.g:604:4: ftBigUnit : ( SENTENCE | PARAGRAPH );
    public final ftBigUnit_return ftBigUnit() throws RecognitionException {
        ftBigUnit_return retval = new ftBigUnit_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set436=null;

        XQFTTree set436_tree=null;

        try {
            // etc/XQFT.g:604:35: ( SENTENCE | PARAGRAPH )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set436=(Token)input.LT(1);
            if ( input.LA(1)==PARAGRAPH||input.LA(1)==SENTENCE ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set436));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftBigUnit0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftBigUnit

    public static class ftContent_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftContent
    // etc/XQFT.g:605:3: ftContent : ( AT START | AT END | ENTIRE CONTENT );
    public final ftContent_return ftContent() throws RecognitionException {
        ftContent_return retval = new ftContent_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT437=null;
        Token START438=null;
        Token AT439=null;
        Token END440=null;
        Token ENTIRE441=null;
        Token CONTENT442=null;

        XQFTTree AT437_tree=null;
        XQFTTree START438_tree=null;
        XQFTTree AT439_tree=null;
        XQFTTree END440_tree=null;
        XQFTTree ENTIRE441_tree=null;
        XQFTTree CONTENT442_tree=null;

        try {
            // etc/XQFT.g:605:34: ( AT START | AT END | ENTIRE CONTENT )
            int alt98=3;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==AT) ) {
                int LA98_1 = input.LA(2);

                if ( (LA98_1==END) ) {
                    alt98=2;
                }
                else if ( (LA98_1==START) ) {
                    alt98=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("605:3: ftContent : ( AT START | AT END | ENTIRE CONTENT );", 98, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA98_0==ENTIRE) ) {
                alt98=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("605:3: ftContent : ( AT START | AT END | ENTIRE CONTENT );", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // etc/XQFT.g:605:36: AT START
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    AT437=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftContent7207); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT437_tree = (XQFTTree)adaptor.create(AT437);
                    adaptor.addChild(root_0, AT437_tree);
                    }
                    START438=(Token)input.LT(1);
                    match(input,START,FOLLOW_START_in_ftContent7209); if (failed) return retval;
                    if ( backtracking==0 ) {
                    START438_tree = (XQFTTree)adaptor.create(START438);
                    adaptor.addChild(root_0, START438_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:605:47: AT END
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    AT439=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftContent7213); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT439_tree = (XQFTTree)adaptor.create(AT439);
                    adaptor.addChild(root_0, AT439_tree);
                    }
                    END440=(Token)input.LT(1);
                    match(input,END,FOLLOW_END_in_ftContent7215); if (failed) return retval;
                    if ( backtracking==0 ) {
                    END440_tree = (XQFTTree)adaptor.create(END440);
                    adaptor.addChild(root_0, END440_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:605:56: ENTIRE CONTENT
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    ENTIRE441=(Token)input.LT(1);
                    match(input,ENTIRE,FOLLOW_ENTIRE_in_ftContent7219); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ENTIRE441_tree = (XQFTTree)adaptor.create(ENTIRE441);
                    adaptor.addChild(root_0, ENTIRE441_tree);
                    }
                    CONTENT442=(Token)input.LT(1);
                    match(input,CONTENT,FOLLOW_CONTENT_in_ftContent7221); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CONTENT442_tree = (XQFTTree)adaptor.create(CONTENT442);
                    adaptor.addChild(root_0, CONTENT442_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftContent

    public static class ftMatchOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftMatchOption
    // etc/XQFT.g:614:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );
    public final ftMatchOption_return ftMatchOption() throws RecognitionException {
        ftMatchOption_return retval = new ftMatchOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        ftLanguageOption_return ftLanguageOption443 = null;

        ftWildCardOption_return ftWildCardOption444 = null;

        ftThesaurusOption_return ftThesaurusOption445 = null;

        ftStemOption_return ftStemOption446 = null;

        ftCaseOption_return ftCaseOption447 = null;

        ftDiacriticsOption_return ftDiacriticsOption448 = null;

        ftStopwordOption_return ftStopwordOption449 = null;

        ftExtensionOption_return ftExtensionOption450 = null;



        try {
            // etc/XQFT.g:614:32: ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption )
            int alt99=8;
            switch ( input.LA(1) ) {
            case LANGUAGE:
                {
                alt99=1;
                }
                break;
            case WITH:
                {
                switch ( input.LA(2) ) {
                case THESAURUS:
                    {
                    alt99=3;
                    }
                    break;
                case DEFAULT:
                case STOP:
                    {
                    alt99=7;
                    }
                    break;
                case WILDCARDS:
                    {
                    alt99=2;
                    }
                    break;
                case STEMMING:
                    {
                    alt99=4;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("614:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );", 99, 2, input);

                    throw nvae;
                }

                }
                break;
            case WITHOUT:
                {
                switch ( input.LA(2) ) {
                case STOP:
                    {
                    alt99=7;
                    }
                    break;
                case WILDCARDS:
                    {
                    alt99=2;
                    }
                    break;
                case STEMMING:
                    {
                    alt99=4;
                    }
                    break;
                case THESAURUS:
                    {
                    alt99=3;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("614:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );", 99, 3, input);

                    throw nvae;
                }

                }
                break;
            case CASE:
            case LOWERCASE:
            case UPPERCASE:
                {
                alt99=5;
                }
                break;
            case DIACRITICS:
                {
                alt99=6;
                }
                break;
            case OPTION:
                {
                alt99=8;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("614:1: ftMatchOption : ( ftLanguageOption | ftWildCardOption | ftThesaurusOption | ftStemOption | ftCaseOption | ftDiacriticsOption | ftStopwordOption | ftExtensionOption );", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // etc/XQFT.g:614:34: ftLanguageOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftLanguageOption_in_ftMatchOption7259);
                    ftLanguageOption443=ftLanguageOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftLanguageOption443.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:615:37: ftWildCardOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftWildCardOption_in_ftMatchOption7297);
                    ftWildCardOption444=ftWildCardOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftWildCardOption444.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:616:37: ftThesaurusOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftThesaurusOption_in_ftMatchOption7335);
                    ftThesaurusOption445=ftThesaurusOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusOption445.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:617:37: ftStemOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftStemOption_in_ftMatchOption7373);
                    ftStemOption446=ftStemOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftStemOption446.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:618:37: ftCaseOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftCaseOption_in_ftMatchOption7411);
                    ftCaseOption447=ftCaseOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftCaseOption447.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:619:37: ftDiacriticsOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftDiacriticsOption_in_ftMatchOption7449);
                    ftDiacriticsOption448=ftDiacriticsOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftDiacriticsOption448.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:620:37: ftStopwordOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftStopwordOption_in_ftMatchOption7487);
                    ftStopwordOption449=ftStopwordOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftStopwordOption449.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:621:37: ftExtensionOption
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_ftExtensionOption_in_ftMatchOption7525);
                    ftExtensionOption450=ftExtensionOption();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftExtensionOption450.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftMatchOption

    public static class ftLanguageOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftLanguageOption
    // etc/XQFT.g:624:2: ftLanguageOption : LANGUAGE StringLiteral ;
    public final ftLanguageOption_return ftLanguageOption() throws RecognitionException {
        ftLanguageOption_return retval = new ftLanguageOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LANGUAGE451=null;
        Token StringLiteral452=null;

        XQFTTree LANGUAGE451_tree=null;
        XQFTTree StringLiteral452_tree=null;

        try {
            // etc/XQFT.g:624:33: ( LANGUAGE StringLiteral )
            // etc/XQFT.g:624:35: LANGUAGE StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            LANGUAGE451=(Token)input.LT(1);
            match(input,LANGUAGE,FOLLOW_LANGUAGE_in_ftLanguageOption7650); if (failed) return retval;
            if ( backtracking==0 ) {
            LANGUAGE451_tree = (XQFTTree)adaptor.create(LANGUAGE451);
            root_0 = (XQFTTree)adaptor.becomeRoot(LANGUAGE451_tree, root_0);
            }
            StringLiteral452=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_ftLanguageOption7653); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral452_tree = (XQFTTree)adaptor.create(StringLiteral452);
            adaptor.addChild(root_0, StringLiteral452_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftLanguageOption

    public static class ftWildCardOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftWildCardOption
    // etc/XQFT.g:627:2: ftWildCardOption : ( WITH WILDCARDS | WITHOUT WILDCARDS );
    public final ftWildCardOption_return ftWildCardOption() throws RecognitionException {
        ftWildCardOption_return retval = new ftWildCardOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITH453=null;
        Token WILDCARDS454=null;
        Token WITHOUT455=null;
        Token WILDCARDS456=null;

        XQFTTree WITH453_tree=null;
        XQFTTree WILDCARDS454_tree=null;
        XQFTTree WITHOUT455_tree=null;
        XQFTTree WILDCARDS456_tree=null;

        try {
            // etc/XQFT.g:627:33: ( WITH WILDCARDS | WITHOUT WILDCARDS )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==WITH) ) {
                alt100=1;
            }
            else if ( (LA100_0==WITHOUT) ) {
                alt100=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("627:2: ftWildCardOption : ( WITH WILDCARDS | WITHOUT WILDCARDS );", 100, 0, input);

                throw nvae;
            }
            switch (alt100) {
                case 1 :
                    // etc/XQFT.g:627:35: WITH WILDCARDS
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH453=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftWildCardOption7679); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH453_tree = (XQFTTree)adaptor.create(WITH453);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITH453_tree, root_0);
                    }
                    WILDCARDS454=(Token)input.LT(1);
                    match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftWildCardOption7682); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WILDCARDS454_tree = (XQFTTree)adaptor.create(WILDCARDS454);
                    adaptor.addChild(root_0, WILDCARDS454_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:627:53: WITHOUT WILDCARDS
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITHOUT455=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftWildCardOption7686); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT455_tree = (XQFTTree)adaptor.create(WITHOUT455);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITHOUT455_tree, root_0);
                    }
                    WILDCARDS456=(Token)input.LT(1);
                    match(input,WILDCARDS,FOLLOW_WILDCARDS_in_ftWildCardOption7689); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WILDCARDS456_tree = (XQFTTree)adaptor.create(WILDCARDS456);
                    adaptor.addChild(root_0, WILDCARDS456_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftWildCardOption

    public static class ftThesaurusOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftThesaurusOption
    // etc/XQFT.g:630:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );
    public final ftThesaurusOption_return ftThesaurusOption() throws RecognitionException {
        ftThesaurusOption_return retval = new ftThesaurusOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITH457=null;
        Token THESAURUS458=null;
        Token DEFAULT460=null;
        Token WITH461=null;
        Token THESAURUS462=null;
        Token LPARSi463=null;
        Token DEFAULT465=null;
        Token COMMASi466=null;
        Token RPARSi468=null;
        Token WITHOUT469=null;
        Token THESAURUS470=null;
        ftThesaurusID_return ftThesaurusID459 = null;

        ftThesaurusID_return ftThesaurusID464 = null;

        ftThesaurusID_return ftThesaurusID467 = null;


        XQFTTree WITH457_tree=null;
        XQFTTree THESAURUS458_tree=null;
        XQFTTree DEFAULT460_tree=null;
        XQFTTree WITH461_tree=null;
        XQFTTree THESAURUS462_tree=null;
        XQFTTree LPARSi463_tree=null;
        XQFTTree DEFAULT465_tree=null;
        XQFTTree COMMASi466_tree=null;
        XQFTTree RPARSi468_tree=null;
        XQFTTree WITHOUT469_tree=null;
        XQFTTree THESAURUS470_tree=null;

        try {
            // etc/XQFT.g:630:31: ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS )
            int alt104=3;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==WITH) ) {
                int LA104_1 = input.LA(2);

                if ( (LA104_1==THESAURUS) ) {
                    int LA104_3 = input.LA(3);

                    if ( (LA104_3==LPARSi) ) {
                        alt104=2;
                    }
                    else if ( (LA104_3==AT||LA104_3==DEFAULT) ) {
                        alt104=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("630:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );", 104, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("630:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );", 104, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA104_0==WITHOUT) ) {
                alt104=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("630:2: ftThesaurusOption : ( WITH THESAURUS ( ftThesaurusID | DEFAULT ) | WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi | WITHOUT THESAURUS );", 104, 0, input);

                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    // etc/XQFT.g:630:33: WITH THESAURUS ( ftThesaurusID | DEFAULT )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH457=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftThesaurusOption7712); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH457_tree = (XQFTTree)adaptor.create(WITH457);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITH457_tree, root_0);
                    }
                    THESAURUS458=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption7715); if (failed) return retval;
                    if ( backtracking==0 ) {
                    THESAURUS458_tree = (XQFTTree)adaptor.create(THESAURUS458);
                    adaptor.addChild(root_0, THESAURUS458_tree);
                    }
                    // etc/XQFT.g:630:49: ( ftThesaurusID | DEFAULT )
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==AT) ) {
                        alt101=1;
                    }
                    else if ( (LA101_0==DEFAULT) ) {
                        alt101=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("630:49: ( ftThesaurusID | DEFAULT )", 101, 0, input);

                        throw nvae;
                    }
                    switch (alt101) {
                        case 1 :
                            // etc/XQFT.g:630:50: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption7718);
                            ftThesaurusID459=ftThesaurusID();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID459.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:630:66: DEFAULT
                            {
                            DEFAULT460=(Token)input.LT(1);
                            match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption7722); if (failed) return retval;
                            if ( backtracking==0 ) {
                            DEFAULT460_tree = (XQFTTree)adaptor.create(DEFAULT460);
                            adaptor.addChild(root_0, DEFAULT460_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:631:14: WITH THESAURUS LPARSi ( ftThesaurusID | DEFAULT ) ( COMMASi ftThesaurusID )* RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH461=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftThesaurusOption7738); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH461_tree = (XQFTTree)adaptor.create(WITH461);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITH461_tree, root_0);
                    }
                    THESAURUS462=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption7741); if (failed) return retval;
                    if ( backtracking==0 ) {
                    THESAURUS462_tree = (XQFTTree)adaptor.create(THESAURUS462);
                    adaptor.addChild(root_0, THESAURUS462_tree);
                    }
                    LPARSi463=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftThesaurusOption7743); if (failed) return retval;
                    // etc/XQFT.g:631:38: ( ftThesaurusID | DEFAULT )
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==AT) ) {
                        alt102=1;
                    }
                    else if ( (LA102_0==DEFAULT) ) {
                        alt102=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("631:38: ( ftThesaurusID | DEFAULT )", 102, 0, input);

                        throw nvae;
                    }
                    switch (alt102) {
                        case 1 :
                            // etc/XQFT.g:631:39: ftThesaurusID
                            {
                            pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption7747);
                            ftThesaurusID464=ftThesaurusID();
                            _fsp--;
                            if (failed) return retval;
                            if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID464.getTree());

                            }
                            break;
                        case 2 :
                            // etc/XQFT.g:631:55: DEFAULT
                            {
                            DEFAULT465=(Token)input.LT(1);
                            match(input,DEFAULT,FOLLOW_DEFAULT_in_ftThesaurusOption7751); if (failed) return retval;
                            if ( backtracking==0 ) {
                            DEFAULT465_tree = (XQFTTree)adaptor.create(DEFAULT465);
                            adaptor.addChild(root_0, DEFAULT465_tree);
                            }

                            }
                            break;

                    }

                    // etc/XQFT.g:631:64: ( COMMASi ftThesaurusID )*
                    loop103:
                    do {
                        int alt103=2;
                        int LA103_0 = input.LA(1);

                        if ( (LA103_0==COMMASi) ) {
                            alt103=1;
                        }


                        switch (alt103) {
                    	case 1 :
                    	    // etc/XQFT.g:631:65: COMMASi ftThesaurusID
                    	    {
                    	    COMMASi466=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_ftThesaurusOption7755); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi466_tree = (XQFTTree)adaptor.create(COMMASi466);
                    	    adaptor.addChild(root_0, COMMASi466_tree);
                    	    }
                    	    pushFollow(FOLLOW_ftThesaurusID_in_ftThesaurusOption7757);
                    	    ftThesaurusID467=ftThesaurusID();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftThesaurusID467.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop103;
                        }
                    } while (true);

                    RPARSi468=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftThesaurusOption7761); if (failed) return retval;

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:632:38: WITHOUT THESAURUS
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITHOUT469=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftThesaurusOption7801); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT469_tree = (XQFTTree)adaptor.create(WITHOUT469);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITHOUT469_tree, root_0);
                    }
                    THESAURUS470=(Token)input.LT(1);
                    match(input,THESAURUS,FOLLOW_THESAURUS_in_ftThesaurusOption7804); if (failed) return retval;
                    if ( backtracking==0 ) {
                    THESAURUS470_tree = (XQFTTree)adaptor.create(THESAURUS470);
                    adaptor.addChild(root_0, THESAURUS470_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftThesaurusOption

    public static class ftThesaurusID_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftThesaurusID
    // etc/XQFT.g:634:3: ftThesaurusID : AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )? ;
    public final ftThesaurusID_return ftThesaurusID() throws RecognitionException {
        ftThesaurusID_return retval = new ftThesaurusID_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT471=null;
        Token RELATIONSHIP473=null;
        Token StringLiteral474=null;
        Token LEVELS476=null;
        uriLiteral_return uriLiteral472 = null;

        ftRange_return ftRange475 = null;


        XQFTTree AT471_tree=null;
        XQFTTree RELATIONSHIP473_tree=null;
        XQFTTree StringLiteral474_tree=null;
        XQFTTree LEVELS476_tree=null;

        try {
            // etc/XQFT.g:634:34: ( AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )? )
            // etc/XQFT.g:634:36: AT uriLiteral ( RELATIONSHIP StringLiteral )? ( ftRange LEVELS )?
            {
            root_0 = (XQFTTree)adaptor.nil();

            AT471=(Token)input.LT(1);
            match(input,AT,FOLLOW_AT_in_ftThesaurusID7866); if (failed) return retval;
            if ( backtracking==0 ) {
            AT471_tree = (XQFTTree)adaptor.create(AT471);
            adaptor.addChild(root_0, AT471_tree);
            }
            pushFollow(FOLLOW_uriLiteral_in_ftThesaurusID7868);
            uriLiteral472=uriLiteral();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral472.getTree());
            // etc/XQFT.g:634:50: ( RELATIONSHIP StringLiteral )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==RELATIONSHIP) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // etc/XQFT.g:634:51: RELATIONSHIP StringLiteral
                    {
                    RELATIONSHIP473=(Token)input.LT(1);
                    match(input,RELATIONSHIP,FOLLOW_RELATIONSHIP_in_ftThesaurusID7871); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RELATIONSHIP473_tree = (XQFTTree)adaptor.create(RELATIONSHIP473);
                    adaptor.addChild(root_0, RELATIONSHIP473_tree);
                    }
                    StringLiteral474=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftThesaurusID7873); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral474_tree = (XQFTTree)adaptor.create(StringLiteral474);
                    adaptor.addChild(root_0, StringLiteral474_tree);
                    }

                    }
                    break;

            }

            // etc/XQFT.g:634:80: ( ftRange LEVELS )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==EXACTLY||LA106_0==FROM) ) {
                alt106=1;
            }
            else if ( (LA106_0==AT) ) {
                int LA106_2 = input.LA(2);

                if ( (LA106_2==LEAST||LA106_2==MOST) ) {
                    alt106=1;
                }
            }
            switch (alt106) {
                case 1 :
                    // etc/XQFT.g:634:81: ftRange LEVELS
                    {
                    pushFollow(FOLLOW_ftRange_in_ftThesaurusID7878);
                    ftRange475=ftRange();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftRange475.getTree());
                    LEVELS476=(Token)input.LT(1);
                    match(input,LEVELS,FOLLOW_LEVELS_in_ftThesaurusID7880); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LEVELS476_tree = (XQFTTree)adaptor.create(LEVELS476);
                    adaptor.addChild(root_0, LEVELS476_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftThesaurusID

    public static class ftStemOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftStemOption
    // etc/XQFT.g:644:2: ftStemOption : ( WITH STEMMING | WITHOUT STEMMING );
    public final ftStemOption_return ftStemOption() throws RecognitionException {
        ftStemOption_return retval = new ftStemOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITH477=null;
        Token STEMMING478=null;
        Token WITHOUT479=null;
        Token STEMMING480=null;

        XQFTTree WITH477_tree=null;
        XQFTTree STEMMING478_tree=null;
        XQFTTree WITHOUT479_tree=null;
        XQFTTree STEMMING480_tree=null;

        try {
            // etc/XQFT.g:644:33: ( WITH STEMMING | WITHOUT STEMMING )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==WITH) ) {
                alt107=1;
            }
            else if ( (LA107_0==WITHOUT) ) {
                alt107=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("644:2: ftStemOption : ( WITH STEMMING | WITHOUT STEMMING );", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // etc/XQFT.g:644:35: WITH STEMMING
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH477=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftStemOption7925); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH477_tree = (XQFTTree)adaptor.create(WITH477);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITH477_tree, root_0);
                    }
                    STEMMING478=(Token)input.LT(1);
                    match(input,STEMMING,FOLLOW_STEMMING_in_ftStemOption7928); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STEMMING478_tree = (XQFTTree)adaptor.create(STEMMING478);
                    adaptor.addChild(root_0, STEMMING478_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:644:52: WITHOUT STEMMING
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITHOUT479=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftStemOption7932); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT479_tree = (XQFTTree)adaptor.create(WITHOUT479);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITHOUT479_tree, root_0);
                    }
                    STEMMING480=(Token)input.LT(1);
                    match(input,STEMMING,FOLLOW_STEMMING_in_ftStemOption7935); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STEMMING480_tree = (XQFTTree)adaptor.create(STEMMING480);
                    adaptor.addChild(root_0, STEMMING480_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftStemOption

    public static class ftCaseOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftCaseOption
    // etc/XQFT.g:647:2: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );
    public final ftCaseOption_return ftCaseOption() throws RecognitionException {
        ftCaseOption_return retval = new ftCaseOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token CASE481=null;
        Token INSENSITIVE482=null;
        Token CASE483=null;
        Token SENSITIVE484=null;
        Token LOWERCASE485=null;
        Token UPPERCASE486=null;

        XQFTTree CASE481_tree=null;
        XQFTTree INSENSITIVE482_tree=null;
        XQFTTree CASE483_tree=null;
        XQFTTree SENSITIVE484_tree=null;
        XQFTTree LOWERCASE485_tree=null;
        XQFTTree UPPERCASE486_tree=null;

        try {
            // etc/XQFT.g:647:33: ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE )
            int alt108=4;
            switch ( input.LA(1) ) {
            case CASE:
                {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==SENSITIVE) ) {
                    alt108=2;
                }
                else if ( (LA108_1==INSENSITIVE) ) {
                    alt108=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("647:2: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );", 108, 1, input);

                    throw nvae;
                }
                }
                break;
            case LOWERCASE:
                {
                alt108=3;
                }
                break;
            case UPPERCASE:
                {
                alt108=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("647:2: ftCaseOption : ( CASE INSENSITIVE | CASE SENSITIVE | LOWERCASE | UPPERCASE );", 108, 0, input);

                throw nvae;
            }

            switch (alt108) {
                case 1 :
                    // etc/XQFT.g:647:35: CASE INSENSITIVE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    CASE481=(Token)input.LT(1);
                    match(input,CASE,FOLLOW_CASE_in_ftCaseOption7965); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASE481_tree = (XQFTTree)adaptor.create(CASE481);
                    adaptor.addChild(root_0, CASE481_tree);
                    }
                    INSENSITIVE482=(Token)input.LT(1);
                    match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_ftCaseOption7967); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSENSITIVE482_tree = (XQFTTree)adaptor.create(INSENSITIVE482);
                    adaptor.addChild(root_0, INSENSITIVE482_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:648:38: CASE SENSITIVE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    CASE483=(Token)input.LT(1);
                    match(input,CASE,FOLLOW_CASE_in_ftCaseOption8006); if (failed) return retval;
                    if ( backtracking==0 ) {
                    CASE483_tree = (XQFTTree)adaptor.create(CASE483);
                    adaptor.addChild(root_0, CASE483_tree);
                    }
                    SENSITIVE484=(Token)input.LT(1);
                    match(input,SENSITIVE,FOLLOW_SENSITIVE_in_ftCaseOption8008); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SENSITIVE484_tree = (XQFTTree)adaptor.create(SENSITIVE484);
                    adaptor.addChild(root_0, SENSITIVE484_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:649:38: LOWERCASE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    LOWERCASE485=(Token)input.LT(1);
                    match(input,LOWERCASE,FOLLOW_LOWERCASE_in_ftCaseOption8047); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LOWERCASE485_tree = (XQFTTree)adaptor.create(LOWERCASE485);
                    adaptor.addChild(root_0, LOWERCASE485_tree);
                    }

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:650:38: UPPERCASE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    UPPERCASE486=(Token)input.LT(1);
                    match(input,UPPERCASE,FOLLOW_UPPERCASE_in_ftCaseOption8086); if (failed) return retval;
                    if ( backtracking==0 ) {
                    UPPERCASE486_tree = (XQFTTree)adaptor.create(UPPERCASE486);
                    adaptor.addChild(root_0, UPPERCASE486_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftCaseOption

    public static class ftDiacriticsOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftDiacriticsOption
    // etc/XQFT.g:654:2: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );
    public final ftDiacriticsOption_return ftDiacriticsOption() throws RecognitionException {
        ftDiacriticsOption_return retval = new ftDiacriticsOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DIACRITICS487=null;
        Token INSENSITIVE488=null;
        Token DIACRITICS489=null;
        Token SENSITIVE490=null;

        XQFTTree DIACRITICS487_tree=null;
        XQFTTree INSENSITIVE488_tree=null;
        XQFTTree DIACRITICS489_tree=null;
        XQFTTree SENSITIVE490_tree=null;

        try {
            // etc/XQFT.g:654:33: ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==DIACRITICS) ) {
                int LA109_1 = input.LA(2);

                if ( (LA109_1==SENSITIVE) ) {
                    alt109=2;
                }
                else if ( (LA109_1==INSENSITIVE) ) {
                    alt109=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("654:2: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );", 109, 1, input);

                    throw nvae;
                }
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("654:2: ftDiacriticsOption : ( DIACRITICS INSENSITIVE | DIACRITICS SENSITIVE );", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // etc/XQFT.g:654:35: DIACRITICS INSENSITIVE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    DIACRITICS487=(Token)input.LT(1);
                    match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ftDiacriticsOption8248); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DIACRITICS487_tree = (XQFTTree)adaptor.create(DIACRITICS487);
                    adaptor.addChild(root_0, DIACRITICS487_tree);
                    }
                    INSENSITIVE488=(Token)input.LT(1);
                    match(input,INSENSITIVE,FOLLOW_INSENSITIVE_in_ftDiacriticsOption8250); if (failed) return retval;
                    if ( backtracking==0 ) {
                    INSENSITIVE488_tree = (XQFTTree)adaptor.create(INSENSITIVE488);
                    adaptor.addChild(root_0, INSENSITIVE488_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:655:14: DIACRITICS SENSITIVE
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    DIACRITICS489=(Token)input.LT(1);
                    match(input,DIACRITICS,FOLLOW_DIACRITICS_in_ftDiacriticsOption8265); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DIACRITICS489_tree = (XQFTTree)adaptor.create(DIACRITICS489);
                    adaptor.addChild(root_0, DIACRITICS489_tree);
                    }
                    SENSITIVE490=(Token)input.LT(1);
                    match(input,SENSITIVE,FOLLOW_SENSITIVE_in_ftDiacriticsOption8267); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SENSITIVE490_tree = (XQFTTree)adaptor.create(SENSITIVE490);
                    adaptor.addChild(root_0, SENSITIVE490_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftDiacriticsOption

    public static class ftStopwordOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftStopwordOption
    // etc/XQFT.g:658:2: ftStopwordOption : ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );
    public final ftStopwordOption_return ftStopwordOption() throws RecognitionException {
        ftStopwordOption_return retval = new ftStopwordOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token WITH491=null;
        Token STOP492=null;
        Token WORDS493=null;
        Token WITHOUT496=null;
        Token STOP497=null;
        Token WORDS498=null;
        Token WITH499=null;
        Token DEFAULT500=null;
        Token STOP501=null;
        Token WORDS502=null;
        ftRefOrList_return ftRefOrList494 = null;

        ftInclExclStringLiteral_return ftInclExclStringLiteral495 = null;

        ftInclExclStringLiteral_return ftInclExclStringLiteral503 = null;


        XQFTTree WITH491_tree=null;
        XQFTTree STOP492_tree=null;
        XQFTTree WORDS493_tree=null;
        XQFTTree WITHOUT496_tree=null;
        XQFTTree STOP497_tree=null;
        XQFTTree WORDS498_tree=null;
        XQFTTree WITH499_tree=null;
        XQFTTree DEFAULT500_tree=null;
        XQFTTree STOP501_tree=null;
        XQFTTree WORDS502_tree=null;

        try {
            // etc/XQFT.g:658:33: ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* )
            int alt112=3;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==WITH) ) {
                int LA112_1 = input.LA(2);

                if ( (LA112_1==DEFAULT) ) {
                    alt112=3;
                }
                else if ( (LA112_1==STOP) ) {
                    alt112=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("658:2: ftStopwordOption : ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );", 112, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA112_0==WITHOUT) ) {
                alt112=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("658:2: ftStopwordOption : ( WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )* | WITHOUT STOP WORDS | WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )* );", 112, 0, input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // etc/XQFT.g:658:35: WITH STOP WORDS ftRefOrList ( ftInclExclStringLiteral )*
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH491=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftStopwordOption8323); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH491_tree = (XQFTTree)adaptor.create(WITH491);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITH491_tree, root_0);
                    }
                    STOP492=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption8326); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP492_tree = (XQFTTree)adaptor.create(STOP492);
                    adaptor.addChild(root_0, STOP492_tree);
                    }
                    WORDS493=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption8328); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS493_tree = (XQFTTree)adaptor.create(WORDS493);
                    adaptor.addChild(root_0, WORDS493_tree);
                    }
                    pushFollow(FOLLOW_ftRefOrList_in_ftStopwordOption8330);
                    ftRefOrList494=ftRefOrList();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, ftRefOrList494.getTree());
                    // etc/XQFT.g:658:64: ( ftInclExclStringLiteral )*
                    loop110:
                    do {
                        int alt110=2;
                        int LA110_0 = input.LA(1);

                        if ( (LA110_0==EXCEPT||LA110_0==UNION) ) {
                            alt110=1;
                        }


                        switch (alt110) {
                    	case 1 :
                    	    // etc/XQFT.g:658:64: ftInclExclStringLiteral
                    	    {
                    	    pushFollow(FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8332);
                    	    ftInclExclStringLiteral495=ftInclExclStringLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftInclExclStringLiteral495.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop110;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:659:14: WITHOUT STOP WORDS
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITHOUT496=(Token)input.LT(1);
                    match(input,WITHOUT,FOLLOW_WITHOUT_in_ftStopwordOption8348); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITHOUT496_tree = (XQFTTree)adaptor.create(WITHOUT496);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITHOUT496_tree, root_0);
                    }
                    STOP497=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption8351); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP497_tree = (XQFTTree)adaptor.create(STOP497);
                    adaptor.addChild(root_0, STOP497_tree);
                    }
                    WORDS498=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption8353); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS498_tree = (XQFTTree)adaptor.create(WORDS498);
                    adaptor.addChild(root_0, WORDS498_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:660:38: WITH DEFAULT STOP WORDS ( ftInclExclStringLiteral )*
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    WITH499=(Token)input.LT(1);
                    match(input,WITH,FOLLOW_WITH_in_ftStopwordOption8392); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WITH499_tree = (XQFTTree)adaptor.create(WITH499);
                    root_0 = (XQFTTree)adaptor.becomeRoot(WITH499_tree, root_0);
                    }
                    DEFAULT500=(Token)input.LT(1);
                    match(input,DEFAULT,FOLLOW_DEFAULT_in_ftStopwordOption8395); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DEFAULT500_tree = (XQFTTree)adaptor.create(DEFAULT500);
                    adaptor.addChild(root_0, DEFAULT500_tree);
                    }
                    STOP501=(Token)input.LT(1);
                    match(input,STOP,FOLLOW_STOP_in_ftStopwordOption8397); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STOP501_tree = (XQFTTree)adaptor.create(STOP501);
                    adaptor.addChild(root_0, STOP501_tree);
                    }
                    WORDS502=(Token)input.LT(1);
                    match(input,WORDS,FOLLOW_WORDS_in_ftStopwordOption8399); if (failed) return retval;
                    if ( backtracking==0 ) {
                    WORDS502_tree = (XQFTTree)adaptor.create(WORDS502);
                    adaptor.addChild(root_0, WORDS502_tree);
                    }
                    // etc/XQFT.g:660:63: ( ftInclExclStringLiteral )*
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);

                        if ( (LA111_0==EXCEPT||LA111_0==UNION) ) {
                            alt111=1;
                        }


                        switch (alt111) {
                    	case 1 :
                    	    // etc/XQFT.g:660:63: ftInclExclStringLiteral
                    	    {
                    	    pushFollow(FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8401);
                    	    ftInclExclStringLiteral503=ftInclExclStringLiteral();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, ftInclExclStringLiteral503.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop111;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftStopwordOption

    public static class ftRefOrList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftRefOrList
    // etc/XQFT.g:662:3: ftRefOrList : ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi );
    public final ftRefOrList_return ftRefOrList() throws RecognitionException {
        ftRefOrList_return retval = new ftRefOrList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token AT504=null;
        Token LPARSi506=null;
        Token StringLiteral507=null;
        Token COMMASi508=null;
        Token StringLiteral509=null;
        Token RPARSi510=null;
        uriLiteral_return uriLiteral505 = null;


        XQFTTree AT504_tree=null;
        XQFTTree LPARSi506_tree=null;
        XQFTTree StringLiteral507_tree=null;
        XQFTTree COMMASi508_tree=null;
        XQFTTree StringLiteral509_tree=null;
        XQFTTree RPARSi510_tree=null;

        try {
            // etc/XQFT.g:662:34: ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==AT) ) {
                alt114=1;
            }
            else if ( (LA114_0==LPARSi) ) {
                alt114=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("662:3: ftRefOrList : ( ( AT uriLiteral ) | LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi );", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // etc/XQFT.g:662:36: ( AT uriLiteral )
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    // etc/XQFT.g:662:36: ( AT uriLiteral )
                    // etc/XQFT.g:662:37: AT uriLiteral
                    {
                    AT504=(Token)input.LT(1);
                    match(input,AT,FOLLOW_AT_in_ftRefOrList8467); if (failed) return retval;
                    if ( backtracking==0 ) {
                    AT504_tree = (XQFTTree)adaptor.create(AT504);
                    adaptor.addChild(root_0, AT504_tree);
                    }
                    pushFollow(FOLLOW_uriLiteral_in_ftRefOrList8469);
                    uriLiteral505=uriLiteral();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, uriLiteral505.getTree());

                    }


                    }
                    break;
                case 2 :
                    // etc/XQFT.g:663:15: LPARSi StringLiteral ( COMMASi StringLiteral )* RPARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    LPARSi506=(Token)input.LT(1);
                    match(input,LPARSi,FOLLOW_LPARSi_in_ftRefOrList8486); if (failed) return retval;
                    StringLiteral507=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftRefOrList8489); if (failed) return retval;
                    if ( backtracking==0 ) {
                    StringLiteral507_tree = (XQFTTree)adaptor.create(StringLiteral507);
                    adaptor.addChild(root_0, StringLiteral507_tree);
                    }
                    // etc/XQFT.g:663:37: ( COMMASi StringLiteral )*
                    loop113:
                    do {
                        int alt113=2;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==COMMASi) ) {
                            alt113=1;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // etc/XQFT.g:663:38: COMMASi StringLiteral
                    	    {
                    	    COMMASi508=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_ftRefOrList8492); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    COMMASi508_tree = (XQFTTree)adaptor.create(COMMASi508);
                    	    adaptor.addChild(root_0, COMMASi508_tree);
                    	    }
                    	    StringLiteral509=(Token)input.LT(1);
                    	    match(input,StringLiteral,FOLLOW_StringLiteral_in_ftRefOrList8494); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    StringLiteral509_tree = (XQFTTree)adaptor.create(StringLiteral509);
                    	    adaptor.addChild(root_0, StringLiteral509_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop113;
                        }
                    } while (true);

                    RPARSi510=(Token)input.LT(1);
                    match(input,RPARSi,FOLLOW_RPARSi_in_ftRefOrList8498); if (failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftRefOrList

    public static class ftInclExclStringLiteral_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftInclExclStringLiteral
    // etc/XQFT.g:665:3: ftInclExclStringLiteral : ( UNION | EXCEPT ) ftRefOrList ;
    public final ftInclExclStringLiteral_return ftInclExclStringLiteral() throws RecognitionException {
        ftInclExclStringLiteral_return retval = new ftInclExclStringLiteral_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set511=null;
        ftRefOrList_return ftRefOrList512 = null;


        XQFTTree set511_tree=null;

        try {
            // etc/XQFT.g:665:34: ( ( UNION | EXCEPT ) ftRefOrList )
            // etc/XQFT.g:665:36: ( UNION | EXCEPT ) ftRefOrList
            {
            root_0 = (XQFTTree)adaptor.nil();

            set511=(Token)input.LT(1);
            if ( input.LA(1)==EXCEPT||input.LA(1)==UNION ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set511));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_ftInclExclStringLiteral8516);    throw mse;
            }

            pushFollow(FOLLOW_ftRefOrList_in_ftInclExclStringLiteral8524);
            ftRefOrList512=ftRefOrList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, ftRefOrList512.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftInclExclStringLiteral

    public static class ftExtensionOption_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ftExtensionOption
    // etc/XQFT.g:668:2: ftExtensionOption : OPTION qName StringLiteral ;
    public final ftExtensionOption_return ftExtensionOption() throws RecognitionException {
        ftExtensionOption_return retval = new ftExtensionOption_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token OPTION513=null;
        Token StringLiteral515=null;
        qName_return qName514 = null;


        XQFTTree OPTION513_tree=null;
        XQFTTree StringLiteral515_tree=null;

        try {
            // etc/XQFT.g:668:33: ( OPTION qName StringLiteral )
            // etc/XQFT.g:668:35: OPTION qName StringLiteral
            {
            root_0 = (XQFTTree)adaptor.nil();

            OPTION513=(Token)input.LT(1);
            match(input,OPTION,FOLLOW_OPTION_in_ftExtensionOption8558); if (failed) return retval;
            if ( backtracking==0 ) {
            OPTION513_tree = (XQFTTree)adaptor.create(OPTION513);
            adaptor.addChild(root_0, OPTION513_tree);
            }
            pushFollow(FOLLOW_qName_in_ftExtensionOption8560);
            qName514=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, qName514.getTree());
            StringLiteral515=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_ftExtensionOption8562); if (failed) return retval;
            if ( backtracking==0 ) {
            StringLiteral515_tree = (XQFTTree)adaptor.create(StringLiteral515);
            adaptor.addChild(root_0, StringLiteral515_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end ftExtensionOption

    public static class valueExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start valueExpr
    // etc/XQFT.g:672:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );
    public final valueExpr_return valueExpr() throws RecognitionException {
        valueExpr_return retval = new valueExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        validateExpr_return validateExpr516 = null;

        pathExpr_return pathExpr517 = null;

        extensionExpr_return extensionExpr518 = null;



        try {
            // etc/XQFT.g:672:32: ( validateExpr | pathExpr | extensionExpr )
            int alt115=3;
            switch ( input.LA(1) ) {
            case VALIDATE:
                {
                alt115=1;
                }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case ATTRIBUTE:
            case CHILD:
            case COMMENT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case NODE:
            case ORDERED:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case SELF:
            case TEXT:
            case UNORDERED:
            case StringLiteral:
            case NCName:
            case DOLLARSi:
            case LPARSi:
            case STARSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case DBLSLASHSi:
            case SLASHSi:
            case DOTDOTSi:
            case ATSi:
            case DOTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt115=2;
                }
                break;
            case LPRAGSi:
                {
                alt115=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("672:1: valueExpr : ( validateExpr | pathExpr | extensionExpr );", 115, 0, input);

                throw nvae;
            }

            switch (alt115) {
                case 1 :
                    // etc/XQFT.g:672:34: validateExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_validateExpr_in_valueExpr8594);
                    validateExpr516=validateExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, validateExpr516.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:672:49: pathExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_pathExpr_in_valueExpr8598);
                    pathExpr517=pathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, pathExpr517.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:672:60: extensionExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_extensionExpr_in_valueExpr8602);
                    extensionExpr518=extensionExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, extensionExpr518.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end valueExpr

    public static class validateExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start validateExpr
    // etc/XQFT.g:675:2: validateExpr : VALIDATE ( validationMode )? LBRACESi expr RBRACSi ;
    public final validateExpr_return validateExpr() throws RecognitionException {
        validateExpr_return retval = new validateExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token VALIDATE519=null;
        Token LBRACESi521=null;
        Token RBRACSi523=null;
        validationMode_return validationMode520 = null;

        expr_return expr522 = null;


        XQFTTree VALIDATE519_tree=null;
        XQFTTree LBRACESi521_tree=null;
        XQFTTree RBRACSi523_tree=null;

        try {
            // etc/XQFT.g:675:33: ( VALIDATE ( validationMode )? LBRACESi expr RBRACSi )
            // etc/XQFT.g:675:35: VALIDATE ( validationMode )? LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            VALIDATE519=(Token)input.LT(1);
            match(input,VALIDATE,FOLLOW_VALIDATE_in_validateExpr8630); if (failed) return retval;
            if ( backtracking==0 ) {
            VALIDATE519_tree = (XQFTTree)adaptor.create(VALIDATE519);
            adaptor.addChild(root_0, VALIDATE519_tree);
            }
            // etc/XQFT.g:675:44: ( validationMode )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==LAX||LA116_0==STRICT) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // etc/XQFT.g:675:44: validationMode
                    {
                    pushFollow(FOLLOW_validationMode_in_validateExpr8632);
                    validationMode520=validationMode();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, validationMode520.getTree());

                    }
                    break;

            }

            LBRACESi521=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_validateExpr8635); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_validateExpr8638);
            expr522=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr522.getTree());
            RBRACSi523=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_validateExpr8640); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end validateExpr

    public static class validationMode_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start validationMode
    // etc/XQFT.g:676:3: validationMode : ( LAX | STRICT );
    public final validationMode_return validationMode() throws RecognitionException {
        validationMode_return retval = new validationMode_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set524=null;

        XQFTTree set524_tree=null;

        try {
            // etc/XQFT.g:676:34: ( LAX | STRICT )
            // etc/XQFT.g:
            {
            root_0 = (XQFTTree)adaptor.nil();

            set524=(Token)input.LT(1);
            if ( input.LA(1)==LAX||input.LA(1)==STRICT ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set524));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_validationMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end validationMode

    public static class pathExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start pathExpr
    // etc/XQFT.g:681:2: pathExpr : ({...}? DBLSLASHSi relativePathExpr | {...}? SLASHSi relativePathExpr | SLASHSi relativePathExpr | SLASHSi | relativePathExpr );
    public final pathExpr_return pathExpr() throws RecognitionException {
        pathExpr_return retval = new pathExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DBLSLASHSi525=null;
        Token SLASHSi527=null;
        Token SLASHSi529=null;
        Token SLASHSi531=null;
        relativePathExpr_return relativePathExpr526 = null;

        relativePathExpr_return relativePathExpr528 = null;

        relativePathExpr_return relativePathExpr530 = null;

        relativePathExpr_return relativePathExpr532 = null;


        XQFTTree DBLSLASHSi525_tree=null;
        XQFTTree SLASHSi527_tree=null;
        XQFTTree SLASHSi529_tree=null;
        XQFTTree SLASHSi531_tree=null;

        try {
            // etc/XQFT.g:681:33: ({...}? DBLSLASHSi relativePathExpr | {...}? SLASHSi relativePathExpr | SLASHSi relativePathExpr | SLASHSi | relativePathExpr )
            int alt117=5;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // etc/XQFT.g:681:35: {...}? DBLSLASHSi relativePathExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    if ( !(input.LA(1)=='/' && input.LA(2)=='/') ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "pathExpr", "input.LA(1)=='/' && input.LA(2)=='/'");
                    }
                    DBLSLASHSi525=(Token)input.LT(1);
                    match(input,DBLSLASHSi,FOLLOW_DBLSLASHSi_in_pathExpr8712); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DBLSLASHSi525_tree = (XQFTTree)adaptor.create(DBLSLASHSi525);
                    adaptor.addChild(root_0, DBLSLASHSi525_tree);
                    }
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8714);
                    relativePathExpr526=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr526.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:682:14: {...}? SLASHSi relativePathExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    if ( !(input.LA(2)=='*') ) {
                        if (backtracking>0) {failed=true; return retval;}
                        throw new FailedPredicateException(input, "pathExpr", "input.LA(2)=='*'");
                    }
                    SLASHSi527=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr8732); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SLASHSi527_tree = (XQFTTree)adaptor.create(SLASHSi527);
                    adaptor.addChild(root_0, SLASHSi527_tree);
                    }
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8734);
                    relativePathExpr528=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr528.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:683:47: SLASHSi relativePathExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    SLASHSi529=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr8782); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SLASHSi529_tree = (XQFTTree)adaptor.create(SLASHSi529);
                    adaptor.addChild(root_0, SLASHSi529_tree);
                    }
                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8784);
                    relativePathExpr530=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr530.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:684:14: SLASHSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    SLASHSi531=(Token)input.LT(1);
                    match(input,SLASHSi,FOLLOW_SLASHSi_in_pathExpr8799); if (failed) return retval;
                    if ( backtracking==0 ) {
                    SLASHSi531_tree = (XQFTTree)adaptor.create(SLASHSi531);
                    adaptor.addChild(root_0, SLASHSi531_tree);
                    }

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:685:14: relativePathExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_relativePathExpr_in_pathExpr8814);
                    relativePathExpr532=relativePathExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, relativePathExpr532.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end pathExpr

    public static class relativePathExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start relativePathExpr
    // etc/XQFT.g:688:3: relativePathExpr : stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )* ;
    public final relativePathExpr_return relativePathExpr() throws RecognitionException {
        relativePathExpr_return retval = new relativePathExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set534=null;
        stepExpr_return stepExpr533 = null;

        stepExpr_return stepExpr535 = null;


        XQFTTree set534_tree=null;

        try {
            // etc/XQFT.g:688:34: ( stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )* )
            // etc/XQFT.g:688:36: stepExpr ( ( SLASHSi | DBLSLASHSi ) stepExpr )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_stepExpr_in_relativePathExpr8850);
            stepExpr533=stepExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, stepExpr533.getTree());
            // etc/XQFT.g:688:45: ( ( SLASHSi | DBLSLASHSi ) stepExpr )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( ((LA118_0>=DBLSLASHSi && LA118_0<=SLASHSi)) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // etc/XQFT.g:688:46: ( SLASHSi | DBLSLASHSi ) stepExpr
            	    {
            	    set534=(Token)input.LT(1);
            	    if ( (input.LA(1)>=DBLSLASHSi && input.LA(1)<=SLASHSi) ) {
            	        input.consume();
            	        if ( backtracking==0 ) root_0 = (XQFTTree)adaptor.becomeRoot(adaptor.create(set534), root_0);
            	        errorRecovery=false;failed=false;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return retval;}
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_relativePathExpr8853);    throw mse;
            	    }

            	    pushFollow(FOLLOW_stepExpr_in_relativePathExpr8862);
            	    stepExpr535=stepExpr();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, stepExpr535.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end relativePathExpr

    public static class stepExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start stepExpr
    // etc/XQFT.g:690:4: stepExpr : ( axisStep | filterExpr );
    public final stepExpr_return stepExpr() throws RecognitionException {
        stepExpr_return retval = new stepExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        axisStep_return axisStep536 = null;

        filterExpr_return filterExpr537 = null;



        try {
            // etc/XQFT.g:690:35: ( axisStep | filterExpr )
            int alt119=2;
            switch ( input.LA(1) ) {
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case CHILD:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DOCUMENT_NODE:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case NODE:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case SELF:
            case STARSi:
            case DOTDOTSi:
            case ATSi:
                {
                alt119=1;
                }
                break;
            case ATTRIBUTE:
                {
                int LA119_2 = input.LA(2);

                if ( (LA119_2==LPARSi||LA119_2==DBLCOLONSi) ) {
                    alt119=1;
                }
                else if ( (LA119_2==NCName||LA119_2==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("690:4: stepExpr : ( axisStep | filterExpr );", 119, 2, input);

                    throw nvae;
                }
                }
                break;
            case ELEMENT:
                {
                int LA119_3 = input.LA(2);

                if ( (LA119_3==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_3==NCName||LA119_3==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("690:4: stepExpr : ( axisStep | filterExpr );", 119, 3, input);

                    throw nvae;
                }
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                int LA119_4 = input.LA(2);

                if ( (LA119_4==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_4==NCName||LA119_4==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("690:4: stepExpr : ( axisStep | filterExpr );", 119, 4, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
                {
                int LA119_5 = input.LA(2);

                if ( (LA119_5==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_5==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("690:4: stepExpr : ( axisStep | filterExpr );", 119, 5, input);

                    throw nvae;
                }
                }
                break;
            case TEXT:
                {
                int LA119_6 = input.LA(2);

                if ( (LA119_6==LPARSi) ) {
                    alt119=1;
                }
                else if ( (LA119_6==LBRACESi) ) {
                    alt119=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("690:4: stepExpr : ( axisStep | filterExpr );", 119, 6, input);

                    throw nvae;
                }
                }
                break;
            case NCName:
                {
                switch ( input.LA(2) ) {
                case COLONSi:
                    {
                    int LA119_9 = input.LA(3);

                    if ( (LA119_9==STARSi) ) {
                        alt119=1;
                    }
                    else if ( (LA119_9==NCName) ) {
                        int LA119_10 = input.LA(4);

                        if ( (LA119_10==EOF||LA119_10==AND||LA119_10==ASCENDING||(LA119_10>=CASE && LA119_10<=CASTABLE)||LA119_10==COLLATION||LA119_10==DEFAULT||LA119_10==DESCENDING||LA119_10==DIV||LA119_10==ELSE||LA119_10==EMPTY||LA119_10==EQ||LA119_10==EXCEPT||LA119_10==FOR||LA119_10==FTCONTAINS||LA119_10==GE||(LA119_10>=GT && LA119_10<=IDIV)||(LA119_10>=INSTANCE && LA119_10<=IS)||LA119_10==LE||(LA119_10>=LET && LA119_10<=LEVELS)||(LA119_10>=LT && LA119_10<=MOD)||LA119_10==NE||(LA119_10>=OR && LA119_10<=ORDER)||LA119_10==PARAGRAPHS||LA119_10==RETURN||LA119_10==SATISFIES||LA119_10==SENTENCES||LA119_10==STABLE||(LA119_10>=TIMES && LA119_10<=TREAT)||LA119_10==UNION||LA119_10==WHERE||LA119_10==WITHOUT||LA119_10==WORDS||LA119_10==SEMICOLONSi||(LA119_10>=EQSi && LA119_10<=COMMASi)||LA119_10==RPARSi||LA119_10==RBRACSi||(LA119_10>=STARSi && LA119_10<=NODEAFTERSi)||(LA119_10>=DBLSLASHSi && LA119_10<=SLASHSi)||(LA119_10>=LBRACKSi && LA119_10<=RBRACKSi)) ) {
                            alt119=1;
                        }
                        else if ( (LA119_10==LPARSi) ) {
                            alt119=2;
                        }
                        else {
                            if (backtracking>0) {failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("690:4: stepExpr : ( axisStep | filterExpr );", 119, 10, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("690:4: stepExpr : ( axisStep | filterExpr );", 119, 9, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOF:
                case AND:
                case ASCENDING:
                case CASE:
                case CAST:
                case CASTABLE:
                case COLLATION:
                case DEFAULT:
                case DESCENDING:
                case DIV:
                case ELSE:
                case EMPTY:
                case EQ:
                case EXCEPT:
                case FOR:
                case FTCONTAINS:
                case GE:
                case GT:
                case IDIV:
                case INSTANCE:
                case INTERSECT:
                case IS:
                case LE:
                case LET:
                case LEVELS:
                case LT:
                case MOD:
                case NE:
                case OR:
                case ORDER:
                case PARAGRAPHS:
                case RETURN:
                case SATISFIES:
                case SENTENCES:
                case STABLE:
                case TIMES:
                case TO:
                case TREAT:
                case UNION:
                case WHERE:
                case WITHOUT:
                case WORDS:
                case SEMICOLONSi:
                case EQSi:
                case COMMASi:
                case RPARSi:
                case RBRACSi:
                case STARSi:
                case PLUSSi:
                case MINUSSi:
                case PIPESi:
                case NEQSi:
                case LTSi:
                case LTOREQSi:
                case GTSi:
                case GTOREQSi:
                case NODEBEFORESi:
                case NODEAFTERSi:
                case DBLSLASHSi:
                case SLASHSi:
                case LBRACKSi:
                case RBRACKSi:
                    {
                    alt119=1;
                    }
                    break;
                case LPARSi:
                    {
                    alt119=2;
                    }
                    break;
                default:
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("690:4: stepExpr : ( axisStep | filterExpr );", 119, 7, input);

                    throw nvae;
                }

                }
                break;
            case DOCUMENT:
            case ORDERED:
            case UNORDERED:
            case StringLiteral:
            case DOLLARSi:
            case LPARSi:
            case LTSi:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
            case DOTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt119=2;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("690:4: stepExpr : ( axisStep | filterExpr );", 119, 0, input);

                throw nvae;
            }

            switch (alt119) {
                case 1 :
                    // etc/XQFT.g:690:37: axisStep
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_axisStep_in_stepExpr8897);
                    axisStep536=axisStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, axisStep536.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:691:16: filterExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_filterExpr_in_stepExpr8914);
                    filterExpr537=filterExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, filterExpr537.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end stepExpr

    public static class axisStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start axisStep
    // etc/XQFT.g:694:4: axisStep : ( reverseStep | forwardStep ) predicateList ;
    public final axisStep_return axisStep() throws RecognitionException {
        axisStep_return retval = new axisStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        reverseStep_return reverseStep538 = null;

        forwardStep_return forwardStep539 = null;

        predicateList_return predicateList540 = null;



        try {
            // etc/XQFT.g:694:35: ( ( reverseStep | forwardStep ) predicateList )
            // etc/XQFT.g:694:37: ( reverseStep | forwardStep ) predicateList
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:694:37: ( reverseStep | forwardStep )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( ((LA120_0>=ANCESTOR && LA120_0<=ANCESTOR_OR_SELF)||LA120_0==PARENT||(LA120_0>=PRECEDING && LA120_0<=PRECEDING_SIBLING)||LA120_0==DOTDOTSi) ) {
                alt120=1;
            }
            else if ( (LA120_0==ATTRIBUTE||LA120_0==CHILD||LA120_0==COMMENT||(LA120_0>=DESCENDANT && LA120_0<=DESCENDANT_OR_SELF)||(LA120_0>=DOCUMENT_NODE && LA120_0<=ELEMENT)||(LA120_0>=FOLLOWING && LA120_0<=FOLLOWING_SIBLING)||LA120_0==NODE||LA120_0==PROCESSING_INSTRUCTION||(LA120_0>=SCHEMAATTRIBUTE && LA120_0<=SCHEMAELEMENT)||LA120_0==SELF||LA120_0==TEXT||LA120_0==NCName||LA120_0==STARSi||LA120_0==ATSi) ) {
                alt120=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("694:37: ( reverseStep | forwardStep )", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // etc/XQFT.g:694:38: reverseStep
                    {
                    pushFollow(FOLLOW_reverseStep_in_axisStep8962);
                    reverseStep538=reverseStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, reverseStep538.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:694:52: forwardStep
                    {
                    pushFollow(FOLLOW_forwardStep_in_axisStep8966);
                    forwardStep539=forwardStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, forwardStep539.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_predicateList_in_axisStep8970);
            predicateList540=predicateList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, predicateList540.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end axisStep

    public static class reverseStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start reverseStep
    // etc/XQFT.g:696:5: reverseStep : ( reverseAxis nodeTest | abbrevReverseStep );
    public final reverseStep_return reverseStep() throws RecognitionException {
        reverseStep_return retval = new reverseStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        reverseAxis_return reverseAxis541 = null;

        nodeTest_return nodeTest542 = null;

        abbrevReverseStep_return abbrevReverseStep543 = null;



        try {
            // etc/XQFT.g:696:36: ( reverseAxis nodeTest | abbrevReverseStep )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( ((LA121_0>=ANCESTOR && LA121_0<=ANCESTOR_OR_SELF)||LA121_0==PARENT||(LA121_0>=PRECEDING && LA121_0<=PRECEDING_SIBLING)) ) {
                alt121=1;
            }
            else if ( (LA121_0==DOTDOTSi) ) {
                alt121=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("696:5: reverseStep : ( reverseAxis nodeTest | abbrevReverseStep );", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // etc/XQFT.g:696:38: reverseAxis nodeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_reverseAxis_in_reverseStep9004);
                    reverseAxis541=reverseAxis();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, reverseAxis541.getTree());
                    pushFollow(FOLLOW_nodeTest_in_reverseStep9006);
                    nodeTest542=nodeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest542.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:696:61: abbrevReverseStep
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_abbrevReverseStep_in_reverseStep9010);
                    abbrevReverseStep543=abbrevReverseStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, abbrevReverseStep543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end reverseStep

    public static class reverseAxis_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start reverseAxis
    // etc/XQFT.g:697:6: reverseAxis : ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi ;
    public final reverseAxis_return reverseAxis() throws RecognitionException {
        reverseAxis_return retval = new reverseAxis_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set544=null;
        Token DBLCOLONSi545=null;

        XQFTTree set544_tree=null;
        XQFTTree DBLCOLONSi545_tree=null;

        try {
            // etc/XQFT.g:697:37: ( ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi )
            // etc/XQFT.g:697:39: ( PARENT | ANCESTOR | PRECEDING_SIBLING | PRECEDING | ANCESTOR_OR_SELF ) DBLCOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            set544=(Token)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=ANCESTOR_OR_SELF)||input.LA(1)==PARENT||(input.LA(1)>=PRECEDING && input.LA(1)<=PRECEDING_SIBLING) ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set544));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_reverseAxis9041);    throw mse;
            }

            DBLCOLONSi545=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_reverseAxis9061); if (failed) return retval;
            if ( backtracking==0 ) {
            DBLCOLONSi545_tree = (XQFTTree)adaptor.create(DBLCOLONSi545);
            adaptor.addChild(root_0, DBLCOLONSi545_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end reverseAxis

    public static class nodeTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nodeTest
    // etc/XQFT.g:698:6: nodeTest : ( kindTest | nameTest );
    public final nodeTest_return nodeTest() throws RecognitionException {
        nodeTest_return retval = new nodeTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        kindTest_return kindTest546 = null;

        nameTest_return nameTest547 = null;



        try {
            // etc/XQFT.g:698:37: ( kindTest | nameTest )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==ATTRIBUTE||LA122_0==COMMENT||(LA122_0>=DOCUMENT_NODE && LA122_0<=ELEMENT)||LA122_0==NODE||LA122_0==PROCESSING_INSTRUCTION||(LA122_0>=SCHEMAATTRIBUTE && LA122_0<=SCHEMAELEMENT)||LA122_0==TEXT) ) {
                alt122=1;
            }
            else if ( (LA122_0==NCName||LA122_0==STARSi) ) {
                alt122=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("698:6: nodeTest : ( kindTest | nameTest );", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // etc/XQFT.g:698:39: kindTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_kindTest_in_nodeTest9095);
                    kindTest546=kindTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, kindTest546.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:698:50: nameTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_nameTest_in_nodeTest9099);
                    nameTest547=nameTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nameTest547.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nodeTest

    public static class nameTest_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nameTest
    // etc/XQFT.g:700:7: nameTest : ( qName | wildcard );
    public final nameTest_return nameTest() throws RecognitionException {
        nameTest_return retval = new nameTest_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        qName_return qName548 = null;

        wildcard_return wildcard549 = null;



        try {
            // etc/XQFT.g:700:38: ( qName | wildcard )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==NCName) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==COLONSi) ) {
                    int LA123_3 = input.LA(3);

                    if ( (LA123_3==STARSi) ) {
                        alt123=2;
                    }
                    else if ( (LA123_3==NCName) ) {
                        alt123=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("700:7: nameTest : ( qName | wildcard );", 123, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA123_1==EOF||LA123_1==AND||LA123_1==ASCENDING||(LA123_1>=CASE && LA123_1<=CASTABLE)||LA123_1==COLLATION||LA123_1==DEFAULT||LA123_1==DESCENDING||LA123_1==DIV||LA123_1==ELSE||LA123_1==EMPTY||LA123_1==EQ||LA123_1==EXCEPT||LA123_1==FOR||LA123_1==FTCONTAINS||LA123_1==GE||(LA123_1>=GT && LA123_1<=IDIV)||(LA123_1>=INSTANCE && LA123_1<=IS)||LA123_1==LE||(LA123_1>=LET && LA123_1<=LEVELS)||(LA123_1>=LT && LA123_1<=MOD)||LA123_1==NE||(LA123_1>=OR && LA123_1<=ORDER)||LA123_1==PARAGRAPHS||LA123_1==RETURN||LA123_1==SATISFIES||LA123_1==SENTENCES||LA123_1==STABLE||(LA123_1>=TIMES && LA123_1<=TREAT)||LA123_1==UNION||LA123_1==WHERE||LA123_1==WITHOUT||LA123_1==WORDS||LA123_1==SEMICOLONSi||(LA123_1>=EQSi && LA123_1<=COMMASi)||LA123_1==RPARSi||LA123_1==RBRACSi||(LA123_1>=STARSi && LA123_1<=NODEAFTERSi)||(LA123_1>=DBLSLASHSi && LA123_1<=SLASHSi)||(LA123_1>=LBRACKSi && LA123_1<=RBRACKSi)) ) {
                    alt123=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("700:7: nameTest : ( qName | wildcard );", 123, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==STARSi) ) {
                alt123=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("700:7: nameTest : ( qName | wildcard );", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // etc/XQFT.g:700:40: qName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_qName_in_nameTest9135);
                    qName548=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName548.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:700:48: wildcard
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_wildcard_in_nameTest9139);
                    wildcard549=wildcard();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, wildcard549.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end nameTest

    public static class wildcard_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start wildcard
    // etc/XQFT.g:701:8: wildcard : ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi );
    public final wildcard_return wildcard() throws RecognitionException {
        wildcard_return retval = new wildcard_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token STARSi550=null;
        Token COLONSi551=null;
        Token NCName552=null;
        Token STARSi553=null;
        Token NCName554=null;
        Token COLONSi555=null;
        Token STARSi556=null;

        XQFTTree STARSi550_tree=null;
        XQFTTree COLONSi551_tree=null;
        XQFTTree NCName552_tree=null;
        XQFTTree STARSi553_tree=null;
        XQFTTree NCName554_tree=null;
        XQFTTree COLONSi555_tree=null;
        XQFTTree STARSi556_tree=null;

        try {
            // etc/XQFT.g:701:39: ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi )
            int alt124=3;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==STARSi) ) {
                int LA124_1 = input.LA(2);

                if ( (LA124_1==COLONSi) && (synpred2())) {
                    alt124=1;
                }
                else if ( (LA124_1==EOF||LA124_1==AND||LA124_1==ASCENDING||(LA124_1>=CASE && LA124_1<=CASTABLE)||LA124_1==COLLATION||LA124_1==DEFAULT||LA124_1==DESCENDING||LA124_1==DIV||LA124_1==ELSE||LA124_1==EMPTY||LA124_1==EQ||LA124_1==EXCEPT||LA124_1==FOR||LA124_1==FTCONTAINS||LA124_1==GE||(LA124_1>=GT && LA124_1<=IDIV)||(LA124_1>=INSTANCE && LA124_1<=IS)||LA124_1==LE||(LA124_1>=LET && LA124_1<=LEVELS)||(LA124_1>=LT && LA124_1<=MOD)||LA124_1==NE||(LA124_1>=OR && LA124_1<=ORDER)||LA124_1==PARAGRAPHS||LA124_1==RETURN||LA124_1==SATISFIES||LA124_1==SENTENCES||LA124_1==STABLE||(LA124_1>=TIMES && LA124_1<=TREAT)||LA124_1==UNION||LA124_1==WHERE||LA124_1==WITHOUT||LA124_1==WORDS||LA124_1==SEMICOLONSi||(LA124_1>=EQSi && LA124_1<=COMMASi)||LA124_1==RPARSi||LA124_1==RBRACSi||(LA124_1>=STARSi && LA124_1<=NODEAFTERSi)||(LA124_1>=DBLSLASHSi && LA124_1<=SLASHSi)||(LA124_1>=LBRACKSi && LA124_1<=RBRACKSi)) ) {
                    alt124=2;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("701:8: wildcard : ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi );", 124, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA124_0==NCName) ) {
                alt124=3;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("701:8: wildcard : ( ( STARSi COLONSi NCName )=> STARSi COLONSi NCName | STARSi | NCName COLONSi STARSi );", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // etc/XQFT.g:701:41: ( STARSi COLONSi NCName )=> STARSi COLONSi NCName
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi550=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard9185); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi550_tree = (XQFTTree)adaptor.create(STARSi550);
                    adaptor.addChild(root_0, STARSi550_tree);
                    }
                    COLONSi551=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard9187); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLONSi551_tree = (XQFTTree)adaptor.create(COLONSi551);
                    adaptor.addChild(root_0, COLONSi551_tree);
                    }
                    NCName552=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_wildcard9189); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName552_tree = (XQFTTree)adaptor.create(NCName552);
                    adaptor.addChild(root_0, NCName552_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:702:20: STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    STARSi553=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard9214); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi553_tree = (XQFTTree)adaptor.create(STARSi553);
                    adaptor.addChild(root_0, STARSi553_tree);
                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:703:44: NCName COLONSi STARSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    NCName554=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_wildcard9259); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName554_tree = (XQFTTree)adaptor.create(NCName554);
                    adaptor.addChild(root_0, NCName554_tree);
                    }
                    COLONSi555=(Token)input.LT(1);
                    match(input,COLONSi,FOLLOW_COLONSi_in_wildcard9261); if (failed) return retval;
                    if ( backtracking==0 ) {
                    COLONSi555_tree = (XQFTTree)adaptor.create(COLONSi555);
                    adaptor.addChild(root_0, COLONSi555_tree);
                    }
                    STARSi556=(Token)input.LT(1);
                    match(input,STARSi,FOLLOW_STARSi_in_wildcard9263); if (failed) return retval;
                    if ( backtracking==0 ) {
                    STARSi556_tree = (XQFTTree)adaptor.create(STARSi556);
                    adaptor.addChild(root_0, STARSi556_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end wildcard

    public static class abbrevReverseStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start abbrevReverseStep
    // etc/XQFT.g:704:21: abbrevReverseStep : DOTDOTSi ;
    public final abbrevReverseStep_return abbrevReverseStep() throws RecognitionException {
        abbrevReverseStep_return retval = new abbrevReverseStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOTDOTSi557=null;

        XQFTTree DOTDOTSi557_tree=null;

        try {
            // etc/XQFT.g:704:52: ( DOTDOTSi )
            // etc/XQFT.g:704:54: DOTDOTSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOTDOTSi557=(Token)input.LT(1);
            match(input,DOTDOTSi,FOLLOW_DOTDOTSi_in_abbrevReverseStep9304); if (failed) return retval;
            if ( backtracking==0 ) {
            DOTDOTSi557_tree = (XQFTTree)adaptor.create(DOTDOTSi557);
            adaptor.addChild(root_0, DOTDOTSi557_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end abbrevReverseStep

    public static class forwardStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forwardStep
    // etc/XQFT.g:706:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );
    public final forwardStep_return forwardStep() throws RecognitionException {
        forwardStep_return retval = new forwardStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        forwardAxis_return forwardAxis558 = null;

        nodeTest_return nodeTest559 = null;

        abbrevForwardStep_return abbrevForwardStep560 = null;



        try {
            // etc/XQFT.g:706:48: ( forwardAxis nodeTest | abbrevForwardStep )
            int alt125=2;
            switch ( input.LA(1) ) {
            case ATTRIBUTE:
                {
                int LA125_1 = input.LA(2);

                if ( (LA125_1==LPARSi) ) {
                    alt125=2;
                }
                else if ( (LA125_1==DBLCOLONSi) ) {
                    alt125=1;
                }
                else {
                    if (backtracking>0) {failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("706:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 1, input);

                    throw nvae;
                }
                }
                break;
            case COMMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case NODE:
            case PROCESSING_INSTRUCTION:
            case SCHEMAATTRIBUTE:
            case SCHEMAELEMENT:
            case TEXT:
            case NCName:
            case STARSi:
            case ATSi:
                {
                alt125=2;
                }
                break;
            case CHILD:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case SELF:
                {
                alt125=1;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("706:17: forwardStep : ( forwardAxis nodeTest | abbrevForwardStep );", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // etc/XQFT.g:706:50: forwardAxis nodeTest
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_forwardAxis_in_forwardStep9367);
                    forwardAxis558=forwardAxis();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, forwardAxis558.getTree());
                    pushFollow(FOLLOW_nodeTest_in_forwardStep9369);
                    nodeTest559=nodeTest();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest559.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:706:73: abbrevForwardStep
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_abbrevForwardStep_in_forwardStep9373);
                    abbrevForwardStep560=abbrevForwardStep();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, abbrevForwardStep560.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forwardStep

    public static class forwardAxis_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start forwardAxis
    // etc/XQFT.g:707:18: forwardAxis : ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi ;
    public final forwardAxis_return forwardAxis() throws RecognitionException {
        forwardAxis_return retval = new forwardAxis_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token set561=null;
        Token DBLCOLONSi562=null;

        XQFTTree set561_tree=null;
        XQFTTree DBLCOLONSi562_tree=null;

        try {
            // etc/XQFT.g:707:49: ( ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi )
            // etc/XQFT.g:707:51: ( CHILD | DESCENDANT | ATTRIBUTE | SELF | DESCENDANT_OR_SELF | FOLLOWING_SIBLING | FOLLOWING ) DBLCOLONSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            set561=(Token)input.LT(1);
            if ( input.LA(1)==ATTRIBUTE||input.LA(1)==CHILD||(input.LA(1)>=DESCENDANT && input.LA(1)<=DESCENDANT_OR_SELF)||(input.LA(1)>=FOLLOWING && input.LA(1)<=FOLLOWING_SIBLING)||input.LA(1)==SELF ) {
                input.consume();
                if ( backtracking==0 ) adaptor.addChild(root_0, adaptor.create(set561));
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_forwardAxis9420);    throw mse;
            }

            DBLCOLONSi562=(Token)input.LT(1);
            match(input,DBLCOLONSi,FOLLOW_DBLCOLONSi_in_forwardAxis9476); if (failed) return retval;
            if ( backtracking==0 ) {
            DBLCOLONSi562_tree = (XQFTTree)adaptor.create(DBLCOLONSi562);
            adaptor.addChild(root_0, DBLCOLONSi562_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end forwardAxis

    public static class abbrevForwardStep_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start abbrevForwardStep
    // etc/XQFT.g:715:6: abbrevForwardStep : ( ATSi )? nodeTest ;
    public final abbrevForwardStep_return abbrevForwardStep() throws RecognitionException {
        abbrevForwardStep_return retval = new abbrevForwardStep_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ATSi563=null;
        nodeTest_return nodeTest564 = null;


        XQFTTree ATSi563_tree=null;

        try {
            // etc/XQFT.g:715:37: ( ( ATSi )? nodeTest )
            // etc/XQFT.g:715:39: ( ATSi )? nodeTest
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:715:39: ( ATSi )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ATSi) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // etc/XQFT.g:715:39: ATSi
                    {
                    ATSi563=(Token)input.LT(1);
                    match(input,ATSi,FOLLOW_ATSi_in_abbrevForwardStep9507); if (failed) return retval;
                    if ( backtracking==0 ) {
                    ATSi563_tree = (XQFTTree)adaptor.create(ATSi563);
                    adaptor.addChild(root_0, ATSi563_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_nodeTest_in_abbrevForwardStep9510);
            nodeTest564=nodeTest();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, nodeTest564.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end abbrevForwardStep

    public static class predicateList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start predicateList
    // etc/XQFT.g:717:17: predicateList : ( predicate )* ;
    public final predicateList_return predicateList() throws RecognitionException {
        predicateList_return retval = new predicateList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        predicate_return predicate565 = null;



        try {
            // etc/XQFT.g:717:48: ( ( predicate )* )
            // etc/XQFT.g:717:50: ( predicate )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:717:50: ( predicate )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==LBRACKSi) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // etc/XQFT.g:717:50: predicate
            	    {
            	    pushFollow(FOLLOW_predicate_in_predicateList9584);
            	    predicate565=predicate();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, predicate565.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end predicateList

    public static class predicate_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start predicate
    // etc/XQFT.g:718:18: predicate : LBRACKSi expr RBRACKSi ;
    public final predicate_return predicate() throws RecognitionException {
        predicate_return retval = new predicate_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACKSi566=null;
        Token RBRACKSi568=null;
        expr_return expr567 = null;


        XQFTTree LBRACKSi566_tree=null;
        XQFTTree RBRACKSi568_tree=null;

        try {
            // etc/XQFT.g:718:49: ( LBRACKSi expr RBRACKSi )
            // etc/XQFT.g:718:51: LBRACKSi expr RBRACKSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LBRACKSi566=(Token)input.LT(1);
            match(input,LBRACKSi,FOLLOW_LBRACKSi_in_predicate9644); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_predicate9647);
            expr567=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr567.getTree());
            RBRACKSi568=(Token)input.LT(1);
            match(input,RBRACKSi,FOLLOW_RBRACKSi_in_predicate9649); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end predicate

    public static class extensionExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start extensionExpr
    // etc/XQFT.g:723:5: extensionExpr : ( pragma )+ LBRACESi ( expr )? RBRACSi ;
    public final extensionExpr_return extensionExpr() throws RecognitionException {
        extensionExpr_return retval = new extensionExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi570=null;
        Token RBRACSi572=null;
        pragma_return pragma569 = null;

        expr_return expr571 = null;


        XQFTTree LBRACESi570_tree=null;
        XQFTTree RBRACSi572_tree=null;

        try {
            // etc/XQFT.g:723:36: ( ( pragma )+ LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:723:38: ( pragma )+ LBRACESi ( expr )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:723:38: ( pragma )+
            int cnt128=0;
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==LPRAGSi) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // etc/XQFT.g:723:38: pragma
            	    {
            	    pushFollow(FOLLOW_pragma_in_extensionExpr9690);
            	    pragma569=pragma();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, pragma569.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (backtracking>0) {failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);

            LBRACESi570=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_extensionExpr9693); if (failed) return retval;
            // etc/XQFT.g:723:56: ( expr )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=ANCESTOR && LA129_0<=ANCESTOR_OR_SELF)||LA129_0==ATTRIBUTE||LA129_0==CHILD||LA129_0==COMMENT||(LA129_0>=DESCENDANT && LA129_0<=DESCENDANT_OR_SELF)||(LA129_0>=DOCUMENT && LA129_0<=ELEMENT)||LA129_0==EVERY||(LA129_0>=FOLLOWING && LA129_0<=FOR)||LA129_0==IF||LA129_0==LET||LA129_0==NODE||LA129_0==ORDERED||LA129_0==PARENT||(LA129_0>=PRECEDING && LA129_0<=PRECEDING_SIBLING)||LA129_0==PROCESSING_INSTRUCTION||(LA129_0>=SCHEMAATTRIBUTE && LA129_0<=SCHEMAELEMENT)||LA129_0==SELF||LA129_0==SOME||LA129_0==TEXT||LA129_0==TYPESWITCH||LA129_0==UNORDERED||LA129_0==VALIDATE||LA129_0==StringLiteral||LA129_0==NCName||LA129_0==DOLLARSi||LA129_0==LPARSi||(LA129_0>=STARSi && LA129_0<=MINUSSi)||LA129_0==LTSi||(LA129_0>=IntegerLiteral && LA129_0<=LPRAGSi)||(LA129_0>=DBLSLASHSi && LA129_0<=SLASHSi)||(LA129_0>=DOTDOTSi && LA129_0<=ATSi)||LA129_0==DOTSi||LA129_0==LCOMMENTSi||LA129_0==LPISi) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // etc/XQFT.g:723:56: expr
                    {
                    pushFollow(FOLLOW_expr_in_extensionExpr9696);
                    expr571=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr571.getTree());

                    }
                    break;

            }

            RBRACSi572=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_extensionExpr9699); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end extensionExpr

    public static class filterExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start filterExpr
    // etc/XQFT.g:731:1: filterExpr : primaryExpr predicateList ;
    public final filterExpr_return filterExpr() throws RecognitionException {
        filterExpr_return retval = new filterExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        primaryExpr_return primaryExpr573 = null;

        predicateList_return predicateList574 = null;



        try {
            // etc/XQFT.g:731:32: ( primaryExpr predicateList )
            // etc/XQFT.g:731:34: primaryExpr predicateList
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_primaryExpr_in_filterExpr9735);
            primaryExpr573=primaryExpr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, primaryExpr573.getTree());
            pushFollow(FOLLOW_predicateList_in_filterExpr9737);
            predicateList574=predicateList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, predicateList574.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end filterExpr

    public static class primaryExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primaryExpr
    // etc/XQFT.g:734:2: primaryExpr : ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor );
    public final primaryExpr_return primaryExpr() throws RecognitionException {
        primaryExpr_return retval = new primaryExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        literal_return literal575 = null;

        varRef_return varRef576 = null;

        parenthesizedExpr_return parenthesizedExpr577 = null;

        contextItemExpr_return contextItemExpr578 = null;

        functionCall_return functionCall579 = null;

        orderedExpr_return orderedExpr580 = null;

        unorderedExpr_return unorderedExpr581 = null;

        constructor_return constructor582 = null;



        try {
            // etc/XQFT.g:734:33: ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor )
            int alt130=8;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case IntegerLiteral:
            case DecimalLiteral:
            case DoubleLiteral:
                {
                alt130=1;
                }
                break;
            case DOLLARSi:
                {
                alt130=2;
                }
                break;
            case LPARSi:
                {
                alt130=3;
                }
                break;
            case DOTSi:
                {
                alt130=4;
                }
                break;
            case NCName:
                {
                alt130=5;
                }
                break;
            case ORDERED:
                {
                alt130=6;
                }
                break;
            case UNORDERED:
                {
                alt130=7;
                }
                break;
            case ATTRIBUTE:
            case COMMENT:
            case DOCUMENT:
            case ELEMENT:
            case PROCESSING_INSTRUCTION:
            case TEXT:
            case LTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt130=8;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("734:2: primaryExpr : ( literal | varRef | parenthesizedExpr | contextItemExpr | functionCall | orderedExpr | unorderedExpr | constructor );", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // etc/XQFT.g:734:35: literal
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpr9766);
                    literal575=literal();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, literal575.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:735:14: varRef
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_varRef_in_primaryExpr9782);
                    varRef576=varRef();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, varRef576.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:736:14: parenthesizedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpr_in_primaryExpr9798);
                    parenthesizedExpr577=parenthesizedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpr577.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:737:14: contextItemExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_contextItemExpr_in_primaryExpr9814);
                    contextItemExpr578=contextItemExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, contextItemExpr578.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:738:14: functionCall
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_functionCall_in_primaryExpr9830);
                    functionCall579=functionCall();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, functionCall579.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:739:14: orderedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_orderedExpr_in_primaryExpr9846);
                    orderedExpr580=orderedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, orderedExpr580.getTree());

                    }
                    break;
                case 7 :
                    // etc/XQFT.g:740:14: unorderedExpr
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_unorderedExpr_in_primaryExpr9862);
                    unorderedExpr581=unorderedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, unorderedExpr581.getTree());

                    }
                    break;
                case 8 :
                    // etc/XQFT.g:741:14: constructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_constructor_in_primaryExpr9878);
                    constructor582=constructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, constructor582.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end primaryExpr

    public static class varRef_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start varRef
    // etc/XQFT.g:745:3: varRef : DOLLARSi varName ;
    public final varRef_return varRef() throws RecognitionException {
        varRef_return retval = new varRef_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOLLARSi583=null;
        varName_return varName584 = null;


        XQFTTree DOLLARSi583_tree=null;

        try {
            // etc/XQFT.g:745:34: ( DOLLARSi varName )
            // etc/XQFT.g:745:36: DOLLARSi varName
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOLLARSi583=(Token)input.LT(1);
            match(input,DOLLARSi,FOLLOW_DOLLARSi_in_varRef9916); if (failed) return retval;
            pushFollow(FOLLOW_varName_in_varRef9919);
            varName584=varName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, varName584.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end varRef

    public static class parenthesizedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start parenthesizedExpr
    // etc/XQFT.g:747:3: parenthesizedExpr : LPARSi ( expr )? RPARSi ;
    public final parenthesizedExpr_return parenthesizedExpr() throws RecognitionException {
        parenthesizedExpr_return retval = new parenthesizedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPARSi585=null;
        Token RPARSi587=null;
        expr_return expr586 = null;


        XQFTTree LPARSi585_tree=null;
        XQFTTree RPARSi587_tree=null;

        try {
            // etc/XQFT.g:747:34: ( LPARSi ( expr )? RPARSi )
            // etc/XQFT.g:747:36: LPARSi ( expr )? RPARSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LPARSi585=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_parenthesizedExpr9942); if (failed) return retval;
            if ( backtracking==0 ) {
            LPARSi585_tree = (XQFTTree)adaptor.create(LPARSi585);
            adaptor.addChild(root_0, LPARSi585_tree);
            }
            // etc/XQFT.g:747:43: ( expr )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=ANCESTOR && LA131_0<=ANCESTOR_OR_SELF)||LA131_0==ATTRIBUTE||LA131_0==CHILD||LA131_0==COMMENT||(LA131_0>=DESCENDANT && LA131_0<=DESCENDANT_OR_SELF)||(LA131_0>=DOCUMENT && LA131_0<=ELEMENT)||LA131_0==EVERY||(LA131_0>=FOLLOWING && LA131_0<=FOR)||LA131_0==IF||LA131_0==LET||LA131_0==NODE||LA131_0==ORDERED||LA131_0==PARENT||(LA131_0>=PRECEDING && LA131_0<=PRECEDING_SIBLING)||LA131_0==PROCESSING_INSTRUCTION||(LA131_0>=SCHEMAATTRIBUTE && LA131_0<=SCHEMAELEMENT)||LA131_0==SELF||LA131_0==SOME||LA131_0==TEXT||LA131_0==TYPESWITCH||LA131_0==UNORDERED||LA131_0==VALIDATE||LA131_0==StringLiteral||LA131_0==NCName||LA131_0==DOLLARSi||LA131_0==LPARSi||(LA131_0>=STARSi && LA131_0<=MINUSSi)||LA131_0==LTSi||(LA131_0>=IntegerLiteral && LA131_0<=LPRAGSi)||(LA131_0>=DBLSLASHSi && LA131_0<=SLASHSi)||(LA131_0>=DOTDOTSi && LA131_0<=ATSi)||LA131_0==DOTSi||LA131_0==LCOMMENTSi||LA131_0==LPISi) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // etc/XQFT.g:747:43: expr
                    {
                    pushFollow(FOLLOW_expr_in_parenthesizedExpr9944);
                    expr586=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr586.getTree());

                    }
                    break;

            }

            RPARSi587=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_parenthesizedExpr9947); if (failed) return retval;
            if ( backtracking==0 ) {
            RPARSi587_tree = (XQFTTree)adaptor.create(RPARSi587);
            adaptor.addChild(root_0, RPARSi587_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end parenthesizedExpr

    public static class contextItemExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start contextItemExpr
    // etc/XQFT.g:750:3: contextItemExpr : DOTSi ;
    public final contextItemExpr_return contextItemExpr() throws RecognitionException {
        contextItemExpr_return retval = new contextItemExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOTSi588=null;

        XQFTTree DOTSi588_tree=null;

        try {
            // etc/XQFT.g:750:34: ( DOTSi )
            // etc/XQFT.g:750:36: DOTSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOTSi588=(Token)input.LT(1);
            match(input,DOTSi,FOLLOW_DOTSi_in_contextItemExpr9973); if (failed) return retval;
            if ( backtracking==0 ) {
            DOTSi588_tree = (XQFTTree)adaptor.create(DOTSi588);
            adaptor.addChild(root_0, DOTSi588_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end contextItemExpr

    public static class functionCall_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionCall
    // etc/XQFT.g:751:3: functionCall : qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi -> ^( AST_FUNCTIONCALL qName ( exprSingle )+ ) ;
    public final functionCall_return functionCall() throws RecognitionException {
        functionCall_return retval = new functionCall_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPARSi590=null;
        Token COMMASi592=null;
        Token RPARSi594=null;
        qName_return qName589 = null;

        exprSingle_return exprSingle591 = null;

        exprSingle_return exprSingle593 = null;


        XQFTTree LPARSi590_tree=null;
        XQFTTree COMMASi592_tree=null;
        XQFTTree RPARSi594_tree=null;
        RewriteRuleTokenStream stream_COMMASi=new RewriteRuleTokenStream(adaptor,"token COMMASi");
        RewriteRuleTokenStream stream_LPARSi=new RewriteRuleTokenStream(adaptor,"token LPARSi");
        RewriteRuleTokenStream stream_RPARSi=new RewriteRuleTokenStream(adaptor,"token RPARSi");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_exprSingle=new RewriteRuleSubtreeStream(adaptor,"rule exprSingle");
        try {
            // etc/XQFT.g:751:34: ( qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi -> ^( AST_FUNCTIONCALL qName ( exprSingle )+ ) )
            // etc/XQFT.g:751:36: qName LPARSi ( exprSingle ( COMMASi exprSingle )* )? RPARSi
            {
            pushFollow(FOLLOW_qName_in_functionCall10000);
            qName589=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qName.add(qName589.getTree());
            LPARSi590=(Token)input.LT(1);
            match(input,LPARSi,FOLLOW_LPARSi_in_functionCall10002); if (failed) return retval;
            if ( backtracking==0 ) stream_LPARSi.add(LPARSi590);

            // etc/XQFT.g:752:14: ( exprSingle ( COMMASi exprSingle )* )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( ((LA133_0>=ANCESTOR && LA133_0<=ANCESTOR_OR_SELF)||LA133_0==ATTRIBUTE||LA133_0==CHILD||LA133_0==COMMENT||(LA133_0>=DESCENDANT && LA133_0<=DESCENDANT_OR_SELF)||(LA133_0>=DOCUMENT && LA133_0<=ELEMENT)||LA133_0==EVERY||(LA133_0>=FOLLOWING && LA133_0<=FOR)||LA133_0==IF||LA133_0==LET||LA133_0==NODE||LA133_0==ORDERED||LA133_0==PARENT||(LA133_0>=PRECEDING && LA133_0<=PRECEDING_SIBLING)||LA133_0==PROCESSING_INSTRUCTION||(LA133_0>=SCHEMAATTRIBUTE && LA133_0<=SCHEMAELEMENT)||LA133_0==SELF||LA133_0==SOME||LA133_0==TEXT||LA133_0==TYPESWITCH||LA133_0==UNORDERED||LA133_0==VALIDATE||LA133_0==StringLiteral||LA133_0==NCName||LA133_0==DOLLARSi||LA133_0==LPARSi||(LA133_0>=STARSi && LA133_0<=MINUSSi)||LA133_0==LTSi||(LA133_0>=IntegerLiteral && LA133_0<=LPRAGSi)||(LA133_0>=DBLSLASHSi && LA133_0<=SLASHSi)||(LA133_0>=DOTDOTSi && LA133_0<=ATSi)||LA133_0==DOTSi||LA133_0==LCOMMENTSi||LA133_0==LPISi) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // etc/XQFT.g:752:15: exprSingle ( COMMASi exprSingle )*
                    {
                    pushFollow(FOLLOW_exprSingle_in_functionCall10020);
                    exprSingle591=exprSingle();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_exprSingle.add(exprSingle591.getTree());
                    // etc/XQFT.g:752:26: ( COMMASi exprSingle )*
                    loop132:
                    do {
                        int alt132=2;
                        int LA132_0 = input.LA(1);

                        if ( (LA132_0==COMMASi) ) {
                            alt132=1;
                        }


                        switch (alt132) {
                    	case 1 :
                    	    // etc/XQFT.g:752:27: COMMASi exprSingle
                    	    {
                    	    COMMASi592=(Token)input.LT(1);
                    	    match(input,COMMASi,FOLLOW_COMMASi_in_functionCall10023); if (failed) return retval;
                    	    if ( backtracking==0 ) stream_COMMASi.add(COMMASi592);

                    	    pushFollow(FOLLOW_exprSingle_in_functionCall10025);
                    	    exprSingle593=exprSingle();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_exprSingle.add(exprSingle593.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);


                    }
                    break;

            }

            RPARSi594=(Token)input.LT(1);
            match(input,RPARSi,FOLLOW_RPARSi_in_functionCall10045); if (failed) return retval;
            if ( backtracking==0 ) stream_RPARSi.add(RPARSi594);


            // AST REWRITE
            // elements: exprSingle, qName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 754:53: -> ^( AST_FUNCTIONCALL qName ( exprSingle )+ )
            {
                // etc/XQFT.g:754:56: ^( AST_FUNCTIONCALL qName ( exprSingle )+ )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_FUNCTIONCALL, "AST_FUNCTIONCALL"), root_1);

                adaptor.addChild(root_1, stream_qName.next());
                if ( !(stream_exprSingle.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_exprSingle.hasNext() ) {
                    adaptor.addChild(root_1, stream_exprSingle.next());

                }
                stream_exprSingle.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionCall

    public static class orderedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderedExpr
    // etc/XQFT.g:757:3: orderedExpr : ORDERED LBRACESi expr RBRACSi ;
    public final orderedExpr_return orderedExpr() throws RecognitionException {
        orderedExpr_return retval = new orderedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ORDERED595=null;
        Token LBRACESi596=null;
        Token RBRACSi598=null;
        expr_return expr597 = null;


        XQFTTree ORDERED595_tree=null;
        XQFTTree LBRACESi596_tree=null;
        XQFTTree RBRACSi598_tree=null;

        try {
            // etc/XQFT.g:757:34: ( ORDERED LBRACESi expr RBRACSi )
            // etc/XQFT.g:757:36: ORDERED LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ORDERED595=(Token)input.LT(1);
            match(input,ORDERED,FOLLOW_ORDERED_in_orderedExpr10138); if (failed) return retval;
            if ( backtracking==0 ) {
            ORDERED595_tree = (XQFTTree)adaptor.create(ORDERED595);
            adaptor.addChild(root_0, ORDERED595_tree);
            }
            LBRACESi596=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_orderedExpr10140); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_orderedExpr10143);
            expr597=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr597.getTree());
            RBRACSi598=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_orderedExpr10145); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderedExpr

    public static class unorderedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unorderedExpr
    // etc/XQFT.g:760:3: unorderedExpr : UNORDERED LBRACESi expr RBRACSi ;
    public final unorderedExpr_return unorderedExpr() throws RecognitionException {
        unorderedExpr_return retval = new unorderedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token UNORDERED599=null;
        Token LBRACESi600=null;
        Token RBRACSi602=null;
        expr_return expr601 = null;


        XQFTTree UNORDERED599_tree=null;
        XQFTTree LBRACESi600_tree=null;
        XQFTTree RBRACSi602_tree=null;

        try {
            // etc/XQFT.g:760:34: ( UNORDERED LBRACESi expr RBRACSi )
            // etc/XQFT.g:760:36: UNORDERED LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            UNORDERED599=(Token)input.LT(1);
            match(input,UNORDERED,FOLLOW_UNORDERED_in_unorderedExpr10174); if (failed) return retval;
            if ( backtracking==0 ) {
            UNORDERED599_tree = (XQFTTree)adaptor.create(UNORDERED599);
            adaptor.addChild(root_0, UNORDERED599_tree);
            }
            LBRACESi600=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_unorderedExpr10176); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_unorderedExpr10179);
            expr601=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr601.getTree());
            RBRACSi602=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_unorderedExpr10181); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end unorderedExpr

    public static class constructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constructor
    // etc/XQFT.g:763:3: constructor : ( directConstructor | computedConstructor );
    public final constructor_return constructor() throws RecognitionException {
        constructor_return retval = new constructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        directConstructor_return directConstructor603 = null;

        computedConstructor_return computedConstructor604 = null;



        try {
            // etc/XQFT.g:763:34: ( directConstructor | computedConstructor )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==LTSi||LA134_0==LCOMMENTSi||LA134_0==LPISi) ) {
                alt134=1;
            }
            else if ( (LA134_0==ATTRIBUTE||LA134_0==COMMENT||LA134_0==DOCUMENT||LA134_0==ELEMENT||LA134_0==PROCESSING_INSTRUCTION||LA134_0==TEXT) ) {
                alt134=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("763:3: constructor : ( directConstructor | computedConstructor );", 134, 0, input);

                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    // etc/XQFT.g:763:36: directConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_directConstructor_in_constructor10213);
                    directConstructor603=directConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, directConstructor603.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:763:56: computedConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_computedConstructor_in_constructor10217);
                    computedConstructor604=computedConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, computedConstructor604.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end constructor

    public static class directConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start directConstructor
    // etc/XQFT.g:766:4: directConstructor : ( dirElemConstructor | dirCommentConstructor | dirPIConstructor );
    public final directConstructor_return directConstructor() throws RecognitionException {
        directConstructor_return retval = new directConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        dirElemConstructor_return dirElemConstructor605 = null;

        dirCommentConstructor_return dirCommentConstructor606 = null;

        dirPIConstructor_return dirPIConstructor607 = null;



        try {
            // etc/XQFT.g:766:35: ( dirElemConstructor | dirCommentConstructor | dirPIConstructor )
            int alt135=3;
            switch ( input.LA(1) ) {
            case LTSi:
                {
                alt135=1;
                }
                break;
            case LCOMMENTSi:
                {
                alt135=2;
                }
                break;
            case LPISi:
                {
                alt135=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("766:4: directConstructor : ( dirElemConstructor | dirCommentConstructor | dirPIConstructor );", 135, 0, input);

                throw nvae;
            }

            switch (alt135) {
                case 1 :
                    // etc/XQFT.g:766:37: dirElemConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_dirElemConstructor_in_directConstructor10257);
                    dirElemConstructor605=dirElemConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirElemConstructor605.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:767:40: dirCommentConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_dirCommentConstructor_in_directConstructor10298);
                    dirCommentConstructor606=dirCommentConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirCommentConstructor606.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:768:28: dirPIConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_dirPIConstructor_in_directConstructor10327);
                    dirPIConstructor607=dirPIConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, dirPIConstructor607.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end directConstructor

    public static class dirElemConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirElemConstructor
    // etc/XQFT.g:770:14: dirElemConstructor : LTSi qn= qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi ) -> ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* ) ;
    public final dirElemConstructor_return dirElemConstructor() throws RecognitionException {
        dirElemConstructor_return retval = new dirElemConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LTSi608=null;
        Token RSELFTERMSi610=null;
        Token GTSi611=null;
        Token LENDTAGSi613=null;
        Token GTSi615=null;
        qName_return qn = null;

        dirAttributeList_return dirAttributeList609 = null;

        dirElemContent_return dirElemContent612 = null;

        qName_return qName614 = null;


        XQFTTree LTSi608_tree=null;
        XQFTTree RSELFTERMSi610_tree=null;
        XQFTTree GTSi611_tree=null;
        XQFTTree LENDTAGSi613_tree=null;
        XQFTTree GTSi615_tree=null;
        RewriteRuleTokenStream stream_RSELFTERMSi=new RewriteRuleTokenStream(adaptor,"token RSELFTERMSi");
        RewriteRuleTokenStream stream_LENDTAGSi=new RewriteRuleTokenStream(adaptor,"token LENDTAGSi");
        RewriteRuleTokenStream stream_GTSi=new RewriteRuleTokenStream(adaptor,"token GTSi");
        RewriteRuleTokenStream stream_LTSi=new RewriteRuleTokenStream(adaptor,"token LTSi");
        RewriteRuleSubtreeStream stream_dirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule dirAttributeList");
        RewriteRuleSubtreeStream stream_qName=new RewriteRuleSubtreeStream(adaptor,"rule qName");
        RewriteRuleSubtreeStream stream_dirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule dirElemContent");
        try {
            // etc/XQFT.g:770:45: ( LTSi qn= qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi ) -> ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* ) )
            // etc/XQFT.g:770:47: LTSi qn= qName dirAttributeList ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )
            {
            LTSi608=(Token)input.LT(1);
            match(input,LTSi,FOLLOW_LTSi_in_dirElemConstructor10385); if (failed) return retval;
            if ( backtracking==0 ) stream_LTSi.add(LTSi608);

            if ( backtracking==0 ) {
              lexer.stack.pushState(lexer.state); lexer.state=State.IN_TAG;
            }
            pushFollow(FOLLOW_qName_in_dirElemConstructor10451);
            qn=qName();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_qName.add(qn.getTree());
            pushFollow(FOLLOW_dirAttributeList_in_dirElemConstructor10453);
            dirAttributeList609=dirAttributeList();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) stream_dirAttributeList.add(dirAttributeList609.getTree());
            // etc/XQFT.g:772:61: ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==RSELFTERMSi) ) {
                alt137=1;
            }
            else if ( (LA137_0==GTSi) ) {
                alt137=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("772:61: ( RSELFTERMSi | GTSi ( dirElemContent )* LENDTAGSi qName GTSi )", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // etc/XQFT.g:772:62: RSELFTERMSi
                    {
                    RSELFTERMSi610=(Token)input.LT(1);
                    match(input,RSELFTERMSi,FOLLOW_RSELFTERMSi_in_dirElemConstructor10516); if (failed) return retval;
                    if ( backtracking==0 ) stream_RSELFTERMSi.add(RSELFTERMSi610);

                    if ( backtracking==0 ) {
                      lexer.state=lexer.stack.pop();
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:774:34: GTSi ( dirElemContent )* LENDTAGSi qName GTSi
                    {
                    GTSi611=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor10617); if (failed) return retval;
                    if ( backtracking==0 ) stream_GTSi.add(GTSi611);

                    if ( backtracking==0 ) {
                      lexer.state=State.IN_ELEMENT;
                    }
                    // etc/XQFT.g:777:26: ( dirElemContent )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==LBRACESi||LA136_0==LTSi||(LA136_0>=ElementContent && LA136_0<=LCDATASi)||LA136_0==LCOMMENTSi||LA136_0==LPISi) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // etc/XQFT.g:777:26: dirElemContent
                    	    {
                    	    pushFollow(FOLLOW_dirElemContent_in_dirElemConstructor10712);
                    	    dirElemContent612=dirElemContent();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) stream_dirElemContent.add(dirElemContent612.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);

                    LENDTAGSi613=(Token)input.LT(1);
                    match(input,LENDTAGSi,FOLLOW_LENDTAGSi_in_dirElemConstructor10741); if (failed) return retval;
                    if ( backtracking==0 ) stream_LENDTAGSi.add(LENDTAGSi613);

                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }
                    pushFollow(FOLLOW_qName_in_dirElemConstructor10771);
                    qName614=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_qName.add(qName614.getTree());
                    GTSi615=(Token)input.LT(1);
                    match(input,GTSi,FOLLOW_GTSi_in_dirElemConstructor10800); if (failed) return retval;
                    if ( backtracking==0 ) stream_GTSi.add(GTSi615);

                    if ( backtracking==0 ) {
                      lexer.state=lexer.stack.pop();
                    }

                    }
                    break;

            }


            // AST REWRITE
            // elements: qn, dirAttributeList, dirElemContent
            // token labels: 
            // rule labels: qn, retval
            // token list labels: 
            // rule list labels: 
            if ( backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"token qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (XQFTTree)adaptor.nil();
            // 782:61: -> ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* )
            {
                // etc/XQFT.g:782:64: ^( AST_DIRELEMCONSTRUCTOR $qn dirAttributeList ( dirElemContent )* )
                {
                XQFTTree root_1 = (XQFTTree)adaptor.nil();
                root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONSTRUCTOR, "AST_DIRELEMCONSTRUCTOR"), root_1);

                adaptor.addChild(root_1, stream_qn.next());
                adaptor.addChild(root_1, stream_dirAttributeList.next());
                // etc/XQFT.g:782:110: ( dirElemContent )*
                while ( stream_dirElemContent.hasNext() ) {
                    adaptor.addChild(root_1, stream_dirElemContent.next());

                }
                stream_dirElemContent.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirElemConstructor

    public static class dirAttributeList_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirAttributeList
    // etc/XQFT.g:784:15: dirAttributeList : ( qName EQSi dirAttributeValue )* ;
    public final dirAttributeList_return dirAttributeList() throws RecognitionException {
        dirAttributeList_return retval = new dirAttributeList_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token EQSi617=null;
        qName_return qName616 = null;

        dirAttributeValue_return dirAttributeValue618 = null;


        XQFTTree EQSi617_tree=null;

        try {
            // etc/XQFT.g:784:46: ( ( qName EQSi dirAttributeValue )* )
            // etc/XQFT.g:784:48: ( qName EQSi dirAttributeValue )*
            {
            root_0 = (XQFTTree)adaptor.nil();

            // etc/XQFT.g:784:48: ( qName EQSi dirAttributeValue )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==NCName) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // etc/XQFT.g:784:49: qName EQSi dirAttributeValue
            	    {
            	    pushFollow(FOLLOW_qName_in_dirAttributeList10941);
            	    qName616=qName();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, qName616.getTree());
            	    EQSi617=(Token)input.LT(1);
            	    match(input,EQSi,FOLLOW_EQSi_in_dirAttributeList10943); if (failed) return retval;
            	    if ( backtracking==0 ) {
            	    EQSi617_tree = (XQFTTree)adaptor.create(EQSi617);
            	    adaptor.addChild(root_0, EQSi617_tree);
            	    }
            	    pushFollow(FOLLOW_dirAttributeValue_in_dirAttributeList10945);
            	    dirAttributeValue618=dirAttributeValue();
            	    _fsp--;
            	    if (failed) return retval;
            	    if ( backtracking==0 ) adaptor.addChild(root_0, dirAttributeValue618.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirAttributeList

    public static class dirAttributeValue_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirAttributeValue
    // etc/XQFT.g:785:16: dirAttributeValue : ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi );
    public final dirAttributeValue_return dirAttributeValue() throws RecognitionException {
        dirAttributeValue_return retval = new dirAttributeValue_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token QUOTSi619=null;
        Token QuotAttributeContent620=null;
        Token QUOTSi622=null;
        Token APOSSi623=null;
        Token AposAttributeContent624=null;
        Token APOSSi626=null;
        xmlEnclosedExpr_return xmlEnclosedExpr621 = null;

        xmlEnclosedExpr_return xmlEnclosedExpr625 = null;


        XQFTTree QUOTSi619_tree=null;
        XQFTTree QuotAttributeContent620_tree=null;
        XQFTTree QUOTSi622_tree=null;
        XQFTTree APOSSi623_tree=null;
        XQFTTree AposAttributeContent624_tree=null;
        XQFTTree APOSSi626_tree=null;

        try {
            // etc/XQFT.g:785:47: ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==QUOTSi) ) {
                alt141=1;
            }
            else if ( (LA141_0==APOSSi) ) {
                alt141=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("785:16: dirAttributeValue : ( QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi | APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi );", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // etc/XQFT.g:785:49: QUOTSi ( QuotAttributeContent | xmlEnclosedExpr )* QUOTSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    QUOTSi619=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue10983); if (failed) return retval;
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_QUOT_ATTRIBUTE;
                    }
                    // etc/XQFT.g:786:27: ( QuotAttributeContent | xmlEnclosedExpr )*
                    loop139:
                    do {
                        int alt139=3;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==QuotAttributeContent) ) {
                            alt139=1;
                        }
                        else if ( (LA139_0==LBRACESi) ) {
                            alt139=2;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // etc/XQFT.g:786:28: QuotAttributeContent
                    	    {
                    	    QuotAttributeContent620=(Token)input.LT(1);
                    	    match(input,QuotAttributeContent,FOLLOW_QuotAttributeContent_in_dirAttributeValue11015); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    QuotAttributeContent620_tree = (XQFTTree)adaptor.create(QuotAttributeContent620);
                    	    adaptor.addChild(root_0, QuotAttributeContent620_tree);
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // etc/XQFT.g:786:51: xmlEnclosedExpr
                    	    {
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue11019);
                    	    xmlEnclosedExpr621=xmlEnclosedExpr();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, xmlEnclosedExpr621.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    QUOTSi622=(Token)input.LT(1);
                    match(input,QUOTSi,FOLLOW_QUOTSi_in_dirAttributeValue11051); if (failed) return retval;
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:788:31: APOSSi ( AposAttributeContent | xmlEnclosedExpr )* APOSSi
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    APOSSi623=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue11086); if (failed) return retval;
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_APOS_ATTRIBUTE;
                    }
                    // etc/XQFT.g:789:30: ( AposAttributeContent | xmlEnclosedExpr )*
                    loop140:
                    do {
                        int alt140=3;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==AposAttributeContent) ) {
                            alt140=1;
                        }
                        else if ( (LA140_0==LBRACESi) ) {
                            alt140=2;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // etc/XQFT.g:789:31: AposAttributeContent
                    	    {
                    	    AposAttributeContent624=(Token)input.LT(1);
                    	    match(input,AposAttributeContent,FOLLOW_AposAttributeContent_in_dirAttributeValue11121); if (failed) return retval;
                    	    if ( backtracking==0 ) {
                    	    AposAttributeContent624_tree = (XQFTTree)adaptor.create(AposAttributeContent624);
                    	    adaptor.addChild(root_0, AposAttributeContent624_tree);
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // etc/XQFT.g:789:54: xmlEnclosedExpr
                    	    {
                    	    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirAttributeValue11125);
                    	    xmlEnclosedExpr625=xmlEnclosedExpr();
                    	    _fsp--;
                    	    if (failed) return retval;
                    	    if ( backtracking==0 ) adaptor.addChild(root_0, xmlEnclosedExpr625.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);

                    APOSSi626=(Token)input.LT(1);
                    match(input,APOSSi,FOLLOW_APOSSi_in_dirAttributeValue11160); if (failed) return retval;
                    if ( backtracking==0 ) {
                      lexer.state=State.IN_TAG;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirAttributeValue

    public static class xmlEnclosedExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start xmlEnclosedExpr
    // etc/XQFT.g:791:14: xmlEnclosedExpr : LBRACESi expr RBRACSi ;
    public final xmlEnclosedExpr_return xmlEnclosedExpr() throws RecognitionException {
        xmlEnclosedExpr_return retval = new xmlEnclosedExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LBRACESi627=null;
        Token RBRACSi629=null;
        expr_return expr628 = null;


        XQFTTree LBRACESi627_tree=null;
        XQFTTree RBRACSi629_tree=null;

        try {
            // etc/XQFT.g:791:48: ( LBRACESi expr RBRACSi )
            // etc/XQFT.g:791:50: LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LBRACESi627=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_xmlEnclosedExpr11202); if (failed) return retval;
            if ( backtracking==0 ) {
              lexer.stack.pushState(lexer.state); lexer.state=State.DEFAULT;
            }
            pushFollow(FOLLOW_expr_in_xmlEnclosedExpr11231);
            expr628=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr628.getTree());
            RBRACSi629=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_xmlEnclosedExpr11259); if (failed) return retval;
            if ( backtracking==0 ) {
              lexer.state = lexer.stack.pop();
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end xmlEnclosedExpr

    public static class dirElemContent_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirElemContent
    // etc/XQFT.g:797:6: dirElemContent : (dc= directConstructor -> ^( AST_DIRELEMCONTENT $dc) | cd= cDataSection -> ^( AST_DIRELEMCONTENT $cd) | ec= ElementContent -> ^( AST_DIRELEMCONTENT $ec) | xe= xmlEnclosedExpr -> ^( AST_DIRELEMCONTENT $xe) );
    public final dirElemContent_return dirElemContent() throws RecognitionException {
        dirElemContent_return retval = new dirElemContent_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ec=null;
        directConstructor_return dc = null;

        cDataSection_return cd = null;

        xmlEnclosedExpr_return xe = null;


        XQFTTree ec_tree=null;
        RewriteRuleTokenStream stream_ElementContent=new RewriteRuleTokenStream(adaptor,"token ElementContent");
        RewriteRuleSubtreeStream stream_cDataSection=new RewriteRuleSubtreeStream(adaptor,"rule cDataSection");
        RewriteRuleSubtreeStream stream_directConstructor=new RewriteRuleSubtreeStream(adaptor,"rule directConstructor");
        RewriteRuleSubtreeStream stream_xmlEnclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule xmlEnclosedExpr");
        try {
            // etc/XQFT.g:797:37: (dc= directConstructor -> ^( AST_DIRELEMCONTENT $dc) | cd= cDataSection -> ^( AST_DIRELEMCONTENT $cd) | ec= ElementContent -> ^( AST_DIRELEMCONTENT $ec) | xe= xmlEnclosedExpr -> ^( AST_DIRELEMCONTENT $xe) )
            int alt142=4;
            switch ( input.LA(1) ) {
            case LTSi:
            case LCOMMENTSi:
            case LPISi:
                {
                alt142=1;
                }
                break;
            case LCDATASi:
                {
                alt142=2;
                }
                break;
            case ElementContent:
                {
                alt142=3;
                }
                break;
            case LBRACESi:
                {
                alt142=4;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("797:6: dirElemContent : (dc= directConstructor -> ^( AST_DIRELEMCONTENT $dc) | cd= cDataSection -> ^( AST_DIRELEMCONTENT $cd) | ec= ElementContent -> ^( AST_DIRELEMCONTENT $ec) | xe= xmlEnclosedExpr -> ^( AST_DIRELEMCONTENT $xe) );", 142, 0, input);

                throw nvae;
            }

            switch (alt142) {
                case 1 :
                    // etc/XQFT.g:797:39: dc= directConstructor
                    {
                    pushFollow(FOLLOW_directConstructor_in_dirElemContent11295);
                    dc=directConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_directConstructor.add(dc.getTree());

                    // AST REWRITE
                    // elements: dc
                    // token labels: 
                    // rule labels: dc, retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_dc=new RewriteRuleSubtreeStream(adaptor,"token dc",dc!=null?dc.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 797:59: -> ^( AST_DIRELEMCONTENT $dc)
                    {
                        // etc/XQFT.g:797:62: ^( AST_DIRELEMCONTENT $dc)
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONTENT, "AST_DIRELEMCONTENT"), root_1);

                        adaptor.addChild(root_1, stream_dc.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:798:18: cd= cDataSection
                    {
                    pushFollow(FOLLOW_cDataSection_in_dirElemContent11324);
                    cd=cDataSection();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_cDataSection.add(cd.getTree());

                    // AST REWRITE
                    // elements: cd
                    // token labels: 
                    // rule labels: retval, cd
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"token cd",cd!=null?cd.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 798:34: -> ^( AST_DIRELEMCONTENT $cd)
                    {
                        // etc/XQFT.g:798:37: ^( AST_DIRELEMCONTENT $cd)
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONTENT, "AST_DIRELEMCONTENT"), root_1);

                        adaptor.addChild(root_1, stream_cd.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:799:18: ec= ElementContent
                    {
                    ec=(Token)input.LT(1);
                    match(input,ElementContent,FOLLOW_ElementContent_in_dirElemContent11354); if (failed) return retval;
                    if ( backtracking==0 ) stream_ElementContent.add(ec);


                    // AST REWRITE
                    // elements: ec
                    // token labels: ec
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_ec=new RewriteRuleTokenStream(adaptor,"token ec",ec);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 799:36: -> ^( AST_DIRELEMCONTENT $ec)
                    {
                        // etc/XQFT.g:799:39: ^( AST_DIRELEMCONTENT $ec)
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONTENT, "AST_DIRELEMCONTENT"), root_1);

                        adaptor.addChild(root_1, stream_ec.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:800:18: xe= xmlEnclosedExpr
                    {
                    pushFollow(FOLLOW_xmlEnclosedExpr_in_dirElemContent11384);
                    xe=xmlEnclosedExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) stream_xmlEnclosedExpr.add(xe.getTree());

                    // AST REWRITE
                    // elements: xe
                    // token labels: 
                    // rule labels: retval, xe
                    // token list labels: 
                    // rule list labels: 
                    if ( backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_xe=new RewriteRuleSubtreeStream(adaptor,"token xe",xe!=null?xe.tree:null);

                    root_0 = (XQFTTree)adaptor.nil();
                    // 800:37: -> ^( AST_DIRELEMCONTENT $xe)
                    {
                        // etc/XQFT.g:800:40: ^( AST_DIRELEMCONTENT $xe)
                        {
                        XQFTTree root_1 = (XQFTTree)adaptor.nil();
                        root_1 = (XQFTTree)adaptor.becomeRoot(adaptor.create(AST_DIRELEMCONTENT, "AST_DIRELEMCONTENT"), root_1);

                        adaptor.addChild(root_1, stream_xe.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirElemContent

    public static class cDataSection_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start cDataSection
    // etc/XQFT.g:804:7: cDataSection : LCDATASi CDataContents RCDATASi ;
    public final cDataSection_return cDataSection() throws RecognitionException {
        cDataSection_return retval = new cDataSection_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LCDATASi630=null;
        Token CDataContents631=null;
        Token RCDATASi632=null;

        XQFTTree LCDATASi630_tree=null;
        XQFTTree CDataContents631_tree=null;
        XQFTTree RCDATASi632_tree=null;

        try {
            // etc/XQFT.g:804:26: ( LCDATASi CDataContents RCDATASi )
            // etc/XQFT.g:804:28: LCDATASi CDataContents RCDATASi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LCDATASi630=(Token)input.LT(1);
            match(input,LCDATASi,FOLLOW_LCDATASi_in_cDataSection11430); if (failed) return retval;
            if ( backtracking==0 ) {
            LCDATASi630_tree = (XQFTTree)adaptor.create(LCDATASi630);
            adaptor.addChild(root_0, LCDATASi630_tree);
            }
            CDataContents631=(Token)input.LT(1);
            match(input,CDataContents,FOLLOW_CDataContents_in_cDataSection11432); if (failed) return retval;
            if ( backtracking==0 ) {
            CDataContents631_tree = (XQFTTree)adaptor.create(CDataContents631);
            adaptor.addChild(root_0, CDataContents631_tree);
            }
            RCDATASi632=(Token)input.LT(1);
            match(input,RCDATASi,FOLLOW_RCDATASi_in_cDataSection11434); if (failed) return retval;
            if ( backtracking==0 ) {
            RCDATASi632_tree = (XQFTTree)adaptor.create(RCDATASi632);
            adaptor.addChild(root_0, RCDATASi632_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end cDataSection

    public static class dirCommentConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirCommentConstructor
    // etc/XQFT.g:809:5: dirCommentConstructor : LCOMMENTSi DirCommentContent RCOMMENTSi ;
    public final dirCommentConstructor_return dirCommentConstructor() throws RecognitionException {
        dirCommentConstructor_return retval = new dirCommentConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LCOMMENTSi633=null;
        Token DirCommentContent634=null;
        Token RCOMMENTSi635=null;

        XQFTTree LCOMMENTSi633_tree=null;
        XQFTTree DirCommentContent634_tree=null;
        XQFTTree RCOMMENTSi635_tree=null;

        try {
            // etc/XQFT.g:809:31: ( LCOMMENTSi DirCommentContent RCOMMENTSi )
            // etc/XQFT.g:809:33: LCOMMENTSi DirCommentContent RCOMMENTSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LCOMMENTSi633=(Token)input.LT(1);
            match(input,LCOMMENTSi,FOLLOW_LCOMMENTSi_in_dirCommentConstructor11457); if (failed) return retval;
            if ( backtracking==0 ) {
            LCOMMENTSi633_tree = (XQFTTree)adaptor.create(LCOMMENTSi633);
            adaptor.addChild(root_0, LCOMMENTSi633_tree);
            }
            DirCommentContent634=(Token)input.LT(1);
            match(input,DirCommentContent,FOLLOW_DirCommentContent_in_dirCommentConstructor11459); if (failed) return retval;
            if ( backtracking==0 ) {
            DirCommentContent634_tree = (XQFTTree)adaptor.create(DirCommentContent634);
            adaptor.addChild(root_0, DirCommentContent634_tree);
            }
            RCOMMENTSi635=(Token)input.LT(1);
            match(input,RCOMMENTSi,FOLLOW_RCOMMENTSi_in_dirCommentConstructor11461); if (failed) return retval;
            if ( backtracking==0 ) {
            RCOMMENTSi635_tree = (XQFTTree)adaptor.create(RCOMMENTSi635);
            adaptor.addChild(root_0, RCOMMENTSi635_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirCommentConstructor

    public static class dirPIConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dirPIConstructor
    // etc/XQFT.g:811:5: dirPIConstructor : LPISi PiTarget ( DirPiContents )? RPISi ;
    public final dirPIConstructor_return dirPIConstructor() throws RecognitionException {
        dirPIConstructor_return retval = new dirPIConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token LPISi636=null;
        Token PiTarget637=null;
        Token DirPiContents638=null;
        Token RPISi639=null;

        XQFTTree LPISi636_tree=null;
        XQFTTree PiTarget637_tree=null;
        XQFTTree DirPiContents638_tree=null;
        XQFTTree RPISi639_tree=null;

        try {
            // etc/XQFT.g:811:27: ( LPISi PiTarget ( DirPiContents )? RPISi )
            // etc/XQFT.g:811:29: LPISi PiTarget ( DirPiContents )? RPISi
            {
            root_0 = (XQFTTree)adaptor.nil();

            LPISi636=(Token)input.LT(1);
            match(input,LPISi,FOLLOW_LPISi_in_dirPIConstructor11482); if (failed) return retval;
            if ( backtracking==0 ) {
            LPISi636_tree = (XQFTTree)adaptor.create(LPISi636);
            adaptor.addChild(root_0, LPISi636_tree);
            }
            PiTarget637=(Token)input.LT(1);
            match(input,PiTarget,FOLLOW_PiTarget_in_dirPIConstructor11484); if (failed) return retval;
            if ( backtracking==0 ) {
            PiTarget637_tree = (XQFTTree)adaptor.create(PiTarget637);
            adaptor.addChild(root_0, PiTarget637_tree);
            }
            // etc/XQFT.g:811:44: ( DirPiContents )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==DirPiContents) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // etc/XQFT.g:811:44: DirPiContents
                    {
                    DirPiContents638=(Token)input.LT(1);
                    match(input,DirPiContents,FOLLOW_DirPiContents_in_dirPIConstructor11486); if (failed) return retval;
                    if ( backtracking==0 ) {
                    DirPiContents638_tree = (XQFTTree)adaptor.create(DirPiContents638);
                    adaptor.addChild(root_0, DirPiContents638_tree);
                    }

                    }
                    break;

            }

            RPISi639=(Token)input.LT(1);
            match(input,RPISi,FOLLOW_RPISi_in_dirPIConstructor11489); if (failed) return retval;
            if ( backtracking==0 ) {
            RPISi639_tree = (XQFTTree)adaptor.create(RPISi639);
            adaptor.addChild(root_0, RPISi639_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end dirPIConstructor

    public static class computedConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start computedConstructor
    // etc/XQFT.g:813:4: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );
    public final computedConstructor_return computedConstructor() throws RecognitionException {
        computedConstructor_return retval = new computedConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        compDocConstructor_return compDocConstructor640 = null;

        compElemConstructor_return compElemConstructor641 = null;

        compAttrConstructor_return compAttrConstructor642 = null;

        compTextConstructor_return compTextConstructor643 = null;

        compCommentConstructor_return compCommentConstructor644 = null;

        compPIConstructor_return compPIConstructor645 = null;



        try {
            // etc/XQFT.g:813:35: ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor )
            int alt144=6;
            switch ( input.LA(1) ) {
            case DOCUMENT:
                {
                alt144=1;
                }
                break;
            case ELEMENT:
                {
                alt144=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt144=3;
                }
                break;
            case TEXT:
                {
                alt144=4;
                }
                break;
            case COMMENT:
                {
                alt144=5;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt144=6;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("813:4: computedConstructor : ( compDocConstructor | compElemConstructor | compAttrConstructor | compTextConstructor | compCommentConstructor | compPIConstructor );", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // etc/XQFT.g:813:37: compDocConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compDocConstructor_in_computedConstructor11515);
                    compDocConstructor640=compDocConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compDocConstructor640.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:814:40: compElemConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compElemConstructor_in_computedConstructor11556);
                    compElemConstructor641=compElemConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compElemConstructor641.getTree());

                    }
                    break;
                case 3 :
                    // etc/XQFT.g:815:40: compAttrConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compAttrConstructor_in_computedConstructor11597);
                    compAttrConstructor642=compAttrConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compAttrConstructor642.getTree());

                    }
                    break;
                case 4 :
                    // etc/XQFT.g:816:40: compTextConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compTextConstructor_in_computedConstructor11638);
                    compTextConstructor643=compTextConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compTextConstructor643.getTree());

                    }
                    break;
                case 5 :
                    // etc/XQFT.g:817:40: compCommentConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compCommentConstructor_in_computedConstructor11679);
                    compCommentConstructor644=compCommentConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compCommentConstructor644.getTree());

                    }
                    break;
                case 6 :
                    // etc/XQFT.g:818:40: compPIConstructor
                    {
                    root_0 = (XQFTTree)adaptor.nil();

                    pushFollow(FOLLOW_compPIConstructor_in_computedConstructor11720);
                    compPIConstructor645=compPIConstructor();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, compPIConstructor645.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end computedConstructor

    public static class compDocConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compDocConstructor
    // etc/XQFT.g:820:5: compDocConstructor : DOCUMENT LBRACESi expr RBRACSi ;
    public final compDocConstructor_return compDocConstructor() throws RecognitionException {
        compDocConstructor_return retval = new compDocConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token DOCUMENT646=null;
        Token LBRACESi647=null;
        Token RBRACSi649=null;
        expr_return expr648 = null;


        XQFTTree DOCUMENT646_tree=null;
        XQFTTree LBRACESi647_tree=null;
        XQFTTree RBRACSi649_tree=null;

        try {
            // etc/XQFT.g:820:36: ( DOCUMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:820:38: DOCUMENT LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            DOCUMENT646=(Token)input.LT(1);
            match(input,DOCUMENT,FOLLOW_DOCUMENT_in_compDocConstructor11748); if (failed) return retval;
            if ( backtracking==0 ) {
            DOCUMENT646_tree = (XQFTTree)adaptor.create(DOCUMENT646);
            adaptor.addChild(root_0, DOCUMENT646_tree);
            }
            LBRACESi647=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compDocConstructor11750); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_compDocConstructor11753);
            expr648=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr648.getTree());
            RBRACSi649=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compDocConstructor11755); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compDocConstructor

    public static class compElemConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compElemConstructor
    // etc/XQFT.g:824:5: compElemConstructor : ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi ;
    public final compElemConstructor_return compElemConstructor() throws RecognitionException {
        compElemConstructor_return retval = new compElemConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ELEMENT650=null;
        Token LBRACESi652=null;
        Token RBRACSi654=null;
        Token LBRACESi655=null;
        Token RBRACSi657=null;
        qName_return qName651 = null;

        expr_return expr653 = null;

        contentExpr_return contentExpr656 = null;


        XQFTTree ELEMENT650_tree=null;
        XQFTTree LBRACESi652_tree=null;
        XQFTTree RBRACSi654_tree=null;
        XQFTTree LBRACESi655_tree=null;
        XQFTTree RBRACSi657_tree=null;

        try {
            // etc/XQFT.g:824:36: ( ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi )
            // etc/XQFT.g:824:38: ELEMENT ( qName | LBRACESi expr RBRACSi ) LBRACESi ( contentExpr )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ELEMENT650=(Token)input.LT(1);
            match(input,ELEMENT,FOLLOW_ELEMENT_in_compElemConstructor11785); if (failed) return retval;
            if ( backtracking==0 ) {
            ELEMENT650_tree = (XQFTTree)adaptor.create(ELEMENT650);
            adaptor.addChild(root_0, ELEMENT650_tree);
            }
            // etc/XQFT.g:824:46: ( qName | LBRACESi expr RBRACSi )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==NCName) ) {
                alt145=1;
            }
            else if ( (LA145_0==LBRACESi) ) {
                alt145=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("824:46: ( qName | LBRACESi expr RBRACSi )", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    // etc/XQFT.g:824:47: qName
                    {
                    pushFollow(FOLLOW_qName_in_compElemConstructor11788);
                    qName651=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName651.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:824:55: LBRACESi expr RBRACSi
                    {
                    LBRACESi652=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor11792); if (failed) return retval;
                    if ( backtracking==0 ) {
                    LBRACESi652_tree = (XQFTTree)adaptor.create(LBRACESi652);
                    adaptor.addChild(root_0, LBRACESi652_tree);
                    }
                    pushFollow(FOLLOW_expr_in_compElemConstructor11794);
                    expr653=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr653.getTree());
                    RBRACSi654=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor11796); if (failed) return retval;
                    if ( backtracking==0 ) {
                    RBRACSi654_tree = (XQFTTree)adaptor.create(RBRACSi654);
                    adaptor.addChild(root_0, RBRACSi654_tree);
                    }

                    }
                    break;

            }

            LBRACESi655=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compElemConstructor11815); if (failed) return retval;
            if ( backtracking==0 ) {
            LBRACESi655_tree = (XQFTTree)adaptor.create(LBRACESi655);
            adaptor.addChild(root_0, LBRACESi655_tree);
            }
            // etc/XQFT.g:825:25: ( contentExpr )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=ANCESTOR && LA146_0<=ANCESTOR_OR_SELF)||LA146_0==ATTRIBUTE||LA146_0==CHILD||LA146_0==COMMENT||(LA146_0>=DESCENDANT && LA146_0<=DESCENDANT_OR_SELF)||(LA146_0>=DOCUMENT && LA146_0<=ELEMENT)||LA146_0==EVERY||(LA146_0>=FOLLOWING && LA146_0<=FOR)||LA146_0==IF||LA146_0==LET||LA146_0==NODE||LA146_0==ORDERED||LA146_0==PARENT||(LA146_0>=PRECEDING && LA146_0<=PRECEDING_SIBLING)||LA146_0==PROCESSING_INSTRUCTION||(LA146_0>=SCHEMAATTRIBUTE && LA146_0<=SCHEMAELEMENT)||LA146_0==SELF||LA146_0==SOME||LA146_0==TEXT||LA146_0==TYPESWITCH||LA146_0==UNORDERED||LA146_0==VALIDATE||LA146_0==StringLiteral||LA146_0==NCName||LA146_0==DOLLARSi||LA146_0==LPARSi||(LA146_0>=STARSi && LA146_0<=MINUSSi)||LA146_0==LTSi||(LA146_0>=IntegerLiteral && LA146_0<=LPRAGSi)||(LA146_0>=DBLSLASHSi && LA146_0<=SLASHSi)||(LA146_0>=DOTDOTSi && LA146_0<=ATSi)||LA146_0==DOTSi||LA146_0==LCOMMENTSi||LA146_0==LPISi) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // etc/XQFT.g:825:25: contentExpr
                    {
                    pushFollow(FOLLOW_contentExpr_in_compElemConstructor11817);
                    contentExpr656=contentExpr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, contentExpr656.getTree());

                    }
                    break;

            }

            RBRACSi657=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compElemConstructor11820); if (failed) return retval;
            if ( backtracking==0 ) {
            RBRACSi657_tree = (XQFTTree)adaptor.create(RBRACSi657);
            adaptor.addChild(root_0, RBRACSi657_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compElemConstructor

    public static class contentExpr_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start contentExpr
    // etc/XQFT.g:828:6: contentExpr : expr ;
    public final contentExpr_return contentExpr() throws RecognitionException {
        contentExpr_return retval = new contentExpr_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        expr_return expr658 = null;



        try {
            // etc/XQFT.g:828:37: ( expr )
            // etc/XQFT.g:828:39: expr
            {
            root_0 = (XQFTTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_contentExpr11853);
            expr658=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr658.getTree());

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end contentExpr

    public static class compAttrConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compAttrConstructor
    // etc/XQFT.g:832:5: compAttrConstructor : ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
    public final compAttrConstructor_return compAttrConstructor() throws RecognitionException {
        compAttrConstructor_return retval = new compAttrConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token ATTRIBUTE659=null;
        Token LBRACESi661=null;
        Token RBRACSi663=null;
        Token LBRACESi664=null;
        Token RBRACSi666=null;
        qName_return qName660 = null;

        expr_return expr662 = null;

        expr_return expr665 = null;


        XQFTTree ATTRIBUTE659_tree=null;
        XQFTTree LBRACESi661_tree=null;
        XQFTTree RBRACSi663_tree=null;
        XQFTTree LBRACESi664_tree=null;
        XQFTTree RBRACSi666_tree=null;

        try {
            // etc/XQFT.g:832:36: ( ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:832:38: ATTRIBUTE ( qName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            ATTRIBUTE659=(Token)input.LT(1);
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_compAttrConstructor11898); if (failed) return retval;
            if ( backtracking==0 ) {
            ATTRIBUTE659_tree = (XQFTTree)adaptor.create(ATTRIBUTE659);
            adaptor.addChild(root_0, ATTRIBUTE659_tree);
            }
            // etc/XQFT.g:832:48: ( qName | ( LBRACESi expr RBRACSi ) )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==NCName) ) {
                alt147=1;
            }
            else if ( (LA147_0==LBRACESi) ) {
                alt147=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("832:48: ( qName | ( LBRACESi expr RBRACSi ) )", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // etc/XQFT.g:832:49: qName
                    {
                    pushFollow(FOLLOW_qName_in_compAttrConstructor11901);
                    qName660=qName();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, qName660.getTree());

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:832:57: ( LBRACESi expr RBRACSi )
                    {
                    // etc/XQFT.g:832:57: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:832:58: LBRACESi expr RBRACSi
                    {
                    LBRACESi661=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor11906); if (failed) return retval;
                    pushFollow(FOLLOW_expr_in_compAttrConstructor11909);
                    expr662=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr662.getTree());
                    RBRACSi663=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor11911); if (failed) return retval;

                    }


                    }
                    break;

            }

            LBRACESi664=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compAttrConstructor11932); if (failed) return retval;
            // etc/XQFT.g:833:26: ( expr )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=ANCESTOR && LA148_0<=ANCESTOR_OR_SELF)||LA148_0==ATTRIBUTE||LA148_0==CHILD||LA148_0==COMMENT||(LA148_0>=DESCENDANT && LA148_0<=DESCENDANT_OR_SELF)||(LA148_0>=DOCUMENT && LA148_0<=ELEMENT)||LA148_0==EVERY||(LA148_0>=FOLLOWING && LA148_0<=FOR)||LA148_0==IF||LA148_0==LET||LA148_0==NODE||LA148_0==ORDERED||LA148_0==PARENT||(LA148_0>=PRECEDING && LA148_0<=PRECEDING_SIBLING)||LA148_0==PROCESSING_INSTRUCTION||(LA148_0>=SCHEMAATTRIBUTE && LA148_0<=SCHEMAELEMENT)||LA148_0==SELF||LA148_0==SOME||LA148_0==TEXT||LA148_0==TYPESWITCH||LA148_0==UNORDERED||LA148_0==VALIDATE||LA148_0==StringLiteral||LA148_0==NCName||LA148_0==DOLLARSi||LA148_0==LPARSi||(LA148_0>=STARSi && LA148_0<=MINUSSi)||LA148_0==LTSi||(LA148_0>=IntegerLiteral && LA148_0<=LPRAGSi)||(LA148_0>=DBLSLASHSi && LA148_0<=SLASHSi)||(LA148_0>=DOTDOTSi && LA148_0<=ATSi)||LA148_0==DOTSi||LA148_0==LCOMMENTSi||LA148_0==LPISi) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // etc/XQFT.g:833:26: expr
                    {
                    pushFollow(FOLLOW_expr_in_compAttrConstructor11935);
                    expr665=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr665.getTree());

                    }
                    break;

            }

            RBRACSi666=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compAttrConstructor11938); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compAttrConstructor

    public static class compTextConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compTextConstructor
    // etc/XQFT.g:835:5: compTextConstructor : TEXT LBRACESi expr RBRACSi ;
    public final compTextConstructor_return compTextConstructor() throws RecognitionException {
        compTextConstructor_return retval = new compTextConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token TEXT667=null;
        Token LBRACESi668=null;
        Token RBRACSi670=null;
        expr_return expr669 = null;


        XQFTTree TEXT667_tree=null;
        XQFTTree LBRACESi668_tree=null;
        XQFTTree RBRACSi670_tree=null;

        try {
            // etc/XQFT.g:835:36: ( TEXT LBRACESi expr RBRACSi )
            // etc/XQFT.g:835:38: TEXT LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            TEXT667=(Token)input.LT(1);
            match(input,TEXT,FOLLOW_TEXT_in_compTextConstructor11975); if (failed) return retval;
            if ( backtracking==0 ) {
            TEXT667_tree = (XQFTTree)adaptor.create(TEXT667);
            adaptor.addChild(root_0, TEXT667_tree);
            }
            LBRACESi668=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compTextConstructor11977); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_compTextConstructor11980);
            expr669=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr669.getTree());
            RBRACSi670=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compTextConstructor11982); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compTextConstructor

    public static class compCommentConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compCommentConstructor
    // etc/XQFT.g:837:5: compCommentConstructor : COMMENT LBRACESi expr RBRACSi ;
    public final compCommentConstructor_return compCommentConstructor() throws RecognitionException {
        compCommentConstructor_return retval = new compCommentConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token COMMENT671=null;
        Token LBRACESi672=null;
        Token RBRACSi674=null;
        expr_return expr673 = null;


        XQFTTree COMMENT671_tree=null;
        XQFTTree LBRACESi672_tree=null;
        XQFTTree RBRACSi674_tree=null;

        try {
            // etc/XQFT.g:837:36: ( COMMENT LBRACESi expr RBRACSi )
            // etc/XQFT.g:837:38: COMMENT LBRACESi expr RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            COMMENT671=(Token)input.LT(1);
            match(input,COMMENT,FOLLOW_COMMENT_in_compCommentConstructor12007); if (failed) return retval;
            if ( backtracking==0 ) {
            COMMENT671_tree = (XQFTTree)adaptor.create(COMMENT671);
            adaptor.addChild(root_0, COMMENT671_tree);
            }
            LBRACESi672=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compCommentConstructor12009); if (failed) return retval;
            pushFollow(FOLLOW_expr_in_compCommentConstructor12012);
            expr673=expr();
            _fsp--;
            if (failed) return retval;
            if ( backtracking==0 ) adaptor.addChild(root_0, expr673.getTree());
            RBRACSi674=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compCommentConstructor12014); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compCommentConstructor

    public static class compPIConstructor_return extends ParserRuleReturnScope {
        XQFTTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start compPIConstructor
    // etc/XQFT.g:839:5: compPIConstructor : PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi ;
    public final compPIConstructor_return compPIConstructor() throws RecognitionException {
        compPIConstructor_return retval = new compPIConstructor_return();
        retval.start = input.LT(1);

        XQFTTree root_0 = null;

        Token PROCESSING_INSTRUCTION675=null;
        Token NCName676=null;
        Token LBRACESi677=null;
        Token RBRACSi679=null;
        Token LBRACESi680=null;
        Token RBRACSi682=null;
        expr_return expr678 = null;

        expr_return expr681 = null;


        XQFTTree PROCESSING_INSTRUCTION675_tree=null;
        XQFTTree NCName676_tree=null;
        XQFTTree LBRACESi677_tree=null;
        XQFTTree RBRACSi679_tree=null;
        XQFTTree LBRACESi680_tree=null;
        XQFTTree RBRACSi682_tree=null;

        try {
            // etc/XQFT.g:839:36: ( PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi )
            // etc/XQFT.g:839:38: PROCESSING_INSTRUCTION ( NCName | ( LBRACESi expr RBRACSi ) ) LBRACESi ( expr )? RBRACSi
            {
            root_0 = (XQFTTree)adaptor.nil();

            PROCESSING_INSTRUCTION675=(Token)input.LT(1);
            match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor12044); if (failed) return retval;
            if ( backtracking==0 ) {
            PROCESSING_INSTRUCTION675_tree = (XQFTTree)adaptor.create(PROCESSING_INSTRUCTION675);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION675_tree);
            }
            // etc/XQFT.g:839:61: ( NCName | ( LBRACESi expr RBRACSi ) )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==NCName) ) {
                alt149=1;
            }
            else if ( (LA149_0==LBRACESi) ) {
                alt149=2;
            }
            else {
                if (backtracking>0) {failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("839:61: ( NCName | ( LBRACESi expr RBRACSi ) )", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // etc/XQFT.g:839:62: NCName
                    {
                    NCName676=(Token)input.LT(1);
                    match(input,NCName,FOLLOW_NCName_in_compPIConstructor12047); if (failed) return retval;
                    if ( backtracking==0 ) {
                    NCName676_tree = (XQFTTree)adaptor.create(NCName676);
                    adaptor.addChild(root_0, NCName676_tree);
                    }

                    }
                    break;
                case 2 :
                    // etc/XQFT.g:839:71: ( LBRACESi expr RBRACSi )
                    {
                    // etc/XQFT.g:839:71: ( LBRACESi expr RBRACSi )
                    // etc/XQFT.g:839:72: LBRACESi expr RBRACSi
                    {
                    LBRACESi677=(Token)input.LT(1);
                    match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor12052); if (failed) return retval;
                    pushFollow(FOLLOW_expr_in_compPIConstructor12055);
                    expr678=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr678.getTree());
                    RBRACSi679=(Token)input.LT(1);
                    match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor12057); if (failed) return retval;

                    }


                    }
                    break;

            }

            LBRACESi680=(Token)input.LT(1);
            match(input,LBRACESi,FOLLOW_LBRACESi_in_compPIConstructor12078); if (failed) return retval;
            // etc/XQFT.g:840:26: ( expr )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0>=ANCESTOR && LA150_0<=ANCESTOR_OR_SELF)||LA150_0==ATTRIBUTE||LA150_0==CHILD||LA150_0==COMMENT||(LA150_0>=DESCENDANT && LA150_0<=DESCENDANT_OR_SELF)||(LA150_0>=DOCUMENT && LA150_0<=ELEMENT)||LA150_0==EVERY||(LA150_0>=FOLLOWING && LA150_0<=FOR)||LA150_0==IF||LA150_0==LET||LA150_0==NODE||LA150_0==ORDERED||LA150_0==PARENT||(LA150_0>=PRECEDING && LA150_0<=PRECEDING_SIBLING)||LA150_0==PROCESSING_INSTRUCTION||(LA150_0>=SCHEMAATTRIBUTE && LA150_0<=SCHEMAELEMENT)||LA150_0==SELF||LA150_0==SOME||LA150_0==TEXT||LA150_0==TYPESWITCH||LA150_0==UNORDERED||LA150_0==VALIDATE||LA150_0==StringLiteral||LA150_0==NCName||LA150_0==DOLLARSi||LA150_0==LPARSi||(LA150_0>=STARSi && LA150_0<=MINUSSi)||LA150_0==LTSi||(LA150_0>=IntegerLiteral && LA150_0<=LPRAGSi)||(LA150_0>=DBLSLASHSi && LA150_0<=SLASHSi)||(LA150_0>=DOTDOTSi && LA150_0<=ATSi)||LA150_0==DOTSi||LA150_0==LCOMMENTSi||LA150_0==LPISi) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // etc/XQFT.g:840:26: expr
                    {
                    pushFollow(FOLLOW_expr_in_compPIConstructor12081);
                    expr681=expr();
                    _fsp--;
                    if (failed) return retval;
                    if ( backtracking==0 ) adaptor.addChild(root_0, expr681.getTree());

                    }
                    break;

            }

            RBRACSi682=(Token)input.LT(1);
            match(input,RBRACSi,FOLLOW_RBRACSi_in_compPIConstructor12084); if (failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( backtracking==0 ) {
                retval.tree = (XQFTTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException e) {
                throw e;
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end compPIConstructor

    // $ANTLR start synpred1
    public final void synpred1_fragment() throws RecognitionException {   
        // etc/XQFT.g:386:34: ( itemType occurrenceIndicator )
        // etc/XQFT.g:386:35: itemType occurrenceIndicator
        {
        pushFollow(FOLLOW_itemType_in_synpred12317);
        itemType();
        _fsp--;
        if (failed) return ;
        pushFollow(FOLLOW_occurrenceIndicator_in_synpred12319);
        occurrenceIndicator();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred2
    public final void synpred2_fragment() throws RecognitionException {   
        // etc/XQFT.g:701:41: ( STARSi COLONSi NCName )
        // etc/XQFT.g:701:42: STARSi COLONSi NCName
        {
        match(input,STARSi,FOLLOW_STARSi_in_synpred29176); if (failed) return ;
        match(input,COLONSi,FOLLOW_COLONSi_in_synpred29178); if (failed) return ;
        match(input,NCName,FOLLOW_NCName_in_synpred29180); if (failed) return ;

        }
    }
    // $ANTLR end synpred2

    public final boolean synpred1() {
        backtracking++;
        int start = input.mark();
        try {
            synpred1_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred2() {
        backtracking++;
        int start = input.mark();
        try {
            synpred2_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


    protected DFA117 dfa117 = new DFA117(this);
    static final String DFA117_eotS =
        "\u00d3\uffff";
    static final String DFA117_eofS =
        "\2\uffff\1\36\76\uffff\1\36\u0091\uffff";
    static final String DFA117_minS =
        "\1\6\1\uffff\1\6\1\uffff\1\u00c1\1\0\1\u00a3\1\14\1\u00a9\1\u00a3"+
        "\1\u00c1\2\u00a9\1\u00a3\3\u00a9\1\0\1\6\2\0\1\u00a3\2\0\2\u00ab"+
        "\1\6\1\u00d2\1\u00d5\1\u00ab\1\uffff\1\14\2\uffff\1\14\1\u00a3\1"+
        "\u00a8\1\0\5\u00a9\2\0\1\44\1\u00a3\1\u00a8\1\0\2\u00a3\1\u00a1"+
        "\1\u00ab\2\0\1\u00aa\1\0\2\u00aa\1\uffff\1\0\2\uffff\2\0\1\10\1"+
        "\u00d3\1\u00d6\1\0\11\u00a9\2\0\11\u00a9\2\0\2\u00a5\1\0\1\u00a3"+
        "\1\0\2\uffff\2\u00a9\1\0\2\u00a5\1\0\1\u00a3\1\0\2\uffff\2\u00a8"+
        "\1\u00aa\2\0\4\uffff\1\0\2\uffff\2\0\5\uffff\1\u00a3\1\u00a4\3\0"+
        "\1\u00d7\1\0\2\uffff\1\44\4\u00a3\1\u00a1\3\u00aa\1\44\4\u00a3\1"+
        "\u00a1\3\u00aa\2\u00a3\1\u00ab\2\uffff\5\0\2\uffff\4\0\2\uffff\3"+
        "\0\2\uffff\42\0";
    static final String DFA117_maxS =
        "\1\u00d4\1\uffff\1\u00d4\1\uffff\1\u00c1\1\0\1\u00c1\1\u00ae\1\u00a9"+
        "\1\u00ab\1\u00c1\2\u00a9\3\u00ab\1\u00a9\1\0\1\u00d4\2\0\1\u00a3"+
        "\2\0\2\u00ab\1\u00d4\1\u00d2\1\u00d5\1\u00ab\1\uffff\1\u00ae\2\uffff"+
        "\2\u00ae\1\u00ab\1\0\5\u00a9\2\0\1\u00aa\1\u00ae\1\u00ab\1\0\2\u00a3"+
        "\1\u00aa\1\u00ab\2\0\1\u00aa\1\0\2\u00aa\1\uffff\1\0\2\uffff\2\0"+
        "\1\u00c7\1\u00d3\1\u00d7\1\0\11\u00a9\2\0\11\u00a9\2\0\2\u00aa\1"+
        "\0\1\u00a3\1\0\2\uffff\2\u00a9\1\0\2\u00aa\1\0\1\u00a3\1\0\2\uffff"+
        "\3\u00aa\2\0\4\uffff\1\0\2\uffff\2\0\5\uffff\1\u00ae\1\u00a8\3\0"+
        "\1\u00d7\1\0\2\uffff\1\u00aa\2\u00ae\2\u00a3\5\u00aa\2\u00ae\2\u00a3"+
        "\4\u00aa\2\u00a3\1\u00ab\2\uffff\5\0\2\uffff\4\0\2\uffff\3\0\2\uffff"+
        "\42\0";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\1\uffff\1\5\32\uffff\1\4\1\uffff\1\2\1\3\31\uffff\1"+
        "\2\1\uffff\1\2\1\3\41\uffff\1\2\1\3\10\uffff\1\2\1\3\5\uffff\1\2"+
        "\1\3\1\2\1\3\1\uffff\1\2\1\3\2\uffff\1\3\1\2\1\3\1\2\1\3\7\uffff"+
        "\1\2\1\3\25\uffff\1\2\1\3\5\uffff\1\2\1\3\4\uffff\1\2\1\3\3\uffff"+
        "\1\2\1\3\42\uffff";
    static final String DFA117_specialS =
        "\5\uffff\1\32\13\uffff\1\13\1\37\1\14\1\2\1\uffff\1\23\1\42\15\uffff"+
        "\1\40\5\uffff\1\31\1\27\3\uffff\1\35\4\uffff\1\0\1\12\1\uffff\1"+
        "\10\3\uffff\1\21\2\uffff\1\1\1\4\3\uffff\1\43\11\uffff\1\3\1\15"+
        "\11\uffff\1\30\1\33\2\uffff\1\11\1\uffff\1\26\4\uffff\1\22\2\uffff"+
        "\1\41\1\uffff\1\7\5\uffff\1\6\1\36\4\uffff\1\16\2\uffff\1\17\1\20"+
        "\7\uffff\1\34\1\5\1\25\1\uffff\1\24\115\uffff}>";
    static final String[] DFA117_transitionS = {
            "\2\3\4\uffff\1\3\6\uffff\1\3\1\uffff\1\3\5\uffff\2\3\5\uffff"+
            "\3\3\13\uffff\2\3\42\uffff\1\3\10\uffff\1\3\3\uffff\1\3\1\uffff"+
            "\2\3\1\uffff\1\3\5\uffff\2\3\1\uffff\1\3\12\uffff\1\3\7\uffff"+
            "\1\3\36\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\4\uffff"+
            "\1\3\4\uffff\1\3\5\uffff\3\3\3\uffff\1\1\1\2\1\uffff\2\3\2\uffff"+
            "\1\3\12\uffff\1\3\2\uffff\1\3",
            "",
            "\2\4\1\36\1\uffff\1\36\1\uffff\1\6\3\uffff\3\36\1\12\1\36\1"+
            "\16\4\uffff\1\36\2\12\1\36\3\uffff\1\36\1\35\1\10\1\11\1\36"+
            "\3\uffff\1\36\1\uffff\1\36\2\uffff\1\36\1\uffff\2\12\1\36\2"+
            "\uffff\1\36\4\uffff\1\36\1\uffff\2\36\5\uffff\3\36\3\uffff\1"+
            "\36\1\uffff\2\36\1\uffff\2\36\3\uffff\1\36\1\20\6\uffff\2\36"+
            "\1\30\2\uffff\1\36\1\4\1\uffff\2\4\1\uffff\1\15\1\uffff\1\36"+
            "\1\uffff\1\36\1\uffff\1\14\1\13\1\uffff\1\12\1\uffff\1\36\2"+
            "\uffff\1\36\5\uffff\1\17\2\uffff\3\36\1\uffff\1\36\1\31\5\uffff"+
            "\1\36\3\uffff\1\36\1\uffff\1\36\22\uffff\1\24\1\36\1\21\2\36"+
            "\1\25\2\uffff\1\26\1\36\1\uffff\1\36\1\uffff\1\22\4\36\1\32"+
            "\5\36\3\23\6\uffff\1\5\1\7\1\uffff\1\36\1\27\12\uffff\1\33\2"+
            "\uffff\1\34",
            "",
            "\1\37",
            "\1\uffff",
            "\1\44\5\uffff\1\43\1\uffff\1\45\25\uffff\1\42",
            "\1\47\10\uffff\1\51\15\uffff\1\10\1\46\57\uffff\1\20\21\uffff"+
            "\1\50\5\uffff\1\14\1\13\14\uffff\1\52\50\uffff\1\53\12\uffff"+
            "\1\54",
            "\1\55",
            "\1\57\5\uffff\1\56\1\uffff\1\60",
            "\1\42",
            "\1\61",
            "\1\62",
            "\1\64\5\uffff\1\63\1\uffff\1\65",
            "\1\67\1\uffff\1\66",
            "\1\71\1\uffff\1\70",
            "\1\72",
            "\1\uffff",
            "\2\36\4\uffff\1\36\6\uffff\1\36\1\uffff\1\36\5\uffff\2\36\5"+
            "\uffff\3\36\13\uffff\2\36\42\uffff\1\36\10\uffff\1\36\3\uffff"+
            "\1\36\1\uffff\2\36\1\uffff\1\36\5\uffff\2\36\1\uffff\1\36\12"+
            "\uffff\1\36\7\uffff\1\36\1\uffff\1\36\34\uffff\1\36\1\uffff"+
            "\1\36\2\uffff\1\36\2\uffff\1\36\4\uffff\3\36\2\uffff\1\36\5"+
            "\uffff\4\36\2\uffff\2\36\1\uffff\2\36\2\uffff\1\36\12\uffff"+
            "\1\36\2\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\74",
            "\1\uffff",
            "\1\uffff",
            "\1\77",
            "\1\100",
            "\2\36\4\uffff\1\36\6\uffff\1\36\1\uffff\1\36\5\uffff\2\36\5"+
            "\uffff\3\36\13\uffff\2\36\42\uffff\1\36\10\uffff\1\36\3\uffff"+
            "\1\36\1\uffff\2\36\1\uffff\1\36\5\uffff\2\36\1\uffff\1\36\12"+
            "\uffff\1\36\7\uffff\1\36\1\uffff\1\36\34\uffff\1\36\1\uffff"+
            "\1\101\2\uffff\1\36\2\uffff\1\36\4\uffff\3\36\2\uffff\1\36\5"+
            "\uffff\4\36\2\uffff\2\36\1\uffff\2\36\2\uffff\1\36\12\uffff"+
            "\1\36\2\uffff\1\36",
            "\1\102",
            "\1\103",
            "\1\104",
            "",
            "\1\107\10\uffff\1\113\15\uffff\1\105\1\106\57\uffff\1\115\21"+
            "\uffff\1\112\5\uffff\1\111\1\110\14\uffff\1\114\50\uffff\1\116"+
            "\12\uffff\1\117",
            "",
            "",
            "\1\122\10\uffff\1\126\15\uffff\1\120\1\121\57\uffff\1\130\21"+
            "\uffff\1\125\5\uffff\1\124\1\123\14\uffff\1\127\50\uffff\1\131"+
            "\12\uffff\1\132",
            "\1\133\6\uffff\1\135\3\uffff\1\134",
            "\1\136\2\uffff\1\137",
            "\1\uffff",
            "\1\56",
            "\1\43",
            "\1\63",
            "\1\67",
            "\1\71",
            "\1\uffff",
            "\1\uffff",
            "\1\142\110\uffff\1\143\74\uffff\1\144",
            "\1\145\6\uffff\1\147\3\uffff\1\146",
            "\1\150\2\uffff\1\151",
            "\1\uffff",
            "\1\154",
            "\1\155",
            "\1\156\1\uffff\1\156\6\uffff\1\157",
            "\1\160",
            "\1\uffff",
            "\1\uffff",
            "\1\165",
            "\1\uffff",
            "\1\170",
            "\1\171",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\36\1\uffff\1\36\5\uffff\3\36\1\uffff\1\36\5\uffff\1\36\2"+
            "\uffff\1\36\3\uffff\1\36\3\uffff\1\36\3\uffff\1\36\4\uffff\1"+
            "\36\3\uffff\1\36\2\uffff\1\36\7\uffff\1\36\5\uffff\2\36\6\uffff"+
            "\1\36\3\uffff\1\36\13\uffff\2\36\13\uffff\1\36\1\uffff\1\36"+
            "\11\uffff\1\36\11\uffff\2\36\1\uffff\1\36\6\uffff\1\36\31\uffff"+
            "\1\36\1\u0080\1\uffff\1\36\2\uffff\1\177\2\36\1\uffff\1\36\1"+
            "\uffff\4\36\3\uffff\1\u0082\11\uffff\2\36\3\uffff\2\36\1\uffff"+
            "\1\u0081",
            "\1\u0083",
            "\1\u0084\1\u0085",
            "\1\uffff",
            "\1\u0088",
            "\1\u0089",
            "\1\u008a",
            "\1\u008b",
            "\1\u008c",
            "\1\u008d",
            "\1\u008e",
            "\1\u008f",
            "\1\u0090",
            "\1\uffff",
            "\1\uffff",
            "\1\u0091",
            "\1\u0092",
            "\1\u0093",
            "\1\u0094",
            "\1\u0095",
            "\1\u0096",
            "\1\u0097",
            "\1\u0098",
            "\1\u0099",
            "\1\uffff",
            "\1\uffff",
            "\1\u009b\2\uffff\1\u009a\1\uffff\1\135",
            "\1\u009b\4\uffff\1\135",
            "\1\uffff",
            "\1\u009c",
            "\1\uffff",
            "",
            "",
            "\1\u009f",
            "\1\u00a0",
            "\1\uffff",
            "\1\u00a2\2\uffff\1\u00a1\1\uffff\1\147",
            "\1\u00a2\4\uffff\1\147",
            "\1\uffff",
            "\1\u00a3",
            "\1\uffff",
            "",
            "",
            "\1\u00a6\1\uffff\1\u00a7",
            "\1\u00a8\1\uffff\1\u00a9",
            "\1\157",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ac\12\uffff\1\36",
            "\1\u00ae\3\uffff\1\u00ad",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0085",
            "\1\uffff",
            "",
            "",
            "\1\u00b1\110\uffff\1\u00b2\74\uffff\1\u00b3",
            "\1\u00b4\6\uffff\1\u00b6\3\uffff\1\u00b5",
            "\1\u00b7\6\uffff\1\u00b9\3\uffff\1\u00b8",
            "\1\u00ba",
            "\1\u00bb",
            "\1\u00bc\1\uffff\1\u00bc\6\uffff\1\u00bd",
            "\1\u00be",
            "\1\u00bf",
            "\1\u00c0",
            "\1\u00c1\110\uffff\1\u00c2\74\uffff\1\u00c3",
            "\1\u00c4\6\uffff\1\u00c6\3\uffff\1\u00c5",
            "\1\u00c7\6\uffff\1\u00c9\3\uffff\1\u00c8",
            "\1\u00ca",
            "\1\u00cb",
            "\1\u00cc\1\uffff\1\u00cc\6\uffff\1\u00cd",
            "\1\u00ce",
            "\1\u00cf",
            "\1\u00d0",
            "\1\u00d1",
            "\1\u00d2",
            "\1\137",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "681:2: pathExpr : ({...}? DBLSLASHSi relativePathExpr | {...}? SLASHSi relativePathExpr | SLASHSi relativePathExpr | SLASHSi | relativePathExpr );";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_53 = input.LA(1);

                         
                        int index117_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 113;}

                        else if ( (true) ) {s = 114;}

                         
                        input.seek(index117_53);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA117_63 = input.LA(1);

                         
                        int index117_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 123;}

                        else if ( (true) ) {s = 124;}

                         
                        input.seek(index117_63);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA117_20 = input.LA(1);

                         
                        int index117_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 59;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA117_78 = input.LA(1);

                         
                        int index117_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_78);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA117_64 = input.LA(1);

                         
                        int index117_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 125;}

                        else if ( (true) ) {s = 126;}

                         
                        input.seek(index117_64);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA117_130 = input.LA(1);

                         
                        int index117_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 175;}

                        else if ( (true) ) {s = 176;}

                         
                        input.seek(index117_130);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA117_111 = input.LA(1);

                         
                        int index117_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_111);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA117_105 = input.LA(1);

                         
                        int index117_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 164;}

                        else if ( (true) ) {s = 165;}

                         
                        input.seek(index117_105);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA117_56 = input.LA(1);

                         
                        int index117_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 118;}

                        else if ( (true) ) {s = 119;}

                         
                        input.seek(index117_56);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA117_93 = input.LA(1);

                         
                        int index117_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_93);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA117_54 = input.LA(1);

                         
                        int index117_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 115;}

                        else if ( (true) ) {s = 116;}

                         
                        input.seek(index117_54);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA117_17 = input.LA(1);

                         
                        int index117_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA117_19 = input.LA(1);

                         
                        int index117_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 59;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA117_79 = input.LA(1);

                         
                        int index117_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_79);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA117_117 = input.LA(1);

                         
                        int index117_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_117);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA117_120 = input.LA(1);

                         
                        int index117_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_120);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA117_121 = input.LA(1);

                         
                        int index117_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_121);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA117_60 = input.LA(1);

                         
                        int index117_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 59;}

                        else if ( (true) ) {s = 122;}

                         
                        input.seek(index117_60);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA117_100 = input.LA(1);

                         
                        int index117_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_100);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA117_22 = input.LA(1);

                         
                        int index117_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index117_22);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA117_133 = input.LA(1);

                         
                        int index117_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 59;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_133);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA117_131 = input.LA(1);

                         
                        int index117_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 59;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_131);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA117_95 = input.LA(1);

                         
                        int index117_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 157;}

                        else if ( (true) ) {s = 158;}

                         
                        input.seek(index117_95);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA117_44 = input.LA(1);

                         
                        int index117_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_44);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA117_89 = input.LA(1);

                         
                        int index117_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_89);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA117_43 = input.LA(1);

                         
                        int index117_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_43);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_5);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA117_90 = input.LA(1);

                         
                        int index117_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_90);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA117_129 = input.LA(1);

                         
                        int index117_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 59;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_129);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA117_48 = input.LA(1);

                         
                        int index117_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 106;}

                        else if ( (true) ) {s = 107;}

                         
                        input.seek(index117_48);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA117_112 = input.LA(1);

                         
                        int index117_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 170;}

                        else if ( (true) ) {s = 171;}

                         
                        input.seek(index117_112);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA117_18 = input.LA(1);

                         
                        int index117_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA117_18>=ANCESTOR && LA117_18<=ANCESTOR_OR_SELF)||LA117_18==ATTRIBUTE||LA117_18==CHILD||LA117_18==COMMENT||(LA117_18>=DESCENDANT && LA117_18<=DESCENDANT_OR_SELF)||(LA117_18>=DOCUMENT && LA117_18<=ELEMENT)||(LA117_18>=FOLLOWING && LA117_18<=FOLLOWING_SIBLING)||LA117_18==NODE||LA117_18==ORDERED||LA117_18==PARENT||(LA117_18>=PRECEDING && LA117_18<=PRECEDING_SIBLING)||LA117_18==PROCESSING_INSTRUCTION||(LA117_18>=SCHEMAATTRIBUTE && LA117_18<=SCHEMAELEMENT)||LA117_18==SELF||LA117_18==TEXT||LA117_18==UNORDERED||LA117_18==VALIDATE||LA117_18==StringLiteral||LA117_18==NCName||LA117_18==DOLLARSi||LA117_18==LPARSi||(LA117_18>=STARSi && LA117_18<=MINUSSi)||LA117_18==LTSi||(LA117_18>=IntegerLiteral && LA117_18<=LPRAGSi)||(LA117_18>=DBLSLASHSi && LA117_18<=SLASHSi)||(LA117_18>=DOTDOTSi && LA117_18<=ATSi)||LA117_18==DOTSi||LA117_18==LCOMMENTSi||LA117_18==LPISi) ) {s = 30;}

                        else if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_18);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA117_37 = input.LA(1);

                         
                        int index117_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 96;}

                        else if ( (true) ) {s = 97;}

                         
                        input.seek(index117_37);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA117_103 = input.LA(1);

                         
                        int index117_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 32;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_103);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA117_23 = input.LA(1);

                         
                        int index117_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 59;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index117_23);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA117_68 = input.LA(1);

                         
                        int index117_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (input.LA(2)=='*') ) {s = 134;}

                        else if ( (true) ) {s = 135;}

                         
                        input.seek(index117_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_versionDecl_in_module588 = new BitSet(new long[]{0xC007101C1A2810C0L,0x0408B05A20110800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_libraryModule_in_module592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mainModule_in_module596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_versionDecl625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_VERSION_in_versionDecl627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_StringLiteral_in_versionDecl629 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ENCODING_in_versionDecl632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_StringLiteral_in_versionDecl634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_separator_in_versionDecl638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLONSi_in_separator668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleDecl_in_libraryModule696 = new BitSet(new long[]{0x8000000002000002L});
    public static final BitSet FOLLOW_prolog_in_libraryModule698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_moduleDecl727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleDecl729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NCName_in_moduleDecl731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQSi_in_moduleDecl733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleDecl735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_separator_in_moduleDecl737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_uriLiteral767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prolog_in_mainModule799 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_queryBody_in_mainModule801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_queryBody832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprSingle_in_expr868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMASi_in_expr871 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_expr873 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_defaultNamespaceDecl_in_prolog1000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_setter_in_prolog1004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_namespaceDecl_in_prolog1008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_importStmt_in_prolog1012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_separator_in_prolog1027 = new BitSet(new long[]{0x8000000002000002L});
    public static final BitSet FOLLOW_varDecl_in_prolog1070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_functionDecl_in_prolog1074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_optionDecl_in_prolog1078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ftOptionDecl_in_prolog1082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_separator_in_prolog1096 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_DECLARE_in_defaultNamespaceDecl1130 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultNamespaceDecl1132 = new BitSet(new long[]{0x0200001000000000L});
    public static final BitSet FOLLOW_set_in_defaultNamespaceDecl1134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_defaultNamespaceDecl1142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_defaultNamespaceDecl1144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boundarySpaceDecl_in_setter1176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defaultCollationDecl_in_setter1191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_baseURIDecl_in_setter1206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructionDecl_in_setter1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderingModeDecl_in_setter1236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emptyOrderDecl_in_setter1251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_copyNamespacesDecl_in_setter1266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_boundarySpaceDecl1287 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_BOUNDARYSPACE_in_boundarySpaceDecl1289 = new BitSet(new long[]{0x0000000000000000L,0x0200002000000000L});
    public static final BitSet FOLLOW_set_in_boundarySpaceDecl1291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_defaultCollationDecl1315 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultCollationDecl1317 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_COLLATION_in_defaultCollationDecl1319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_defaultCollationDecl1321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_baseURIDecl1348 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_BASE_URI_in_baseURIDecl1350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_baseURIDecl1352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_constructionDecl1374 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_constructionDecl1376 = new BitSet(new long[]{0x0000000000000000L,0x0200002000000000L});
    public static final BitSet FOLLOW_set_in_constructionDecl1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_orderingModeDecl1406 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_ORDERING_in_orderingModeDecl1408 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_orderingModeDecl1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_emptyOrderDecl1440 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_emptyOrderDecl1442 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ORDER_in_emptyOrderDecl1444 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_EMPTY_in_emptyOrderDecl1446 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_in_emptyOrderDecl1448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_copyNamespacesDecl1474 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_copyNamespacesDecl1476 = new BitSet(new long[]{0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_preserveMode_in_copyNamespacesDecl1478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMASi_in_copyNamespacesDecl1480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200002L});
    public static final BitSet FOLLOW_inheritMode_in_copyNamespacesDecl1482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_preserveMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_inheritMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_namespaceDecl1573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_namespaceDecl1575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NCName_in_namespaceDecl1577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQSi_in_namespaceDecl1579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_namespaceDecl1581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaImport_in_importStmt1609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moduleImport_in_importStmt1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_schemaImport1639 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_schemaImport1641 = new BitSet(new long[]{0x0000000004000000L,0x0000000000040000L,0x0000000200000000L});
    public static final BitSet FOLLOW_schemaPrefix_in_schemaImport1643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1646 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AT_in_schemaImport1649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMASi_in_schemaImport1654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_schemaImport1656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix1688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NCName_in_schemaPrefix1690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQSi_in_schemaPrefix1692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_schemaPrefix1698 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_schemaPrefix1700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_NAMESPACE_in_schemaPrefix1702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_moduleImport1729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_MODULE_in_moduleImport1731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000200000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_moduleImport1734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NCName_in_moduleImport1736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQSi_in_moduleImport1738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1742 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AT_in_moduleImport1745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1747 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMASi_in_moduleImport1750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_moduleImport1752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DECLARE_in_varDecl1788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_VARIABLE_in_varDecl1790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varDecl1792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_qName_in_varDecl1794 = new BitSet(new long[]{0x0000800000000200L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_varDecl1796 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ASSIGNSi_in_varDecl1801 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_varDecl1803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_varDecl1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCName_in_qName1839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLONSi_in_qName1844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NCName_in_qName1848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_typeDeclaration1879 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000800000000L});
    public static final BitSet FOLLOW_sequenceType_in_typeDeclaration1881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_functionDecl1910 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDecl1912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_qName_in_functionDecl1914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_functionDecl1916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000044000000000L});
    public static final BitSet FOLLOW_paramList_in_functionDecl1918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_functionDecl1921 = new BitSet(new long[]{0x0000800000000200L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_AS_in_functionDecl1936 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000800000000L});
    public static final BitSet FOLLOW_sequenceType_in_functionDecl1938 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_enclosedExpr_in_functionDecl1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTERNAL_in_functionDecl1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_param_in_paramList2043 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMASi_in_paramList2046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_param_in_paramList2048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_param2084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_qName_in_param2086 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_typeDeclaration_in_param2088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_enclosedExpr2133 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_enclosedExpr2149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_enclosedExpr2164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_optionDecl2212 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_OPTION_in_optionDecl2214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_qName_in_optionDecl2216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_StringLiteral_in_optionDecl2218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_ftOptionDecl2244 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_FTOPTION_in_ftOptionDecl2246 = new BitSet(new long[]{0x0000000040010000L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_ftMatchOptions_in_ftOptionDecl2248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftMatchOption_in_ftMatchOptions2272 = new BitSet(new long[]{0x0000000040010002L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_itemType_in_sequenceType2324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000E00000000000L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_sequenceType2326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_sequenceType2340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_sequenceType2354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_sequenceType2356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_sequenceType2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_itemType2402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_itemType2407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_itemType2409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_itemType2412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_itemType2418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_documentTest_in_kindTest2450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementTest_in_kindTest2490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeTest_in_kindTest2530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaElementTest_in_kindTest2570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schemaAttributeTest_in_kindTest2610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_piTest_in_kindTest2650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commentTest_in_kindTest2690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_textTest_in_kindTest2730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_anyKindTest_in_kindTest2770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_documentTest2798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_documentTest2800 = new BitSet(new long[]{0x0000001000000000L,0x0000200000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_elementTest_in_documentTest2804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_schemaElementTest_in_documentTest2808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_documentTest2812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_elementTest2841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_elementTest2843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000440800000000L});
    public static final BitSet FOLLOW_elementNameOrWildcard_in_elementTest2847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMASi_in_elementTest2850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeName_in_elementTest2852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000240000000000L});
    public static final BitSet FOLLOW_QUESTIONSi_in_elementTest2854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_elementTest2861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementNameOrWildcard2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_elementNameOrWildcard2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_elementName2919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_typeName2953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMAELEMENT_in_schemaElementTest2978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_schemaElementTest2980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_elementDeclaration_in_schemaElementTest2983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_schemaElementTest2985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementName_in_elementDeclaration3010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_attributeTest3042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_attributeTest3044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000440800000000L});
    public static final BitSet FOLLOW_attribNameOrWildcard_in_attributeTest3048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMASi_in_attributeTest3051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeName_in_attributeTest3053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_attributeTest3059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attribNameOrWildcard3081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_attribNameOrWildcard3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_attributeName3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMAATTRIBUTE_in_schemaAttributeTest3139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_schemaAttributeTest3141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_attributeDeclaration_in_schemaAttributeTest3144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_schemaAttributeTest3146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributeName_in_attributeDeclaration3168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_piTest3203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_piTest3205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040A00000000L});
    public static final BitSet FOLLOW_set_in_piTest3208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_piTest3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_commentTest3247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_commentTest3249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_commentTest3252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_textTest3285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_textTest3287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_textTest3290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_anyKindTest3320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_anyKindTest3322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_anyKindTest3325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_occurrenceIndicator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fLWORExpr_in_exprSingle3386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantifiedExpr_in_exprSingle3424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeswitchExpr_in_exprSingle3462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifExpr_in_exprSingle3500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpr_in_exprSingle3538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forClause_in_fLWORExpr3605 = new BitSet(new long[]{0x0004000000000000L,0x0010010010000800L,0x0000000000000100L});
    public static final BitSet FOLLOW_letClause_in_fLWORExpr3611 = new BitSet(new long[]{0x0004000000000000L,0x0010010010000800L,0x0000000000000100L});
    public static final BitSet FOLLOW_whereClause_in_fLWORExpr3615 = new BitSet(new long[]{0x0000000000000000L,0x0010010010000000L});
    public static final BitSet FOLLOW_orderByClause_in_fLWORExpr3618 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RETURN_in_fLWORExpr3621 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_fLWORExpr3623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forClause3725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_forClauseTupletDef_in_forClause3727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMASi_in_forClause3730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_forClauseTupletDef_in_forClause3732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_forClauseTupletDef3831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_varName_in_forClauseTupletDef3834 = new BitSet(new long[]{0x0000000000000A00L,0x0000400000000001L});
    public static final BitSet FOLLOW_typeDeclaration_in_forClauseTupletDef3836 = new BitSet(new long[]{0x0000000000000800L,0x0000400000000001L});
    public static final BitSet FOLLOW_positionalVar_in_forClauseTupletDef3839 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000001L});
    public static final BitSet FOLLOW_ftScoreVar_in_forClauseTupletDef3842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IN_in_forClauseTupletDef3845 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_forClauseTupletDef3848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_varName3874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_positionalVar3905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_positionalVar3907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_varName_in_positionalVar3909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCORE_in_ftScoreVar3940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_ftScoreVar3942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_varName_in_ftScoreVar3944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_letClause3994 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_varBinding_in_letClause3996 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMASi_in_letClause3999 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_varBinding_in_letClause4001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varBinding4077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_varName_in_varBinding4081 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_typeDeclaration_in_varBinding4083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_SCORE_in_varBinding4088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_varBinding4090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_varName_in_varBinding4094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ASSIGNSi_in_varBinding4110 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_varBinding4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_whereClause4175 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_whereClause4177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause4264 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_BY_in_orderByClause4266 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_STABLE_in_orderByClause4270 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_ORDER_in_orderByClause4272 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_BY_in_orderByClause4274 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_orderSpecList_in_orderByClause4277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList4367 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMASi_in_orderSpecList4370 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_orderSpec_in_orderSpecList4372 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_exprSingle_in_orderSpec4463 = new BitSet(new long[]{0x0000020020100402L});
    public static final BitSet FOLLOW_orderModifier_in_orderSpec4465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_orderModifier4494 = new BitSet(new long[]{0x0000020000100002L});
    public static final BitSet FOLLOW_EMPTY_in_orderModifier4504 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_in_orderModifier4506 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_COLLATION_in_orderModifier4517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_orderModifier4519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_quantifiedExpr4557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_EVERY_in_quantifiedExpr4561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4564 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_COMMASi_in_quantifiedExpr4579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_quantifiedExprTupleDef_in_quantifiedExpr4581 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_SATISFIES_in_quantifiedExpr4585 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExpr4587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_quantifiedExprTupleDef4678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_varName_in_quantifiedExprTupleDef4680 = new BitSet(new long[]{0x4007101C182812C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_typeDeclaration_in_quantifiedExprTupleDef4682 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_quantifiedExprTupleDef4685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_typeswitchExpr4771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_typeswitchExpr4773 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_typeswitchExpr4775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_typeswitchExpr4777 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_caseClause_in_typeswitchExpr4779 = new BitSet(new long[]{0x0000000004010000L});
    public static final BitSet FOLLOW_DEFAULT_in_typeswitchExpr4795 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_typeswitchExpr4798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_varName_in_typeswitchExpr4800 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RETURN_in_typeswitchExpr4804 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_typeswitchExpr4806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseClause4902 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000004800000000L});
    public static final BitSet FOLLOW_DOLLARSi_in_caseClause4905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_varName_in_caseClause4907 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_caseClause4909 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000800000000L});
    public static final BitSet FOLLOW_sequenceType_in_caseClause4913 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RETURN_in_caseClause4915 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_caseClause4917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifExpr5023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_ifExpr5025 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_ifExpr5027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_ifExpr5029 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_THEN_in_ifExpr5031 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr5033 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_ELSE_in_ifExpr5035 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_ifExpr5037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpr_in_orExpr5139 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_OR_in_orExpr5143 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_andExpr_in_orExpr5146 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr5181 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_AND_in_andExpr5185 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_comparisonExpr_in_andExpr5188 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr5222 = new BitSet(new long[]{0x1400080000000002L,0x0000000000084220L,0x01FC001000000000L});
    public static final BitSet FOLLOW_valueComp_in_comparisonExpr5227 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_generalComp_in_comparisonExpr5231 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_nodeComp_in_comparisonExpr5235 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_ftContainsExpr_in_comparisonExpr5239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeExpr_in_ftContainsExpr5266 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_FTCONTAINS_in_ftContainsExpr5270 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x1E000A0200000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftContainsExpr5273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_ftIgnoreOption_in_ftContainsExpr5275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr5310 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_TO_in_rangeExpr5314 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_additiveExpr_in_rangeExpr5317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr5348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_additiveExpr5352 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_multiplicativeExpr_in_additiveExpr5361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr5387 = new BitSet(new long[]{0x2000000200000002L,0x0000000000008000L,0x0000400000000000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpr5391 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_unionExpr_in_multiplicativeExpr5408 = new BitSet(new long[]{0x2000000200000002L,0x0000000000008000L,0x0000400000000000L});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr5444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000002L});
    public static final BitSet FOLLOW_set_in_unionExpr5448 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_intersectExceptExpr_in_unionExpr5457 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000002L});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr5484 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_set_in_intersectExceptExpr5488 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_instanceofExpr_in_intersectExceptExpr5497 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_treatExpr_in_instanceofExpr5530 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_INSTANCE_in_instanceofExpr5534 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_OF_in_instanceofExpr5537 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000800000000L});
    public static final BitSet FOLLOW_sequenceType_in_instanceofExpr5540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castableExpr_in_treatExpr5579 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_TREAT_in_treatExpr5583 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_treatExpr5586 = new BitSet(new long[]{0x0000041800201000L,0x0400304000100040L,0x0000000800000000L});
    public static final BitSet FOLLOW_sequenceType_in_treatExpr5589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpr_in_castableExpr5626 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_CASTABLE_in_castableExpr5630 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_castableExpr5633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_singleType_in_castableExpr5636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpr_in_castExpr5678 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_CAST_in_castExpr5682 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_AS_in_castExpr5685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_singleType_in_castExpr5688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_unaryExpr5731 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_valueExpr_in_unaryExpr5742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicType_in_singleType5781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_QUESTIONSi_in_singleType5783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_atomicType5823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftIgnoreOption5859 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CONTENT_in_ftIgnoreOption5862 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_unionExpr_in_ftIgnoreOption5864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_valueComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_generalComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_nodeComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOr_in_ftSelection6034 = new BitSet(new long[]{0x0000010180000802L,0x0000020020000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_ftPosFilter_in_ftSelection6036 = new BitSet(new long[]{0x0000010180000802L,0x0000020020000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_WEIGHT_in_ftSelection6040 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_rangeExpr_in_ftSelection6042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr6078 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_FTOR_in_ftOr6082 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x1E000A0200000000L});
    public static final BitSet FOLLOW_ftAnd_in_ftOr6085 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd6122 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_FTAND_in_ftAnd6126 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x1E000A0200000000L});
    public static final BitSet FOLLOW_ftMildNot_in_ftAnd6129 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot6163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_NOT_in_ftMildNot6167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_IN_in_ftMildNot6170 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x1E000A0200000000L});
    public static final BitSet FOLLOW_ftUnaryNot_in_ftMildNot6173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_FTNOT_in_ftUnaryNot6208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1E000A0200000000L});
    public static final BitSet FOLLOW_ftPrimaryWithOptions_in_ftUnaryNot6213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftPrimary_in_ftPrimaryWithOptions6235 = new BitSet(new long[]{0x0000000040010002L,0x0000000004002080L,0x0000000000001808L});
    public static final BitSet FOLLOW_ftMatchOptions_in_ftPrimaryWithOptions6237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWords_in_ftPrimary6278 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_ftTimes_in_ftPrimary6280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_ftPrimary6302 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x1E000A0200000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftPrimary6305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_ftPrimary6307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionSelection_in_ftPrimary6329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWordsValue_in_ftWords6383 = new BitSet(new long[]{0x0000000000000032L,0x0000000400000000L});
    public static final BitSet FOLLOW_ftAnyallOption_in_ftWords6385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_ftWordsValue6419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_ftWordsValue6424 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_ftWordsValue6427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_ftWordsValue6429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericLiteral_in_literal6470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal6474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_numericLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANY_in_ftAnyallOption6547 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WORD_in_ftAnyallOption6549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_ftAnyallOption6556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftAnyallOption6558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PHRASE_in_ftAnyallOption6564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCCURS_in_ftTimes6601 = new BitSet(new long[]{0x0008200000000800L});
    public static final BitSet FOLLOW_ftRange_in_ftTimes6604 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_TIMES_in_ftTimes6606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXACTLY_in_ftRange6646 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRange6690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEAST_in_ftRange6692 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRange6737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_MOST_in_ftRange6739 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_ftRange6789 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6791 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_TO_in_ftRange6793 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_additiveExpr_in_ftRange6795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_in_ftExtensionSelection6822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_ftExtensionSelection6825 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x1E001A0200000000L});
    public static final BitSet FOLLOW_ftSelection_in_ftExtensionSelection6828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_ftExtensionSelection6831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPRAGSi_in_pragma6871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_qName_in_pragma6874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x6000000000000000L});
    public static final BitSet FOLLOW_PragmaContents_in_pragma6876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RPRAGSi_in_pragma6879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftOrder_in_ftPosFilter6935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWindow_in_ftPosFilter6939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDistance_in_ftPosFilter6943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftScope_in_ftPosFilter6947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftContent_in_ftPosFilter6951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_ftOrder6983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_ftWindow7014 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x9E09C24A00000014L,0x000000000012004DL});
    public static final BitSet FOLLOW_additiveExpr_in_ftWindow7016 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_ftUnit_in_ftWindow7018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTANCE_in_ftDistance7091 = new BitSet(new long[]{0x0008200000000800L});
    public static final BitSet FOLLOW_ftRange_in_ftDistance7093 = new BitSet(new long[]{0x0000000000000000L,0x0002000100000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_ftUnit_in_ftDistance7095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftScope7133 = new BitSet(new long[]{0x0000000000000000L,0x0004000080000000L});
    public static final BitSet FOLLOW_ftBigUnit_in_ftScope7141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftBigUnit0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftContent7207 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_START_in_ftContent7209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftContent7213 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_END_in_ftContent7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENTIRE_in_ftContent7219 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CONTENT_in_ftContent7221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftLanguageOption_in_ftMatchOption7259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftWildCardOption_in_ftMatchOption7297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftThesaurusOption_in_ftMatchOption7335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftStemOption_in_ftMatchOption7373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftCaseOption_in_ftMatchOption7411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftDiacriticsOption_in_ftMatchOption7449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftStopwordOption_in_ftMatchOption7487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftExtensionOption_in_ftMatchOption7525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LANGUAGE_in_ftLanguageOption7650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftLanguageOption7653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftWildCardOption7679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftWildCardOption7682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftWildCardOption7686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WILDCARDS_in_ftWildCardOption7689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftThesaurusOption7712 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption7715 = new BitSet(new long[]{0x0000000004000800L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption7718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption7722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftThesaurusOption7738 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption7741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_ftThesaurusOption7743 = new BitSet(new long[]{0x0000000004000800L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption7747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_DEFAULT_in_ftThesaurusOption7751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMASi_in_ftThesaurusOption7755 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_ftThesaurusID_in_ftThesaurusOption7757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_RPARSi_in_ftThesaurusOption7761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftThesaurusOption7801 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_THESAURUS_in_ftThesaurusOption7804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftThesaurusID7866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_ftThesaurusID7868 = new BitSet(new long[]{0x0008200000000802L,0x0000008000000000L});
    public static final BitSet FOLLOW_RELATIONSHIP_in_ftThesaurusID7871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftThesaurusID7873 = new BitSet(new long[]{0x0008200000000802L});
    public static final BitSet FOLLOW_ftRange_in_ftThesaurusID7878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEVELS_in_ftThesaurusID7880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftStemOption7925 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_STEMMING_in_ftStemOption7928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftStemOption7932 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_STEMMING_in_ftStemOption7935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ftCaseOption7965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_INSENSITIVE_in_ftCaseOption7967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_ftCaseOption8006 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_ftCaseOption8008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOWERCASE_in_ftCaseOption8047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPPERCASE_in_ftCaseOption8086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ftDiacriticsOption8248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_INSENSITIVE_in_ftDiacriticsOption8250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIACRITICS_in_ftDiacriticsOption8265 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_SENSITIVE_in_ftDiacriticsOption8267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftStopwordOption8323 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption8326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption8328 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ftRefOrList_in_ftStopwordOption8330 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8332 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_WITHOUT_in_ftStopwordOption8348 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption8351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption8353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_ftStopwordOption8392 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_ftStopwordOption8395 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_STOP_in_ftStopwordOption8397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WORDS_in_ftStopwordOption8399 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ftInclExclStringLiteral_in_ftStopwordOption8401 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ftRefOrList8467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_uriLiteral_in_ftRefOrList8469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_ftRefOrList8486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftRefOrList8489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMASi_in_ftRefOrList8492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftRefOrList8494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_RPARSi_in_ftRefOrList8498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftInclExclStringLiteral8516 = new BitSet(new long[]{0x0000000000000800L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ftRefOrList_in_ftInclExclStringLiteral8524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTION_in_ftExtensionOption8558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_qName_in_ftExtensionOption8560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_StringLiteral_in_ftExtensionOption8562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_validateExpr_in_valueExpr8594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pathExpr_in_valueExpr8598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extensionExpr_in_valueExpr8602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_validateExpr8630 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000100L,0x0000080000000000L});
    public static final BitSet FOLLOW_validationMode_in_validateExpr8632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_validateExpr8635 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_validateExpr8638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_validateExpr8640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_validationMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DBLSLASHSi_in_pathExpr8712 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x0E08424A00000004L,0x000000000012004CL});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr8732 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x0E08424A00000004L,0x000000000012004CL});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr8782 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x0E08424A00000004L,0x000000000012004CL});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHSi_in_pathExpr8799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relativePathExpr_in_pathExpr8814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr8850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_relativePathExpr8853 = new BitSet(new long[]{0x0003001C182810C0L,0x0400B05A20100000L,0x0E08424A00000004L,0x000000000012004CL});
    public static final BitSet FOLLOW_stepExpr_in_relativePathExpr8862 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_axisStep_in_stepExpr8897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_filterExpr_in_stepExpr8914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseStep_in_axisStep8962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_forwardStep_in_axisStep8966 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_predicateList_in_axisStep8970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reverseAxis_in_reverseStep9004 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000400800000000L});
    public static final BitSet FOLLOW_nodeTest_in_reverseStep9006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevReverseStep_in_reverseStep9010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_reverseAxis9041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_reverseAxis9061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kindTest_in_nodeTest9095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameTest_in_nodeTest9099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_nameTest9135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wildcard_in_nameTest9139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard9185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard9187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NCName_in_wildcard9189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_wildcard9214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCName_in_wildcard9259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLONSi_in_wildcard9261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_STARSi_in_wildcard9263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTDOTSi_in_abbrevReverseStep9304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forwardAxis_in_forwardStep9367 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000400800000000L});
    public static final BitSet FOLLOW_nodeTest_in_forwardStep9369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abbrevForwardStep_in_forwardStep9373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_forwardAxis9420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DBLCOLONSi_in_forwardAxis9476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATSi_in_abbrevForwardStep9507 = new BitSet(new long[]{0x0000001800201000L,0x0400304000100000L,0x0000400800000000L});
    public static final BitSet FOLLOW_nodeTest_in_abbrevForwardStep9510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predicate_in_predicateList9584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACKSi_in_predicate9644 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_predicate9647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACKSi_in_predicate9649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_in_extensionExpr9690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_extensionExpr9693 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09D24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_extensionExpr9696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_extensionExpr9699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpr_in_filterExpr9735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_predicateList_in_filterExpr9737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primaryExpr9766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varRef_in_primaryExpr9782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenthesizedExpr_in_primaryExpr9798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_contextItemExpr_in_primaryExpr9814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionCall_in_primaryExpr9830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orderedExpr_in_primaryExpr9846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unorderedExpr_in_primaryExpr9862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_in_primaryExpr9878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLARSi_in_varRef9916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_varName_in_varRef9919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPARSi_in_parenthesizedExpr9942 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C64A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_parenthesizedExpr9944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPARSi_in_parenthesizedExpr9947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTSi_in_contextItemExpr9973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_functionCall10000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPARSi_in_functionCall10002 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C64A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_functionCall10020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_COMMASi_in_functionCall10023 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_exprSingle_in_functionCall10025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000042000000000L});
    public static final BitSet FOLLOW_RPARSi_in_functionCall10045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_orderedExpr10138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_orderedExpr10140 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_orderedExpr10143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_orderedExpr10145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_unorderedExpr10174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_unorderedExpr10176 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_unorderedExpr10179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_unorderedExpr10181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_constructor10213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_computedConstructor_in_constructor10217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirElemConstructor_in_directConstructor10257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirCommentConstructor_in_directConstructor10298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dirPIConstructor_in_directConstructor10327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LTSi_in_dirElemConstructor10385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor10451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000800000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_dirAttributeList_in_dirElemConstructor10453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RSELFTERMSi_in_dirElemConstructor10516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor10617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008080000000000L,0x0000000000126100L});
    public static final BitSet FOLLOW_dirElemContent_in_dirElemConstructor10712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008080000000000L,0x0000000000126100L});
    public static final BitSet FOLLOW_LENDTAGSi_in_dirElemConstructor10741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_qName_in_dirElemConstructor10771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_GTSi_in_dirElemConstructor10800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qName_in_dirAttributeList10941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQSi_in_dirAttributeList10943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000A00L});
    public static final BitSet FOLLOW_dirAttributeValue_in_dirAttributeList10945 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue10983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_QuotAttributeContent_in_dirAttributeValue11015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue11019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000600L});
    public static final BitSet FOLLOW_QUOTSi_in_dirAttributeValue11051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue11086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_AposAttributeContent_in_dirAttributeValue11121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirAttributeValue11125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_APOSSi_in_dirAttributeValue11160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACESi_in_xmlEnclosedExpr11202 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_xmlEnclosedExpr11231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_xmlEnclosedExpr11259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directConstructor_in_dirElemContent11295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cDataSection_in_dirElemContent11324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ElementContent_in_dirElemContent11354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlEnclosedExpr_in_dirElemContent11384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCDATASi_in_cDataSection11430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_CDataContents_in_cDataSection11432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_RCDATASi_in_cDataSection11434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCOMMENTSi_in_dirCommentConstructor11457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DirCommentContent_in_dirCommentConstructor11459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RCOMMENTSi_in_dirCommentConstructor11461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPISi_in_dirPIConstructor11482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_PiTarget_in_dirPIConstructor11484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_DirPiContents_in_dirPIConstructor11486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RPISi_in_dirPIConstructor11489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compDocConstructor_in_computedConstructor11515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compElemConstructor_in_computedConstructor11556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compAttrConstructor_in_computedConstructor11597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compTextConstructor_in_computedConstructor11638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compCommentConstructor_in_computedConstructor11679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compPIConstructor_in_computedConstructor11720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_compDocConstructor11748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compDocConstructor11750 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_compDocConstructor11753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compDocConstructor11755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_compElemConstructor11785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_qName_in_compElemConstructor11788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor11792 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_compElemConstructor11794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor11796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compElemConstructor11815 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09D24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_contentExpr_in_compElemConstructor11817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compElemConstructor11820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_contentExpr11853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_compAttrConstructor11898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_qName_in_compAttrConstructor11901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor11906 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor11909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor11911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compAttrConstructor11932 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09D24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_compAttrConstructor11935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compAttrConstructor11938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_compTextConstructor11975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compTextConstructor11977 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_compTextConstructor11980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compTextConstructor11982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_compCommentConstructor12007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compCommentConstructor12009 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_compCommentConstructor12012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compCommentConstructor12014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_compPIConstructor12044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_NCName_in_compPIConstructor12047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor12052 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09C24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_compPIConstructor12055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor12057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LBRACESi_in_compPIConstructor12078 = new BitSet(new long[]{0x4007101C182810C0L,0x0408B05A20100800L,0x9E09D24A00000015L,0x000000000012004DL});
    public static final BitSet FOLLOW_expr_in_compPIConstructor12081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_RBRACSi_in_compPIConstructor12084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itemType_in_synpred12317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000E00000000000L});
    public static final BitSet FOLLOW_occurrenceIndicator_in_synpred12319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARSi_in_synpred29176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_COLONSi_in_synpred29178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NCName_in_synpred29180 = new BitSet(new long[]{0x0000000000000002L});

}